
DRS_tone_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f7c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007144  08007144  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800714c  0800714c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08007160  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08007160  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001316f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0f  00000000  00000000  000331a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00036c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001641c  00000000  00000000  000379b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d81  00000000  00000000  0004ddcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008546b  00000000  00000000  00062b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7fb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003610  00000000  00000000  000e8008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800701c 	.word	0x0800701c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800701c 	.word	0x0800701c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_uldivmod>:
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d10f      	bne.n	8000414 <__aeabi_uldivmod+0x28>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_uldivmod+0xe>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d002      	beq.n	8000402 <__aeabi_uldivmod+0x16>
 80003fc:	2100      	movs	r1, #0
 80003fe:	43c9      	mvns	r1, r1
 8000400:	0008      	movs	r0, r1
 8000402:	b407      	push	{r0, r1, r2}
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <__aeabi_uldivmod+0x24>)
 8000406:	a102      	add	r1, pc, #8	; (adr r1, 8000410 <__aeabi_uldivmod+0x24>)
 8000408:	1840      	adds	r0, r0, r1
 800040a:	9002      	str	r0, [sp, #8]
 800040c:	bd03      	pop	{r0, r1, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	ffffffd9 	.word	0xffffffd9
 8000414:	b403      	push	{r0, r1}
 8000416:	4668      	mov	r0, sp
 8000418:	b501      	push	{r0, lr}
 800041a:	9802      	ldr	r0, [sp, #8]
 800041c:	f000 f83a 	bl	8000494 <__udivmoddi4>
 8000420:	9b01      	ldr	r3, [sp, #4]
 8000422:	469e      	mov	lr, r3
 8000424:	b002      	add	sp, #8
 8000426:	bc0c      	pop	{r2, r3}
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_d2uiz>:
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	2200      	movs	r2, #0
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <__aeabi_d2uiz+0x38>)
 8000432:	0004      	movs	r4, r0
 8000434:	000d      	movs	r5, r1
 8000436:	f001 fe71 	bl	800211c <__aeabi_dcmpge>
 800043a:	2800      	cmp	r0, #0
 800043c:	d104      	bne.n	8000448 <__aeabi_d2uiz+0x1c>
 800043e:	0020      	movs	r0, r4
 8000440:	0029      	movs	r1, r5
 8000442:	f001 fd23 	bl	8001e8c <__aeabi_d2iz>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <__aeabi_d2uiz+0x38>)
 800044a:	2200      	movs	r2, #0
 800044c:	0020      	movs	r0, r4
 800044e:	0029      	movs	r1, r5
 8000450:	f001 f98a 	bl	8001768 <__aeabi_dsub>
 8000454:	f001 fd1a 	bl	8001e8c <__aeabi_d2iz>
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	061b      	lsls	r3, r3, #24
 800045c:	469c      	mov	ip, r3
 800045e:	4460      	add	r0, ip
 8000460:	e7f1      	b.n	8000446 <__aeabi_d2uiz+0x1a>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	41e00000 	.word	0x41e00000

08000468 <__aeabi_ul2d>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	0006      	movs	r6, r0
 800046c:	0008      	movs	r0, r1
 800046e:	f001 fd73 	bl	8001f58 <__aeabi_ui2d>
 8000472:	2200      	movs	r2, #0
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <__aeabi_ul2d+0x28>)
 8000476:	f000 ff0b 	bl	8001290 <__aeabi_dmul>
 800047a:	000d      	movs	r5, r1
 800047c:	0004      	movs	r4, r0
 800047e:	0030      	movs	r0, r6
 8000480:	f001 fd6a 	bl	8001f58 <__aeabi_ui2d>
 8000484:	002b      	movs	r3, r5
 8000486:	0022      	movs	r2, r4
 8000488:	f000 f8d0 	bl	800062c <__aeabi_dadd>
 800048c:	bd70      	pop	{r4, r5, r6, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	41f00000 	.word	0x41f00000

08000494 <__udivmoddi4>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	0004      	movs	r4, r0
 80004a2:	000d      	movs	r5, r1
 80004a4:	4692      	mov	sl, r2
 80004a6:	4699      	mov	r9, r3
 80004a8:	b083      	sub	sp, #12
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d830      	bhi.n	8000510 <__udivmoddi4+0x7c>
 80004ae:	d02d      	beq.n	800050c <__udivmoddi4+0x78>
 80004b0:	4649      	mov	r1, r9
 80004b2:	4650      	mov	r0, sl
 80004b4:	f001 fe5a 	bl	800216c <__clzdi2>
 80004b8:	0029      	movs	r1, r5
 80004ba:	0006      	movs	r6, r0
 80004bc:	0020      	movs	r0, r4
 80004be:	f001 fe55 	bl	800216c <__clzdi2>
 80004c2:	1a33      	subs	r3, r6, r0
 80004c4:	4698      	mov	r8, r3
 80004c6:	3b20      	subs	r3, #32
 80004c8:	469b      	mov	fp, r3
 80004ca:	d433      	bmi.n	8000534 <__udivmoddi4+0xa0>
 80004cc:	465a      	mov	r2, fp
 80004ce:	4653      	mov	r3, sl
 80004d0:	4093      	lsls	r3, r2
 80004d2:	4642      	mov	r2, r8
 80004d4:	001f      	movs	r7, r3
 80004d6:	4653      	mov	r3, sl
 80004d8:	4093      	lsls	r3, r2
 80004da:	001e      	movs	r6, r3
 80004dc:	42af      	cmp	r7, r5
 80004de:	d83a      	bhi.n	8000556 <__udivmoddi4+0xc2>
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d100      	bne.n	80004e6 <__udivmoddi4+0x52>
 80004e4:	e078      	b.n	80005d8 <__udivmoddi4+0x144>
 80004e6:	465b      	mov	r3, fp
 80004e8:	1ba4      	subs	r4, r4, r6
 80004ea:	41bd      	sbcs	r5, r7
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	da00      	bge.n	80004f2 <__udivmoddi4+0x5e>
 80004f0:	e075      	b.n	80005de <__udivmoddi4+0x14a>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	465a      	mov	r2, fp
 80004fe:	4093      	lsls	r3, r2
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	4642      	mov	r2, r8
 8000506:	4093      	lsls	r3, r2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	e028      	b.n	800055e <__udivmoddi4+0xca>
 800050c:	4282      	cmp	r2, r0
 800050e:	d9cf      	bls.n	80004b0 <__udivmoddi4+0x1c>
 8000510:	2200      	movs	r2, #0
 8000512:	2300      	movs	r3, #0
 8000514:	9200      	str	r2, [sp, #0]
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <__udivmoddi4+0x8e>
 800051e:	601c      	str	r4, [r3, #0]
 8000520:	605d      	str	r5, [r3, #4]
 8000522:	9800      	ldr	r0, [sp, #0]
 8000524:	9901      	ldr	r1, [sp, #4]
 8000526:	b003      	add	sp, #12
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	46bb      	mov	fp, r7
 800052c:	46b2      	mov	sl, r6
 800052e:	46a9      	mov	r9, r5
 8000530:	46a0      	mov	r8, r4
 8000532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000534:	4642      	mov	r2, r8
 8000536:	2320      	movs	r3, #32
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	4652      	mov	r2, sl
 800053c:	40da      	lsrs	r2, r3
 800053e:	4641      	mov	r1, r8
 8000540:	0013      	movs	r3, r2
 8000542:	464a      	mov	r2, r9
 8000544:	408a      	lsls	r2, r1
 8000546:	0017      	movs	r7, r2
 8000548:	4642      	mov	r2, r8
 800054a:	431f      	orrs	r7, r3
 800054c:	4653      	mov	r3, sl
 800054e:	4093      	lsls	r3, r2
 8000550:	001e      	movs	r6, r3
 8000552:	42af      	cmp	r7, r5
 8000554:	d9c4      	bls.n	80004e0 <__udivmoddi4+0x4c>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	4643      	mov	r3, r8
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0d9      	beq.n	8000518 <__udivmoddi4+0x84>
 8000564:	07fb      	lsls	r3, r7, #31
 8000566:	0872      	lsrs	r2, r6, #1
 8000568:	431a      	orrs	r2, r3
 800056a:	4646      	mov	r6, r8
 800056c:	087b      	lsrs	r3, r7, #1
 800056e:	e00e      	b.n	800058e <__udivmoddi4+0xfa>
 8000570:	42ab      	cmp	r3, r5
 8000572:	d101      	bne.n	8000578 <__udivmoddi4+0xe4>
 8000574:	42a2      	cmp	r2, r4
 8000576:	d80c      	bhi.n	8000592 <__udivmoddi4+0xfe>
 8000578:	1aa4      	subs	r4, r4, r2
 800057a:	419d      	sbcs	r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	1924      	adds	r4, r4, r4
 8000580:	416d      	adcs	r5, r5
 8000582:	2100      	movs	r1, #0
 8000584:	3e01      	subs	r6, #1
 8000586:	1824      	adds	r4, r4, r0
 8000588:	414d      	adcs	r5, r1
 800058a:	2e00      	cmp	r6, #0
 800058c:	d006      	beq.n	800059c <__udivmoddi4+0x108>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d9ee      	bls.n	8000570 <__udivmoddi4+0xdc>
 8000592:	3e01      	subs	r6, #1
 8000594:	1924      	adds	r4, r4, r4
 8000596:	416d      	adcs	r5, r5
 8000598:	2e00      	cmp	r6, #0
 800059a:	d1f8      	bne.n	800058e <__udivmoddi4+0xfa>
 800059c:	9800      	ldr	r0, [sp, #0]
 800059e:	9901      	ldr	r1, [sp, #4]
 80005a0:	465b      	mov	r3, fp
 80005a2:	1900      	adds	r0, r0, r4
 80005a4:	4169      	adcs	r1, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db24      	blt.n	80005f4 <__udivmoddi4+0x160>
 80005aa:	002b      	movs	r3, r5
 80005ac:	465a      	mov	r2, fp
 80005ae:	4644      	mov	r4, r8
 80005b0:	40d3      	lsrs	r3, r2
 80005b2:	002a      	movs	r2, r5
 80005b4:	40e2      	lsrs	r2, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	465b      	mov	r3, fp
 80005ba:	0015      	movs	r5, r2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db2a      	blt.n	8000616 <__udivmoddi4+0x182>
 80005c0:	0026      	movs	r6, r4
 80005c2:	409e      	lsls	r6, r3
 80005c4:	0033      	movs	r3, r6
 80005c6:	0026      	movs	r6, r4
 80005c8:	4647      	mov	r7, r8
 80005ca:	40be      	lsls	r6, r7
 80005cc:	0032      	movs	r2, r6
 80005ce:	1a80      	subs	r0, r0, r2
 80005d0:	4199      	sbcs	r1, r3
 80005d2:	9000      	str	r0, [sp, #0]
 80005d4:	9101      	str	r1, [sp, #4]
 80005d6:	e79f      	b.n	8000518 <__udivmoddi4+0x84>
 80005d8:	42a3      	cmp	r3, r4
 80005da:	d8bc      	bhi.n	8000556 <__udivmoddi4+0xc2>
 80005dc:	e783      	b.n	80004e6 <__udivmoddi4+0x52>
 80005de:	4642      	mov	r2, r8
 80005e0:	2320      	movs	r3, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	2200      	movs	r2, #0
 80005e8:	9100      	str	r1, [sp, #0]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	2201      	movs	r2, #1
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	9201      	str	r2, [sp, #4]
 80005f2:	e786      	b.n	8000502 <__udivmoddi4+0x6e>
 80005f4:	4642      	mov	r2, r8
 80005f6:	2320      	movs	r3, #32
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	002a      	movs	r2, r5
 80005fc:	4646      	mov	r6, r8
 80005fe:	409a      	lsls	r2, r3
 8000600:	0023      	movs	r3, r4
 8000602:	40f3      	lsrs	r3, r6
 8000604:	4644      	mov	r4, r8
 8000606:	4313      	orrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	dad4      	bge.n	80005c0 <__udivmoddi4+0x12c>
 8000616:	4642      	mov	r2, r8
 8000618:	002f      	movs	r7, r5
 800061a:	2320      	movs	r3, #32
 800061c:	0026      	movs	r6, r4
 800061e:	4097      	lsls	r7, r2
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	40de      	lsrs	r6, r3
 8000624:	003b      	movs	r3, r7
 8000626:	4333      	orrs	r3, r6
 8000628:	e7cd      	b.n	80005c6 <__udivmoddi4+0x132>
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <__aeabi_dadd>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	000d      	movs	r5, r1
 8000636:	0004      	movs	r4, r0
 8000638:	b5c0      	push	{r6, r7, lr}
 800063a:	001f      	movs	r7, r3
 800063c:	0011      	movs	r1, r2
 800063e:	0328      	lsls	r0, r5, #12
 8000640:	0f62      	lsrs	r2, r4, #29
 8000642:	0a40      	lsrs	r0, r0, #9
 8000644:	4310      	orrs	r0, r2
 8000646:	007a      	lsls	r2, r7, #1
 8000648:	0d52      	lsrs	r2, r2, #21
 800064a:	00e3      	lsls	r3, r4, #3
 800064c:	033c      	lsls	r4, r7, #12
 800064e:	4691      	mov	r9, r2
 8000650:	0a64      	lsrs	r4, r4, #9
 8000652:	0ffa      	lsrs	r2, r7, #31
 8000654:	0f4f      	lsrs	r7, r1, #29
 8000656:	006e      	lsls	r6, r5, #1
 8000658:	4327      	orrs	r7, r4
 800065a:	4692      	mov	sl, r2
 800065c:	46b8      	mov	r8, r7
 800065e:	0d76      	lsrs	r6, r6, #21
 8000660:	0fed      	lsrs	r5, r5, #31
 8000662:	00c9      	lsls	r1, r1, #3
 8000664:	4295      	cmp	r5, r2
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x3e>
 8000668:	e099      	b.n	800079e <__aeabi_dadd+0x172>
 800066a:	464c      	mov	r4, r9
 800066c:	1b34      	subs	r4, r6, r4
 800066e:	46a4      	mov	ip, r4
 8000670:	2c00      	cmp	r4, #0
 8000672:	dc00      	bgt.n	8000676 <__aeabi_dadd+0x4a>
 8000674:	e07c      	b.n	8000770 <__aeabi_dadd+0x144>
 8000676:	464a      	mov	r2, r9
 8000678:	2a00      	cmp	r2, #0
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x52>
 800067c:	e0b8      	b.n	80007f0 <__aeabi_dadd+0x1c4>
 800067e:	4ac5      	ldr	r2, [pc, #788]	; (8000994 <__aeabi_dadd+0x368>)
 8000680:	4296      	cmp	r6, r2
 8000682:	d100      	bne.n	8000686 <__aeabi_dadd+0x5a>
 8000684:	e11c      	b.n	80008c0 <__aeabi_dadd+0x294>
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	003c      	movs	r4, r7
 800068a:	0412      	lsls	r2, r2, #16
 800068c:	4314      	orrs	r4, r2
 800068e:	46a0      	mov	r8, r4
 8000690:	4662      	mov	r2, ip
 8000692:	2a38      	cmp	r2, #56	; 0x38
 8000694:	dd00      	ble.n	8000698 <__aeabi_dadd+0x6c>
 8000696:	e161      	b.n	800095c <__aeabi_dadd+0x330>
 8000698:	2a1f      	cmp	r2, #31
 800069a:	dd00      	ble.n	800069e <__aeabi_dadd+0x72>
 800069c:	e1cc      	b.n	8000a38 <__aeabi_dadd+0x40c>
 800069e:	4664      	mov	r4, ip
 80006a0:	2220      	movs	r2, #32
 80006a2:	1b12      	subs	r2, r2, r4
 80006a4:	4644      	mov	r4, r8
 80006a6:	4094      	lsls	r4, r2
 80006a8:	000f      	movs	r7, r1
 80006aa:	46a1      	mov	r9, r4
 80006ac:	4664      	mov	r4, ip
 80006ae:	4091      	lsls	r1, r2
 80006b0:	40e7      	lsrs	r7, r4
 80006b2:	464c      	mov	r4, r9
 80006b4:	1e4a      	subs	r2, r1, #1
 80006b6:	4191      	sbcs	r1, r2
 80006b8:	433c      	orrs	r4, r7
 80006ba:	4642      	mov	r2, r8
 80006bc:	4321      	orrs	r1, r4
 80006be:	4664      	mov	r4, ip
 80006c0:	40e2      	lsrs	r2, r4
 80006c2:	1a80      	subs	r0, r0, r2
 80006c4:	1a5c      	subs	r4, r3, r1
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	419b      	sbcs	r3, r3
 80006ca:	425f      	negs	r7, r3
 80006cc:	1bc7      	subs	r7, r0, r7
 80006ce:	023b      	lsls	r3, r7, #8
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_dadd+0xa8>
 80006d2:	e0d0      	b.n	8000876 <__aeabi_dadd+0x24a>
 80006d4:	027f      	lsls	r7, r7, #9
 80006d6:	0a7f      	lsrs	r7, r7, #9
 80006d8:	2f00      	cmp	r7, #0
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0xb2>
 80006dc:	e0ff      	b.n	80008de <__aeabi_dadd+0x2b2>
 80006de:	0038      	movs	r0, r7
 80006e0:	f001 fd26 	bl	8002130 <__clzsi2>
 80006e4:	0001      	movs	r1, r0
 80006e6:	3908      	subs	r1, #8
 80006e8:	2320      	movs	r3, #32
 80006ea:	0022      	movs	r2, r4
 80006ec:	1a5b      	subs	r3, r3, r1
 80006ee:	408f      	lsls	r7, r1
 80006f0:	40da      	lsrs	r2, r3
 80006f2:	408c      	lsls	r4, r1
 80006f4:	4317      	orrs	r7, r2
 80006f6:	42b1      	cmp	r1, r6
 80006f8:	da00      	bge.n	80006fc <__aeabi_dadd+0xd0>
 80006fa:	e0ff      	b.n	80008fc <__aeabi_dadd+0x2d0>
 80006fc:	1b89      	subs	r1, r1, r6
 80006fe:	1c4b      	adds	r3, r1, #1
 8000700:	2b1f      	cmp	r3, #31
 8000702:	dd00      	ble.n	8000706 <__aeabi_dadd+0xda>
 8000704:	e0a8      	b.n	8000858 <__aeabi_dadd+0x22c>
 8000706:	2220      	movs	r2, #32
 8000708:	0039      	movs	r1, r7
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	0020      	movs	r0, r4
 800070e:	4094      	lsls	r4, r2
 8000710:	4091      	lsls	r1, r2
 8000712:	40d8      	lsrs	r0, r3
 8000714:	1e62      	subs	r2, r4, #1
 8000716:	4194      	sbcs	r4, r2
 8000718:	40df      	lsrs	r7, r3
 800071a:	2600      	movs	r6, #0
 800071c:	4301      	orrs	r1, r0
 800071e:	430c      	orrs	r4, r1
 8000720:	0763      	lsls	r3, r4, #29
 8000722:	d009      	beq.n	8000738 <__aeabi_dadd+0x10c>
 8000724:	230f      	movs	r3, #15
 8000726:	4023      	ands	r3, r4
 8000728:	2b04      	cmp	r3, #4
 800072a:	d005      	beq.n	8000738 <__aeabi_dadd+0x10c>
 800072c:	1d23      	adds	r3, r4, #4
 800072e:	42a3      	cmp	r3, r4
 8000730:	41a4      	sbcs	r4, r4
 8000732:	4264      	negs	r4, r4
 8000734:	193f      	adds	r7, r7, r4
 8000736:	001c      	movs	r4, r3
 8000738:	023b      	lsls	r3, r7, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x112>
 800073c:	e09e      	b.n	800087c <__aeabi_dadd+0x250>
 800073e:	4b95      	ldr	r3, [pc, #596]	; (8000994 <__aeabi_dadd+0x368>)
 8000740:	3601      	adds	r6, #1
 8000742:	429e      	cmp	r6, r3
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x11c>
 8000746:	e0b7      	b.n	80008b8 <__aeabi_dadd+0x28c>
 8000748:	4a93      	ldr	r2, [pc, #588]	; (8000998 <__aeabi_dadd+0x36c>)
 800074a:	08e4      	lsrs	r4, r4, #3
 800074c:	4017      	ands	r7, r2
 800074e:	077b      	lsls	r3, r7, #29
 8000750:	0571      	lsls	r1, r6, #21
 8000752:	027f      	lsls	r7, r7, #9
 8000754:	4323      	orrs	r3, r4
 8000756:	0b3f      	lsrs	r7, r7, #12
 8000758:	0d4a      	lsrs	r2, r1, #21
 800075a:	0512      	lsls	r2, r2, #20
 800075c:	433a      	orrs	r2, r7
 800075e:	07ed      	lsls	r5, r5, #31
 8000760:	432a      	orrs	r2, r5
 8000762:	0018      	movs	r0, r3
 8000764:	0011      	movs	r1, r2
 8000766:	bce0      	pop	{r5, r6, r7}
 8000768:	46ba      	mov	sl, r7
 800076a:	46b1      	mov	r9, r6
 800076c:	46a8      	mov	r8, r5
 800076e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000770:	2c00      	cmp	r4, #0
 8000772:	d04b      	beq.n	800080c <__aeabi_dadd+0x1e0>
 8000774:	464c      	mov	r4, r9
 8000776:	1ba4      	subs	r4, r4, r6
 8000778:	46a4      	mov	ip, r4
 800077a:	2e00      	cmp	r6, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dadd+0x154>
 800077e:	e123      	b.n	80009c8 <__aeabi_dadd+0x39c>
 8000780:	0004      	movs	r4, r0
 8000782:	431c      	orrs	r4, r3
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x15c>
 8000786:	e1af      	b.n	8000ae8 <__aeabi_dadd+0x4bc>
 8000788:	4662      	mov	r2, ip
 800078a:	1e54      	subs	r4, r2, #1
 800078c:	2a01      	cmp	r2, #1
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x166>
 8000790:	e215      	b.n	8000bbe <__aeabi_dadd+0x592>
 8000792:	4d80      	ldr	r5, [pc, #512]	; (8000994 <__aeabi_dadd+0x368>)
 8000794:	45ac      	cmp	ip, r5
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x16e>
 8000798:	e1c8      	b.n	8000b2c <__aeabi_dadd+0x500>
 800079a:	46a4      	mov	ip, r4
 800079c:	e11b      	b.n	80009d6 <__aeabi_dadd+0x3aa>
 800079e:	464a      	mov	r2, r9
 80007a0:	1ab2      	subs	r2, r6, r2
 80007a2:	4694      	mov	ip, r2
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	dc00      	bgt.n	80007aa <__aeabi_dadd+0x17e>
 80007a8:	e0ac      	b.n	8000904 <__aeabi_dadd+0x2d8>
 80007aa:	464a      	mov	r2, r9
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d043      	beq.n	8000838 <__aeabi_dadd+0x20c>
 80007b0:	4a78      	ldr	r2, [pc, #480]	; (8000994 <__aeabi_dadd+0x368>)
 80007b2:	4296      	cmp	r6, r2
 80007b4:	d100      	bne.n	80007b8 <__aeabi_dadd+0x18c>
 80007b6:	e1af      	b.n	8000b18 <__aeabi_dadd+0x4ec>
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	003c      	movs	r4, r7
 80007bc:	0412      	lsls	r2, r2, #16
 80007be:	4314      	orrs	r4, r2
 80007c0:	46a0      	mov	r8, r4
 80007c2:	4662      	mov	r2, ip
 80007c4:	2a38      	cmp	r2, #56	; 0x38
 80007c6:	dc67      	bgt.n	8000898 <__aeabi_dadd+0x26c>
 80007c8:	2a1f      	cmp	r2, #31
 80007ca:	dc00      	bgt.n	80007ce <__aeabi_dadd+0x1a2>
 80007cc:	e15f      	b.n	8000a8e <__aeabi_dadd+0x462>
 80007ce:	4647      	mov	r7, r8
 80007d0:	3a20      	subs	r2, #32
 80007d2:	40d7      	lsrs	r7, r2
 80007d4:	4662      	mov	r2, ip
 80007d6:	2a20      	cmp	r2, #32
 80007d8:	d005      	beq.n	80007e6 <__aeabi_dadd+0x1ba>
 80007da:	4664      	mov	r4, ip
 80007dc:	2240      	movs	r2, #64	; 0x40
 80007de:	1b12      	subs	r2, r2, r4
 80007e0:	4644      	mov	r4, r8
 80007e2:	4094      	lsls	r4, r2
 80007e4:	4321      	orrs	r1, r4
 80007e6:	1e4a      	subs	r2, r1, #1
 80007e8:	4191      	sbcs	r1, r2
 80007ea:	000c      	movs	r4, r1
 80007ec:	433c      	orrs	r4, r7
 80007ee:	e057      	b.n	80008a0 <__aeabi_dadd+0x274>
 80007f0:	003a      	movs	r2, r7
 80007f2:	430a      	orrs	r2, r1
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x1cc>
 80007f6:	e105      	b.n	8000a04 <__aeabi_dadd+0x3d8>
 80007f8:	0022      	movs	r2, r4
 80007fa:	3a01      	subs	r2, #1
 80007fc:	2c01      	cmp	r4, #1
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x1d6>
 8000800:	e182      	b.n	8000b08 <__aeabi_dadd+0x4dc>
 8000802:	4c64      	ldr	r4, [pc, #400]	; (8000994 <__aeabi_dadd+0x368>)
 8000804:	45a4      	cmp	ip, r4
 8000806:	d05b      	beq.n	80008c0 <__aeabi_dadd+0x294>
 8000808:	4694      	mov	ip, r2
 800080a:	e741      	b.n	8000690 <__aeabi_dadd+0x64>
 800080c:	4c63      	ldr	r4, [pc, #396]	; (800099c <__aeabi_dadd+0x370>)
 800080e:	1c77      	adds	r7, r6, #1
 8000810:	4227      	tst	r7, r4
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x1ea>
 8000814:	e0c4      	b.n	80009a0 <__aeabi_dadd+0x374>
 8000816:	0004      	movs	r4, r0
 8000818:	431c      	orrs	r4, r3
 800081a:	2e00      	cmp	r6, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_dadd+0x1f4>
 800081e:	e169      	b.n	8000af4 <__aeabi_dadd+0x4c8>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d100      	bne.n	8000826 <__aeabi_dadd+0x1fa>
 8000824:	e1bf      	b.n	8000ba6 <__aeabi_dadd+0x57a>
 8000826:	4644      	mov	r4, r8
 8000828:	430c      	orrs	r4, r1
 800082a:	d000      	beq.n	800082e <__aeabi_dadd+0x202>
 800082c:	e1d0      	b.n	8000bd0 <__aeabi_dadd+0x5a4>
 800082e:	0742      	lsls	r2, r0, #29
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	4313      	orrs	r3, r2
 8000834:	08c0      	lsrs	r0, r0, #3
 8000836:	e029      	b.n	800088c <__aeabi_dadd+0x260>
 8000838:	003a      	movs	r2, r7
 800083a:	430a      	orrs	r2, r1
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x214>
 800083e:	e170      	b.n	8000b22 <__aeabi_dadd+0x4f6>
 8000840:	4662      	mov	r2, ip
 8000842:	4664      	mov	r4, ip
 8000844:	3a01      	subs	r2, #1
 8000846:	2c01      	cmp	r4, #1
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x220>
 800084a:	e0e0      	b.n	8000a0e <__aeabi_dadd+0x3e2>
 800084c:	4c51      	ldr	r4, [pc, #324]	; (8000994 <__aeabi_dadd+0x368>)
 800084e:	45a4      	cmp	ip, r4
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x228>
 8000852:	e161      	b.n	8000b18 <__aeabi_dadd+0x4ec>
 8000854:	4694      	mov	ip, r2
 8000856:	e7b4      	b.n	80007c2 <__aeabi_dadd+0x196>
 8000858:	003a      	movs	r2, r7
 800085a:	391f      	subs	r1, #31
 800085c:	40ca      	lsrs	r2, r1
 800085e:	0011      	movs	r1, r2
 8000860:	2b20      	cmp	r3, #32
 8000862:	d003      	beq.n	800086c <__aeabi_dadd+0x240>
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	409f      	lsls	r7, r3
 800086a:	433c      	orrs	r4, r7
 800086c:	1e63      	subs	r3, r4, #1
 800086e:	419c      	sbcs	r4, r3
 8000870:	2700      	movs	r7, #0
 8000872:	2600      	movs	r6, #0
 8000874:	430c      	orrs	r4, r1
 8000876:	0763      	lsls	r3, r4, #29
 8000878:	d000      	beq.n	800087c <__aeabi_dadd+0x250>
 800087a:	e753      	b.n	8000724 <__aeabi_dadd+0xf8>
 800087c:	46b4      	mov	ip, r6
 800087e:	08e4      	lsrs	r4, r4, #3
 8000880:	077b      	lsls	r3, r7, #29
 8000882:	4323      	orrs	r3, r4
 8000884:	08f8      	lsrs	r0, r7, #3
 8000886:	4a43      	ldr	r2, [pc, #268]	; (8000994 <__aeabi_dadd+0x368>)
 8000888:	4594      	cmp	ip, r2
 800088a:	d01d      	beq.n	80008c8 <__aeabi_dadd+0x29c>
 800088c:	4662      	mov	r2, ip
 800088e:	0307      	lsls	r7, r0, #12
 8000890:	0552      	lsls	r2, r2, #21
 8000892:	0b3f      	lsrs	r7, r7, #12
 8000894:	0d52      	lsrs	r2, r2, #21
 8000896:	e760      	b.n	800075a <__aeabi_dadd+0x12e>
 8000898:	4644      	mov	r4, r8
 800089a:	430c      	orrs	r4, r1
 800089c:	1e62      	subs	r2, r4, #1
 800089e:	4194      	sbcs	r4, r2
 80008a0:	18e4      	adds	r4, r4, r3
 80008a2:	429c      	cmp	r4, r3
 80008a4:	419b      	sbcs	r3, r3
 80008a6:	425f      	negs	r7, r3
 80008a8:	183f      	adds	r7, r7, r0
 80008aa:	023b      	lsls	r3, r7, #8
 80008ac:	d5e3      	bpl.n	8000876 <__aeabi_dadd+0x24a>
 80008ae:	4b39      	ldr	r3, [pc, #228]	; (8000994 <__aeabi_dadd+0x368>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d000      	beq.n	80008b8 <__aeabi_dadd+0x28c>
 80008b6:	e0b5      	b.n	8000a24 <__aeabi_dadd+0x3f8>
 80008b8:	0032      	movs	r2, r6
 80008ba:	2700      	movs	r7, #0
 80008bc:	2300      	movs	r3, #0
 80008be:	e74c      	b.n	800075a <__aeabi_dadd+0x12e>
 80008c0:	0742      	lsls	r2, r0, #29
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	08c0      	lsrs	r0, r0, #3
 80008c8:	001a      	movs	r2, r3
 80008ca:	4302      	orrs	r2, r0
 80008cc:	d100      	bne.n	80008d0 <__aeabi_dadd+0x2a4>
 80008ce:	e1e1      	b.n	8000c94 <__aeabi_dadd+0x668>
 80008d0:	2780      	movs	r7, #128	; 0x80
 80008d2:	033f      	lsls	r7, r7, #12
 80008d4:	4307      	orrs	r7, r0
 80008d6:	033f      	lsls	r7, r7, #12
 80008d8:	4a2e      	ldr	r2, [pc, #184]	; (8000994 <__aeabi_dadd+0x368>)
 80008da:	0b3f      	lsrs	r7, r7, #12
 80008dc:	e73d      	b.n	800075a <__aeabi_dadd+0x12e>
 80008de:	0020      	movs	r0, r4
 80008e0:	f001 fc26 	bl	8002130 <__clzsi2>
 80008e4:	0001      	movs	r1, r0
 80008e6:	3118      	adds	r1, #24
 80008e8:	291f      	cmp	r1, #31
 80008ea:	dc00      	bgt.n	80008ee <__aeabi_dadd+0x2c2>
 80008ec:	e6fc      	b.n	80006e8 <__aeabi_dadd+0xbc>
 80008ee:	3808      	subs	r0, #8
 80008f0:	4084      	lsls	r4, r0
 80008f2:	0027      	movs	r7, r4
 80008f4:	2400      	movs	r4, #0
 80008f6:	42b1      	cmp	r1, r6
 80008f8:	db00      	blt.n	80008fc <__aeabi_dadd+0x2d0>
 80008fa:	e6ff      	b.n	80006fc <__aeabi_dadd+0xd0>
 80008fc:	4a26      	ldr	r2, [pc, #152]	; (8000998 <__aeabi_dadd+0x36c>)
 80008fe:	1a76      	subs	r6, r6, r1
 8000900:	4017      	ands	r7, r2
 8000902:	e70d      	b.n	8000720 <__aeabi_dadd+0xf4>
 8000904:	2a00      	cmp	r2, #0
 8000906:	d02f      	beq.n	8000968 <__aeabi_dadd+0x33c>
 8000908:	464a      	mov	r2, r9
 800090a:	1b92      	subs	r2, r2, r6
 800090c:	4694      	mov	ip, r2
 800090e:	2e00      	cmp	r6, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x2e8>
 8000912:	e0ad      	b.n	8000a70 <__aeabi_dadd+0x444>
 8000914:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <__aeabi_dadd+0x368>)
 8000916:	4591      	cmp	r9, r2
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x2f0>
 800091a:	e10f      	b.n	8000b3c <__aeabi_dadd+0x510>
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0412      	lsls	r2, r2, #16
 8000920:	4310      	orrs	r0, r2
 8000922:	4662      	mov	r2, ip
 8000924:	2a38      	cmp	r2, #56	; 0x38
 8000926:	dd00      	ble.n	800092a <__aeabi_dadd+0x2fe>
 8000928:	e10f      	b.n	8000b4a <__aeabi_dadd+0x51e>
 800092a:	2a1f      	cmp	r2, #31
 800092c:	dd00      	ble.n	8000930 <__aeabi_dadd+0x304>
 800092e:	e180      	b.n	8000c32 <__aeabi_dadd+0x606>
 8000930:	4664      	mov	r4, ip
 8000932:	2220      	movs	r2, #32
 8000934:	001e      	movs	r6, r3
 8000936:	1b12      	subs	r2, r2, r4
 8000938:	4667      	mov	r7, ip
 800093a:	0004      	movs	r4, r0
 800093c:	4093      	lsls	r3, r2
 800093e:	4094      	lsls	r4, r2
 8000940:	40fe      	lsrs	r6, r7
 8000942:	1e5a      	subs	r2, r3, #1
 8000944:	4193      	sbcs	r3, r2
 8000946:	40f8      	lsrs	r0, r7
 8000948:	4334      	orrs	r4, r6
 800094a:	431c      	orrs	r4, r3
 800094c:	4480      	add	r8, r0
 800094e:	1864      	adds	r4, r4, r1
 8000950:	428c      	cmp	r4, r1
 8000952:	41bf      	sbcs	r7, r7
 8000954:	427f      	negs	r7, r7
 8000956:	464e      	mov	r6, r9
 8000958:	4447      	add	r7, r8
 800095a:	e7a6      	b.n	80008aa <__aeabi_dadd+0x27e>
 800095c:	4642      	mov	r2, r8
 800095e:	430a      	orrs	r2, r1
 8000960:	0011      	movs	r1, r2
 8000962:	1e4a      	subs	r2, r1, #1
 8000964:	4191      	sbcs	r1, r2
 8000966:	e6ad      	b.n	80006c4 <__aeabi_dadd+0x98>
 8000968:	4c0c      	ldr	r4, [pc, #48]	; (800099c <__aeabi_dadd+0x370>)
 800096a:	1c72      	adds	r2, r6, #1
 800096c:	4222      	tst	r2, r4
 800096e:	d000      	beq.n	8000972 <__aeabi_dadd+0x346>
 8000970:	e0a1      	b.n	8000ab6 <__aeabi_dadd+0x48a>
 8000972:	0002      	movs	r2, r0
 8000974:	431a      	orrs	r2, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d000      	beq.n	800097c <__aeabi_dadd+0x350>
 800097a:	e0fa      	b.n	8000b72 <__aeabi_dadd+0x546>
 800097c:	2a00      	cmp	r2, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_dadd+0x356>
 8000980:	e145      	b.n	8000c0e <__aeabi_dadd+0x5e2>
 8000982:	003a      	movs	r2, r7
 8000984:	430a      	orrs	r2, r1
 8000986:	d000      	beq.n	800098a <__aeabi_dadd+0x35e>
 8000988:	e146      	b.n	8000c18 <__aeabi_dadd+0x5ec>
 800098a:	0742      	lsls	r2, r0, #29
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	4313      	orrs	r3, r2
 8000990:	08c0      	lsrs	r0, r0, #3
 8000992:	e77b      	b.n	800088c <__aeabi_dadd+0x260>
 8000994:	000007ff 	.word	0x000007ff
 8000998:	ff7fffff 	.word	0xff7fffff
 800099c:	000007fe 	.word	0x000007fe
 80009a0:	4647      	mov	r7, r8
 80009a2:	1a5c      	subs	r4, r3, r1
 80009a4:	1bc2      	subs	r2, r0, r7
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	41bf      	sbcs	r7, r7
 80009aa:	427f      	negs	r7, r7
 80009ac:	46b9      	mov	r9, r7
 80009ae:	0017      	movs	r7, r2
 80009b0:	464a      	mov	r2, r9
 80009b2:	1abf      	subs	r7, r7, r2
 80009b4:	023a      	lsls	r2, r7, #8
 80009b6:	d500      	bpl.n	80009ba <__aeabi_dadd+0x38e>
 80009b8:	e08d      	b.n	8000ad6 <__aeabi_dadd+0x4aa>
 80009ba:	0023      	movs	r3, r4
 80009bc:	433b      	orrs	r3, r7
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x396>
 80009c0:	e68a      	b.n	80006d8 <__aeabi_dadd+0xac>
 80009c2:	2000      	movs	r0, #0
 80009c4:	2500      	movs	r5, #0
 80009c6:	e761      	b.n	800088c <__aeabi_dadd+0x260>
 80009c8:	4cb4      	ldr	r4, [pc, #720]	; (8000c9c <__aeabi_dadd+0x670>)
 80009ca:	45a1      	cmp	r9, r4
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x3a4>
 80009ce:	e0ad      	b.n	8000b2c <__aeabi_dadd+0x500>
 80009d0:	2480      	movs	r4, #128	; 0x80
 80009d2:	0424      	lsls	r4, r4, #16
 80009d4:	4320      	orrs	r0, r4
 80009d6:	4664      	mov	r4, ip
 80009d8:	2c38      	cmp	r4, #56	; 0x38
 80009da:	dc3d      	bgt.n	8000a58 <__aeabi_dadd+0x42c>
 80009dc:	4662      	mov	r2, ip
 80009de:	2c1f      	cmp	r4, #31
 80009e0:	dd00      	ble.n	80009e4 <__aeabi_dadd+0x3b8>
 80009e2:	e0b7      	b.n	8000b54 <__aeabi_dadd+0x528>
 80009e4:	2520      	movs	r5, #32
 80009e6:	001e      	movs	r6, r3
 80009e8:	1b2d      	subs	r5, r5, r4
 80009ea:	0004      	movs	r4, r0
 80009ec:	40ab      	lsls	r3, r5
 80009ee:	40ac      	lsls	r4, r5
 80009f0:	40d6      	lsrs	r6, r2
 80009f2:	40d0      	lsrs	r0, r2
 80009f4:	4642      	mov	r2, r8
 80009f6:	1e5d      	subs	r5, r3, #1
 80009f8:	41ab      	sbcs	r3, r5
 80009fa:	4334      	orrs	r4, r6
 80009fc:	1a12      	subs	r2, r2, r0
 80009fe:	4690      	mov	r8, r2
 8000a00:	4323      	orrs	r3, r4
 8000a02:	e02c      	b.n	8000a5e <__aeabi_dadd+0x432>
 8000a04:	0742      	lsls	r2, r0, #29
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	08c0      	lsrs	r0, r0, #3
 8000a0c:	e73b      	b.n	8000886 <__aeabi_dadd+0x25a>
 8000a0e:	185c      	adds	r4, r3, r1
 8000a10:	429c      	cmp	r4, r3
 8000a12:	419b      	sbcs	r3, r3
 8000a14:	4440      	add	r0, r8
 8000a16:	425b      	negs	r3, r3
 8000a18:	18c7      	adds	r7, r0, r3
 8000a1a:	2601      	movs	r6, #1
 8000a1c:	023b      	lsls	r3, r7, #8
 8000a1e:	d400      	bmi.n	8000a22 <__aeabi_dadd+0x3f6>
 8000a20:	e729      	b.n	8000876 <__aeabi_dadd+0x24a>
 8000a22:	2602      	movs	r6, #2
 8000a24:	4a9e      	ldr	r2, [pc, #632]	; (8000ca0 <__aeabi_dadd+0x674>)
 8000a26:	0863      	lsrs	r3, r4, #1
 8000a28:	4017      	ands	r7, r2
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4014      	ands	r4, r2
 8000a2e:	431c      	orrs	r4, r3
 8000a30:	07fb      	lsls	r3, r7, #31
 8000a32:	431c      	orrs	r4, r3
 8000a34:	087f      	lsrs	r7, r7, #1
 8000a36:	e673      	b.n	8000720 <__aeabi_dadd+0xf4>
 8000a38:	4644      	mov	r4, r8
 8000a3a:	3a20      	subs	r2, #32
 8000a3c:	40d4      	lsrs	r4, r2
 8000a3e:	4662      	mov	r2, ip
 8000a40:	2a20      	cmp	r2, #32
 8000a42:	d005      	beq.n	8000a50 <__aeabi_dadd+0x424>
 8000a44:	4667      	mov	r7, ip
 8000a46:	2240      	movs	r2, #64	; 0x40
 8000a48:	1bd2      	subs	r2, r2, r7
 8000a4a:	4647      	mov	r7, r8
 8000a4c:	4097      	lsls	r7, r2
 8000a4e:	4339      	orrs	r1, r7
 8000a50:	1e4a      	subs	r2, r1, #1
 8000a52:	4191      	sbcs	r1, r2
 8000a54:	4321      	orrs	r1, r4
 8000a56:	e635      	b.n	80006c4 <__aeabi_dadd+0x98>
 8000a58:	4303      	orrs	r3, r0
 8000a5a:	1e58      	subs	r0, r3, #1
 8000a5c:	4183      	sbcs	r3, r0
 8000a5e:	1acc      	subs	r4, r1, r3
 8000a60:	42a1      	cmp	r1, r4
 8000a62:	41bf      	sbcs	r7, r7
 8000a64:	4643      	mov	r3, r8
 8000a66:	427f      	negs	r7, r7
 8000a68:	4655      	mov	r5, sl
 8000a6a:	464e      	mov	r6, r9
 8000a6c:	1bdf      	subs	r7, r3, r7
 8000a6e:	e62e      	b.n	80006ce <__aeabi_dadd+0xa2>
 8000a70:	0002      	movs	r2, r0
 8000a72:	431a      	orrs	r2, r3
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dadd+0x44c>
 8000a76:	e0bd      	b.n	8000bf4 <__aeabi_dadd+0x5c8>
 8000a78:	4662      	mov	r2, ip
 8000a7a:	4664      	mov	r4, ip
 8000a7c:	3a01      	subs	r2, #1
 8000a7e:	2c01      	cmp	r4, #1
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x458>
 8000a82:	e0e5      	b.n	8000c50 <__aeabi_dadd+0x624>
 8000a84:	4c85      	ldr	r4, [pc, #532]	; (8000c9c <__aeabi_dadd+0x670>)
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d058      	beq.n	8000b3c <__aeabi_dadd+0x510>
 8000a8a:	4694      	mov	ip, r2
 8000a8c:	e749      	b.n	8000922 <__aeabi_dadd+0x2f6>
 8000a8e:	4664      	mov	r4, ip
 8000a90:	2220      	movs	r2, #32
 8000a92:	1b12      	subs	r2, r2, r4
 8000a94:	4644      	mov	r4, r8
 8000a96:	4094      	lsls	r4, r2
 8000a98:	000f      	movs	r7, r1
 8000a9a:	46a1      	mov	r9, r4
 8000a9c:	4664      	mov	r4, ip
 8000a9e:	4091      	lsls	r1, r2
 8000aa0:	40e7      	lsrs	r7, r4
 8000aa2:	464c      	mov	r4, r9
 8000aa4:	1e4a      	subs	r2, r1, #1
 8000aa6:	4191      	sbcs	r1, r2
 8000aa8:	433c      	orrs	r4, r7
 8000aaa:	4642      	mov	r2, r8
 8000aac:	430c      	orrs	r4, r1
 8000aae:	4661      	mov	r1, ip
 8000ab0:	40ca      	lsrs	r2, r1
 8000ab2:	1880      	adds	r0, r0, r2
 8000ab4:	e6f4      	b.n	80008a0 <__aeabi_dadd+0x274>
 8000ab6:	4c79      	ldr	r4, [pc, #484]	; (8000c9c <__aeabi_dadd+0x670>)
 8000ab8:	42a2      	cmp	r2, r4
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x492>
 8000abc:	e6fd      	b.n	80008ba <__aeabi_dadd+0x28e>
 8000abe:	1859      	adds	r1, r3, r1
 8000ac0:	4299      	cmp	r1, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425f      	negs	r7, r3
 8000ac8:	19c7      	adds	r7, r0, r7
 8000aca:	07fc      	lsls	r4, r7, #31
 8000acc:	0849      	lsrs	r1, r1, #1
 8000ace:	0016      	movs	r6, r2
 8000ad0:	430c      	orrs	r4, r1
 8000ad2:	087f      	lsrs	r7, r7, #1
 8000ad4:	e6cf      	b.n	8000876 <__aeabi_dadd+0x24a>
 8000ad6:	1acc      	subs	r4, r1, r3
 8000ad8:	42a1      	cmp	r1, r4
 8000ada:	41bf      	sbcs	r7, r7
 8000adc:	4643      	mov	r3, r8
 8000ade:	427f      	negs	r7, r7
 8000ae0:	1a18      	subs	r0, r3, r0
 8000ae2:	4655      	mov	r5, sl
 8000ae4:	1bc7      	subs	r7, r0, r7
 8000ae6:	e5f7      	b.n	80006d8 <__aeabi_dadd+0xac>
 8000ae8:	08c9      	lsrs	r1, r1, #3
 8000aea:	077b      	lsls	r3, r7, #29
 8000aec:	4655      	mov	r5, sl
 8000aee:	430b      	orrs	r3, r1
 8000af0:	08f8      	lsrs	r0, r7, #3
 8000af2:	e6c8      	b.n	8000886 <__aeabi_dadd+0x25a>
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d000      	beq.n	8000afa <__aeabi_dadd+0x4ce>
 8000af8:	e081      	b.n	8000bfe <__aeabi_dadd+0x5d2>
 8000afa:	4643      	mov	r3, r8
 8000afc:	430b      	orrs	r3, r1
 8000afe:	d115      	bne.n	8000b2c <__aeabi_dadd+0x500>
 8000b00:	2080      	movs	r0, #128	; 0x80
 8000b02:	2500      	movs	r5, #0
 8000b04:	0300      	lsls	r0, r0, #12
 8000b06:	e6e3      	b.n	80008d0 <__aeabi_dadd+0x2a4>
 8000b08:	1a5c      	subs	r4, r3, r1
 8000b0a:	42a3      	cmp	r3, r4
 8000b0c:	419b      	sbcs	r3, r3
 8000b0e:	1bc7      	subs	r7, r0, r7
 8000b10:	425b      	negs	r3, r3
 8000b12:	2601      	movs	r6, #1
 8000b14:	1aff      	subs	r7, r7, r3
 8000b16:	e5da      	b.n	80006ce <__aeabi_dadd+0xa2>
 8000b18:	0742      	lsls	r2, r0, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c0      	lsrs	r0, r0, #3
 8000b20:	e6d2      	b.n	80008c8 <__aeabi_dadd+0x29c>
 8000b22:	0742      	lsls	r2, r0, #29
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	4313      	orrs	r3, r2
 8000b28:	08c0      	lsrs	r0, r0, #3
 8000b2a:	e6ac      	b.n	8000886 <__aeabi_dadd+0x25a>
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	4642      	mov	r2, r8
 8000b30:	08c9      	lsrs	r1, r1, #3
 8000b32:	075b      	lsls	r3, r3, #29
 8000b34:	4655      	mov	r5, sl
 8000b36:	430b      	orrs	r3, r1
 8000b38:	08d0      	lsrs	r0, r2, #3
 8000b3a:	e6c5      	b.n	80008c8 <__aeabi_dadd+0x29c>
 8000b3c:	4643      	mov	r3, r8
 8000b3e:	4642      	mov	r2, r8
 8000b40:	075b      	lsls	r3, r3, #29
 8000b42:	08c9      	lsrs	r1, r1, #3
 8000b44:	430b      	orrs	r3, r1
 8000b46:	08d0      	lsrs	r0, r2, #3
 8000b48:	e6be      	b.n	80008c8 <__aeabi_dadd+0x29c>
 8000b4a:	4303      	orrs	r3, r0
 8000b4c:	001c      	movs	r4, r3
 8000b4e:	1e63      	subs	r3, r4, #1
 8000b50:	419c      	sbcs	r4, r3
 8000b52:	e6fc      	b.n	800094e <__aeabi_dadd+0x322>
 8000b54:	0002      	movs	r2, r0
 8000b56:	3c20      	subs	r4, #32
 8000b58:	40e2      	lsrs	r2, r4
 8000b5a:	0014      	movs	r4, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	2a20      	cmp	r2, #32
 8000b60:	d003      	beq.n	8000b6a <__aeabi_dadd+0x53e>
 8000b62:	2540      	movs	r5, #64	; 0x40
 8000b64:	1aad      	subs	r5, r5, r2
 8000b66:	40a8      	lsls	r0, r5
 8000b68:	4303      	orrs	r3, r0
 8000b6a:	1e58      	subs	r0, r3, #1
 8000b6c:	4183      	sbcs	r3, r0
 8000b6e:	4323      	orrs	r3, r4
 8000b70:	e775      	b.n	8000a5e <__aeabi_dadd+0x432>
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d0e2      	beq.n	8000b3c <__aeabi_dadd+0x510>
 8000b76:	003a      	movs	r2, r7
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	d0cd      	beq.n	8000b18 <__aeabi_dadd+0x4ec>
 8000b7c:	0742      	lsls	r2, r0, #29
 8000b7e:	08db      	lsrs	r3, r3, #3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	08c0      	lsrs	r0, r0, #3
 8000b86:	0312      	lsls	r2, r2, #12
 8000b88:	4210      	tst	r0, r2
 8000b8a:	d006      	beq.n	8000b9a <__aeabi_dadd+0x56e>
 8000b8c:	08fc      	lsrs	r4, r7, #3
 8000b8e:	4214      	tst	r4, r2
 8000b90:	d103      	bne.n	8000b9a <__aeabi_dadd+0x56e>
 8000b92:	0020      	movs	r0, r4
 8000b94:	08cb      	lsrs	r3, r1, #3
 8000b96:	077a      	lsls	r2, r7, #29
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	0f5a      	lsrs	r2, r3, #29
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	0752      	lsls	r2, r2, #29
 8000ba0:	08db      	lsrs	r3, r3, #3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	e690      	b.n	80008c8 <__aeabi_dadd+0x29c>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	430b      	orrs	r3, r1
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x582>
 8000bac:	e709      	b.n	80009c2 <__aeabi_dadd+0x396>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	4642      	mov	r2, r8
 8000bb2:	08c9      	lsrs	r1, r1, #3
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4655      	mov	r5, sl
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	08d0      	lsrs	r0, r2, #3
 8000bbc:	e666      	b.n	800088c <__aeabi_dadd+0x260>
 8000bbe:	1acc      	subs	r4, r1, r3
 8000bc0:	42a1      	cmp	r1, r4
 8000bc2:	4189      	sbcs	r1, r1
 8000bc4:	1a3f      	subs	r7, r7, r0
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	4655      	mov	r5, sl
 8000bca:	2601      	movs	r6, #1
 8000bcc:	1a7f      	subs	r7, r7, r1
 8000bce:	e57e      	b.n	80006ce <__aeabi_dadd+0xa2>
 8000bd0:	4642      	mov	r2, r8
 8000bd2:	1a5c      	subs	r4, r3, r1
 8000bd4:	1a87      	subs	r7, r0, r2
 8000bd6:	42a3      	cmp	r3, r4
 8000bd8:	4192      	sbcs	r2, r2
 8000bda:	4252      	negs	r2, r2
 8000bdc:	1abf      	subs	r7, r7, r2
 8000bde:	023a      	lsls	r2, r7, #8
 8000be0:	d53d      	bpl.n	8000c5e <__aeabi_dadd+0x632>
 8000be2:	1acc      	subs	r4, r1, r3
 8000be4:	42a1      	cmp	r1, r4
 8000be6:	4189      	sbcs	r1, r1
 8000be8:	4643      	mov	r3, r8
 8000bea:	4249      	negs	r1, r1
 8000bec:	1a1f      	subs	r7, r3, r0
 8000bee:	4655      	mov	r5, sl
 8000bf0:	1a7f      	subs	r7, r7, r1
 8000bf2:	e595      	b.n	8000720 <__aeabi_dadd+0xf4>
 8000bf4:	077b      	lsls	r3, r7, #29
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	08f8      	lsrs	r0, r7, #3
 8000bfc:	e643      	b.n	8000886 <__aeabi_dadd+0x25a>
 8000bfe:	4644      	mov	r4, r8
 8000c00:	08db      	lsrs	r3, r3, #3
 8000c02:	430c      	orrs	r4, r1
 8000c04:	d130      	bne.n	8000c68 <__aeabi_dadd+0x63c>
 8000c06:	0742      	lsls	r2, r0, #29
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	08c0      	lsrs	r0, r0, #3
 8000c0c:	e65c      	b.n	80008c8 <__aeabi_dadd+0x29c>
 8000c0e:	077b      	lsls	r3, r7, #29
 8000c10:	08c9      	lsrs	r1, r1, #3
 8000c12:	430b      	orrs	r3, r1
 8000c14:	08f8      	lsrs	r0, r7, #3
 8000c16:	e639      	b.n	800088c <__aeabi_dadd+0x260>
 8000c18:	185c      	adds	r4, r3, r1
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	419b      	sbcs	r3, r3
 8000c1e:	4440      	add	r0, r8
 8000c20:	425b      	negs	r3, r3
 8000c22:	18c7      	adds	r7, r0, r3
 8000c24:	023b      	lsls	r3, r7, #8
 8000c26:	d400      	bmi.n	8000c2a <__aeabi_dadd+0x5fe>
 8000c28:	e625      	b.n	8000876 <__aeabi_dadd+0x24a>
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <__aeabi_dadd+0x674>)
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	401f      	ands	r7, r3
 8000c30:	e621      	b.n	8000876 <__aeabi_dadd+0x24a>
 8000c32:	0004      	movs	r4, r0
 8000c34:	3a20      	subs	r2, #32
 8000c36:	40d4      	lsrs	r4, r2
 8000c38:	4662      	mov	r2, ip
 8000c3a:	2a20      	cmp	r2, #32
 8000c3c:	d004      	beq.n	8000c48 <__aeabi_dadd+0x61c>
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	4666      	mov	r6, ip
 8000c42:	1b92      	subs	r2, r2, r6
 8000c44:	4090      	lsls	r0, r2
 8000c46:	4303      	orrs	r3, r0
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	4193      	sbcs	r3, r2
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	e67e      	b.n	800094e <__aeabi_dadd+0x322>
 8000c50:	185c      	adds	r4, r3, r1
 8000c52:	428c      	cmp	r4, r1
 8000c54:	4189      	sbcs	r1, r1
 8000c56:	4440      	add	r0, r8
 8000c58:	4249      	negs	r1, r1
 8000c5a:	1847      	adds	r7, r0, r1
 8000c5c:	e6dd      	b.n	8000a1a <__aeabi_dadd+0x3ee>
 8000c5e:	0023      	movs	r3, r4
 8000c60:	433b      	orrs	r3, r7
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x63a>
 8000c64:	e6ad      	b.n	80009c2 <__aeabi_dadd+0x396>
 8000c66:	e606      	b.n	8000876 <__aeabi_dadd+0x24a>
 8000c68:	0744      	lsls	r4, r0, #29
 8000c6a:	4323      	orrs	r3, r4
 8000c6c:	2480      	movs	r4, #128	; 0x80
 8000c6e:	08c0      	lsrs	r0, r0, #3
 8000c70:	0324      	lsls	r4, r4, #12
 8000c72:	4220      	tst	r0, r4
 8000c74:	d008      	beq.n	8000c88 <__aeabi_dadd+0x65c>
 8000c76:	4642      	mov	r2, r8
 8000c78:	08d6      	lsrs	r6, r2, #3
 8000c7a:	4226      	tst	r6, r4
 8000c7c:	d104      	bne.n	8000c88 <__aeabi_dadd+0x65c>
 8000c7e:	4655      	mov	r5, sl
 8000c80:	0030      	movs	r0, r6
 8000c82:	08cb      	lsrs	r3, r1, #3
 8000c84:	0751      	lsls	r1, r2, #29
 8000c86:	430b      	orrs	r3, r1
 8000c88:	0f5a      	lsrs	r2, r3, #29
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	08db      	lsrs	r3, r3, #3
 8000c8e:	0752      	lsls	r2, r2, #29
 8000c90:	4313      	orrs	r3, r2
 8000c92:	e619      	b.n	80008c8 <__aeabi_dadd+0x29c>
 8000c94:	2300      	movs	r3, #0
 8000c96:	4a01      	ldr	r2, [pc, #4]	; (8000c9c <__aeabi_dadd+0x670>)
 8000c98:	001f      	movs	r7, r3
 8000c9a:	e55e      	b.n	800075a <__aeabi_dadd+0x12e>
 8000c9c:	000007ff 	.word	0x000007ff
 8000ca0:	ff7fffff 	.word	0xff7fffff

08000ca4 <__aeabi_ddiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4657      	mov	r7, sl
 8000ca8:	464e      	mov	r6, r9
 8000caa:	4645      	mov	r5, r8
 8000cac:	46de      	mov	lr, fp
 8000cae:	b5e0      	push	{r5, r6, r7, lr}
 8000cb0:	4681      	mov	r9, r0
 8000cb2:	0005      	movs	r5, r0
 8000cb4:	030c      	lsls	r4, r1, #12
 8000cb6:	0048      	lsls	r0, r1, #1
 8000cb8:	4692      	mov	sl, r2
 8000cba:	001f      	movs	r7, r3
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	0b24      	lsrs	r4, r4, #12
 8000cc0:	0d40      	lsrs	r0, r0, #21
 8000cc2:	0fce      	lsrs	r6, r1, #31
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_ddiv+0x26>
 8000cc8:	e156      	b.n	8000f78 <__aeabi_ddiv+0x2d4>
 8000cca:	4bd4      	ldr	r3, [pc, #848]	; (800101c <__aeabi_ddiv+0x378>)
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_ddiv+0x2e>
 8000cd0:	e172      	b.n	8000fb8 <__aeabi_ddiv+0x314>
 8000cd2:	0f6b      	lsrs	r3, r5, #29
 8000cd4:	00e4      	lsls	r4, r4, #3
 8000cd6:	431c      	orrs	r4, r3
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	041b      	lsls	r3, r3, #16
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	4bcf      	ldr	r3, [pc, #828]	; (8001020 <__aeabi_ddiv+0x37c>)
 8000ce2:	00ed      	lsls	r5, r5, #3
 8000ce4:	469b      	mov	fp, r3
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	4699      	mov	r9, r3
 8000cea:	4483      	add	fp, r0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	033c      	lsls	r4, r7, #12
 8000cf0:	007b      	lsls	r3, r7, #1
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	0b24      	lsrs	r4, r4, #12
 8000cf6:	0d5b      	lsrs	r3, r3, #21
 8000cf8:	0fff      	lsrs	r7, r7, #31
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x5c>
 8000cfe:	e11f      	b.n	8000f40 <__aeabi_ddiv+0x29c>
 8000d00:	4ac6      	ldr	r2, [pc, #792]	; (800101c <__aeabi_ddiv+0x378>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d100      	bne.n	8000d08 <__aeabi_ddiv+0x64>
 8000d06:	e162      	b.n	8000fce <__aeabi_ddiv+0x32a>
 8000d08:	49c5      	ldr	r1, [pc, #788]	; (8001020 <__aeabi_ddiv+0x37c>)
 8000d0a:	0f42      	lsrs	r2, r0, #29
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	00e4      	lsls	r4, r4, #3
 8000d10:	4659      	mov	r1, fp
 8000d12:	4314      	orrs	r4, r2
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	4463      	add	r3, ip
 8000d18:	0412      	lsls	r2, r2, #16
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	4314      	orrs	r4, r2
 8000d1e:	469b      	mov	fp, r3
 8000d20:	00c2      	lsls	r2, r0, #3
 8000d22:	2000      	movs	r0, #0
 8000d24:	0033      	movs	r3, r6
 8000d26:	407b      	eors	r3, r7
 8000d28:	469a      	mov	sl, r3
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d827      	bhi.n	8000d80 <__aeabi_ddiv+0xdc>
 8000d30:	49bc      	ldr	r1, [pc, #752]	; (8001024 <__aeabi_ddiv+0x380>)
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	58cb      	ldr	r3, [r1, r3]
 8000d36:	469f      	mov	pc, r3
 8000d38:	46b2      	mov	sl, r6
 8000d3a:	9b00      	ldr	r3, [sp, #0]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d016      	beq.n	8000d6e <__aeabi_ddiv+0xca>
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d100      	bne.n	8000d46 <__aeabi_ddiv+0xa2>
 8000d44:	e28e      	b.n	8001264 <__aeabi_ddiv+0x5c0>
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d000      	beq.n	8000d4c <__aeabi_ddiv+0xa8>
 8000d4a:	e0d9      	b.n	8000f00 <__aeabi_ddiv+0x25c>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2400      	movs	r4, #0
 8000d50:	2500      	movs	r5, #0
 8000d52:	4652      	mov	r2, sl
 8000d54:	051b      	lsls	r3, r3, #20
 8000d56:	4323      	orrs	r3, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	0028      	movs	r0, r5
 8000d5e:	0019      	movs	r1, r3
 8000d60:	b005      	add	sp, #20
 8000d62:	bcf0      	pop	{r4, r5, r6, r7}
 8000d64:	46bb      	mov	fp, r7
 8000d66:	46b2      	mov	sl, r6
 8000d68:	46a9      	mov	r9, r5
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d6e:	2400      	movs	r4, #0
 8000d70:	2500      	movs	r5, #0
 8000d72:	4baa      	ldr	r3, [pc, #680]	; (800101c <__aeabi_ddiv+0x378>)
 8000d74:	e7ed      	b.n	8000d52 <__aeabi_ddiv+0xae>
 8000d76:	46ba      	mov	sl, r7
 8000d78:	46a0      	mov	r8, r4
 8000d7a:	0015      	movs	r5, r2
 8000d7c:	9000      	str	r0, [sp, #0]
 8000d7e:	e7dc      	b.n	8000d3a <__aeabi_ddiv+0x96>
 8000d80:	4544      	cmp	r4, r8
 8000d82:	d200      	bcs.n	8000d86 <__aeabi_ddiv+0xe2>
 8000d84:	e1c7      	b.n	8001116 <__aeabi_ddiv+0x472>
 8000d86:	d100      	bne.n	8000d8a <__aeabi_ddiv+0xe6>
 8000d88:	e1c2      	b.n	8001110 <__aeabi_ddiv+0x46c>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	469c      	mov	ip, r3
 8000d90:	002e      	movs	r6, r5
 8000d92:	4640      	mov	r0, r8
 8000d94:	2500      	movs	r5, #0
 8000d96:	44e3      	add	fp, ip
 8000d98:	0223      	lsls	r3, r4, #8
 8000d9a:	0e14      	lsrs	r4, r2, #24
 8000d9c:	431c      	orrs	r4, r3
 8000d9e:	0c1b      	lsrs	r3, r3, #16
 8000da0:	4699      	mov	r9, r3
 8000da2:	0423      	lsls	r3, r4, #16
 8000da4:	0c1f      	lsrs	r7, r3, #16
 8000da6:	0212      	lsls	r2, r2, #8
 8000da8:	4649      	mov	r1, r9
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	9701      	str	r7, [sp, #4]
 8000dae:	f7ff fa2d 	bl	800020c <__aeabi_uidivmod>
 8000db2:	0002      	movs	r2, r0
 8000db4:	437a      	muls	r2, r7
 8000db6:	040b      	lsls	r3, r1, #16
 8000db8:	0c31      	lsrs	r1, r6, #16
 8000dba:	4680      	mov	r8, r0
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	428a      	cmp	r2, r1
 8000dc0:	d907      	bls.n	8000dd2 <__aeabi_ddiv+0x12e>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	425b      	negs	r3, r3
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	1909      	adds	r1, r1, r4
 8000dca:	44e0      	add	r8, ip
 8000dcc:	428c      	cmp	r4, r1
 8000dce:	d800      	bhi.n	8000dd2 <__aeabi_ddiv+0x12e>
 8000dd0:	e207      	b.n	80011e2 <__aeabi_ddiv+0x53e>
 8000dd2:	1a88      	subs	r0, r1, r2
 8000dd4:	4649      	mov	r1, r9
 8000dd6:	f7ff fa19 	bl	800020c <__aeabi_uidivmod>
 8000dda:	0409      	lsls	r1, r1, #16
 8000ddc:	468c      	mov	ip, r1
 8000dde:	0431      	lsls	r1, r6, #16
 8000de0:	4666      	mov	r6, ip
 8000de2:	9a01      	ldr	r2, [sp, #4]
 8000de4:	0c09      	lsrs	r1, r1, #16
 8000de6:	4342      	muls	r2, r0
 8000de8:	0003      	movs	r3, r0
 8000dea:	4331      	orrs	r1, r6
 8000dec:	428a      	cmp	r2, r1
 8000dee:	d904      	bls.n	8000dfa <__aeabi_ddiv+0x156>
 8000df0:	1909      	adds	r1, r1, r4
 8000df2:	3b01      	subs	r3, #1
 8000df4:	428c      	cmp	r4, r1
 8000df6:	d800      	bhi.n	8000dfa <__aeabi_ddiv+0x156>
 8000df8:	e1ed      	b.n	80011d6 <__aeabi_ddiv+0x532>
 8000dfa:	1a88      	subs	r0, r1, r2
 8000dfc:	4642      	mov	r2, r8
 8000dfe:	0412      	lsls	r2, r2, #16
 8000e00:	431a      	orrs	r2, r3
 8000e02:	4690      	mov	r8, r2
 8000e04:	4641      	mov	r1, r8
 8000e06:	9b00      	ldr	r3, [sp, #0]
 8000e08:	040e      	lsls	r6, r1, #16
 8000e0a:	0c1b      	lsrs	r3, r3, #16
 8000e0c:	001f      	movs	r7, r3
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	9b00      	ldr	r3, [sp, #0]
 8000e12:	0c36      	lsrs	r6, r6, #16
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	0c19      	lsrs	r1, r3, #16
 8000e18:	000b      	movs	r3, r1
 8000e1a:	4373      	muls	r3, r6
 8000e1c:	0c12      	lsrs	r2, r2, #16
 8000e1e:	437e      	muls	r6, r7
 8000e20:	9103      	str	r1, [sp, #12]
 8000e22:	4351      	muls	r1, r2
 8000e24:	437a      	muls	r2, r7
 8000e26:	0c1f      	lsrs	r7, r3, #16
 8000e28:	46bc      	mov	ip, r7
 8000e2a:	1876      	adds	r6, r6, r1
 8000e2c:	4466      	add	r6, ip
 8000e2e:	42b1      	cmp	r1, r6
 8000e30:	d903      	bls.n	8000e3a <__aeabi_ddiv+0x196>
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	0249      	lsls	r1, r1, #9
 8000e36:	468c      	mov	ip, r1
 8000e38:	4462      	add	r2, ip
 8000e3a:	0c31      	lsrs	r1, r6, #16
 8000e3c:	188a      	adds	r2, r1, r2
 8000e3e:	0431      	lsls	r1, r6, #16
 8000e40:	041e      	lsls	r6, r3, #16
 8000e42:	0c36      	lsrs	r6, r6, #16
 8000e44:	198e      	adds	r6, r1, r6
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d302      	bcc.n	8000e50 <__aeabi_ddiv+0x1ac>
 8000e4a:	d112      	bne.n	8000e72 <__aeabi_ddiv+0x1ce>
 8000e4c:	42b5      	cmp	r5, r6
 8000e4e:	d210      	bcs.n	8000e72 <__aeabi_ddiv+0x1ce>
 8000e50:	4643      	mov	r3, r8
 8000e52:	1e59      	subs	r1, r3, #1
 8000e54:	9b00      	ldr	r3, [sp, #0]
 8000e56:	469c      	mov	ip, r3
 8000e58:	4465      	add	r5, ip
 8000e5a:	001f      	movs	r7, r3
 8000e5c:	429d      	cmp	r5, r3
 8000e5e:	419b      	sbcs	r3, r3
 8000e60:	425b      	negs	r3, r3
 8000e62:	191b      	adds	r3, r3, r4
 8000e64:	18c0      	adds	r0, r0, r3
 8000e66:	4284      	cmp	r4, r0
 8000e68:	d200      	bcs.n	8000e6c <__aeabi_ddiv+0x1c8>
 8000e6a:	e1a0      	b.n	80011ae <__aeabi_ddiv+0x50a>
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_ddiv+0x1cc>
 8000e6e:	e19b      	b.n	80011a8 <__aeabi_ddiv+0x504>
 8000e70:	4688      	mov	r8, r1
 8000e72:	1bae      	subs	r6, r5, r6
 8000e74:	42b5      	cmp	r5, r6
 8000e76:	41ad      	sbcs	r5, r5
 8000e78:	1a80      	subs	r0, r0, r2
 8000e7a:	426d      	negs	r5, r5
 8000e7c:	1b40      	subs	r0, r0, r5
 8000e7e:	4284      	cmp	r4, r0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x1e0>
 8000e82:	e1d5      	b.n	8001230 <__aeabi_ddiv+0x58c>
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9c1 	bl	800020c <__aeabi_uidivmod>
 8000e8a:	9a01      	ldr	r2, [sp, #4]
 8000e8c:	040b      	lsls	r3, r1, #16
 8000e8e:	4342      	muls	r2, r0
 8000e90:	0c31      	lsrs	r1, r6, #16
 8000e92:	0005      	movs	r5, r0
 8000e94:	4319      	orrs	r1, r3
 8000e96:	428a      	cmp	r2, r1
 8000e98:	d900      	bls.n	8000e9c <__aeabi_ddiv+0x1f8>
 8000e9a:	e16c      	b.n	8001176 <__aeabi_ddiv+0x4d2>
 8000e9c:	1a88      	subs	r0, r1, r2
 8000e9e:	4649      	mov	r1, r9
 8000ea0:	f7ff f9b4 	bl	800020c <__aeabi_uidivmod>
 8000ea4:	9a01      	ldr	r2, [sp, #4]
 8000ea6:	0436      	lsls	r6, r6, #16
 8000ea8:	4342      	muls	r2, r0
 8000eaa:	0409      	lsls	r1, r1, #16
 8000eac:	0c36      	lsrs	r6, r6, #16
 8000eae:	0003      	movs	r3, r0
 8000eb0:	430e      	orrs	r6, r1
 8000eb2:	42b2      	cmp	r2, r6
 8000eb4:	d900      	bls.n	8000eb8 <__aeabi_ddiv+0x214>
 8000eb6:	e153      	b.n	8001160 <__aeabi_ddiv+0x4bc>
 8000eb8:	9803      	ldr	r0, [sp, #12]
 8000eba:	1ab6      	subs	r6, r6, r2
 8000ebc:	0002      	movs	r2, r0
 8000ebe:	042d      	lsls	r5, r5, #16
 8000ec0:	431d      	orrs	r5, r3
 8000ec2:	9f02      	ldr	r7, [sp, #8]
 8000ec4:	042b      	lsls	r3, r5, #16
 8000ec6:	0c1b      	lsrs	r3, r3, #16
 8000ec8:	435a      	muls	r2, r3
 8000eca:	437b      	muls	r3, r7
 8000ecc:	469c      	mov	ip, r3
 8000ece:	0c29      	lsrs	r1, r5, #16
 8000ed0:	4348      	muls	r0, r1
 8000ed2:	0c13      	lsrs	r3, r2, #16
 8000ed4:	4484      	add	ip, r0
 8000ed6:	4463      	add	r3, ip
 8000ed8:	4379      	muls	r1, r7
 8000eda:	4298      	cmp	r0, r3
 8000edc:	d903      	bls.n	8000ee6 <__aeabi_ddiv+0x242>
 8000ede:	2080      	movs	r0, #128	; 0x80
 8000ee0:	0240      	lsls	r0, r0, #9
 8000ee2:	4684      	mov	ip, r0
 8000ee4:	4461      	add	r1, ip
 8000ee6:	0c18      	lsrs	r0, r3, #16
 8000ee8:	0412      	lsls	r2, r2, #16
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	0c12      	lsrs	r2, r2, #16
 8000eee:	1841      	adds	r1, r0, r1
 8000ef0:	189b      	adds	r3, r3, r2
 8000ef2:	428e      	cmp	r6, r1
 8000ef4:	d200      	bcs.n	8000ef8 <__aeabi_ddiv+0x254>
 8000ef6:	e0ff      	b.n	80010f8 <__aeabi_ddiv+0x454>
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0x258>
 8000efa:	e0fa      	b.n	80010f2 <__aeabi_ddiv+0x44e>
 8000efc:	2301      	movs	r3, #1
 8000efe:	431d      	orrs	r5, r3
 8000f00:	4a49      	ldr	r2, [pc, #292]	; (8001028 <__aeabi_ddiv+0x384>)
 8000f02:	445a      	add	r2, fp
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	dc00      	bgt.n	8000f0a <__aeabi_ddiv+0x266>
 8000f08:	e0aa      	b.n	8001060 <__aeabi_ddiv+0x3bc>
 8000f0a:	076b      	lsls	r3, r5, #29
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_ddiv+0x26c>
 8000f0e:	e13d      	b.n	800118c <__aeabi_ddiv+0x4e8>
 8000f10:	08ed      	lsrs	r5, r5, #3
 8000f12:	4643      	mov	r3, r8
 8000f14:	01db      	lsls	r3, r3, #7
 8000f16:	d506      	bpl.n	8000f26 <__aeabi_ddiv+0x282>
 8000f18:	4642      	mov	r2, r8
 8000f1a:	4b44      	ldr	r3, [pc, #272]	; (800102c <__aeabi_ddiv+0x388>)
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	4690      	mov	r8, r2
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	00d2      	lsls	r2, r2, #3
 8000f24:	445a      	add	r2, fp
 8000f26:	4b42      	ldr	r3, [pc, #264]	; (8001030 <__aeabi_ddiv+0x38c>)
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dd00      	ble.n	8000f2e <__aeabi_ddiv+0x28a>
 8000f2c:	e71f      	b.n	8000d6e <__aeabi_ddiv+0xca>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	075b      	lsls	r3, r3, #29
 8000f32:	431d      	orrs	r5, r3
 8000f34:	4643      	mov	r3, r8
 8000f36:	0552      	lsls	r2, r2, #21
 8000f38:	025c      	lsls	r4, r3, #9
 8000f3a:	0b24      	lsrs	r4, r4, #12
 8000f3c:	0d53      	lsrs	r3, r2, #21
 8000f3e:	e708      	b.n	8000d52 <__aeabi_ddiv+0xae>
 8000f40:	4652      	mov	r2, sl
 8000f42:	4322      	orrs	r2, r4
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x2a4>
 8000f46:	e07b      	b.n	8001040 <__aeabi_ddiv+0x39c>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_ddiv+0x2aa>
 8000f4c:	e0fa      	b.n	8001144 <__aeabi_ddiv+0x4a0>
 8000f4e:	0020      	movs	r0, r4
 8000f50:	f001 f8ee 	bl	8002130 <__clzsi2>
 8000f54:	0002      	movs	r2, r0
 8000f56:	3a0b      	subs	r2, #11
 8000f58:	231d      	movs	r3, #29
 8000f5a:	0001      	movs	r1, r0
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3908      	subs	r1, #8
 8000f62:	40da      	lsrs	r2, r3
 8000f64:	408c      	lsls	r4, r1
 8000f66:	4314      	orrs	r4, r2
 8000f68:	4652      	mov	r2, sl
 8000f6a:	408a      	lsls	r2, r1
 8000f6c:	4b31      	ldr	r3, [pc, #196]	; (8001034 <__aeabi_ddiv+0x390>)
 8000f6e:	4458      	add	r0, fp
 8000f70:	469b      	mov	fp, r3
 8000f72:	4483      	add	fp, r0
 8000f74:	2000      	movs	r0, #0
 8000f76:	e6d5      	b.n	8000d24 <__aeabi_ddiv+0x80>
 8000f78:	464b      	mov	r3, r9
 8000f7a:	4323      	orrs	r3, r4
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	d044      	beq.n	800100a <__aeabi_ddiv+0x366>
 8000f80:	2c00      	cmp	r4, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_ddiv+0x2e2>
 8000f84:	e0ce      	b.n	8001124 <__aeabi_ddiv+0x480>
 8000f86:	0020      	movs	r0, r4
 8000f88:	f001 f8d2 	bl	8002130 <__clzsi2>
 8000f8c:	0001      	movs	r1, r0
 8000f8e:	0002      	movs	r2, r0
 8000f90:	390b      	subs	r1, #11
 8000f92:	231d      	movs	r3, #29
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	4649      	mov	r1, r9
 8000f98:	0010      	movs	r0, r2
 8000f9a:	40d9      	lsrs	r1, r3
 8000f9c:	3808      	subs	r0, #8
 8000f9e:	4084      	lsls	r4, r0
 8000fa0:	000b      	movs	r3, r1
 8000fa2:	464d      	mov	r5, r9
 8000fa4:	4323      	orrs	r3, r4
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	4085      	lsls	r5, r0
 8000faa:	4823      	ldr	r0, [pc, #140]	; (8001038 <__aeabi_ddiv+0x394>)
 8000fac:	1a83      	subs	r3, r0, r2
 8000fae:	469b      	mov	fp, r3
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4699      	mov	r9, r3
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	e69a      	b.n	8000cee <__aeabi_ddiv+0x4a>
 8000fb8:	464b      	mov	r3, r9
 8000fba:	4323      	orrs	r3, r4
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	d11d      	bne.n	8000ffc <__aeabi_ddiv+0x358>
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	3b06      	subs	r3, #6
 8000fc6:	2500      	movs	r5, #0
 8000fc8:	4683      	mov	fp, r0
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	e68f      	b.n	8000cee <__aeabi_ddiv+0x4a>
 8000fce:	4652      	mov	r2, sl
 8000fd0:	4322      	orrs	r2, r4
 8000fd2:	d109      	bne.n	8000fe8 <__aeabi_ddiv+0x344>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	4649      	mov	r1, r9
 8000fd8:	4319      	orrs	r1, r3
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <__aeabi_ddiv+0x398>)
 8000fdc:	4689      	mov	r9, r1
 8000fde:	469c      	mov	ip, r3
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	44e3      	add	fp, ip
 8000fe6:	e69d      	b.n	8000d24 <__aeabi_ddiv+0x80>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	464a      	mov	r2, r9
 8000fec:	431a      	orrs	r2, r3
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <__aeabi_ddiv+0x398>)
 8000ff0:	4691      	mov	r9, r2
 8000ff2:	469c      	mov	ip, r3
 8000ff4:	4652      	mov	r2, sl
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	44e3      	add	fp, ip
 8000ffa:	e693      	b.n	8000d24 <__aeabi_ddiv+0x80>
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	4699      	mov	r9, r3
 8001000:	3b09      	subs	r3, #9
 8001002:	46a0      	mov	r8, r4
 8001004:	4683      	mov	fp, r0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	e671      	b.n	8000cee <__aeabi_ddiv+0x4a>
 800100a:	2304      	movs	r3, #4
 800100c:	4699      	mov	r9, r3
 800100e:	2300      	movs	r3, #0
 8001010:	469b      	mov	fp, r3
 8001012:	3301      	adds	r3, #1
 8001014:	2500      	movs	r5, #0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	e669      	b.n	8000cee <__aeabi_ddiv+0x4a>
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	000007ff 	.word	0x000007ff
 8001020:	fffffc01 	.word	0xfffffc01
 8001024:	0800703c 	.word	0x0800703c
 8001028:	000003ff 	.word	0x000003ff
 800102c:	feffffff 	.word	0xfeffffff
 8001030:	000007fe 	.word	0x000007fe
 8001034:	000003f3 	.word	0x000003f3
 8001038:	fffffc0d 	.word	0xfffffc0d
 800103c:	fffff801 	.word	0xfffff801
 8001040:	4649      	mov	r1, r9
 8001042:	2301      	movs	r3, #1
 8001044:	4319      	orrs	r1, r3
 8001046:	4689      	mov	r9, r1
 8001048:	2400      	movs	r4, #0
 800104a:	2001      	movs	r0, #1
 800104c:	e66a      	b.n	8000d24 <__aeabi_ddiv+0x80>
 800104e:	2300      	movs	r3, #0
 8001050:	2480      	movs	r4, #128	; 0x80
 8001052:	469a      	mov	sl, r3
 8001054:	2500      	movs	r5, #0
 8001056:	4b8a      	ldr	r3, [pc, #552]	; (8001280 <__aeabi_ddiv+0x5dc>)
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	e67a      	b.n	8000d52 <__aeabi_ddiv+0xae>
 800105c:	2501      	movs	r5, #1
 800105e:	426d      	negs	r5, r5
 8001060:	2301      	movs	r3, #1
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	2b38      	cmp	r3, #56	; 0x38
 8001066:	dd00      	ble.n	800106a <__aeabi_ddiv+0x3c6>
 8001068:	e670      	b.n	8000d4c <__aeabi_ddiv+0xa8>
 800106a:	2b1f      	cmp	r3, #31
 800106c:	dc00      	bgt.n	8001070 <__aeabi_ddiv+0x3cc>
 800106e:	e0bf      	b.n	80011f0 <__aeabi_ddiv+0x54c>
 8001070:	211f      	movs	r1, #31
 8001072:	4249      	negs	r1, r1
 8001074:	1a8a      	subs	r2, r1, r2
 8001076:	4641      	mov	r1, r8
 8001078:	40d1      	lsrs	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	2b20      	cmp	r3, #32
 800107e:	d004      	beq.n	800108a <__aeabi_ddiv+0x3e6>
 8001080:	4641      	mov	r1, r8
 8001082:	4b80      	ldr	r3, [pc, #512]	; (8001284 <__aeabi_ddiv+0x5e0>)
 8001084:	445b      	add	r3, fp
 8001086:	4099      	lsls	r1, r3
 8001088:	430d      	orrs	r5, r1
 800108a:	1e6b      	subs	r3, r5, #1
 800108c:	419d      	sbcs	r5, r3
 800108e:	2307      	movs	r3, #7
 8001090:	432a      	orrs	r2, r5
 8001092:	001d      	movs	r5, r3
 8001094:	2400      	movs	r4, #0
 8001096:	4015      	ands	r5, r2
 8001098:	4213      	tst	r3, r2
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0x3fa>
 800109c:	e0d4      	b.n	8001248 <__aeabi_ddiv+0x5a4>
 800109e:	210f      	movs	r1, #15
 80010a0:	2300      	movs	r3, #0
 80010a2:	4011      	ands	r1, r2
 80010a4:	2904      	cmp	r1, #4
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0x406>
 80010a8:	e0cb      	b.n	8001242 <__aeabi_ddiv+0x59e>
 80010aa:	1d11      	adds	r1, r2, #4
 80010ac:	4291      	cmp	r1, r2
 80010ae:	4192      	sbcs	r2, r2
 80010b0:	4252      	negs	r2, r2
 80010b2:	189b      	adds	r3, r3, r2
 80010b4:	000a      	movs	r2, r1
 80010b6:	0219      	lsls	r1, r3, #8
 80010b8:	d400      	bmi.n	80010bc <__aeabi_ddiv+0x418>
 80010ba:	e0c2      	b.n	8001242 <__aeabi_ddiv+0x59e>
 80010bc:	2301      	movs	r3, #1
 80010be:	2400      	movs	r4, #0
 80010c0:	2500      	movs	r5, #0
 80010c2:	e646      	b.n	8000d52 <__aeabi_ddiv+0xae>
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	4641      	mov	r1, r8
 80010c8:	031b      	lsls	r3, r3, #12
 80010ca:	4219      	tst	r1, r3
 80010cc:	d008      	beq.n	80010e0 <__aeabi_ddiv+0x43c>
 80010ce:	421c      	tst	r4, r3
 80010d0:	d106      	bne.n	80010e0 <__aeabi_ddiv+0x43c>
 80010d2:	431c      	orrs	r4, r3
 80010d4:	0324      	lsls	r4, r4, #12
 80010d6:	46ba      	mov	sl, r7
 80010d8:	0015      	movs	r5, r2
 80010da:	4b69      	ldr	r3, [pc, #420]	; (8001280 <__aeabi_ddiv+0x5dc>)
 80010dc:	0b24      	lsrs	r4, r4, #12
 80010de:	e638      	b.n	8000d52 <__aeabi_ddiv+0xae>
 80010e0:	2480      	movs	r4, #128	; 0x80
 80010e2:	4643      	mov	r3, r8
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	46b2      	mov	sl, r6
 80010ec:	4b64      	ldr	r3, [pc, #400]	; (8001280 <__aeabi_ddiv+0x5dc>)
 80010ee:	0b24      	lsrs	r4, r4, #12
 80010f0:	e62f      	b.n	8000d52 <__aeabi_ddiv+0xae>
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_ddiv+0x454>
 80010f6:	e703      	b.n	8000f00 <__aeabi_ddiv+0x25c>
 80010f8:	19a6      	adds	r6, r4, r6
 80010fa:	1e68      	subs	r0, r5, #1
 80010fc:	42a6      	cmp	r6, r4
 80010fe:	d200      	bcs.n	8001102 <__aeabi_ddiv+0x45e>
 8001100:	e08d      	b.n	800121e <__aeabi_ddiv+0x57a>
 8001102:	428e      	cmp	r6, r1
 8001104:	d200      	bcs.n	8001108 <__aeabi_ddiv+0x464>
 8001106:	e0a3      	b.n	8001250 <__aeabi_ddiv+0x5ac>
 8001108:	d100      	bne.n	800110c <__aeabi_ddiv+0x468>
 800110a:	e0b3      	b.n	8001274 <__aeabi_ddiv+0x5d0>
 800110c:	0005      	movs	r5, r0
 800110e:	e6f5      	b.n	8000efc <__aeabi_ddiv+0x258>
 8001110:	42aa      	cmp	r2, r5
 8001112:	d900      	bls.n	8001116 <__aeabi_ddiv+0x472>
 8001114:	e639      	b.n	8000d8a <__aeabi_ddiv+0xe6>
 8001116:	4643      	mov	r3, r8
 8001118:	07de      	lsls	r6, r3, #31
 800111a:	0858      	lsrs	r0, r3, #1
 800111c:	086b      	lsrs	r3, r5, #1
 800111e:	431e      	orrs	r6, r3
 8001120:	07ed      	lsls	r5, r5, #31
 8001122:	e639      	b.n	8000d98 <__aeabi_ddiv+0xf4>
 8001124:	4648      	mov	r0, r9
 8001126:	f001 f803 	bl	8002130 <__clzsi2>
 800112a:	0001      	movs	r1, r0
 800112c:	0002      	movs	r2, r0
 800112e:	3115      	adds	r1, #21
 8001130:	3220      	adds	r2, #32
 8001132:	291c      	cmp	r1, #28
 8001134:	dc00      	bgt.n	8001138 <__aeabi_ddiv+0x494>
 8001136:	e72c      	b.n	8000f92 <__aeabi_ddiv+0x2ee>
 8001138:	464b      	mov	r3, r9
 800113a:	3808      	subs	r0, #8
 800113c:	4083      	lsls	r3, r0
 800113e:	2500      	movs	r5, #0
 8001140:	4698      	mov	r8, r3
 8001142:	e732      	b.n	8000faa <__aeabi_ddiv+0x306>
 8001144:	f000 fff4 	bl	8002130 <__clzsi2>
 8001148:	0003      	movs	r3, r0
 800114a:	001a      	movs	r2, r3
 800114c:	3215      	adds	r2, #21
 800114e:	3020      	adds	r0, #32
 8001150:	2a1c      	cmp	r2, #28
 8001152:	dc00      	bgt.n	8001156 <__aeabi_ddiv+0x4b2>
 8001154:	e700      	b.n	8000f58 <__aeabi_ddiv+0x2b4>
 8001156:	4654      	mov	r4, sl
 8001158:	3b08      	subs	r3, #8
 800115a:	2200      	movs	r2, #0
 800115c:	409c      	lsls	r4, r3
 800115e:	e705      	b.n	8000f6c <__aeabi_ddiv+0x2c8>
 8001160:	1936      	adds	r6, r6, r4
 8001162:	3b01      	subs	r3, #1
 8001164:	42b4      	cmp	r4, r6
 8001166:	d900      	bls.n	800116a <__aeabi_ddiv+0x4c6>
 8001168:	e6a6      	b.n	8000eb8 <__aeabi_ddiv+0x214>
 800116a:	42b2      	cmp	r2, r6
 800116c:	d800      	bhi.n	8001170 <__aeabi_ddiv+0x4cc>
 800116e:	e6a3      	b.n	8000eb8 <__aeabi_ddiv+0x214>
 8001170:	1e83      	subs	r3, r0, #2
 8001172:	1936      	adds	r6, r6, r4
 8001174:	e6a0      	b.n	8000eb8 <__aeabi_ddiv+0x214>
 8001176:	1909      	adds	r1, r1, r4
 8001178:	3d01      	subs	r5, #1
 800117a:	428c      	cmp	r4, r1
 800117c:	d900      	bls.n	8001180 <__aeabi_ddiv+0x4dc>
 800117e:	e68d      	b.n	8000e9c <__aeabi_ddiv+0x1f8>
 8001180:	428a      	cmp	r2, r1
 8001182:	d800      	bhi.n	8001186 <__aeabi_ddiv+0x4e2>
 8001184:	e68a      	b.n	8000e9c <__aeabi_ddiv+0x1f8>
 8001186:	1e85      	subs	r5, r0, #2
 8001188:	1909      	adds	r1, r1, r4
 800118a:	e687      	b.n	8000e9c <__aeabi_ddiv+0x1f8>
 800118c:	230f      	movs	r3, #15
 800118e:	402b      	ands	r3, r5
 8001190:	2b04      	cmp	r3, #4
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x4f2>
 8001194:	e6bc      	b.n	8000f10 <__aeabi_ddiv+0x26c>
 8001196:	2305      	movs	r3, #5
 8001198:	425b      	negs	r3, r3
 800119a:	42ab      	cmp	r3, r5
 800119c:	419b      	sbcs	r3, r3
 800119e:	3504      	adds	r5, #4
 80011a0:	425b      	negs	r3, r3
 80011a2:	08ed      	lsrs	r5, r5, #3
 80011a4:	4498      	add	r8, r3
 80011a6:	e6b4      	b.n	8000f12 <__aeabi_ddiv+0x26e>
 80011a8:	42af      	cmp	r7, r5
 80011aa:	d900      	bls.n	80011ae <__aeabi_ddiv+0x50a>
 80011ac:	e660      	b.n	8000e70 <__aeabi_ddiv+0x1cc>
 80011ae:	4282      	cmp	r2, r0
 80011b0:	d804      	bhi.n	80011bc <__aeabi_ddiv+0x518>
 80011b2:	d000      	beq.n	80011b6 <__aeabi_ddiv+0x512>
 80011b4:	e65c      	b.n	8000e70 <__aeabi_ddiv+0x1cc>
 80011b6:	42ae      	cmp	r6, r5
 80011b8:	d800      	bhi.n	80011bc <__aeabi_ddiv+0x518>
 80011ba:	e659      	b.n	8000e70 <__aeabi_ddiv+0x1cc>
 80011bc:	2302      	movs	r3, #2
 80011be:	425b      	negs	r3, r3
 80011c0:	469c      	mov	ip, r3
 80011c2:	9b00      	ldr	r3, [sp, #0]
 80011c4:	44e0      	add	r8, ip
 80011c6:	469c      	mov	ip, r3
 80011c8:	4465      	add	r5, ip
 80011ca:	429d      	cmp	r5, r3
 80011cc:	419b      	sbcs	r3, r3
 80011ce:	425b      	negs	r3, r3
 80011d0:	191b      	adds	r3, r3, r4
 80011d2:	18c0      	adds	r0, r0, r3
 80011d4:	e64d      	b.n	8000e72 <__aeabi_ddiv+0x1ce>
 80011d6:	428a      	cmp	r2, r1
 80011d8:	d800      	bhi.n	80011dc <__aeabi_ddiv+0x538>
 80011da:	e60e      	b.n	8000dfa <__aeabi_ddiv+0x156>
 80011dc:	1e83      	subs	r3, r0, #2
 80011de:	1909      	adds	r1, r1, r4
 80011e0:	e60b      	b.n	8000dfa <__aeabi_ddiv+0x156>
 80011e2:	428a      	cmp	r2, r1
 80011e4:	d800      	bhi.n	80011e8 <__aeabi_ddiv+0x544>
 80011e6:	e5f4      	b.n	8000dd2 <__aeabi_ddiv+0x12e>
 80011e8:	1e83      	subs	r3, r0, #2
 80011ea:	4698      	mov	r8, r3
 80011ec:	1909      	adds	r1, r1, r4
 80011ee:	e5f0      	b.n	8000dd2 <__aeabi_ddiv+0x12e>
 80011f0:	4925      	ldr	r1, [pc, #148]	; (8001288 <__aeabi_ddiv+0x5e4>)
 80011f2:	0028      	movs	r0, r5
 80011f4:	4459      	add	r1, fp
 80011f6:	408d      	lsls	r5, r1
 80011f8:	4642      	mov	r2, r8
 80011fa:	408a      	lsls	r2, r1
 80011fc:	1e69      	subs	r1, r5, #1
 80011fe:	418d      	sbcs	r5, r1
 8001200:	4641      	mov	r1, r8
 8001202:	40d8      	lsrs	r0, r3
 8001204:	40d9      	lsrs	r1, r3
 8001206:	4302      	orrs	r2, r0
 8001208:	432a      	orrs	r2, r5
 800120a:	000b      	movs	r3, r1
 800120c:	0751      	lsls	r1, r2, #29
 800120e:	d100      	bne.n	8001212 <__aeabi_ddiv+0x56e>
 8001210:	e751      	b.n	80010b6 <__aeabi_ddiv+0x412>
 8001212:	210f      	movs	r1, #15
 8001214:	4011      	ands	r1, r2
 8001216:	2904      	cmp	r1, #4
 8001218:	d000      	beq.n	800121c <__aeabi_ddiv+0x578>
 800121a:	e746      	b.n	80010aa <__aeabi_ddiv+0x406>
 800121c:	e74b      	b.n	80010b6 <__aeabi_ddiv+0x412>
 800121e:	0005      	movs	r5, r0
 8001220:	428e      	cmp	r6, r1
 8001222:	d000      	beq.n	8001226 <__aeabi_ddiv+0x582>
 8001224:	e66a      	b.n	8000efc <__aeabi_ddiv+0x258>
 8001226:	9a00      	ldr	r2, [sp, #0]
 8001228:	4293      	cmp	r3, r2
 800122a:	d000      	beq.n	800122e <__aeabi_ddiv+0x58a>
 800122c:	e666      	b.n	8000efc <__aeabi_ddiv+0x258>
 800122e:	e667      	b.n	8000f00 <__aeabi_ddiv+0x25c>
 8001230:	4a16      	ldr	r2, [pc, #88]	; (800128c <__aeabi_ddiv+0x5e8>)
 8001232:	445a      	add	r2, fp
 8001234:	2a00      	cmp	r2, #0
 8001236:	dc00      	bgt.n	800123a <__aeabi_ddiv+0x596>
 8001238:	e710      	b.n	800105c <__aeabi_ddiv+0x3b8>
 800123a:	2301      	movs	r3, #1
 800123c:	2500      	movs	r5, #0
 800123e:	4498      	add	r8, r3
 8001240:	e667      	b.n	8000f12 <__aeabi_ddiv+0x26e>
 8001242:	075d      	lsls	r5, r3, #29
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	0b1c      	lsrs	r4, r3, #12
 8001248:	08d2      	lsrs	r2, r2, #3
 800124a:	2300      	movs	r3, #0
 800124c:	4315      	orrs	r5, r2
 800124e:	e580      	b.n	8000d52 <__aeabi_ddiv+0xae>
 8001250:	9800      	ldr	r0, [sp, #0]
 8001252:	3d02      	subs	r5, #2
 8001254:	0042      	lsls	r2, r0, #1
 8001256:	4282      	cmp	r2, r0
 8001258:	41bf      	sbcs	r7, r7
 800125a:	427f      	negs	r7, r7
 800125c:	193c      	adds	r4, r7, r4
 800125e:	1936      	adds	r6, r6, r4
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	e7dd      	b.n	8001220 <__aeabi_ddiv+0x57c>
 8001264:	2480      	movs	r4, #128	; 0x80
 8001266:	4643      	mov	r3, r8
 8001268:	0324      	lsls	r4, r4, #12
 800126a:	431c      	orrs	r4, r3
 800126c:	0324      	lsls	r4, r4, #12
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__aeabi_ddiv+0x5dc>)
 8001270:	0b24      	lsrs	r4, r4, #12
 8001272:	e56e      	b.n	8000d52 <__aeabi_ddiv+0xae>
 8001274:	9a00      	ldr	r2, [sp, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3ea      	bcc.n	8001250 <__aeabi_ddiv+0x5ac>
 800127a:	0005      	movs	r5, r0
 800127c:	e7d3      	b.n	8001226 <__aeabi_ddiv+0x582>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	000007ff 	.word	0x000007ff
 8001284:	0000043e 	.word	0x0000043e
 8001288:	0000041e 	.word	0x0000041e
 800128c:	000003ff 	.word	0x000003ff

08001290 <__aeabi_dmul>:
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	4657      	mov	r7, sl
 8001294:	464e      	mov	r6, r9
 8001296:	4645      	mov	r5, r8
 8001298:	46de      	mov	lr, fp
 800129a:	b5e0      	push	{r5, r6, r7, lr}
 800129c:	4698      	mov	r8, r3
 800129e:	030c      	lsls	r4, r1, #12
 80012a0:	004b      	lsls	r3, r1, #1
 80012a2:	0006      	movs	r6, r0
 80012a4:	4692      	mov	sl, r2
 80012a6:	b087      	sub	sp, #28
 80012a8:	0b24      	lsrs	r4, r4, #12
 80012aa:	0d5b      	lsrs	r3, r3, #21
 80012ac:	0fcf      	lsrs	r7, r1, #31
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dmul+0x24>
 80012b2:	e15c      	b.n	800156e <__aeabi_dmul+0x2de>
 80012b4:	4ad9      	ldr	r2, [pc, #868]	; (800161c <__aeabi_dmul+0x38c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d100      	bne.n	80012bc <__aeabi_dmul+0x2c>
 80012ba:	e175      	b.n	80015a8 <__aeabi_dmul+0x318>
 80012bc:	0f42      	lsrs	r2, r0, #29
 80012be:	00e4      	lsls	r4, r4, #3
 80012c0:	4314      	orrs	r4, r2
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	0412      	lsls	r2, r2, #16
 80012c6:	4314      	orrs	r4, r2
 80012c8:	4ad5      	ldr	r2, [pc, #852]	; (8001620 <__aeabi_dmul+0x390>)
 80012ca:	00c5      	lsls	r5, r0, #3
 80012cc:	4694      	mov	ip, r2
 80012ce:	4463      	add	r3, ip
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	4699      	mov	r9, r3
 80012d6:	469b      	mov	fp, r3
 80012d8:	4643      	mov	r3, r8
 80012da:	4642      	mov	r2, r8
 80012dc:	031e      	lsls	r6, r3, #12
 80012de:	0fd2      	lsrs	r2, r2, #31
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4650      	mov	r0, sl
 80012e4:	4690      	mov	r8, r2
 80012e6:	0b36      	lsrs	r6, r6, #12
 80012e8:	0d5b      	lsrs	r3, r3, #21
 80012ea:	d100      	bne.n	80012ee <__aeabi_dmul+0x5e>
 80012ec:	e120      	b.n	8001530 <__aeabi_dmul+0x2a0>
 80012ee:	4acb      	ldr	r2, [pc, #812]	; (800161c <__aeabi_dmul+0x38c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dmul+0x66>
 80012f4:	e162      	b.n	80015bc <__aeabi_dmul+0x32c>
 80012f6:	49ca      	ldr	r1, [pc, #808]	; (8001620 <__aeabi_dmul+0x390>)
 80012f8:	0f42      	lsrs	r2, r0, #29
 80012fa:	468c      	mov	ip, r1
 80012fc:	9900      	ldr	r1, [sp, #0]
 80012fe:	4463      	add	r3, ip
 8001300:	00f6      	lsls	r6, r6, #3
 8001302:	468c      	mov	ip, r1
 8001304:	4316      	orrs	r6, r2
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	449c      	add	ip, r3
 800130a:	0412      	lsls	r2, r2, #16
 800130c:	4663      	mov	r3, ip
 800130e:	4316      	orrs	r6, r2
 8001310:	00c2      	lsls	r2, r0, #3
 8001312:	2000      	movs	r0, #0
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	9900      	ldr	r1, [sp, #0]
 8001318:	4643      	mov	r3, r8
 800131a:	3101      	adds	r1, #1
 800131c:	468c      	mov	ip, r1
 800131e:	4649      	mov	r1, r9
 8001320:	407b      	eors	r3, r7
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	290f      	cmp	r1, #15
 8001326:	d826      	bhi.n	8001376 <__aeabi_dmul+0xe6>
 8001328:	4bbe      	ldr	r3, [pc, #760]	; (8001624 <__aeabi_dmul+0x394>)
 800132a:	0089      	lsls	r1, r1, #2
 800132c:	5859      	ldr	r1, [r3, r1]
 800132e:	468f      	mov	pc, r1
 8001330:	4643      	mov	r3, r8
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	0034      	movs	r4, r6
 8001336:	0015      	movs	r5, r2
 8001338:	4683      	mov	fp, r0
 800133a:	465b      	mov	r3, fp
 800133c:	2b02      	cmp	r3, #2
 800133e:	d016      	beq.n	800136e <__aeabi_dmul+0xde>
 8001340:	2b03      	cmp	r3, #3
 8001342:	d100      	bne.n	8001346 <__aeabi_dmul+0xb6>
 8001344:	e203      	b.n	800174e <__aeabi_dmul+0x4be>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d000      	beq.n	800134c <__aeabi_dmul+0xbc>
 800134a:	e0cd      	b.n	80014e8 <__aeabi_dmul+0x258>
 800134c:	2200      	movs	r2, #0
 800134e:	2400      	movs	r4, #0
 8001350:	2500      	movs	r5, #0
 8001352:	9b01      	ldr	r3, [sp, #4]
 8001354:	0512      	lsls	r2, r2, #20
 8001356:	4322      	orrs	r2, r4
 8001358:	07db      	lsls	r3, r3, #31
 800135a:	431a      	orrs	r2, r3
 800135c:	0028      	movs	r0, r5
 800135e:	0011      	movs	r1, r2
 8001360:	b007      	add	sp, #28
 8001362:	bcf0      	pop	{r4, r5, r6, r7}
 8001364:	46bb      	mov	fp, r7
 8001366:	46b2      	mov	sl, r6
 8001368:	46a9      	mov	r9, r5
 800136a:	46a0      	mov	r8, r4
 800136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136e:	2400      	movs	r4, #0
 8001370:	2500      	movs	r5, #0
 8001372:	4aaa      	ldr	r2, [pc, #680]	; (800161c <__aeabi_dmul+0x38c>)
 8001374:	e7ed      	b.n	8001352 <__aeabi_dmul+0xc2>
 8001376:	0c28      	lsrs	r0, r5, #16
 8001378:	042d      	lsls	r5, r5, #16
 800137a:	0c2d      	lsrs	r5, r5, #16
 800137c:	002b      	movs	r3, r5
 800137e:	0c11      	lsrs	r1, r2, #16
 8001380:	0412      	lsls	r2, r2, #16
 8001382:	0c12      	lsrs	r2, r2, #16
 8001384:	4353      	muls	r3, r2
 8001386:	4698      	mov	r8, r3
 8001388:	0013      	movs	r3, r2
 800138a:	002f      	movs	r7, r5
 800138c:	4343      	muls	r3, r0
 800138e:	4699      	mov	r9, r3
 8001390:	434f      	muls	r7, r1
 8001392:	444f      	add	r7, r9
 8001394:	46bb      	mov	fp, r7
 8001396:	4647      	mov	r7, r8
 8001398:	000b      	movs	r3, r1
 800139a:	0c3f      	lsrs	r7, r7, #16
 800139c:	46ba      	mov	sl, r7
 800139e:	4343      	muls	r3, r0
 80013a0:	44da      	add	sl, fp
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	45d1      	cmp	r9, sl
 80013a6:	d904      	bls.n	80013b2 <__aeabi_dmul+0x122>
 80013a8:	2780      	movs	r7, #128	; 0x80
 80013aa:	027f      	lsls	r7, r7, #9
 80013ac:	46b9      	mov	r9, r7
 80013ae:	444b      	add	r3, r9
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	4653      	mov	r3, sl
 80013b4:	0c1b      	lsrs	r3, r3, #16
 80013b6:	469b      	mov	fp, r3
 80013b8:	4653      	mov	r3, sl
 80013ba:	041f      	lsls	r7, r3, #16
 80013bc:	4643      	mov	r3, r8
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	0c1b      	lsrs	r3, r3, #16
 80013c2:	4698      	mov	r8, r3
 80013c4:	003b      	movs	r3, r7
 80013c6:	4443      	add	r3, r8
 80013c8:	9304      	str	r3, [sp, #16]
 80013ca:	0c33      	lsrs	r3, r6, #16
 80013cc:	0436      	lsls	r6, r6, #16
 80013ce:	0c36      	lsrs	r6, r6, #16
 80013d0:	4698      	mov	r8, r3
 80013d2:	0033      	movs	r3, r6
 80013d4:	4343      	muls	r3, r0
 80013d6:	4699      	mov	r9, r3
 80013d8:	4643      	mov	r3, r8
 80013da:	4343      	muls	r3, r0
 80013dc:	002f      	movs	r7, r5
 80013de:	469a      	mov	sl, r3
 80013e0:	4643      	mov	r3, r8
 80013e2:	4377      	muls	r7, r6
 80013e4:	435d      	muls	r5, r3
 80013e6:	0c38      	lsrs	r0, r7, #16
 80013e8:	444d      	add	r5, r9
 80013ea:	1945      	adds	r5, r0, r5
 80013ec:	45a9      	cmp	r9, r5
 80013ee:	d903      	bls.n	80013f8 <__aeabi_dmul+0x168>
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	4699      	mov	r9, r3
 80013f6:	44ca      	add	sl, r9
 80013f8:	043f      	lsls	r7, r7, #16
 80013fa:	0c28      	lsrs	r0, r5, #16
 80013fc:	0c3f      	lsrs	r7, r7, #16
 80013fe:	042d      	lsls	r5, r5, #16
 8001400:	19ed      	adds	r5, r5, r7
 8001402:	0c27      	lsrs	r7, r4, #16
 8001404:	0424      	lsls	r4, r4, #16
 8001406:	0c24      	lsrs	r4, r4, #16
 8001408:	0003      	movs	r3, r0
 800140a:	0020      	movs	r0, r4
 800140c:	4350      	muls	r0, r2
 800140e:	437a      	muls	r2, r7
 8001410:	4691      	mov	r9, r2
 8001412:	003a      	movs	r2, r7
 8001414:	4453      	add	r3, sl
 8001416:	9305      	str	r3, [sp, #20]
 8001418:	0c03      	lsrs	r3, r0, #16
 800141a:	469a      	mov	sl, r3
 800141c:	434a      	muls	r2, r1
 800141e:	4361      	muls	r1, r4
 8001420:	4449      	add	r1, r9
 8001422:	4451      	add	r1, sl
 8001424:	44ab      	add	fp, r5
 8001426:	4589      	cmp	r9, r1
 8001428:	d903      	bls.n	8001432 <__aeabi_dmul+0x1a2>
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	025b      	lsls	r3, r3, #9
 800142e:	4699      	mov	r9, r3
 8001430:	444a      	add	r2, r9
 8001432:	0400      	lsls	r0, r0, #16
 8001434:	0c0b      	lsrs	r3, r1, #16
 8001436:	0c00      	lsrs	r0, r0, #16
 8001438:	0409      	lsls	r1, r1, #16
 800143a:	1809      	adds	r1, r1, r0
 800143c:	0020      	movs	r0, r4
 800143e:	4699      	mov	r9, r3
 8001440:	4643      	mov	r3, r8
 8001442:	4370      	muls	r0, r6
 8001444:	435c      	muls	r4, r3
 8001446:	437e      	muls	r6, r7
 8001448:	435f      	muls	r7, r3
 800144a:	0c03      	lsrs	r3, r0, #16
 800144c:	4698      	mov	r8, r3
 800144e:	19a4      	adds	r4, r4, r6
 8001450:	4444      	add	r4, r8
 8001452:	444a      	add	r2, r9
 8001454:	9703      	str	r7, [sp, #12]
 8001456:	42a6      	cmp	r6, r4
 8001458:	d904      	bls.n	8001464 <__aeabi_dmul+0x1d4>
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	4698      	mov	r8, r3
 8001460:	4447      	add	r7, r8
 8001462:	9703      	str	r7, [sp, #12]
 8001464:	0423      	lsls	r3, r4, #16
 8001466:	9e02      	ldr	r6, [sp, #8]
 8001468:	469a      	mov	sl, r3
 800146a:	9b05      	ldr	r3, [sp, #20]
 800146c:	445e      	add	r6, fp
 800146e:	4698      	mov	r8, r3
 8001470:	42ae      	cmp	r6, r5
 8001472:	41ad      	sbcs	r5, r5
 8001474:	1876      	adds	r6, r6, r1
 8001476:	428e      	cmp	r6, r1
 8001478:	4189      	sbcs	r1, r1
 800147a:	0400      	lsls	r0, r0, #16
 800147c:	0c00      	lsrs	r0, r0, #16
 800147e:	4450      	add	r0, sl
 8001480:	4440      	add	r0, r8
 8001482:	426d      	negs	r5, r5
 8001484:	1947      	adds	r7, r0, r5
 8001486:	46b8      	mov	r8, r7
 8001488:	4693      	mov	fp, r2
 800148a:	4249      	negs	r1, r1
 800148c:	4689      	mov	r9, r1
 800148e:	44c3      	add	fp, r8
 8001490:	44d9      	add	r9, fp
 8001492:	4298      	cmp	r0, r3
 8001494:	4180      	sbcs	r0, r0
 8001496:	45a8      	cmp	r8, r5
 8001498:	41ad      	sbcs	r5, r5
 800149a:	4593      	cmp	fp, r2
 800149c:	4192      	sbcs	r2, r2
 800149e:	4589      	cmp	r9, r1
 80014a0:	4189      	sbcs	r1, r1
 80014a2:	426d      	negs	r5, r5
 80014a4:	4240      	negs	r0, r0
 80014a6:	4328      	orrs	r0, r5
 80014a8:	0c24      	lsrs	r4, r4, #16
 80014aa:	4252      	negs	r2, r2
 80014ac:	4249      	negs	r1, r1
 80014ae:	430a      	orrs	r2, r1
 80014b0:	9b03      	ldr	r3, [sp, #12]
 80014b2:	1900      	adds	r0, r0, r4
 80014b4:	1880      	adds	r0, r0, r2
 80014b6:	18c7      	adds	r7, r0, r3
 80014b8:	464b      	mov	r3, r9
 80014ba:	0ddc      	lsrs	r4, r3, #23
 80014bc:	9b04      	ldr	r3, [sp, #16]
 80014be:	0275      	lsls	r5, r6, #9
 80014c0:	431d      	orrs	r5, r3
 80014c2:	1e6a      	subs	r2, r5, #1
 80014c4:	4195      	sbcs	r5, r2
 80014c6:	464b      	mov	r3, r9
 80014c8:	0df6      	lsrs	r6, r6, #23
 80014ca:	027f      	lsls	r7, r7, #9
 80014cc:	4335      	orrs	r5, r6
 80014ce:	025a      	lsls	r2, r3, #9
 80014d0:	433c      	orrs	r4, r7
 80014d2:	4315      	orrs	r5, r2
 80014d4:	01fb      	lsls	r3, r7, #7
 80014d6:	d400      	bmi.n	80014da <__aeabi_dmul+0x24a>
 80014d8:	e11c      	b.n	8001714 <__aeabi_dmul+0x484>
 80014da:	2101      	movs	r1, #1
 80014dc:	086a      	lsrs	r2, r5, #1
 80014de:	400d      	ands	r5, r1
 80014e0:	4315      	orrs	r5, r2
 80014e2:	07e2      	lsls	r2, r4, #31
 80014e4:	4315      	orrs	r5, r2
 80014e6:	0864      	lsrs	r4, r4, #1
 80014e8:	494f      	ldr	r1, [pc, #316]	; (8001628 <__aeabi_dmul+0x398>)
 80014ea:	4461      	add	r1, ip
 80014ec:	2900      	cmp	r1, #0
 80014ee:	dc00      	bgt.n	80014f2 <__aeabi_dmul+0x262>
 80014f0:	e0b0      	b.n	8001654 <__aeabi_dmul+0x3c4>
 80014f2:	076b      	lsls	r3, r5, #29
 80014f4:	d009      	beq.n	800150a <__aeabi_dmul+0x27a>
 80014f6:	220f      	movs	r2, #15
 80014f8:	402a      	ands	r2, r5
 80014fa:	2a04      	cmp	r2, #4
 80014fc:	d005      	beq.n	800150a <__aeabi_dmul+0x27a>
 80014fe:	1d2a      	adds	r2, r5, #4
 8001500:	42aa      	cmp	r2, r5
 8001502:	41ad      	sbcs	r5, r5
 8001504:	426d      	negs	r5, r5
 8001506:	1964      	adds	r4, r4, r5
 8001508:	0015      	movs	r5, r2
 800150a:	01e3      	lsls	r3, r4, #7
 800150c:	d504      	bpl.n	8001518 <__aeabi_dmul+0x288>
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	4a46      	ldr	r2, [pc, #280]	; (800162c <__aeabi_dmul+0x39c>)
 8001512:	00c9      	lsls	r1, r1, #3
 8001514:	4014      	ands	r4, r2
 8001516:	4461      	add	r1, ip
 8001518:	4a45      	ldr	r2, [pc, #276]	; (8001630 <__aeabi_dmul+0x3a0>)
 800151a:	4291      	cmp	r1, r2
 800151c:	dd00      	ble.n	8001520 <__aeabi_dmul+0x290>
 800151e:	e726      	b.n	800136e <__aeabi_dmul+0xde>
 8001520:	0762      	lsls	r2, r4, #29
 8001522:	08ed      	lsrs	r5, r5, #3
 8001524:	0264      	lsls	r4, r4, #9
 8001526:	0549      	lsls	r1, r1, #21
 8001528:	4315      	orrs	r5, r2
 800152a:	0b24      	lsrs	r4, r4, #12
 800152c:	0d4a      	lsrs	r2, r1, #21
 800152e:	e710      	b.n	8001352 <__aeabi_dmul+0xc2>
 8001530:	4652      	mov	r2, sl
 8001532:	4332      	orrs	r2, r6
 8001534:	d100      	bne.n	8001538 <__aeabi_dmul+0x2a8>
 8001536:	e07f      	b.n	8001638 <__aeabi_dmul+0x3a8>
 8001538:	2e00      	cmp	r6, #0
 800153a:	d100      	bne.n	800153e <__aeabi_dmul+0x2ae>
 800153c:	e0dc      	b.n	80016f8 <__aeabi_dmul+0x468>
 800153e:	0030      	movs	r0, r6
 8001540:	f000 fdf6 	bl	8002130 <__clzsi2>
 8001544:	0002      	movs	r2, r0
 8001546:	3a0b      	subs	r2, #11
 8001548:	231d      	movs	r3, #29
 800154a:	0001      	movs	r1, r0
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	4652      	mov	r2, sl
 8001550:	3908      	subs	r1, #8
 8001552:	40da      	lsrs	r2, r3
 8001554:	408e      	lsls	r6, r1
 8001556:	4316      	orrs	r6, r2
 8001558:	4652      	mov	r2, sl
 800155a:	408a      	lsls	r2, r1
 800155c:	9b00      	ldr	r3, [sp, #0]
 800155e:	4935      	ldr	r1, [pc, #212]	; (8001634 <__aeabi_dmul+0x3a4>)
 8001560:	1a18      	subs	r0, r3, r0
 8001562:	0003      	movs	r3, r0
 8001564:	468c      	mov	ip, r1
 8001566:	4463      	add	r3, ip
 8001568:	2000      	movs	r0, #0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	e6d3      	b.n	8001316 <__aeabi_dmul+0x86>
 800156e:	0025      	movs	r5, r4
 8001570:	4305      	orrs	r5, r0
 8001572:	d04a      	beq.n	800160a <__aeabi_dmul+0x37a>
 8001574:	2c00      	cmp	r4, #0
 8001576:	d100      	bne.n	800157a <__aeabi_dmul+0x2ea>
 8001578:	e0b0      	b.n	80016dc <__aeabi_dmul+0x44c>
 800157a:	0020      	movs	r0, r4
 800157c:	f000 fdd8 	bl	8002130 <__clzsi2>
 8001580:	0001      	movs	r1, r0
 8001582:	0002      	movs	r2, r0
 8001584:	390b      	subs	r1, #11
 8001586:	231d      	movs	r3, #29
 8001588:	0010      	movs	r0, r2
 800158a:	1a5b      	subs	r3, r3, r1
 800158c:	0031      	movs	r1, r6
 800158e:	0035      	movs	r5, r6
 8001590:	3808      	subs	r0, #8
 8001592:	4084      	lsls	r4, r0
 8001594:	40d9      	lsrs	r1, r3
 8001596:	4085      	lsls	r5, r0
 8001598:	430c      	orrs	r4, r1
 800159a:	4826      	ldr	r0, [pc, #152]	; (8001634 <__aeabi_dmul+0x3a4>)
 800159c:	1a83      	subs	r3, r0, r2
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	4699      	mov	r9, r3
 80015a4:	469b      	mov	fp, r3
 80015a6:	e697      	b.n	80012d8 <__aeabi_dmul+0x48>
 80015a8:	0005      	movs	r5, r0
 80015aa:	4325      	orrs	r5, r4
 80015ac:	d126      	bne.n	80015fc <__aeabi_dmul+0x36c>
 80015ae:	2208      	movs	r2, #8
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2302      	movs	r3, #2
 80015b4:	2400      	movs	r4, #0
 80015b6:	4691      	mov	r9, r2
 80015b8:	469b      	mov	fp, r3
 80015ba:	e68d      	b.n	80012d8 <__aeabi_dmul+0x48>
 80015bc:	4652      	mov	r2, sl
 80015be:	9b00      	ldr	r3, [sp, #0]
 80015c0:	4332      	orrs	r2, r6
 80015c2:	d110      	bne.n	80015e6 <__aeabi_dmul+0x356>
 80015c4:	4915      	ldr	r1, [pc, #84]	; (800161c <__aeabi_dmul+0x38c>)
 80015c6:	2600      	movs	r6, #0
 80015c8:	468c      	mov	ip, r1
 80015ca:	4463      	add	r3, ip
 80015cc:	4649      	mov	r1, r9
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2302      	movs	r3, #2
 80015d2:	4319      	orrs	r1, r3
 80015d4:	4689      	mov	r9, r1
 80015d6:	2002      	movs	r0, #2
 80015d8:	e69d      	b.n	8001316 <__aeabi_dmul+0x86>
 80015da:	465b      	mov	r3, fp
 80015dc:	9701      	str	r7, [sp, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dmul+0x354>
 80015e2:	e6ad      	b.n	8001340 <__aeabi_dmul+0xb0>
 80015e4:	e6c3      	b.n	800136e <__aeabi_dmul+0xde>
 80015e6:	4a0d      	ldr	r2, [pc, #52]	; (800161c <__aeabi_dmul+0x38c>)
 80015e8:	2003      	movs	r0, #3
 80015ea:	4694      	mov	ip, r2
 80015ec:	4463      	add	r3, ip
 80015ee:	464a      	mov	r2, r9
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2303      	movs	r3, #3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	4691      	mov	r9, r2
 80015f8:	4652      	mov	r2, sl
 80015fa:	e68c      	b.n	8001316 <__aeabi_dmul+0x86>
 80015fc:	220c      	movs	r2, #12
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2303      	movs	r3, #3
 8001602:	0005      	movs	r5, r0
 8001604:	4691      	mov	r9, r2
 8001606:	469b      	mov	fp, r3
 8001608:	e666      	b.n	80012d8 <__aeabi_dmul+0x48>
 800160a:	2304      	movs	r3, #4
 800160c:	4699      	mov	r9, r3
 800160e:	2300      	movs	r3, #0
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	2400      	movs	r4, #0
 8001616:	469b      	mov	fp, r3
 8001618:	e65e      	b.n	80012d8 <__aeabi_dmul+0x48>
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	000007ff 	.word	0x000007ff
 8001620:	fffffc01 	.word	0xfffffc01
 8001624:	0800707c 	.word	0x0800707c
 8001628:	000003ff 	.word	0x000003ff
 800162c:	feffffff 	.word	0xfeffffff
 8001630:	000007fe 	.word	0x000007fe
 8001634:	fffffc0d 	.word	0xfffffc0d
 8001638:	4649      	mov	r1, r9
 800163a:	2301      	movs	r3, #1
 800163c:	4319      	orrs	r1, r3
 800163e:	4689      	mov	r9, r1
 8001640:	2600      	movs	r6, #0
 8001642:	2001      	movs	r0, #1
 8001644:	e667      	b.n	8001316 <__aeabi_dmul+0x86>
 8001646:	2300      	movs	r3, #0
 8001648:	2480      	movs	r4, #128	; 0x80
 800164a:	2500      	movs	r5, #0
 800164c:	4a43      	ldr	r2, [pc, #268]	; (800175c <__aeabi_dmul+0x4cc>)
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	0324      	lsls	r4, r4, #12
 8001652:	e67e      	b.n	8001352 <__aeabi_dmul+0xc2>
 8001654:	2001      	movs	r0, #1
 8001656:	1a40      	subs	r0, r0, r1
 8001658:	2838      	cmp	r0, #56	; 0x38
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x3ce>
 800165c:	e676      	b.n	800134c <__aeabi_dmul+0xbc>
 800165e:	281f      	cmp	r0, #31
 8001660:	dd5b      	ble.n	800171a <__aeabi_dmul+0x48a>
 8001662:	221f      	movs	r2, #31
 8001664:	0023      	movs	r3, r4
 8001666:	4252      	negs	r2, r2
 8001668:	1a51      	subs	r1, r2, r1
 800166a:	40cb      	lsrs	r3, r1
 800166c:	0019      	movs	r1, r3
 800166e:	2820      	cmp	r0, #32
 8001670:	d003      	beq.n	800167a <__aeabi_dmul+0x3ea>
 8001672:	4a3b      	ldr	r2, [pc, #236]	; (8001760 <__aeabi_dmul+0x4d0>)
 8001674:	4462      	add	r2, ip
 8001676:	4094      	lsls	r4, r2
 8001678:	4325      	orrs	r5, r4
 800167a:	1e6a      	subs	r2, r5, #1
 800167c:	4195      	sbcs	r5, r2
 800167e:	002a      	movs	r2, r5
 8001680:	430a      	orrs	r2, r1
 8001682:	2107      	movs	r1, #7
 8001684:	000d      	movs	r5, r1
 8001686:	2400      	movs	r4, #0
 8001688:	4015      	ands	r5, r2
 800168a:	4211      	tst	r1, r2
 800168c:	d05b      	beq.n	8001746 <__aeabi_dmul+0x4b6>
 800168e:	210f      	movs	r1, #15
 8001690:	2400      	movs	r4, #0
 8001692:	4011      	ands	r1, r2
 8001694:	2904      	cmp	r1, #4
 8001696:	d053      	beq.n	8001740 <__aeabi_dmul+0x4b0>
 8001698:	1d11      	adds	r1, r2, #4
 800169a:	4291      	cmp	r1, r2
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	18a4      	adds	r4, r4, r2
 80016a2:	000a      	movs	r2, r1
 80016a4:	0223      	lsls	r3, r4, #8
 80016a6:	d54b      	bpl.n	8001740 <__aeabi_dmul+0x4b0>
 80016a8:	2201      	movs	r2, #1
 80016aa:	2400      	movs	r4, #0
 80016ac:	2500      	movs	r5, #0
 80016ae:	e650      	b.n	8001352 <__aeabi_dmul+0xc2>
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	031b      	lsls	r3, r3, #12
 80016b4:	421c      	tst	r4, r3
 80016b6:	d009      	beq.n	80016cc <__aeabi_dmul+0x43c>
 80016b8:	421e      	tst	r6, r3
 80016ba:	d107      	bne.n	80016cc <__aeabi_dmul+0x43c>
 80016bc:	4333      	orrs	r3, r6
 80016be:	031c      	lsls	r4, r3, #12
 80016c0:	4643      	mov	r3, r8
 80016c2:	0015      	movs	r5, r2
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	4a25      	ldr	r2, [pc, #148]	; (800175c <__aeabi_dmul+0x4cc>)
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	e642      	b.n	8001352 <__aeabi_dmul+0xc2>
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	0312      	lsls	r2, r2, #12
 80016d0:	4314      	orrs	r4, r2
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <__aeabi_dmul+0x4cc>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	9701      	str	r7, [sp, #4]
 80016da:	e63a      	b.n	8001352 <__aeabi_dmul+0xc2>
 80016dc:	f000 fd28 	bl	8002130 <__clzsi2>
 80016e0:	0001      	movs	r1, r0
 80016e2:	0002      	movs	r2, r0
 80016e4:	3115      	adds	r1, #21
 80016e6:	3220      	adds	r2, #32
 80016e8:	291c      	cmp	r1, #28
 80016ea:	dc00      	bgt.n	80016ee <__aeabi_dmul+0x45e>
 80016ec:	e74b      	b.n	8001586 <__aeabi_dmul+0x2f6>
 80016ee:	0034      	movs	r4, r6
 80016f0:	3808      	subs	r0, #8
 80016f2:	2500      	movs	r5, #0
 80016f4:	4084      	lsls	r4, r0
 80016f6:	e750      	b.n	800159a <__aeabi_dmul+0x30a>
 80016f8:	f000 fd1a 	bl	8002130 <__clzsi2>
 80016fc:	0003      	movs	r3, r0
 80016fe:	001a      	movs	r2, r3
 8001700:	3215      	adds	r2, #21
 8001702:	3020      	adds	r0, #32
 8001704:	2a1c      	cmp	r2, #28
 8001706:	dc00      	bgt.n	800170a <__aeabi_dmul+0x47a>
 8001708:	e71e      	b.n	8001548 <__aeabi_dmul+0x2b8>
 800170a:	4656      	mov	r6, sl
 800170c:	3b08      	subs	r3, #8
 800170e:	2200      	movs	r2, #0
 8001710:	409e      	lsls	r6, r3
 8001712:	e723      	b.n	800155c <__aeabi_dmul+0x2cc>
 8001714:	9b00      	ldr	r3, [sp, #0]
 8001716:	469c      	mov	ip, r3
 8001718:	e6e6      	b.n	80014e8 <__aeabi_dmul+0x258>
 800171a:	4912      	ldr	r1, [pc, #72]	; (8001764 <__aeabi_dmul+0x4d4>)
 800171c:	0022      	movs	r2, r4
 800171e:	4461      	add	r1, ip
 8001720:	002e      	movs	r6, r5
 8001722:	408d      	lsls	r5, r1
 8001724:	408a      	lsls	r2, r1
 8001726:	40c6      	lsrs	r6, r0
 8001728:	1e69      	subs	r1, r5, #1
 800172a:	418d      	sbcs	r5, r1
 800172c:	4332      	orrs	r2, r6
 800172e:	432a      	orrs	r2, r5
 8001730:	40c4      	lsrs	r4, r0
 8001732:	0753      	lsls	r3, r2, #29
 8001734:	d0b6      	beq.n	80016a4 <__aeabi_dmul+0x414>
 8001736:	210f      	movs	r1, #15
 8001738:	4011      	ands	r1, r2
 800173a:	2904      	cmp	r1, #4
 800173c:	d1ac      	bne.n	8001698 <__aeabi_dmul+0x408>
 800173e:	e7b1      	b.n	80016a4 <__aeabi_dmul+0x414>
 8001740:	0765      	lsls	r5, r4, #29
 8001742:	0264      	lsls	r4, r4, #9
 8001744:	0b24      	lsrs	r4, r4, #12
 8001746:	08d2      	lsrs	r2, r2, #3
 8001748:	4315      	orrs	r5, r2
 800174a:	2200      	movs	r2, #0
 800174c:	e601      	b.n	8001352 <__aeabi_dmul+0xc2>
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	0312      	lsls	r2, r2, #12
 8001752:	4314      	orrs	r4, r2
 8001754:	0324      	lsls	r4, r4, #12
 8001756:	4a01      	ldr	r2, [pc, #4]	; (800175c <__aeabi_dmul+0x4cc>)
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	e5fa      	b.n	8001352 <__aeabi_dmul+0xc2>
 800175c:	000007ff 	.word	0x000007ff
 8001760:	0000043e 	.word	0x0000043e
 8001764:	0000041e 	.word	0x0000041e

08001768 <__aeabi_dsub>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	4657      	mov	r7, sl
 800176c:	464e      	mov	r6, r9
 800176e:	4645      	mov	r5, r8
 8001770:	46de      	mov	lr, fp
 8001772:	b5e0      	push	{r5, r6, r7, lr}
 8001774:	001e      	movs	r6, r3
 8001776:	0017      	movs	r7, r2
 8001778:	004a      	lsls	r2, r1, #1
 800177a:	030b      	lsls	r3, r1, #12
 800177c:	0d52      	lsrs	r2, r2, #21
 800177e:	0a5b      	lsrs	r3, r3, #9
 8001780:	4690      	mov	r8, r2
 8001782:	0f42      	lsrs	r2, r0, #29
 8001784:	431a      	orrs	r2, r3
 8001786:	0fcd      	lsrs	r5, r1, #31
 8001788:	4ccd      	ldr	r4, [pc, #820]	; (8001ac0 <__aeabi_dsub+0x358>)
 800178a:	0331      	lsls	r1, r6, #12
 800178c:	00c3      	lsls	r3, r0, #3
 800178e:	4694      	mov	ip, r2
 8001790:	0070      	lsls	r0, r6, #1
 8001792:	0f7a      	lsrs	r2, r7, #29
 8001794:	0a49      	lsrs	r1, r1, #9
 8001796:	00ff      	lsls	r7, r7, #3
 8001798:	469a      	mov	sl, r3
 800179a:	46b9      	mov	r9, r7
 800179c:	0d40      	lsrs	r0, r0, #21
 800179e:	0ff6      	lsrs	r6, r6, #31
 80017a0:	4311      	orrs	r1, r2
 80017a2:	42a0      	cmp	r0, r4
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dsub+0x40>
 80017a6:	e0b1      	b.n	800190c <__aeabi_dsub+0x1a4>
 80017a8:	2201      	movs	r2, #1
 80017aa:	4056      	eors	r6, r2
 80017ac:	46b3      	mov	fp, r6
 80017ae:	42b5      	cmp	r5, r6
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dsub+0x4c>
 80017b2:	e088      	b.n	80018c6 <__aeabi_dsub+0x15e>
 80017b4:	4642      	mov	r2, r8
 80017b6:	1a12      	subs	r2, r2, r0
 80017b8:	2a00      	cmp	r2, #0
 80017ba:	dc00      	bgt.n	80017be <__aeabi_dsub+0x56>
 80017bc:	e0ae      	b.n	800191c <__aeabi_dsub+0x1b4>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dsub+0x5c>
 80017c2:	e0c1      	b.n	8001948 <__aeabi_dsub+0x1e0>
 80017c4:	48be      	ldr	r0, [pc, #760]	; (8001ac0 <__aeabi_dsub+0x358>)
 80017c6:	4580      	cmp	r8, r0
 80017c8:	d100      	bne.n	80017cc <__aeabi_dsub+0x64>
 80017ca:	e151      	b.n	8001a70 <__aeabi_dsub+0x308>
 80017cc:	2080      	movs	r0, #128	; 0x80
 80017ce:	0400      	lsls	r0, r0, #16
 80017d0:	4301      	orrs	r1, r0
 80017d2:	2a38      	cmp	r2, #56	; 0x38
 80017d4:	dd00      	ble.n	80017d8 <__aeabi_dsub+0x70>
 80017d6:	e17b      	b.n	8001ad0 <__aeabi_dsub+0x368>
 80017d8:	2a1f      	cmp	r2, #31
 80017da:	dd00      	ble.n	80017de <__aeabi_dsub+0x76>
 80017dc:	e1ee      	b.n	8001bbc <__aeabi_dsub+0x454>
 80017de:	2020      	movs	r0, #32
 80017e0:	003e      	movs	r6, r7
 80017e2:	1a80      	subs	r0, r0, r2
 80017e4:	000c      	movs	r4, r1
 80017e6:	40d6      	lsrs	r6, r2
 80017e8:	40d1      	lsrs	r1, r2
 80017ea:	4087      	lsls	r7, r0
 80017ec:	4662      	mov	r2, ip
 80017ee:	4084      	lsls	r4, r0
 80017f0:	1a52      	subs	r2, r2, r1
 80017f2:	1e78      	subs	r0, r7, #1
 80017f4:	4187      	sbcs	r7, r0
 80017f6:	4694      	mov	ip, r2
 80017f8:	4334      	orrs	r4, r6
 80017fa:	4327      	orrs	r7, r4
 80017fc:	1bdc      	subs	r4, r3, r7
 80017fe:	42a3      	cmp	r3, r4
 8001800:	419b      	sbcs	r3, r3
 8001802:	4662      	mov	r2, ip
 8001804:	425b      	negs	r3, r3
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4699      	mov	r9, r3
 800180a:	464b      	mov	r3, r9
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	d400      	bmi.n	8001812 <__aeabi_dsub+0xaa>
 8001810:	e118      	b.n	8001a44 <__aeabi_dsub+0x2dc>
 8001812:	464b      	mov	r3, r9
 8001814:	0258      	lsls	r0, r3, #9
 8001816:	0a43      	lsrs	r3, r0, #9
 8001818:	4699      	mov	r9, r3
 800181a:	464b      	mov	r3, r9
 800181c:	2b00      	cmp	r3, #0
 800181e:	d100      	bne.n	8001822 <__aeabi_dsub+0xba>
 8001820:	e137      	b.n	8001a92 <__aeabi_dsub+0x32a>
 8001822:	4648      	mov	r0, r9
 8001824:	f000 fc84 	bl	8002130 <__clzsi2>
 8001828:	0001      	movs	r1, r0
 800182a:	3908      	subs	r1, #8
 800182c:	2320      	movs	r3, #32
 800182e:	0022      	movs	r2, r4
 8001830:	4648      	mov	r0, r9
 8001832:	1a5b      	subs	r3, r3, r1
 8001834:	40da      	lsrs	r2, r3
 8001836:	4088      	lsls	r0, r1
 8001838:	408c      	lsls	r4, r1
 800183a:	4643      	mov	r3, r8
 800183c:	4310      	orrs	r0, r2
 800183e:	4588      	cmp	r8, r1
 8001840:	dd00      	ble.n	8001844 <__aeabi_dsub+0xdc>
 8001842:	e136      	b.n	8001ab2 <__aeabi_dsub+0x34a>
 8001844:	1ac9      	subs	r1, r1, r3
 8001846:	1c4b      	adds	r3, r1, #1
 8001848:	2b1f      	cmp	r3, #31
 800184a:	dd00      	ble.n	800184e <__aeabi_dsub+0xe6>
 800184c:	e0ea      	b.n	8001a24 <__aeabi_dsub+0x2bc>
 800184e:	2220      	movs	r2, #32
 8001850:	0026      	movs	r6, r4
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	0001      	movs	r1, r0
 8001856:	4094      	lsls	r4, r2
 8001858:	40de      	lsrs	r6, r3
 800185a:	40d8      	lsrs	r0, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4091      	lsls	r1, r2
 8001860:	1e62      	subs	r2, r4, #1
 8001862:	4194      	sbcs	r4, r2
 8001864:	4681      	mov	r9, r0
 8001866:	4698      	mov	r8, r3
 8001868:	4331      	orrs	r1, r6
 800186a:	430c      	orrs	r4, r1
 800186c:	0763      	lsls	r3, r4, #29
 800186e:	d009      	beq.n	8001884 <__aeabi_dsub+0x11c>
 8001870:	230f      	movs	r3, #15
 8001872:	4023      	ands	r3, r4
 8001874:	2b04      	cmp	r3, #4
 8001876:	d005      	beq.n	8001884 <__aeabi_dsub+0x11c>
 8001878:	1d23      	adds	r3, r4, #4
 800187a:	42a3      	cmp	r3, r4
 800187c:	41a4      	sbcs	r4, r4
 800187e:	4264      	negs	r4, r4
 8001880:	44a1      	add	r9, r4
 8001882:	001c      	movs	r4, r3
 8001884:	464b      	mov	r3, r9
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	d400      	bmi.n	800188c <__aeabi_dsub+0x124>
 800188a:	e0de      	b.n	8001a4a <__aeabi_dsub+0x2e2>
 800188c:	4641      	mov	r1, r8
 800188e:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <__aeabi_dsub+0x358>)
 8001890:	3101      	adds	r1, #1
 8001892:	4299      	cmp	r1, r3
 8001894:	d100      	bne.n	8001898 <__aeabi_dsub+0x130>
 8001896:	e0e7      	b.n	8001a68 <__aeabi_dsub+0x300>
 8001898:	464b      	mov	r3, r9
 800189a:	488a      	ldr	r0, [pc, #552]	; (8001ac4 <__aeabi_dsub+0x35c>)
 800189c:	08e4      	lsrs	r4, r4, #3
 800189e:	4003      	ands	r3, r0
 80018a0:	0018      	movs	r0, r3
 80018a2:	0549      	lsls	r1, r1, #21
 80018a4:	075b      	lsls	r3, r3, #29
 80018a6:	0240      	lsls	r0, r0, #9
 80018a8:	4323      	orrs	r3, r4
 80018aa:	0d4a      	lsrs	r2, r1, #21
 80018ac:	0b04      	lsrs	r4, r0, #12
 80018ae:	0512      	lsls	r2, r2, #20
 80018b0:	07ed      	lsls	r5, r5, #31
 80018b2:	4322      	orrs	r2, r4
 80018b4:	432a      	orrs	r2, r5
 80018b6:	0018      	movs	r0, r3
 80018b8:	0011      	movs	r1, r2
 80018ba:	bcf0      	pop	{r4, r5, r6, r7}
 80018bc:	46bb      	mov	fp, r7
 80018be:	46b2      	mov	sl, r6
 80018c0:	46a9      	mov	r9, r5
 80018c2:	46a0      	mov	r8, r4
 80018c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018c6:	4642      	mov	r2, r8
 80018c8:	1a12      	subs	r2, r2, r0
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	dd52      	ble.n	8001974 <__aeabi_dsub+0x20c>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dsub+0x16c>
 80018d2:	e09c      	b.n	8001a0e <__aeabi_dsub+0x2a6>
 80018d4:	45a0      	cmp	r8, r4
 80018d6:	d100      	bne.n	80018da <__aeabi_dsub+0x172>
 80018d8:	e0ca      	b.n	8001a70 <__aeabi_dsub+0x308>
 80018da:	2080      	movs	r0, #128	; 0x80
 80018dc:	0400      	lsls	r0, r0, #16
 80018de:	4301      	orrs	r1, r0
 80018e0:	2a38      	cmp	r2, #56	; 0x38
 80018e2:	dd00      	ble.n	80018e6 <__aeabi_dsub+0x17e>
 80018e4:	e149      	b.n	8001b7a <__aeabi_dsub+0x412>
 80018e6:	2a1f      	cmp	r2, #31
 80018e8:	dc00      	bgt.n	80018ec <__aeabi_dsub+0x184>
 80018ea:	e197      	b.n	8001c1c <__aeabi_dsub+0x4b4>
 80018ec:	0010      	movs	r0, r2
 80018ee:	000e      	movs	r6, r1
 80018f0:	3820      	subs	r0, #32
 80018f2:	40c6      	lsrs	r6, r0
 80018f4:	2a20      	cmp	r2, #32
 80018f6:	d004      	beq.n	8001902 <__aeabi_dsub+0x19a>
 80018f8:	2040      	movs	r0, #64	; 0x40
 80018fa:	1a82      	subs	r2, r0, r2
 80018fc:	4091      	lsls	r1, r2
 80018fe:	430f      	orrs	r7, r1
 8001900:	46b9      	mov	r9, r7
 8001902:	464c      	mov	r4, r9
 8001904:	1e62      	subs	r2, r4, #1
 8001906:	4194      	sbcs	r4, r2
 8001908:	4334      	orrs	r4, r6
 800190a:	e13a      	b.n	8001b82 <__aeabi_dsub+0x41a>
 800190c:	000a      	movs	r2, r1
 800190e:	433a      	orrs	r2, r7
 8001910:	d028      	beq.n	8001964 <__aeabi_dsub+0x1fc>
 8001912:	46b3      	mov	fp, r6
 8001914:	42b5      	cmp	r5, r6
 8001916:	d02b      	beq.n	8001970 <__aeabi_dsub+0x208>
 8001918:	4a6b      	ldr	r2, [pc, #428]	; (8001ac8 <__aeabi_dsub+0x360>)
 800191a:	4442      	add	r2, r8
 800191c:	2a00      	cmp	r2, #0
 800191e:	d05d      	beq.n	80019dc <__aeabi_dsub+0x274>
 8001920:	4642      	mov	r2, r8
 8001922:	4644      	mov	r4, r8
 8001924:	1a82      	subs	r2, r0, r2
 8001926:	2c00      	cmp	r4, #0
 8001928:	d000      	beq.n	800192c <__aeabi_dsub+0x1c4>
 800192a:	e0f5      	b.n	8001b18 <__aeabi_dsub+0x3b0>
 800192c:	4665      	mov	r5, ip
 800192e:	431d      	orrs	r5, r3
 8001930:	d100      	bne.n	8001934 <__aeabi_dsub+0x1cc>
 8001932:	e19c      	b.n	8001c6e <__aeabi_dsub+0x506>
 8001934:	1e55      	subs	r5, r2, #1
 8001936:	2a01      	cmp	r2, #1
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x1d4>
 800193a:	e1fb      	b.n	8001d34 <__aeabi_dsub+0x5cc>
 800193c:	4c60      	ldr	r4, [pc, #384]	; (8001ac0 <__aeabi_dsub+0x358>)
 800193e:	42a2      	cmp	r2, r4
 8001940:	d100      	bne.n	8001944 <__aeabi_dsub+0x1dc>
 8001942:	e1bd      	b.n	8001cc0 <__aeabi_dsub+0x558>
 8001944:	002a      	movs	r2, r5
 8001946:	e0f0      	b.n	8001b2a <__aeabi_dsub+0x3c2>
 8001948:	0008      	movs	r0, r1
 800194a:	4338      	orrs	r0, r7
 800194c:	d100      	bne.n	8001950 <__aeabi_dsub+0x1e8>
 800194e:	e0c3      	b.n	8001ad8 <__aeabi_dsub+0x370>
 8001950:	1e50      	subs	r0, r2, #1
 8001952:	2a01      	cmp	r2, #1
 8001954:	d100      	bne.n	8001958 <__aeabi_dsub+0x1f0>
 8001956:	e1a8      	b.n	8001caa <__aeabi_dsub+0x542>
 8001958:	4c59      	ldr	r4, [pc, #356]	; (8001ac0 <__aeabi_dsub+0x358>)
 800195a:	42a2      	cmp	r2, r4
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x1f8>
 800195e:	e087      	b.n	8001a70 <__aeabi_dsub+0x308>
 8001960:	0002      	movs	r2, r0
 8001962:	e736      	b.n	80017d2 <__aeabi_dsub+0x6a>
 8001964:	2201      	movs	r2, #1
 8001966:	4056      	eors	r6, r2
 8001968:	46b3      	mov	fp, r6
 800196a:	42b5      	cmp	r5, r6
 800196c:	d000      	beq.n	8001970 <__aeabi_dsub+0x208>
 800196e:	e721      	b.n	80017b4 <__aeabi_dsub+0x4c>
 8001970:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <__aeabi_dsub+0x360>)
 8001972:	4442      	add	r2, r8
 8001974:	2a00      	cmp	r2, #0
 8001976:	d100      	bne.n	800197a <__aeabi_dsub+0x212>
 8001978:	e0b5      	b.n	8001ae6 <__aeabi_dsub+0x37e>
 800197a:	4642      	mov	r2, r8
 800197c:	4644      	mov	r4, r8
 800197e:	1a82      	subs	r2, r0, r2
 8001980:	2c00      	cmp	r4, #0
 8001982:	d100      	bne.n	8001986 <__aeabi_dsub+0x21e>
 8001984:	e138      	b.n	8001bf8 <__aeabi_dsub+0x490>
 8001986:	4e4e      	ldr	r6, [pc, #312]	; (8001ac0 <__aeabi_dsub+0x358>)
 8001988:	42b0      	cmp	r0, r6
 800198a:	d100      	bne.n	800198e <__aeabi_dsub+0x226>
 800198c:	e1de      	b.n	8001d4c <__aeabi_dsub+0x5e4>
 800198e:	2680      	movs	r6, #128	; 0x80
 8001990:	4664      	mov	r4, ip
 8001992:	0436      	lsls	r6, r6, #16
 8001994:	4334      	orrs	r4, r6
 8001996:	46a4      	mov	ip, r4
 8001998:	2a38      	cmp	r2, #56	; 0x38
 800199a:	dd00      	ble.n	800199e <__aeabi_dsub+0x236>
 800199c:	e196      	b.n	8001ccc <__aeabi_dsub+0x564>
 800199e:	2a1f      	cmp	r2, #31
 80019a0:	dd00      	ble.n	80019a4 <__aeabi_dsub+0x23c>
 80019a2:	e224      	b.n	8001dee <__aeabi_dsub+0x686>
 80019a4:	2620      	movs	r6, #32
 80019a6:	1ab4      	subs	r4, r6, r2
 80019a8:	46a2      	mov	sl, r4
 80019aa:	4664      	mov	r4, ip
 80019ac:	4656      	mov	r6, sl
 80019ae:	40b4      	lsls	r4, r6
 80019b0:	46a1      	mov	r9, r4
 80019b2:	001c      	movs	r4, r3
 80019b4:	464e      	mov	r6, r9
 80019b6:	40d4      	lsrs	r4, r2
 80019b8:	4326      	orrs	r6, r4
 80019ba:	0034      	movs	r4, r6
 80019bc:	4656      	mov	r6, sl
 80019be:	40b3      	lsls	r3, r6
 80019c0:	1e5e      	subs	r6, r3, #1
 80019c2:	41b3      	sbcs	r3, r6
 80019c4:	431c      	orrs	r4, r3
 80019c6:	4663      	mov	r3, ip
 80019c8:	40d3      	lsrs	r3, r2
 80019ca:	18c9      	adds	r1, r1, r3
 80019cc:	19e4      	adds	r4, r4, r7
 80019ce:	42bc      	cmp	r4, r7
 80019d0:	41bf      	sbcs	r7, r7
 80019d2:	427f      	negs	r7, r7
 80019d4:	46b9      	mov	r9, r7
 80019d6:	4680      	mov	r8, r0
 80019d8:	4489      	add	r9, r1
 80019da:	e0d8      	b.n	8001b8e <__aeabi_dsub+0x426>
 80019dc:	4640      	mov	r0, r8
 80019de:	4c3b      	ldr	r4, [pc, #236]	; (8001acc <__aeabi_dsub+0x364>)
 80019e0:	3001      	adds	r0, #1
 80019e2:	4220      	tst	r0, r4
 80019e4:	d000      	beq.n	80019e8 <__aeabi_dsub+0x280>
 80019e6:	e0b4      	b.n	8001b52 <__aeabi_dsub+0x3ea>
 80019e8:	4640      	mov	r0, r8
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d000      	beq.n	80019f0 <__aeabi_dsub+0x288>
 80019ee:	e144      	b.n	8001c7a <__aeabi_dsub+0x512>
 80019f0:	4660      	mov	r0, ip
 80019f2:	4318      	orrs	r0, r3
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dsub+0x290>
 80019f6:	e190      	b.n	8001d1a <__aeabi_dsub+0x5b2>
 80019f8:	0008      	movs	r0, r1
 80019fa:	4338      	orrs	r0, r7
 80019fc:	d000      	beq.n	8001a00 <__aeabi_dsub+0x298>
 80019fe:	e1aa      	b.n	8001d56 <__aeabi_dsub+0x5ee>
 8001a00:	4661      	mov	r1, ip
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	0749      	lsls	r1, r1, #29
 8001a06:	430b      	orrs	r3, r1
 8001a08:	4661      	mov	r1, ip
 8001a0a:	08cc      	lsrs	r4, r1, #3
 8001a0c:	e027      	b.n	8001a5e <__aeabi_dsub+0x2f6>
 8001a0e:	0008      	movs	r0, r1
 8001a10:	4338      	orrs	r0, r7
 8001a12:	d061      	beq.n	8001ad8 <__aeabi_dsub+0x370>
 8001a14:	1e50      	subs	r0, r2, #1
 8001a16:	2a01      	cmp	r2, #1
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x2b4>
 8001a1a:	e139      	b.n	8001c90 <__aeabi_dsub+0x528>
 8001a1c:	42a2      	cmp	r2, r4
 8001a1e:	d027      	beq.n	8001a70 <__aeabi_dsub+0x308>
 8001a20:	0002      	movs	r2, r0
 8001a22:	e75d      	b.n	80018e0 <__aeabi_dsub+0x178>
 8001a24:	0002      	movs	r2, r0
 8001a26:	391f      	subs	r1, #31
 8001a28:	40ca      	lsrs	r2, r1
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d003      	beq.n	8001a38 <__aeabi_dsub+0x2d0>
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4098      	lsls	r0, r3
 8001a36:	4304      	orrs	r4, r0
 8001a38:	1e63      	subs	r3, r4, #1
 8001a3a:	419c      	sbcs	r4, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	4699      	mov	r9, r3
 8001a40:	4698      	mov	r8, r3
 8001a42:	430c      	orrs	r4, r1
 8001a44:	0763      	lsls	r3, r4, #29
 8001a46:	d000      	beq.n	8001a4a <__aeabi_dsub+0x2e2>
 8001a48:	e712      	b.n	8001870 <__aeabi_dsub+0x108>
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	08e4      	lsrs	r4, r4, #3
 8001a50:	075b      	lsls	r3, r3, #29
 8001a52:	4323      	orrs	r3, r4
 8001a54:	08d4      	lsrs	r4, r2, #3
 8001a56:	4642      	mov	r2, r8
 8001a58:	4919      	ldr	r1, [pc, #100]	; (8001ac0 <__aeabi_dsub+0x358>)
 8001a5a:	428a      	cmp	r2, r1
 8001a5c:	d00e      	beq.n	8001a7c <__aeabi_dsub+0x314>
 8001a5e:	0324      	lsls	r4, r4, #12
 8001a60:	0552      	lsls	r2, r2, #21
 8001a62:	0b24      	lsrs	r4, r4, #12
 8001a64:	0d52      	lsrs	r2, r2, #21
 8001a66:	e722      	b.n	80018ae <__aeabi_dsub+0x146>
 8001a68:	000a      	movs	r2, r1
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e71e      	b.n	80018ae <__aeabi_dsub+0x146>
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	4662      	mov	r2, ip
 8001a74:	0752      	lsls	r2, r2, #29
 8001a76:	4313      	orrs	r3, r2
 8001a78:	4662      	mov	r2, ip
 8001a7a:	08d4      	lsrs	r4, r2, #3
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	4322      	orrs	r2, r4
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x31c>
 8001a82:	e1fc      	b.n	8001e7e <__aeabi_dsub+0x716>
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	0312      	lsls	r2, r2, #12
 8001a88:	4314      	orrs	r4, r2
 8001a8a:	0324      	lsls	r4, r4, #12
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <__aeabi_dsub+0x358>)
 8001a8e:	0b24      	lsrs	r4, r4, #12
 8001a90:	e70d      	b.n	80018ae <__aeabi_dsub+0x146>
 8001a92:	0020      	movs	r0, r4
 8001a94:	f000 fb4c 	bl	8002130 <__clzsi2>
 8001a98:	0001      	movs	r1, r0
 8001a9a:	3118      	adds	r1, #24
 8001a9c:	291f      	cmp	r1, #31
 8001a9e:	dc00      	bgt.n	8001aa2 <__aeabi_dsub+0x33a>
 8001aa0:	e6c4      	b.n	800182c <__aeabi_dsub+0xc4>
 8001aa2:	3808      	subs	r0, #8
 8001aa4:	4084      	lsls	r4, r0
 8001aa6:	4643      	mov	r3, r8
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	2400      	movs	r4, #0
 8001aac:	4588      	cmp	r8, r1
 8001aae:	dc00      	bgt.n	8001ab2 <__aeabi_dsub+0x34a>
 8001ab0:	e6c8      	b.n	8001844 <__aeabi_dsub+0xdc>
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__aeabi_dsub+0x35c>)
 8001ab4:	1a5b      	subs	r3, r3, r1
 8001ab6:	4010      	ands	r0, r2
 8001ab8:	4698      	mov	r8, r3
 8001aba:	4681      	mov	r9, r0
 8001abc:	e6d6      	b.n	800186c <__aeabi_dsub+0x104>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	000007ff 	.word	0x000007ff
 8001ac4:	ff7fffff 	.word	0xff7fffff
 8001ac8:	fffff801 	.word	0xfffff801
 8001acc:	000007fe 	.word	0x000007fe
 8001ad0:	430f      	orrs	r7, r1
 8001ad2:	1e7a      	subs	r2, r7, #1
 8001ad4:	4197      	sbcs	r7, r2
 8001ad6:	e691      	b.n	80017fc <__aeabi_dsub+0x94>
 8001ad8:	4661      	mov	r1, ip
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	0749      	lsls	r1, r1, #29
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	4661      	mov	r1, ip
 8001ae2:	08cc      	lsrs	r4, r1, #3
 8001ae4:	e7b8      	b.n	8001a58 <__aeabi_dsub+0x2f0>
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	4cd3      	ldr	r4, [pc, #844]	; (8001e38 <__aeabi_dsub+0x6d0>)
 8001aea:	3001      	adds	r0, #1
 8001aec:	4220      	tst	r0, r4
 8001aee:	d000      	beq.n	8001af2 <__aeabi_dsub+0x38a>
 8001af0:	e0a2      	b.n	8001c38 <__aeabi_dsub+0x4d0>
 8001af2:	4640      	mov	r0, r8
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x392>
 8001af8:	e101      	b.n	8001cfe <__aeabi_dsub+0x596>
 8001afa:	4660      	mov	r0, ip
 8001afc:	4318      	orrs	r0, r3
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x39a>
 8001b00:	e15e      	b.n	8001dc0 <__aeabi_dsub+0x658>
 8001b02:	0008      	movs	r0, r1
 8001b04:	4338      	orrs	r0, r7
 8001b06:	d000      	beq.n	8001b0a <__aeabi_dsub+0x3a2>
 8001b08:	e15f      	b.n	8001dca <__aeabi_dsub+0x662>
 8001b0a:	4661      	mov	r1, ip
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	0749      	lsls	r1, r1, #29
 8001b10:	430b      	orrs	r3, r1
 8001b12:	4661      	mov	r1, ip
 8001b14:	08cc      	lsrs	r4, r1, #3
 8001b16:	e7a2      	b.n	8001a5e <__aeabi_dsub+0x2f6>
 8001b18:	4dc8      	ldr	r5, [pc, #800]	; (8001e3c <__aeabi_dsub+0x6d4>)
 8001b1a:	42a8      	cmp	r0, r5
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x3b8>
 8001b1e:	e0cf      	b.n	8001cc0 <__aeabi_dsub+0x558>
 8001b20:	2580      	movs	r5, #128	; 0x80
 8001b22:	4664      	mov	r4, ip
 8001b24:	042d      	lsls	r5, r5, #16
 8001b26:	432c      	orrs	r4, r5
 8001b28:	46a4      	mov	ip, r4
 8001b2a:	2a38      	cmp	r2, #56	; 0x38
 8001b2c:	dc56      	bgt.n	8001bdc <__aeabi_dsub+0x474>
 8001b2e:	2a1f      	cmp	r2, #31
 8001b30:	dd00      	ble.n	8001b34 <__aeabi_dsub+0x3cc>
 8001b32:	e0d1      	b.n	8001cd8 <__aeabi_dsub+0x570>
 8001b34:	2520      	movs	r5, #32
 8001b36:	001e      	movs	r6, r3
 8001b38:	1aad      	subs	r5, r5, r2
 8001b3a:	4664      	mov	r4, ip
 8001b3c:	40ab      	lsls	r3, r5
 8001b3e:	40ac      	lsls	r4, r5
 8001b40:	40d6      	lsrs	r6, r2
 8001b42:	1e5d      	subs	r5, r3, #1
 8001b44:	41ab      	sbcs	r3, r5
 8001b46:	4334      	orrs	r4, r6
 8001b48:	4323      	orrs	r3, r4
 8001b4a:	4664      	mov	r4, ip
 8001b4c:	40d4      	lsrs	r4, r2
 8001b4e:	1b09      	subs	r1, r1, r4
 8001b50:	e049      	b.n	8001be6 <__aeabi_dsub+0x47e>
 8001b52:	4660      	mov	r0, ip
 8001b54:	1bdc      	subs	r4, r3, r7
 8001b56:	1a46      	subs	r6, r0, r1
 8001b58:	42a3      	cmp	r3, r4
 8001b5a:	4180      	sbcs	r0, r0
 8001b5c:	4240      	negs	r0, r0
 8001b5e:	4681      	mov	r9, r0
 8001b60:	0030      	movs	r0, r6
 8001b62:	464e      	mov	r6, r9
 8001b64:	1b80      	subs	r0, r0, r6
 8001b66:	4681      	mov	r9, r0
 8001b68:	0200      	lsls	r0, r0, #8
 8001b6a:	d476      	bmi.n	8001c5a <__aeabi_dsub+0x4f2>
 8001b6c:	464b      	mov	r3, r9
 8001b6e:	4323      	orrs	r3, r4
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x40c>
 8001b72:	e652      	b.n	800181a <__aeabi_dsub+0xb2>
 8001b74:	2400      	movs	r4, #0
 8001b76:	2500      	movs	r5, #0
 8001b78:	e771      	b.n	8001a5e <__aeabi_dsub+0x2f6>
 8001b7a:	4339      	orrs	r1, r7
 8001b7c:	000c      	movs	r4, r1
 8001b7e:	1e62      	subs	r2, r4, #1
 8001b80:	4194      	sbcs	r4, r2
 8001b82:	18e4      	adds	r4, r4, r3
 8001b84:	429c      	cmp	r4, r3
 8001b86:	419b      	sbcs	r3, r3
 8001b88:	425b      	negs	r3, r3
 8001b8a:	4463      	add	r3, ip
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	464b      	mov	r3, r9
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	d400      	bmi.n	8001b96 <__aeabi_dsub+0x42e>
 8001b94:	e756      	b.n	8001a44 <__aeabi_dsub+0x2dc>
 8001b96:	2301      	movs	r3, #1
 8001b98:	469c      	mov	ip, r3
 8001b9a:	4ba8      	ldr	r3, [pc, #672]	; (8001e3c <__aeabi_dsub+0x6d4>)
 8001b9c:	44e0      	add	r8, ip
 8001b9e:	4598      	cmp	r8, r3
 8001ba0:	d038      	beq.n	8001c14 <__aeabi_dsub+0x4ac>
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	48a6      	ldr	r0, [pc, #664]	; (8001e40 <__aeabi_dsub+0x6d8>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4003      	ands	r3, r0
 8001baa:	0018      	movs	r0, r3
 8001bac:	0863      	lsrs	r3, r4, #1
 8001bae:	4014      	ands	r4, r2
 8001bb0:	431c      	orrs	r4, r3
 8001bb2:	07c3      	lsls	r3, r0, #31
 8001bb4:	431c      	orrs	r4, r3
 8001bb6:	0843      	lsrs	r3, r0, #1
 8001bb8:	4699      	mov	r9, r3
 8001bba:	e657      	b.n	800186c <__aeabi_dsub+0x104>
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	000e      	movs	r6, r1
 8001bc0:	3820      	subs	r0, #32
 8001bc2:	40c6      	lsrs	r6, r0
 8001bc4:	2a20      	cmp	r2, #32
 8001bc6:	d004      	beq.n	8001bd2 <__aeabi_dsub+0x46a>
 8001bc8:	2040      	movs	r0, #64	; 0x40
 8001bca:	1a82      	subs	r2, r0, r2
 8001bcc:	4091      	lsls	r1, r2
 8001bce:	430f      	orrs	r7, r1
 8001bd0:	46b9      	mov	r9, r7
 8001bd2:	464f      	mov	r7, r9
 8001bd4:	1e7a      	subs	r2, r7, #1
 8001bd6:	4197      	sbcs	r7, r2
 8001bd8:	4337      	orrs	r7, r6
 8001bda:	e60f      	b.n	80017fc <__aeabi_dsub+0x94>
 8001bdc:	4662      	mov	r2, ip
 8001bde:	431a      	orrs	r2, r3
 8001be0:	0013      	movs	r3, r2
 8001be2:	1e5a      	subs	r2, r3, #1
 8001be4:	4193      	sbcs	r3, r2
 8001be6:	1afc      	subs	r4, r7, r3
 8001be8:	42a7      	cmp	r7, r4
 8001bea:	41bf      	sbcs	r7, r7
 8001bec:	427f      	negs	r7, r7
 8001bee:	1bcb      	subs	r3, r1, r7
 8001bf0:	4699      	mov	r9, r3
 8001bf2:	465d      	mov	r5, fp
 8001bf4:	4680      	mov	r8, r0
 8001bf6:	e608      	b.n	800180a <__aeabi_dsub+0xa2>
 8001bf8:	4666      	mov	r6, ip
 8001bfa:	431e      	orrs	r6, r3
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x498>
 8001bfe:	e0be      	b.n	8001d7e <__aeabi_dsub+0x616>
 8001c00:	1e56      	subs	r6, r2, #1
 8001c02:	2a01      	cmp	r2, #1
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x4a0>
 8001c06:	e109      	b.n	8001e1c <__aeabi_dsub+0x6b4>
 8001c08:	4c8c      	ldr	r4, [pc, #560]	; (8001e3c <__aeabi_dsub+0x6d4>)
 8001c0a:	42a2      	cmp	r2, r4
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x4a8>
 8001c0e:	e119      	b.n	8001e44 <__aeabi_dsub+0x6dc>
 8001c10:	0032      	movs	r2, r6
 8001c12:	e6c1      	b.n	8001998 <__aeabi_dsub+0x230>
 8001c14:	4642      	mov	r2, r8
 8001c16:	2400      	movs	r4, #0
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e648      	b.n	80018ae <__aeabi_dsub+0x146>
 8001c1c:	2020      	movs	r0, #32
 8001c1e:	000c      	movs	r4, r1
 8001c20:	1a80      	subs	r0, r0, r2
 8001c22:	003e      	movs	r6, r7
 8001c24:	4087      	lsls	r7, r0
 8001c26:	4084      	lsls	r4, r0
 8001c28:	40d6      	lsrs	r6, r2
 8001c2a:	1e78      	subs	r0, r7, #1
 8001c2c:	4187      	sbcs	r7, r0
 8001c2e:	40d1      	lsrs	r1, r2
 8001c30:	4334      	orrs	r4, r6
 8001c32:	433c      	orrs	r4, r7
 8001c34:	448c      	add	ip, r1
 8001c36:	e7a4      	b.n	8001b82 <__aeabi_dsub+0x41a>
 8001c38:	4a80      	ldr	r2, [pc, #512]	; (8001e3c <__aeabi_dsub+0x6d4>)
 8001c3a:	4290      	cmp	r0, r2
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x4d8>
 8001c3e:	e0e9      	b.n	8001e14 <__aeabi_dsub+0x6ac>
 8001c40:	19df      	adds	r7, r3, r7
 8001c42:	429f      	cmp	r7, r3
 8001c44:	419b      	sbcs	r3, r3
 8001c46:	4461      	add	r1, ip
 8001c48:	425b      	negs	r3, r3
 8001c4a:	18c9      	adds	r1, r1, r3
 8001c4c:	07cc      	lsls	r4, r1, #31
 8001c4e:	087f      	lsrs	r7, r7, #1
 8001c50:	084b      	lsrs	r3, r1, #1
 8001c52:	4699      	mov	r9, r3
 8001c54:	4680      	mov	r8, r0
 8001c56:	433c      	orrs	r4, r7
 8001c58:	e6f4      	b.n	8001a44 <__aeabi_dsub+0x2dc>
 8001c5a:	1afc      	subs	r4, r7, r3
 8001c5c:	42a7      	cmp	r7, r4
 8001c5e:	41bf      	sbcs	r7, r7
 8001c60:	4663      	mov	r3, ip
 8001c62:	427f      	negs	r7, r7
 8001c64:	1ac9      	subs	r1, r1, r3
 8001c66:	1bcb      	subs	r3, r1, r7
 8001c68:	4699      	mov	r9, r3
 8001c6a:	465d      	mov	r5, fp
 8001c6c:	e5d5      	b.n	800181a <__aeabi_dsub+0xb2>
 8001c6e:	08ff      	lsrs	r7, r7, #3
 8001c70:	074b      	lsls	r3, r1, #29
 8001c72:	465d      	mov	r5, fp
 8001c74:	433b      	orrs	r3, r7
 8001c76:	08cc      	lsrs	r4, r1, #3
 8001c78:	e6ee      	b.n	8001a58 <__aeabi_dsub+0x2f0>
 8001c7a:	4662      	mov	r2, ip
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	d000      	beq.n	8001c82 <__aeabi_dsub+0x51a>
 8001c80:	e082      	b.n	8001d88 <__aeabi_dsub+0x620>
 8001c82:	000b      	movs	r3, r1
 8001c84:	433b      	orrs	r3, r7
 8001c86:	d11b      	bne.n	8001cc0 <__aeabi_dsub+0x558>
 8001c88:	2480      	movs	r4, #128	; 0x80
 8001c8a:	2500      	movs	r5, #0
 8001c8c:	0324      	lsls	r4, r4, #12
 8001c8e:	e6f9      	b.n	8001a84 <__aeabi_dsub+0x31c>
 8001c90:	19dc      	adds	r4, r3, r7
 8001c92:	429c      	cmp	r4, r3
 8001c94:	419b      	sbcs	r3, r3
 8001c96:	4461      	add	r1, ip
 8001c98:	4689      	mov	r9, r1
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	4499      	add	r9, r3
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	d444      	bmi.n	8001d2e <__aeabi_dsub+0x5c6>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	4698      	mov	r8, r3
 8001ca8:	e6cc      	b.n	8001a44 <__aeabi_dsub+0x2dc>
 8001caa:	1bdc      	subs	r4, r3, r7
 8001cac:	4662      	mov	r2, ip
 8001cae:	42a3      	cmp	r3, r4
 8001cb0:	419b      	sbcs	r3, r3
 8001cb2:	1a51      	subs	r1, r2, r1
 8001cb4:	425b      	negs	r3, r3
 8001cb6:	1acb      	subs	r3, r1, r3
 8001cb8:	4699      	mov	r9, r3
 8001cba:	2301      	movs	r3, #1
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	e5a4      	b.n	800180a <__aeabi_dsub+0xa2>
 8001cc0:	08ff      	lsrs	r7, r7, #3
 8001cc2:	074b      	lsls	r3, r1, #29
 8001cc4:	465d      	mov	r5, fp
 8001cc6:	433b      	orrs	r3, r7
 8001cc8:	08cc      	lsrs	r4, r1, #3
 8001cca:	e6d7      	b.n	8001a7c <__aeabi_dsub+0x314>
 8001ccc:	4662      	mov	r2, ip
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	0014      	movs	r4, r2
 8001cd2:	1e63      	subs	r3, r4, #1
 8001cd4:	419c      	sbcs	r4, r3
 8001cd6:	e679      	b.n	80019cc <__aeabi_dsub+0x264>
 8001cd8:	0015      	movs	r5, r2
 8001cda:	4664      	mov	r4, ip
 8001cdc:	3d20      	subs	r5, #32
 8001cde:	40ec      	lsrs	r4, r5
 8001ce0:	46a0      	mov	r8, r4
 8001ce2:	2a20      	cmp	r2, #32
 8001ce4:	d005      	beq.n	8001cf2 <__aeabi_dsub+0x58a>
 8001ce6:	2540      	movs	r5, #64	; 0x40
 8001ce8:	4664      	mov	r4, ip
 8001cea:	1aaa      	subs	r2, r5, r2
 8001cec:	4094      	lsls	r4, r2
 8001cee:	4323      	orrs	r3, r4
 8001cf0:	469a      	mov	sl, r3
 8001cf2:	4654      	mov	r4, sl
 8001cf4:	1e63      	subs	r3, r4, #1
 8001cf6:	419c      	sbcs	r4, r3
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	4323      	orrs	r3, r4
 8001cfc:	e773      	b.n	8001be6 <__aeabi_dsub+0x47e>
 8001cfe:	4662      	mov	r2, ip
 8001d00:	431a      	orrs	r2, r3
 8001d02:	d023      	beq.n	8001d4c <__aeabi_dsub+0x5e4>
 8001d04:	000a      	movs	r2, r1
 8001d06:	433a      	orrs	r2, r7
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dsub+0x5a4>
 8001d0a:	e0a0      	b.n	8001e4e <__aeabi_dsub+0x6e6>
 8001d0c:	4662      	mov	r2, ip
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	0752      	lsls	r2, r2, #29
 8001d12:	4313      	orrs	r3, r2
 8001d14:	4662      	mov	r2, ip
 8001d16:	08d4      	lsrs	r4, r2, #3
 8001d18:	e6b0      	b.n	8001a7c <__aeabi_dsub+0x314>
 8001d1a:	000b      	movs	r3, r1
 8001d1c:	433b      	orrs	r3, r7
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x5ba>
 8001d20:	e728      	b.n	8001b74 <__aeabi_dsub+0x40c>
 8001d22:	08ff      	lsrs	r7, r7, #3
 8001d24:	074b      	lsls	r3, r1, #29
 8001d26:	465d      	mov	r5, fp
 8001d28:	433b      	orrs	r3, r7
 8001d2a:	08cc      	lsrs	r4, r1, #3
 8001d2c:	e697      	b.n	8001a5e <__aeabi_dsub+0x2f6>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	4698      	mov	r8, r3
 8001d32:	e736      	b.n	8001ba2 <__aeabi_dsub+0x43a>
 8001d34:	1afc      	subs	r4, r7, r3
 8001d36:	42a7      	cmp	r7, r4
 8001d38:	41bf      	sbcs	r7, r7
 8001d3a:	4663      	mov	r3, ip
 8001d3c:	427f      	negs	r7, r7
 8001d3e:	1ac9      	subs	r1, r1, r3
 8001d40:	1bcb      	subs	r3, r1, r7
 8001d42:	4699      	mov	r9, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	465d      	mov	r5, fp
 8001d48:	4698      	mov	r8, r3
 8001d4a:	e55e      	b.n	800180a <__aeabi_dsub+0xa2>
 8001d4c:	074b      	lsls	r3, r1, #29
 8001d4e:	08ff      	lsrs	r7, r7, #3
 8001d50:	433b      	orrs	r3, r7
 8001d52:	08cc      	lsrs	r4, r1, #3
 8001d54:	e692      	b.n	8001a7c <__aeabi_dsub+0x314>
 8001d56:	1bdc      	subs	r4, r3, r7
 8001d58:	4660      	mov	r0, ip
 8001d5a:	42a3      	cmp	r3, r4
 8001d5c:	41b6      	sbcs	r6, r6
 8001d5e:	1a40      	subs	r0, r0, r1
 8001d60:	4276      	negs	r6, r6
 8001d62:	1b80      	subs	r0, r0, r6
 8001d64:	4681      	mov	r9, r0
 8001d66:	0200      	lsls	r0, r0, #8
 8001d68:	d560      	bpl.n	8001e2c <__aeabi_dsub+0x6c4>
 8001d6a:	1afc      	subs	r4, r7, r3
 8001d6c:	42a7      	cmp	r7, r4
 8001d6e:	41bf      	sbcs	r7, r7
 8001d70:	4663      	mov	r3, ip
 8001d72:	427f      	negs	r7, r7
 8001d74:	1ac9      	subs	r1, r1, r3
 8001d76:	1bcb      	subs	r3, r1, r7
 8001d78:	4699      	mov	r9, r3
 8001d7a:	465d      	mov	r5, fp
 8001d7c:	e576      	b.n	800186c <__aeabi_dsub+0x104>
 8001d7e:	08ff      	lsrs	r7, r7, #3
 8001d80:	074b      	lsls	r3, r1, #29
 8001d82:	433b      	orrs	r3, r7
 8001d84:	08cc      	lsrs	r4, r1, #3
 8001d86:	e667      	b.n	8001a58 <__aeabi_dsub+0x2f0>
 8001d88:	000a      	movs	r2, r1
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	433a      	orrs	r2, r7
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x62a>
 8001d90:	e66f      	b.n	8001a72 <__aeabi_dsub+0x30a>
 8001d92:	4662      	mov	r2, ip
 8001d94:	0752      	lsls	r2, r2, #29
 8001d96:	4313      	orrs	r3, r2
 8001d98:	4662      	mov	r2, ip
 8001d9a:	08d4      	lsrs	r4, r2, #3
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	0312      	lsls	r2, r2, #12
 8001da0:	4214      	tst	r4, r2
 8001da2:	d007      	beq.n	8001db4 <__aeabi_dsub+0x64c>
 8001da4:	08c8      	lsrs	r0, r1, #3
 8001da6:	4210      	tst	r0, r2
 8001da8:	d104      	bne.n	8001db4 <__aeabi_dsub+0x64c>
 8001daa:	465d      	mov	r5, fp
 8001dac:	0004      	movs	r4, r0
 8001dae:	08fb      	lsrs	r3, r7, #3
 8001db0:	0749      	lsls	r1, r1, #29
 8001db2:	430b      	orrs	r3, r1
 8001db4:	0f5a      	lsrs	r2, r3, #29
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	0752      	lsls	r2, r2, #29
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	e65d      	b.n	8001a7c <__aeabi_dsub+0x314>
 8001dc0:	074b      	lsls	r3, r1, #29
 8001dc2:	08ff      	lsrs	r7, r7, #3
 8001dc4:	433b      	orrs	r3, r7
 8001dc6:	08cc      	lsrs	r4, r1, #3
 8001dc8:	e649      	b.n	8001a5e <__aeabi_dsub+0x2f6>
 8001dca:	19dc      	adds	r4, r3, r7
 8001dcc:	429c      	cmp	r4, r3
 8001dce:	419b      	sbcs	r3, r3
 8001dd0:	4461      	add	r1, ip
 8001dd2:	4689      	mov	r9, r1
 8001dd4:	425b      	negs	r3, r3
 8001dd6:	4499      	add	r9, r3
 8001dd8:	464b      	mov	r3, r9
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	d400      	bmi.n	8001de0 <__aeabi_dsub+0x678>
 8001dde:	e631      	b.n	8001a44 <__aeabi_dsub+0x2dc>
 8001de0:	464a      	mov	r2, r9
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <__aeabi_dsub+0x6d8>)
 8001de4:	401a      	ands	r2, r3
 8001de6:	2301      	movs	r3, #1
 8001de8:	4691      	mov	r9, r2
 8001dea:	4698      	mov	r8, r3
 8001dec:	e62a      	b.n	8001a44 <__aeabi_dsub+0x2dc>
 8001dee:	0016      	movs	r6, r2
 8001df0:	4664      	mov	r4, ip
 8001df2:	3e20      	subs	r6, #32
 8001df4:	40f4      	lsrs	r4, r6
 8001df6:	46a0      	mov	r8, r4
 8001df8:	2a20      	cmp	r2, #32
 8001dfa:	d005      	beq.n	8001e08 <__aeabi_dsub+0x6a0>
 8001dfc:	2640      	movs	r6, #64	; 0x40
 8001dfe:	4664      	mov	r4, ip
 8001e00:	1ab2      	subs	r2, r6, r2
 8001e02:	4094      	lsls	r4, r2
 8001e04:	4323      	orrs	r3, r4
 8001e06:	469a      	mov	sl, r3
 8001e08:	4654      	mov	r4, sl
 8001e0a:	1e63      	subs	r3, r4, #1
 8001e0c:	419c      	sbcs	r4, r3
 8001e0e:	4643      	mov	r3, r8
 8001e10:	431c      	orrs	r4, r3
 8001e12:	e5db      	b.n	80019cc <__aeabi_dsub+0x264>
 8001e14:	0002      	movs	r2, r0
 8001e16:	2400      	movs	r4, #0
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e548      	b.n	80018ae <__aeabi_dsub+0x146>
 8001e1c:	19dc      	adds	r4, r3, r7
 8001e1e:	42bc      	cmp	r4, r7
 8001e20:	41bf      	sbcs	r7, r7
 8001e22:	4461      	add	r1, ip
 8001e24:	4689      	mov	r9, r1
 8001e26:	427f      	negs	r7, r7
 8001e28:	44b9      	add	r9, r7
 8001e2a:	e738      	b.n	8001c9e <__aeabi_dsub+0x536>
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	4323      	orrs	r3, r4
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x6cc>
 8001e32:	e69f      	b.n	8001b74 <__aeabi_dsub+0x40c>
 8001e34:	e606      	b.n	8001a44 <__aeabi_dsub+0x2dc>
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	000007fe 	.word	0x000007fe
 8001e3c:	000007ff 	.word	0x000007ff
 8001e40:	ff7fffff 	.word	0xff7fffff
 8001e44:	08ff      	lsrs	r7, r7, #3
 8001e46:	074b      	lsls	r3, r1, #29
 8001e48:	433b      	orrs	r3, r7
 8001e4a:	08cc      	lsrs	r4, r1, #3
 8001e4c:	e616      	b.n	8001a7c <__aeabi_dsub+0x314>
 8001e4e:	4662      	mov	r2, ip
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	0752      	lsls	r2, r2, #29
 8001e54:	4313      	orrs	r3, r2
 8001e56:	4662      	mov	r2, ip
 8001e58:	08d4      	lsrs	r4, r2, #3
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	0312      	lsls	r2, r2, #12
 8001e5e:	4214      	tst	r4, r2
 8001e60:	d007      	beq.n	8001e72 <__aeabi_dsub+0x70a>
 8001e62:	08c8      	lsrs	r0, r1, #3
 8001e64:	4210      	tst	r0, r2
 8001e66:	d104      	bne.n	8001e72 <__aeabi_dsub+0x70a>
 8001e68:	465d      	mov	r5, fp
 8001e6a:	0004      	movs	r4, r0
 8001e6c:	08fb      	lsrs	r3, r7, #3
 8001e6e:	0749      	lsls	r1, r1, #29
 8001e70:	430b      	orrs	r3, r1
 8001e72:	0f5a      	lsrs	r2, r3, #29
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	0752      	lsls	r2, r2, #29
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	e5fe      	b.n	8001a7c <__aeabi_dsub+0x314>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	4a01      	ldr	r2, [pc, #4]	; (8001e88 <__aeabi_dsub+0x720>)
 8001e82:	001c      	movs	r4, r3
 8001e84:	e513      	b.n	80018ae <__aeabi_dsub+0x146>
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	b530      	push	{r4, r5, lr}
 8001e90:	4c13      	ldr	r4, [pc, #76]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e92:	0053      	lsls	r3, r2, #1
 8001e94:	0309      	lsls	r1, r1, #12
 8001e96:	0005      	movs	r5, r0
 8001e98:	0b09      	lsrs	r1, r1, #12
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	0d5b      	lsrs	r3, r3, #21
 8001e9e:	0fd2      	lsrs	r2, r2, #31
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	dd04      	ble.n	8001eae <__aeabi_d2iz+0x22>
 8001ea4:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea6:	4283      	cmp	r3, r0
 8001ea8:	dd02      	ble.n	8001eb0 <__aeabi_d2iz+0x24>
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eac:	18d0      	adds	r0, r2, r3
 8001eae:	bd30      	pop	{r4, r5, pc}
 8001eb0:	2080      	movs	r0, #128	; 0x80
 8001eb2:	0340      	lsls	r0, r0, #13
 8001eb4:	4301      	orrs	r1, r0
 8001eb6:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb8:	1ac0      	subs	r0, r0, r3
 8001eba:	281f      	cmp	r0, #31
 8001ebc:	dd08      	ble.n	8001ed0 <__aeabi_d2iz+0x44>
 8001ebe:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001ec0:	1ac3      	subs	r3, r0, r3
 8001ec2:	40d9      	lsrs	r1, r3
 8001ec4:	000b      	movs	r3, r1
 8001ec6:	4258      	negs	r0, r3
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d1f0      	bne.n	8001eae <__aeabi_d2iz+0x22>
 8001ecc:	0018      	movs	r0, r3
 8001ece:	e7ee      	b.n	8001eae <__aeabi_d2iz+0x22>
 8001ed0:	4c08      	ldr	r4, [pc, #32]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed2:	40c5      	lsrs	r5, r0
 8001ed4:	46a4      	mov	ip, r4
 8001ed6:	4463      	add	r3, ip
 8001ed8:	4099      	lsls	r1, r3
 8001eda:	000b      	movs	r3, r1
 8001edc:	432b      	orrs	r3, r5
 8001ede:	e7f2      	b.n	8001ec6 <__aeabi_d2iz+0x3a>
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	7fffffff 	.word	0x7fffffff
 8001eec:	00000433 	.word	0x00000433
 8001ef0:	00000413 	.word	0x00000413
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d016      	beq.n	8001f2c <__aeabi_i2d+0x34>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f912 	bl	8002130 <__clzsi2>
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <__aeabi_i2d+0x5c>)
 8001f0e:	1a12      	subs	r2, r2, r0
 8001f10:	280a      	cmp	r0, #10
 8001f12:	dc16      	bgt.n	8001f42 <__aeabi_i2d+0x4a>
 8001f14:	0003      	movs	r3, r0
 8001f16:	002e      	movs	r6, r5
 8001f18:	3315      	adds	r3, #21
 8001f1a:	409e      	lsls	r6, r3
 8001f1c:	230b      	movs	r3, #11
 8001f1e:	1a18      	subs	r0, r3, r0
 8001f20:	40c5      	lsrs	r5, r0
 8001f22:	0552      	lsls	r2, r2, #21
 8001f24:	032d      	lsls	r5, r5, #12
 8001f26:	0b2d      	lsrs	r5, r5, #12
 8001f28:	0d53      	lsrs	r3, r2, #21
 8001f2a:	e003      	b.n	8001f34 <__aeabi_i2d+0x3c>
 8001f2c:	2400      	movs	r4, #0
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2500      	movs	r5, #0
 8001f32:	2600      	movs	r6, #0
 8001f34:	051b      	lsls	r3, r3, #20
 8001f36:	432b      	orrs	r3, r5
 8001f38:	07e4      	lsls	r4, r4, #31
 8001f3a:	4323      	orrs	r3, r4
 8001f3c:	0030      	movs	r0, r6
 8001f3e:	0019      	movs	r1, r3
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	380b      	subs	r0, #11
 8001f44:	4085      	lsls	r5, r0
 8001f46:	0552      	lsls	r2, r2, #21
 8001f48:	032d      	lsls	r5, r5, #12
 8001f4a:	2600      	movs	r6, #0
 8001f4c:	0b2d      	lsrs	r5, r5, #12
 8001f4e:	0d53      	lsrs	r3, r2, #21
 8001f50:	e7f0      	b.n	8001f34 <__aeabi_i2d+0x3c>
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	0000041e 	.word	0x0000041e

08001f58 <__aeabi_ui2d>:
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	1e04      	subs	r4, r0, #0
 8001f5c:	d010      	beq.n	8001f80 <__aeabi_ui2d+0x28>
 8001f5e:	f000 f8e7 	bl	8002130 <__clzsi2>
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <__aeabi_ui2d+0x48>)
 8001f64:	1a1b      	subs	r3, r3, r0
 8001f66:	280a      	cmp	r0, #10
 8001f68:	dc11      	bgt.n	8001f8e <__aeabi_ui2d+0x36>
 8001f6a:	220b      	movs	r2, #11
 8001f6c:	0021      	movs	r1, r4
 8001f6e:	1a12      	subs	r2, r2, r0
 8001f70:	40d1      	lsrs	r1, r2
 8001f72:	3015      	adds	r0, #21
 8001f74:	030a      	lsls	r2, r1, #12
 8001f76:	055b      	lsls	r3, r3, #21
 8001f78:	4084      	lsls	r4, r0
 8001f7a:	0b12      	lsrs	r2, r2, #12
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	e001      	b.n	8001f84 <__aeabi_ui2d+0x2c>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2200      	movs	r2, #0
 8001f84:	051b      	lsls	r3, r3, #20
 8001f86:	4313      	orrs	r3, r2
 8001f88:	0020      	movs	r0, r4
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	bd10      	pop	{r4, pc}
 8001f8e:	0022      	movs	r2, r4
 8001f90:	380b      	subs	r0, #11
 8001f92:	4082      	lsls	r2, r0
 8001f94:	055b      	lsls	r3, r3, #21
 8001f96:	0312      	lsls	r2, r2, #12
 8001f98:	2400      	movs	r4, #0
 8001f9a:	0b12      	lsrs	r2, r2, #12
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	e7f1      	b.n	8001f84 <__aeabi_ui2d+0x2c>
 8001fa0:	0000041e 	.word	0x0000041e

08001fa4 <__aeabi_d2f>:
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	004b      	lsls	r3, r1, #1
 8001fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001faa:	0d5b      	lsrs	r3, r3, #21
 8001fac:	030c      	lsls	r4, r1, #12
 8001fae:	4e3d      	ldr	r6, [pc, #244]	; (80020a4 <__aeabi_d2f+0x100>)
 8001fb0:	0a64      	lsrs	r4, r4, #9
 8001fb2:	0f40      	lsrs	r0, r0, #29
 8001fb4:	1c5f      	adds	r7, r3, #1
 8001fb6:	0fc9      	lsrs	r1, r1, #31
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	00d5      	lsls	r5, r2, #3
 8001fbc:	4237      	tst	r7, r6
 8001fbe:	d00a      	beq.n	8001fd6 <__aeabi_d2f+0x32>
 8001fc0:	4839      	ldr	r0, [pc, #228]	; (80020a8 <__aeabi_d2f+0x104>)
 8001fc2:	181e      	adds	r6, r3, r0
 8001fc4:	2efe      	cmp	r6, #254	; 0xfe
 8001fc6:	dd16      	ble.n	8001ff6 <__aeabi_d2f+0x52>
 8001fc8:	20ff      	movs	r0, #255	; 0xff
 8001fca:	2400      	movs	r4, #0
 8001fcc:	05c0      	lsls	r0, r0, #23
 8001fce:	4320      	orrs	r0, r4
 8001fd0:	07c9      	lsls	r1, r1, #31
 8001fd2:	4308      	orrs	r0, r1
 8001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <__aeabi_d2f+0x44>
 8001fda:	432c      	orrs	r4, r5
 8001fdc:	d026      	beq.n	800202c <__aeabi_d2f+0x88>
 8001fde:	2205      	movs	r2, #5
 8001fe0:	0192      	lsls	r2, r2, #6
 8001fe2:	0a54      	lsrs	r4, r2, #9
 8001fe4:	b2d8      	uxtb	r0, r3
 8001fe6:	e7f1      	b.n	8001fcc <__aeabi_d2f+0x28>
 8001fe8:	4325      	orrs	r5, r4
 8001fea:	d0ed      	beq.n	8001fc8 <__aeabi_d2f+0x24>
 8001fec:	2080      	movs	r0, #128	; 0x80
 8001fee:	03c0      	lsls	r0, r0, #15
 8001ff0:	4304      	orrs	r4, r0
 8001ff2:	20ff      	movs	r0, #255	; 0xff
 8001ff4:	e7ea      	b.n	8001fcc <__aeabi_d2f+0x28>
 8001ff6:	2e00      	cmp	r6, #0
 8001ff8:	dd1b      	ble.n	8002032 <__aeabi_d2f+0x8e>
 8001ffa:	0192      	lsls	r2, r2, #6
 8001ffc:	1e53      	subs	r3, r2, #1
 8001ffe:	419a      	sbcs	r2, r3
 8002000:	00e4      	lsls	r4, r4, #3
 8002002:	0f6d      	lsrs	r5, r5, #29
 8002004:	4322      	orrs	r2, r4
 8002006:	432a      	orrs	r2, r5
 8002008:	0753      	lsls	r3, r2, #29
 800200a:	d048      	beq.n	800209e <__aeabi_d2f+0xfa>
 800200c:	230f      	movs	r3, #15
 800200e:	4013      	ands	r3, r2
 8002010:	2b04      	cmp	r3, #4
 8002012:	d000      	beq.n	8002016 <__aeabi_d2f+0x72>
 8002014:	3204      	adds	r2, #4
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	04db      	lsls	r3, r3, #19
 800201a:	4013      	ands	r3, r2
 800201c:	d03f      	beq.n	800209e <__aeabi_d2f+0xfa>
 800201e:	1c70      	adds	r0, r6, #1
 8002020:	2efe      	cmp	r6, #254	; 0xfe
 8002022:	d0d1      	beq.n	8001fc8 <__aeabi_d2f+0x24>
 8002024:	0192      	lsls	r2, r2, #6
 8002026:	0a54      	lsrs	r4, r2, #9
 8002028:	b2c0      	uxtb	r0, r0
 800202a:	e7cf      	b.n	8001fcc <__aeabi_d2f+0x28>
 800202c:	2000      	movs	r0, #0
 800202e:	2400      	movs	r4, #0
 8002030:	e7cc      	b.n	8001fcc <__aeabi_d2f+0x28>
 8002032:	0032      	movs	r2, r6
 8002034:	3217      	adds	r2, #23
 8002036:	db22      	blt.n	800207e <__aeabi_d2f+0xda>
 8002038:	2080      	movs	r0, #128	; 0x80
 800203a:	0400      	lsls	r0, r0, #16
 800203c:	4320      	orrs	r0, r4
 800203e:	241e      	movs	r4, #30
 8002040:	1ba4      	subs	r4, r4, r6
 8002042:	2c1f      	cmp	r4, #31
 8002044:	dd1d      	ble.n	8002082 <__aeabi_d2f+0xde>
 8002046:	2202      	movs	r2, #2
 8002048:	4252      	negs	r2, r2
 800204a:	1b96      	subs	r6, r2, r6
 800204c:	0002      	movs	r2, r0
 800204e:	40f2      	lsrs	r2, r6
 8002050:	0016      	movs	r6, r2
 8002052:	2c20      	cmp	r4, #32
 8002054:	d004      	beq.n	8002060 <__aeabi_d2f+0xbc>
 8002056:	4a15      	ldr	r2, [pc, #84]	; (80020ac <__aeabi_d2f+0x108>)
 8002058:	4694      	mov	ip, r2
 800205a:	4463      	add	r3, ip
 800205c:	4098      	lsls	r0, r3
 800205e:	4305      	orrs	r5, r0
 8002060:	002a      	movs	r2, r5
 8002062:	1e53      	subs	r3, r2, #1
 8002064:	419a      	sbcs	r2, r3
 8002066:	4332      	orrs	r2, r6
 8002068:	2600      	movs	r6, #0
 800206a:	0753      	lsls	r3, r2, #29
 800206c:	d1ce      	bne.n	800200c <__aeabi_d2f+0x68>
 800206e:	2480      	movs	r4, #128	; 0x80
 8002070:	0013      	movs	r3, r2
 8002072:	04e4      	lsls	r4, r4, #19
 8002074:	2001      	movs	r0, #1
 8002076:	4023      	ands	r3, r4
 8002078:	4222      	tst	r2, r4
 800207a:	d1d3      	bne.n	8002024 <__aeabi_d2f+0x80>
 800207c:	e7b0      	b.n	8001fe0 <__aeabi_d2f+0x3c>
 800207e:	2300      	movs	r3, #0
 8002080:	e7ad      	b.n	8001fde <__aeabi_d2f+0x3a>
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <__aeabi_d2f+0x10c>)
 8002084:	4694      	mov	ip, r2
 8002086:	002a      	movs	r2, r5
 8002088:	40e2      	lsrs	r2, r4
 800208a:	0014      	movs	r4, r2
 800208c:	002a      	movs	r2, r5
 800208e:	4463      	add	r3, ip
 8002090:	409a      	lsls	r2, r3
 8002092:	4098      	lsls	r0, r3
 8002094:	1e55      	subs	r5, r2, #1
 8002096:	41aa      	sbcs	r2, r5
 8002098:	4302      	orrs	r2, r0
 800209a:	4322      	orrs	r2, r4
 800209c:	e7e4      	b.n	8002068 <__aeabi_d2f+0xc4>
 800209e:	0033      	movs	r3, r6
 80020a0:	e79e      	b.n	8001fe0 <__aeabi_d2f+0x3c>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	000007fe 	.word	0x000007fe
 80020a8:	fffffc80 	.word	0xfffffc80
 80020ac:	fffffca2 	.word	0xfffffca2
 80020b0:	fffffc82 	.word	0xfffffc82

080020b4 <__aeabi_cdrcmple>:
 80020b4:	4684      	mov	ip, r0
 80020b6:	0010      	movs	r0, r2
 80020b8:	4662      	mov	r2, ip
 80020ba:	468c      	mov	ip, r1
 80020bc:	0019      	movs	r1, r3
 80020be:	4663      	mov	r3, ip
 80020c0:	e000      	b.n	80020c4 <__aeabi_cdcmpeq>
 80020c2:	46c0      	nop			; (mov r8, r8)

080020c4 <__aeabi_cdcmpeq>:
 80020c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80020c6:	f000 f905 	bl	80022d4 <__ledf2>
 80020ca:	2800      	cmp	r0, #0
 80020cc:	d401      	bmi.n	80020d2 <__aeabi_cdcmpeq+0xe>
 80020ce:	2100      	movs	r1, #0
 80020d0:	42c8      	cmn	r0, r1
 80020d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080020d4 <__aeabi_dcmpeq>:
 80020d4:	b510      	push	{r4, lr}
 80020d6:	f000 f855 	bl	8002184 <__eqdf2>
 80020da:	4240      	negs	r0, r0
 80020dc:	3001      	adds	r0, #1
 80020de:	bd10      	pop	{r4, pc}

080020e0 <__aeabi_dcmplt>:
 80020e0:	b510      	push	{r4, lr}
 80020e2:	f000 f8f7 	bl	80022d4 <__ledf2>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	db01      	blt.n	80020ee <__aeabi_dcmplt+0xe>
 80020ea:	2000      	movs	r0, #0
 80020ec:	bd10      	pop	{r4, pc}
 80020ee:	2001      	movs	r0, #1
 80020f0:	bd10      	pop	{r4, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)

080020f4 <__aeabi_dcmple>:
 80020f4:	b510      	push	{r4, lr}
 80020f6:	f000 f8ed 	bl	80022d4 <__ledf2>
 80020fa:	2800      	cmp	r0, #0
 80020fc:	dd01      	ble.n	8002102 <__aeabi_dcmple+0xe>
 80020fe:	2000      	movs	r0, #0
 8002100:	bd10      	pop	{r4, pc}
 8002102:	2001      	movs	r0, #1
 8002104:	bd10      	pop	{r4, pc}
 8002106:	46c0      	nop			; (mov r8, r8)

08002108 <__aeabi_dcmpgt>:
 8002108:	b510      	push	{r4, lr}
 800210a:	f000 f87d 	bl	8002208 <__gedf2>
 800210e:	2800      	cmp	r0, #0
 8002110:	dc01      	bgt.n	8002116 <__aeabi_dcmpgt+0xe>
 8002112:	2000      	movs	r0, #0
 8002114:	bd10      	pop	{r4, pc}
 8002116:	2001      	movs	r0, #1
 8002118:	bd10      	pop	{r4, pc}
 800211a:	46c0      	nop			; (mov r8, r8)

0800211c <__aeabi_dcmpge>:
 800211c:	b510      	push	{r4, lr}
 800211e:	f000 f873 	bl	8002208 <__gedf2>
 8002122:	2800      	cmp	r0, #0
 8002124:	da01      	bge.n	800212a <__aeabi_dcmpge+0xe>
 8002126:	2000      	movs	r0, #0
 8002128:	bd10      	pop	{r4, pc}
 800212a:	2001      	movs	r0, #1
 800212c:	bd10      	pop	{r4, pc}
 800212e:	46c0      	nop			; (mov r8, r8)

08002130 <__clzsi2>:
 8002130:	211c      	movs	r1, #28
 8002132:	2301      	movs	r3, #1
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	4298      	cmp	r0, r3
 8002138:	d301      	bcc.n	800213e <__clzsi2+0xe>
 800213a:	0c00      	lsrs	r0, r0, #16
 800213c:	3910      	subs	r1, #16
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	4298      	cmp	r0, r3
 8002142:	d301      	bcc.n	8002148 <__clzsi2+0x18>
 8002144:	0a00      	lsrs	r0, r0, #8
 8002146:	3908      	subs	r1, #8
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	4298      	cmp	r0, r3
 800214c:	d301      	bcc.n	8002152 <__clzsi2+0x22>
 800214e:	0900      	lsrs	r0, r0, #4
 8002150:	3904      	subs	r1, #4
 8002152:	a202      	add	r2, pc, #8	; (adr r2, 800215c <__clzsi2+0x2c>)
 8002154:	5c10      	ldrb	r0, [r2, r0]
 8002156:	1840      	adds	r0, r0, r1
 8002158:	4770      	bx	lr
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	02020304 	.word	0x02020304
 8002160:	01010101 	.word	0x01010101
	...

0800216c <__clzdi2>:
 800216c:	b510      	push	{r4, lr}
 800216e:	2900      	cmp	r1, #0
 8002170:	d103      	bne.n	800217a <__clzdi2+0xe>
 8002172:	f7ff ffdd 	bl	8002130 <__clzsi2>
 8002176:	3020      	adds	r0, #32
 8002178:	e002      	b.n	8002180 <__clzdi2+0x14>
 800217a:	0008      	movs	r0, r1
 800217c:	f7ff ffd8 	bl	8002130 <__clzsi2>
 8002180:	bd10      	pop	{r4, pc}
 8002182:	46c0      	nop			; (mov r8, r8)

08002184 <__eqdf2>:
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	464e      	mov	r6, r9
 8002188:	4645      	mov	r5, r8
 800218a:	46de      	mov	lr, fp
 800218c:	4657      	mov	r7, sl
 800218e:	4690      	mov	r8, r2
 8002190:	b5e0      	push	{r5, r6, r7, lr}
 8002192:	0017      	movs	r7, r2
 8002194:	031a      	lsls	r2, r3, #12
 8002196:	0b12      	lsrs	r2, r2, #12
 8002198:	0005      	movs	r5, r0
 800219a:	4684      	mov	ip, r0
 800219c:	4819      	ldr	r0, [pc, #100]	; (8002204 <__eqdf2+0x80>)
 800219e:	030e      	lsls	r6, r1, #12
 80021a0:	004c      	lsls	r4, r1, #1
 80021a2:	4691      	mov	r9, r2
 80021a4:	005a      	lsls	r2, r3, #1
 80021a6:	0fdb      	lsrs	r3, r3, #31
 80021a8:	469b      	mov	fp, r3
 80021aa:	0b36      	lsrs	r6, r6, #12
 80021ac:	0d64      	lsrs	r4, r4, #21
 80021ae:	0fc9      	lsrs	r1, r1, #31
 80021b0:	0d52      	lsrs	r2, r2, #21
 80021b2:	4284      	cmp	r4, r0
 80021b4:	d019      	beq.n	80021ea <__eqdf2+0x66>
 80021b6:	4282      	cmp	r2, r0
 80021b8:	d010      	beq.n	80021dc <__eqdf2+0x58>
 80021ba:	2001      	movs	r0, #1
 80021bc:	4294      	cmp	r4, r2
 80021be:	d10e      	bne.n	80021de <__eqdf2+0x5a>
 80021c0:	454e      	cmp	r6, r9
 80021c2:	d10c      	bne.n	80021de <__eqdf2+0x5a>
 80021c4:	2001      	movs	r0, #1
 80021c6:	45c4      	cmp	ip, r8
 80021c8:	d109      	bne.n	80021de <__eqdf2+0x5a>
 80021ca:	4559      	cmp	r1, fp
 80021cc:	d017      	beq.n	80021fe <__eqdf2+0x7a>
 80021ce:	2c00      	cmp	r4, #0
 80021d0:	d105      	bne.n	80021de <__eqdf2+0x5a>
 80021d2:	0030      	movs	r0, r6
 80021d4:	4328      	orrs	r0, r5
 80021d6:	1e43      	subs	r3, r0, #1
 80021d8:	4198      	sbcs	r0, r3
 80021da:	e000      	b.n	80021de <__eqdf2+0x5a>
 80021dc:	2001      	movs	r0, #1
 80021de:	bcf0      	pop	{r4, r5, r6, r7}
 80021e0:	46bb      	mov	fp, r7
 80021e2:	46b2      	mov	sl, r6
 80021e4:	46a9      	mov	r9, r5
 80021e6:	46a0      	mov	r8, r4
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ea:	0033      	movs	r3, r6
 80021ec:	2001      	movs	r0, #1
 80021ee:	432b      	orrs	r3, r5
 80021f0:	d1f5      	bne.n	80021de <__eqdf2+0x5a>
 80021f2:	42a2      	cmp	r2, r4
 80021f4:	d1f3      	bne.n	80021de <__eqdf2+0x5a>
 80021f6:	464b      	mov	r3, r9
 80021f8:	433b      	orrs	r3, r7
 80021fa:	d1f0      	bne.n	80021de <__eqdf2+0x5a>
 80021fc:	e7e2      	b.n	80021c4 <__eqdf2+0x40>
 80021fe:	2000      	movs	r0, #0
 8002200:	e7ed      	b.n	80021de <__eqdf2+0x5a>
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	000007ff 	.word	0x000007ff

08002208 <__gedf2>:
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	4647      	mov	r7, r8
 800220c:	46ce      	mov	lr, r9
 800220e:	0004      	movs	r4, r0
 8002210:	0018      	movs	r0, r3
 8002212:	0016      	movs	r6, r2
 8002214:	031b      	lsls	r3, r3, #12
 8002216:	0b1b      	lsrs	r3, r3, #12
 8002218:	4d2d      	ldr	r5, [pc, #180]	; (80022d0 <__gedf2+0xc8>)
 800221a:	004a      	lsls	r2, r1, #1
 800221c:	4699      	mov	r9, r3
 800221e:	b580      	push	{r7, lr}
 8002220:	0043      	lsls	r3, r0, #1
 8002222:	030f      	lsls	r7, r1, #12
 8002224:	46a4      	mov	ip, r4
 8002226:	46b0      	mov	r8, r6
 8002228:	0b3f      	lsrs	r7, r7, #12
 800222a:	0d52      	lsrs	r2, r2, #21
 800222c:	0fc9      	lsrs	r1, r1, #31
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	0fc0      	lsrs	r0, r0, #31
 8002232:	42aa      	cmp	r2, r5
 8002234:	d021      	beq.n	800227a <__gedf2+0x72>
 8002236:	42ab      	cmp	r3, r5
 8002238:	d013      	beq.n	8002262 <__gedf2+0x5a>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d122      	bne.n	8002284 <__gedf2+0x7c>
 800223e:	433c      	orrs	r4, r7
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <__gedf2+0x42>
 8002244:	464d      	mov	r5, r9
 8002246:	432e      	orrs	r6, r5
 8002248:	d022      	beq.n	8002290 <__gedf2+0x88>
 800224a:	2c00      	cmp	r4, #0
 800224c:	d010      	beq.n	8002270 <__gedf2+0x68>
 800224e:	4281      	cmp	r1, r0
 8002250:	d022      	beq.n	8002298 <__gedf2+0x90>
 8002252:	2002      	movs	r0, #2
 8002254:	3901      	subs	r1, #1
 8002256:	4008      	ands	r0, r1
 8002258:	3801      	subs	r0, #1
 800225a:	bcc0      	pop	{r6, r7}
 800225c:	46b9      	mov	r9, r7
 800225e:	46b0      	mov	r8, r6
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	464d      	mov	r5, r9
 8002264:	432e      	orrs	r6, r5
 8002266:	d129      	bne.n	80022bc <__gedf2+0xb4>
 8002268:	2a00      	cmp	r2, #0
 800226a:	d1f0      	bne.n	800224e <__gedf2+0x46>
 800226c:	433c      	orrs	r4, r7
 800226e:	d1ee      	bne.n	800224e <__gedf2+0x46>
 8002270:	2800      	cmp	r0, #0
 8002272:	d1f2      	bne.n	800225a <__gedf2+0x52>
 8002274:	2001      	movs	r0, #1
 8002276:	4240      	negs	r0, r0
 8002278:	e7ef      	b.n	800225a <__gedf2+0x52>
 800227a:	003d      	movs	r5, r7
 800227c:	4325      	orrs	r5, r4
 800227e:	d11d      	bne.n	80022bc <__gedf2+0xb4>
 8002280:	4293      	cmp	r3, r2
 8002282:	d0ee      	beq.n	8002262 <__gedf2+0x5a>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e2      	bne.n	800224e <__gedf2+0x46>
 8002288:	464c      	mov	r4, r9
 800228a:	4326      	orrs	r6, r4
 800228c:	d1df      	bne.n	800224e <__gedf2+0x46>
 800228e:	e7e0      	b.n	8002252 <__gedf2+0x4a>
 8002290:	2000      	movs	r0, #0
 8002292:	2c00      	cmp	r4, #0
 8002294:	d0e1      	beq.n	800225a <__gedf2+0x52>
 8002296:	e7dc      	b.n	8002252 <__gedf2+0x4a>
 8002298:	429a      	cmp	r2, r3
 800229a:	dc0a      	bgt.n	80022b2 <__gedf2+0xaa>
 800229c:	dbe8      	blt.n	8002270 <__gedf2+0x68>
 800229e:	454f      	cmp	r7, r9
 80022a0:	d8d7      	bhi.n	8002252 <__gedf2+0x4a>
 80022a2:	d00e      	beq.n	80022c2 <__gedf2+0xba>
 80022a4:	2000      	movs	r0, #0
 80022a6:	454f      	cmp	r7, r9
 80022a8:	d2d7      	bcs.n	800225a <__gedf2+0x52>
 80022aa:	2900      	cmp	r1, #0
 80022ac:	d0e2      	beq.n	8002274 <__gedf2+0x6c>
 80022ae:	0008      	movs	r0, r1
 80022b0:	e7d3      	b.n	800225a <__gedf2+0x52>
 80022b2:	4243      	negs	r3, r0
 80022b4:	4158      	adcs	r0, r3
 80022b6:	0040      	lsls	r0, r0, #1
 80022b8:	3801      	subs	r0, #1
 80022ba:	e7ce      	b.n	800225a <__gedf2+0x52>
 80022bc:	2002      	movs	r0, #2
 80022be:	4240      	negs	r0, r0
 80022c0:	e7cb      	b.n	800225a <__gedf2+0x52>
 80022c2:	45c4      	cmp	ip, r8
 80022c4:	d8c5      	bhi.n	8002252 <__gedf2+0x4a>
 80022c6:	2000      	movs	r0, #0
 80022c8:	45c4      	cmp	ip, r8
 80022ca:	d2c6      	bcs.n	800225a <__gedf2+0x52>
 80022cc:	e7ed      	b.n	80022aa <__gedf2+0xa2>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__ledf2>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4647      	mov	r7, r8
 80022d8:	46ce      	mov	lr, r9
 80022da:	0004      	movs	r4, r0
 80022dc:	0018      	movs	r0, r3
 80022de:	0016      	movs	r6, r2
 80022e0:	031b      	lsls	r3, r3, #12
 80022e2:	0b1b      	lsrs	r3, r3, #12
 80022e4:	4d2c      	ldr	r5, [pc, #176]	; (8002398 <__ledf2+0xc4>)
 80022e6:	004a      	lsls	r2, r1, #1
 80022e8:	4699      	mov	r9, r3
 80022ea:	b580      	push	{r7, lr}
 80022ec:	0043      	lsls	r3, r0, #1
 80022ee:	030f      	lsls	r7, r1, #12
 80022f0:	46a4      	mov	ip, r4
 80022f2:	46b0      	mov	r8, r6
 80022f4:	0b3f      	lsrs	r7, r7, #12
 80022f6:	0d52      	lsrs	r2, r2, #21
 80022f8:	0fc9      	lsrs	r1, r1, #31
 80022fa:	0d5b      	lsrs	r3, r3, #21
 80022fc:	0fc0      	lsrs	r0, r0, #31
 80022fe:	42aa      	cmp	r2, r5
 8002300:	d00d      	beq.n	800231e <__ledf2+0x4a>
 8002302:	42ab      	cmp	r3, r5
 8002304:	d010      	beq.n	8002328 <__ledf2+0x54>
 8002306:	2a00      	cmp	r2, #0
 8002308:	d127      	bne.n	800235a <__ledf2+0x86>
 800230a:	433c      	orrs	r4, r7
 800230c:	2b00      	cmp	r3, #0
 800230e:	d111      	bne.n	8002334 <__ledf2+0x60>
 8002310:	464d      	mov	r5, r9
 8002312:	432e      	orrs	r6, r5
 8002314:	d10e      	bne.n	8002334 <__ledf2+0x60>
 8002316:	2000      	movs	r0, #0
 8002318:	2c00      	cmp	r4, #0
 800231a:	d015      	beq.n	8002348 <__ledf2+0x74>
 800231c:	e00e      	b.n	800233c <__ledf2+0x68>
 800231e:	003d      	movs	r5, r7
 8002320:	4325      	orrs	r5, r4
 8002322:	d110      	bne.n	8002346 <__ledf2+0x72>
 8002324:	4293      	cmp	r3, r2
 8002326:	d118      	bne.n	800235a <__ledf2+0x86>
 8002328:	464d      	mov	r5, r9
 800232a:	432e      	orrs	r6, r5
 800232c:	d10b      	bne.n	8002346 <__ledf2+0x72>
 800232e:	2a00      	cmp	r2, #0
 8002330:	d102      	bne.n	8002338 <__ledf2+0x64>
 8002332:	433c      	orrs	r4, r7
 8002334:	2c00      	cmp	r4, #0
 8002336:	d00b      	beq.n	8002350 <__ledf2+0x7c>
 8002338:	4281      	cmp	r1, r0
 800233a:	d014      	beq.n	8002366 <__ledf2+0x92>
 800233c:	2002      	movs	r0, #2
 800233e:	3901      	subs	r1, #1
 8002340:	4008      	ands	r0, r1
 8002342:	3801      	subs	r0, #1
 8002344:	e000      	b.n	8002348 <__ledf2+0x74>
 8002346:	2002      	movs	r0, #2
 8002348:	bcc0      	pop	{r6, r7}
 800234a:	46b9      	mov	r9, r7
 800234c:	46b0      	mov	r8, r6
 800234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002350:	2800      	cmp	r0, #0
 8002352:	d1f9      	bne.n	8002348 <__ledf2+0x74>
 8002354:	2001      	movs	r0, #1
 8002356:	4240      	negs	r0, r0
 8002358:	e7f6      	b.n	8002348 <__ledf2+0x74>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ec      	bne.n	8002338 <__ledf2+0x64>
 800235e:	464c      	mov	r4, r9
 8002360:	4326      	orrs	r6, r4
 8002362:	d1e9      	bne.n	8002338 <__ledf2+0x64>
 8002364:	e7ea      	b.n	800233c <__ledf2+0x68>
 8002366:	429a      	cmp	r2, r3
 8002368:	dd04      	ble.n	8002374 <__ledf2+0xa0>
 800236a:	4243      	negs	r3, r0
 800236c:	4158      	adcs	r0, r3
 800236e:	0040      	lsls	r0, r0, #1
 8002370:	3801      	subs	r0, #1
 8002372:	e7e9      	b.n	8002348 <__ledf2+0x74>
 8002374:	429a      	cmp	r2, r3
 8002376:	dbeb      	blt.n	8002350 <__ledf2+0x7c>
 8002378:	454f      	cmp	r7, r9
 800237a:	d8df      	bhi.n	800233c <__ledf2+0x68>
 800237c:	d006      	beq.n	800238c <__ledf2+0xb8>
 800237e:	2000      	movs	r0, #0
 8002380:	454f      	cmp	r7, r9
 8002382:	d2e1      	bcs.n	8002348 <__ledf2+0x74>
 8002384:	2900      	cmp	r1, #0
 8002386:	d0e5      	beq.n	8002354 <__ledf2+0x80>
 8002388:	0008      	movs	r0, r1
 800238a:	e7dd      	b.n	8002348 <__ledf2+0x74>
 800238c:	45c4      	cmp	ip, r8
 800238e:	d8d5      	bhi.n	800233c <__ledf2+0x68>
 8002390:	2000      	movs	r0, #0
 8002392:	45c4      	cmp	ip, r8
 8002394:	d2d8      	bcs.n	8002348 <__ledf2+0x74>
 8002396:	e7f5      	b.n	8002384 <__ledf2+0xb0>
 8002398:	000007ff 	.word	0x000007ff

0800239c <i2c1MasterInit>:
		i2c->data_rx[i] = '\0';
	for (int i = 0; i < I2C_TX_BUFFER_SIZE; i++)
		i2c->data_tx[i] = '\0';
}

void i2c1MasterInit() {
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0

	i2c1GpioInit();
 80023a0:	f000 f83c 	bl	800241c <i2c1GpioInit>
	/* clock enable */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <i2c1MasterInit+0x6c>)
 80023a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a8:	4b17      	ldr	r3, [pc, #92]	; (8002408 <i2c1MasterInit+0x6c>)
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0389      	lsls	r1, r1, #14
 80023ae:	430a      	orrs	r2, r1
 80023b0:	63da      	str	r2, [r3, #60]	; 0x3c
	/* peripherial disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <i2c1MasterInit+0x70>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <i2c1MasterInit+0x70>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	438a      	bics	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
	/* set timing */
	I2C1->TIMINGR = 0x00303D5B;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <i2c1MasterInit+0x70>)
 80023c0:	4a13      	ldr	r2, [pc, #76]	; (8002410 <i2c1MasterInit+0x74>)
 80023c2:	611a      	str	r2, [r3, #16]
	/* */
	CLEAR_BIT(I2C2->OAR1, I2C_OAR1_OA1EN);
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <i2c1MasterInit+0x78>)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <i2c1MasterInit+0x78>)
 80023ca:	4913      	ldr	r1, [pc, #76]	; (8002418 <i2c1MasterInit+0x7c>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(I2C2->OAR2, I2C_OAR2_OA2EN);
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <i2c1MasterInit+0x78>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <i2c1MasterInit+0x78>)
 80023d6:	4910      	ldr	r1, [pc, #64]	; (8002418 <i2c1MasterInit+0x7c>)
 80023d8:	400a      	ands	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

	/*tx and rx interrupt enable */
	SET_BIT(I2C2->CR1, I2C_CR1_RXIE);
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <i2c1MasterInit+0x78>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <i2c1MasterInit+0x78>)
 80023e2:	2104      	movs	r1, #4
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C2->CR1, I2C_CR1_TXIE);
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <i2c1MasterInit+0x78>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <i2c1MasterInit+0x78>)
 80023ee:	2102      	movs	r1, #2
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

	/* peripherial enable */
	SET_BIT(I2C2->CR1, I2C_CR1_PE);
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <i2c1MasterInit+0x78>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <i2c1MasterInit+0x78>)
 80023fa:	2101      	movs	r1, #1
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40021000 	.word	0x40021000
 800240c:	40005400 	.word	0x40005400
 8002410:	00303d5b 	.word	0x00303d5b
 8002414:	40005800 	.word	0x40005800
 8002418:	ffff7fff 	.word	0xffff7fff

0800241c <i2c1GpioInit>:

void i2c1GpioInit() {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0

	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <i2c1GpioInit+0xb4>)
 8002422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <i2c1GpioInit+0xb4>)
 8002426:	2102      	movs	r1, #2
 8002428:	430a      	orrs	r2, r1
 800242a:	635a      	str	r2, [r3, #52]	; 0x34
	/* SCL PB6  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <i2c1GpioInit+0xb8>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002432:	4929      	ldr	r1, [pc, #164]	; (80024d8 <i2c1GpioInit+0xbc>)
 8002434:	400a      	ands	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 8002438:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <i2c1GpioInit+0xb8>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <i2c1GpioInit+0xb8>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0189      	lsls	r1, r1, #6
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
	/* SDA PB7 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <i2c1GpioInit+0xb8>)
 800244c:	4923      	ldr	r1, [pc, #140]	; (80024dc <i2c1GpioInit+0xc0>)
 800244e:	400a      	ands	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	0209      	lsls	r1, r1, #8
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
	/* SCL PB6 High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED6_0);
	/* SDC PB7  High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_1 |GPIO_OSPEEDR_OSPEED7_0);

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6);
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002466:	491e      	ldr	r1, [pc, #120]	; (80024e0 <i2c1GpioInit+0xc4>)
 8002468:	400a      	ands	r2, r1
 800246a:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6 << 1);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <i2c1GpioInit+0xb8>)
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002472:	21f0      	movs	r1, #240	; 0xf0
 8002474:	0549      	lsls	r1, r1, #21
 8002476:	430a      	orrs	r2, r1
 8002478:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<2);
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <i2c1GpioInit+0xb8>)
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002480:	21f0      	movs	r1, #240	; 0xf0
 8002482:	0589      	lsls	r1, r1, #22
 8002484:	430a      	orrs	r2, r1
 8002486:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<3);
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <i2c1GpioInit+0xb8>)
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <i2c1GpioInit+0xb8>)
 800248e:	4915      	ldr	r1, [pc, #84]	; (80024e4 <i2c1GpioInit+0xc8>)
 8002490:	400a      	ands	r2, r1
 8002492:	621a      	str	r2, [r3, #32]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7);
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <i2c1GpioInit+0xb8>)
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <i2c1GpioInit+0xb8>)
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	0912      	lsrs	r2, r2, #4
 800249e:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<1);
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <i2c1GpioInit+0xb8>)
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <i2c1GpioInit+0xb8>)
 80024a6:	21e0      	movs	r1, #224	; 0xe0
 80024a8:	0609      	lsls	r1, r1, #24
 80024aa:	430a      	orrs	r2, r1
 80024ac:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<2);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <i2c1GpioInit+0xb8>)
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <i2c1GpioInit+0xb8>)
 80024b4:	21c0      	movs	r1, #192	; 0xc0
 80024b6:	0609      	lsls	r1, r1, #24
 80024b8:	430a      	orrs	r2, r1
 80024ba:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<3);
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <i2c1GpioInit+0xb8>)
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <i2c1GpioInit+0xb8>)
 80024c2:	0052      	lsls	r2, r2, #1
 80024c4:	0852      	lsrs	r2, r2, #1
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	40021000 	.word	0x40021000
 80024d4:	50000400 	.word	0x50000400
 80024d8:	ffffefff 	.word	0xffffefff
 80024dc:	ffffbfff 	.word	0xffffbfff
 80024e0:	f0ffffff 	.word	0xf0ffffff
 80024e4:	87ffffff 	.word	0x87ffffff

080024e8 <i2c1MasterFrameRx>:
	SET_BIT(I2C2->ICR, I2C_ICR_STOPCF);

	return data;
}

void i2c1MasterFrameRx(char saddr, uint8_t *rcv, uint8_t N) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6039      	str	r1, [r7, #0]
 80024f0:	0011      	movs	r1, r2
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	1c02      	adds	r2, r0, #0
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	1dbb      	adds	r3, r7, #6
 80024fa:	1c0a      	adds	r2, r1, #0
 80024fc:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 80024fe:	f002 fa77 	bl	80049f0 <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	613b      	str	r3, [r7, #16]
	bool timeout = false;
 8002506:	230f      	movs	r3, #15
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, READ, N);
 800250e:	1dbb      	adds	r3, r7, #6
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2101      	movs	r1, #1
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f841 	bl	80025a0 <i2c1MasterStartTransfer>

	for (int i = 0; i < N; i++) {
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e027      	b.n	8002574 <i2c1MasterFrameRx+0x8c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 8002524:	f002 fa64 	bl	80049f0 <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b14      	cmp	r3, #20
 8002530:	d906      	bls.n	8002540 <i2c1MasterFrameRx+0x58>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <i2c1MasterFrameRx+0xb4>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <i2c1MasterFrameRx+0xb4>)
 8002538:	2101      	movs	r1, #1
 800253a:	438a      	bics	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
				return;
 800253e:	e02a      	b.n	8002596 <i2c1MasterFrameRx+0xae>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <i2c1MasterFrameRx+0xb4>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2204      	movs	r2, #4
 8002546:	4013      	ands	r3, r2
 8002548:	425a      	negs	r2, r3
 800254a:	4153      	adcs	r3, r2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	0019      	movs	r1, r3
 8002550:	230f      	movs	r3, #15
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2201      	movs	r2, #1
 8002558:	4053      	eors	r3, r2
 800255a:	b2db      	uxtb	r3, r3
 800255c:	400b      	ands	r3, r1
 800255e:	d1e1      	bne.n	8002524 <i2c1MasterFrameRx+0x3c>
			}
		}
		rcv[i] = READ_REG(I2C1->RXDR);
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <i2c1MasterFrameRx+0xb4>)
 8002562:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	18d3      	adds	r3, r2, r3
 800256a:	b2ca      	uxtb	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	1dbb      	adds	r3, r7, #6
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbe0      	blt.n	8002540 <i2c1MasterFrameRx+0x58>

	}
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <i2c1MasterFrameRx+0xb4>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2220      	movs	r2, #32
 8002586:	4013      	ands	r3, r2
 8002588:	d0fa      	beq.n	8002580 <i2c1MasterFrameRx+0x98>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <i2c1MasterFrameRx+0xb4>)
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	4b03      	ldr	r3, [pc, #12]	; (800259c <i2c1MasterFrameRx+0xb4>)
 8002590:	2120      	movs	r1, #32
 8002592:	430a      	orrs	r2, r1
 8002594:	61da      	str	r2, [r3, #28]
}
 8002596:	46bd      	mov	sp, r7
 8002598:	b006      	add	sp, #24
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40005400 	.word	0x40005400

080025a0 <i2c1MasterStartTransfer>:

void i2c1MasterStartTransfer(char saddr, uint8_t transfer_request, uint8_t N) {
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	0004      	movs	r4, r0
 80025a8:	0008      	movs	r0, r1
 80025aa:	0011      	movs	r1, r2
 80025ac:	1dfb      	adds	r3, r7, #7
 80025ae:	1c22      	adds	r2, r4, #0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	1dbb      	adds	r3, r7, #6
 80025b4:	1c02      	adds	r2, r0, #0
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	1d7b      	adds	r3, r7, #5
 80025ba:	1c0a      	adds	r2, r1, #0
 80025bc:	701a      	strb	r2, [r3, #0]
	/* peripherial disable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 80025be:	4b21      	ldr	r3, [pc, #132]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
	/* set slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	0299      	lsls	r1, r3, #10
 80025d2:	1dfb      	adds	r3, r7, #7
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
	/* read N byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <i2c1MasterStartTransfer+0xa8>)
 80025e2:	401a      	ands	r2, r3
 80025e4:	1d7b      	adds	r3, r7, #5
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	0019      	movs	r1, r3
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0489      	lsls	r1, r1, #18
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */
	if (transfer_request == 1) {
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <i2c1MasterStartTransfer+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	e009      	b.n	800262c <i2c1MasterStartTransfer+0x8c>
	} else if (transfer_request == 0) {
 8002618:	1dbb      	adds	r3, r7, #6
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <i2c1MasterStartTransfer+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 8002626:	4909      	ldr	r1, [pc, #36]	; (800264c <i2c1MasterStartTransfer+0xac>)
 8002628:	400a      	ands	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <i2c1MasterStartTransfer+0xa4>)
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	0189      	lsls	r1, r1, #6
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]

}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b003      	add	sp, #12
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40005400 	.word	0x40005400
 8002648:	ff00ffff 	.word	0xff00ffff
 800264c:	fffffbff 	.word	0xfffffbff

08002650 <i2c1MasterByteTx>:
		}
	}

}

void i2c1MasterByteTx(uint8_t saddr, uint8_t *data, uint8_t N) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6039      	str	r1, [r7, #0]
 8002658:	0011      	movs	r1, r2
 800265a:	1dfb      	adds	r3, r7, #7
 800265c:	1c02      	adds	r2, r0, #0
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	1dbb      	adds	r3, r7, #6
 8002662:	1c0a      	adds	r2, r1, #0
 8002664:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, WRITE, N);
 8002666:	1dbb      	adds	r3, r7, #6
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff ff95 	bl	80025a0 <i2c1MasterStartTransfer>
	uint32_t counter = HAL_GetTick();
 8002676:	f002 f9bb 	bl	80049f0 <HAL_GetTick>
 800267a:	0003      	movs	r3, r0
 800267c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	e022      	b.n	80026ca <i2c1MasterByteTx+0x7a>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {

			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 8002684:	f002 f9b4 	bl	80049f0 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b14      	cmp	r3, #20
 8002690:	d906      	bls.n	80026a0 <i2c1MasterByteTx+0x50>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <i2c1MasterByteTx+0xa4>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <i2c1MasterByteTx+0xa4>)
 8002698:	2101      	movs	r1, #1
 800269a:	438a      	bics	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
				return;
 800269e:	e025      	b.n	80026ec <i2c1MasterByteTx+0x9c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <i2c1MasterByteTx+0xa4>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2202      	movs	r2, #2
 80026a6:	4013      	ands	r3, r2
 80026a8:	d0ec      	beq.n	8002684 <i2c1MasterByteTx+0x34>
			}
		}
		MODIFY_REG(I2C1->TXDR, I2C_TXDR_TXDATA, data[i]);
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <i2c1MasterByteTx+0xa4>)
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	4393      	bics	r3, r2
 80026b2:	001a      	movs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6839      	ldr	r1, [r7, #0]
 80026b8:	18cb      	adds	r3, r1, r3
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	0019      	movs	r1, r3
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <i2c1MasterByteTx+0xa4>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	1dbb      	adds	r3, r7, #6
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	dbe5      	blt.n	80026a0 <i2c1MasterByteTx+0x50>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <i2c1MasterByteTx+0xa4>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2220      	movs	r2, #32
 80026dc:	4013      	ands	r3, r2
 80026de:	d0fa      	beq.n	80026d6 <i2c1MasterByteTx+0x86>
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <i2c1MasterByteTx+0xa4>)
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <i2c1MasterByteTx+0xa4>)
 80026e6:	2120      	movs	r1, #32
 80026e8:	430a      	orrs	r2, r1
 80026ea:	619a      	str	r2, [r3, #24]

}
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40005400 	.word	0x40005400

080026f8 <led_init>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void led_init(LED_t *led) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A) as output SUMA CHANGING*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8002700:	23a0      	movs	r3, #160	; 0xa0
 8002702:	05db      	lsls	r3, r3, #23
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	23a0      	movs	r3, #160	; 0xa0
 8002708:	05db      	lsls	r3, r3, #23
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	01c9      	lsls	r1, r1, #7
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 8002712:	23a0      	movs	r3, #160	; 0xa0
 8002714:	05db      	lsls	r3, r3, #23
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	23a0      	movs	r3, #160	; 0xa0
 800271a:	05db      	lsls	r3, r3, #23
 800271c:	4911      	ldr	r1, [pc, #68]	; (8002764 <led_init+0x6c>)
 800271e:	400a      	ands	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)  as output SUMA END*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <led_init+0x70>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <led_init+0x70>)
 8002728:	2101      	movs	r1, #1
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <led_init+0x70>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <led_init+0x70>)
 8002734:	2102      	movs	r1, #2
 8002736:	438a      	bics	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR) as output SYSTEM R */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <led_init+0x70>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <led_init+0x70>)
 8002740:	2104      	movs	r1, #4
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <led_init+0x70>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <led_init+0x70>)
 800274c:	2108      	movs	r1, #8
 800274e:	438a      	bics	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
	led_reset(led);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f000 f839 	bl	80027cc <led_reset>
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b002      	add	sp, #8
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	ffff7fff 	.word	0xffff7fff
 8002768:	50000400 	.word	0x50000400

0800276c <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->ka_counter > LED_KA_STATE_TIMEOUT)
 8002774:	f002 f93c 	bl	80049f0 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	1ad2      	subs	r2, r2, r3
 8002780:	23fa      	movs	r3, #250	; 0xfa
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d905      	bls.n	8002794 <led_enable_kalive+0x28>
		l->ka_counter = HAL_GetTick();
 8002788:	f002 f932 	bl	80049f0 <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	601a      	str	r2, [r3, #0]
			sys_rp_led_off();
		else
			sys_rp_led_on();
	}

}
 8002792:	e014      	b.n	80027be <led_enable_kalive+0x52>
		if (HAL_GetTick() - l->ka_counter > LED_KA_ON_TIMEOUT)
 8002794:	f002 f92c 	bl	80049f0 <HAL_GetTick>
 8002798:	0002      	movs	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b32      	cmp	r3, #50	; 0x32
 80027a2:	d906      	bls.n	80027b2 <led_enable_kalive+0x46>
			sys_rp_led_off();
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <led_enable_kalive+0x5c>)
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <led_enable_kalive+0x5c>)
 80027aa:	2102      	movs	r1, #2
 80027ac:	438a      	bics	r2, r1
 80027ae:	615a      	str	r2, [r3, #20]
}
 80027b0:	e005      	b.n	80027be <led_enable_kalive+0x52>
			sys_rp_led_on();
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <led_enable_kalive+0x5c>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <led_enable_kalive+0x5c>)
 80027b8:	2102      	movs	r1, #2
 80027ba:	430a      	orrs	r2, r1
 80027bc:	615a      	str	r2, [r3, #20]
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	50000400 	.word	0x50000400

080027cc <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	l->ch_counter = 0;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
	l->cl_counter = 0;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
	l->cn_counter = 0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
	l->ka_counter = HAL_GetTick();
 80027e6:	f002 f903 	bl	80049f0 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	601a      	str	r2, [r3, #0]
	l->sysrp_counter = 0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]
	l->th_counter = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
	l->tok_counter = 0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b002      	add	sp, #8
 8002808:	bd80      	pop	{r7, pc}

0800280a <m24c64ReadNBytes>:

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
	i2c1MasterFrameRx(CHIP_ADDR, data, 32);
}

void m24c64ReadNBytes(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 800280a:	b590      	push	{r4, r7, lr}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	0004      	movs	r4, r0
 8002812:	6039      	str	r1, [r7, #0]
 8002814:	0010      	movs	r0, r2
 8002816:	0019      	movs	r1, r3
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	1c22      	adds	r2, r4, #0
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	1dbb      	adds	r3, r7, #6
 8002820:	1c02      	adds	r2, r0, #0
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	1d7b      	adds	r3, r7, #5
 8002826:	1c0a      	adds	r2, r1, #0
 8002828:	701a      	strb	r2, [r3, #0]
	uint8_t buff[2] = { 0 };
 800282a:	210c      	movs	r1, #12
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 8002832:	1dfb      	adds	r3, r7, #7
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	015b      	lsls	r3, r3, #5
 8002838:	b21a      	sxth	r2, r3
 800283a:	1dbb      	adds	r3, r7, #6
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b21b      	sxth	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	b21a      	sxth	r2, r3
 8002844:	200e      	movs	r0, #14
 8002846:	183b      	adds	r3, r7, r0
 8002848:	801a      	strh	r2, [r3, #0]

	buff[0] = MemAddress >> 8;
 800284a:	183b      	adds	r3, r7, r0
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	b29b      	uxth	r3, r3
 8002852:	b2da      	uxtb	r2, r3
 8002854:	187b      	adds	r3, r7, r1
 8002856:	701a      	strb	r2, [r3, #0]
	buff[1] = MemAddress & 0xff;
 8002858:	183b      	adds	r3, r7, r0
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	187b      	adds	r3, r7, r1
 8002860:	705a      	strb	r2, [r3, #1]

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
 8002862:	187b      	adds	r3, r7, r1
 8002864:	2202      	movs	r2, #2
 8002866:	0019      	movs	r1, r3
 8002868:	20a0      	movs	r0, #160	; 0xa0
 800286a:	f7ff fef1 	bl	8002650 <i2c1MasterByteTx>
	HAL_Delay(5);
 800286e:	2005      	movs	r0, #5
 8002870:	f002 f8c8 	bl	8004a04 <HAL_Delay>
	i2c1MasterFrameRx(CHIP_ADDR, data, size);
 8002874:	1d7b      	adds	r3, r7, #5
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	0019      	movs	r1, r3
 800287c:	20a0      	movs	r0, #160	; 0xa0
 800287e:	f7ff fe33 	bl	80024e8 <i2c1MasterFrameRx>
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b005      	add	sp, #20
 8002888:	bd90      	pop	{r4, r7, pc}

0800288a <m24c64WriteNBytes>:

void m24c64WriteNBytes(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 800288a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288c:	b097      	sub	sp, #92	; 0x5c
 800288e:	af00      	add	r7, sp, #0
 8002890:	63b9      	str	r1, [r7, #56]	; 0x38
 8002892:	0011      	movs	r1, r2
 8002894:	001e      	movs	r6, r3
 8002896:	233f      	movs	r3, #63	; 0x3f
 8002898:	18fa      	adds	r2, r7, r3
 800289a:	1c03      	adds	r3, r0, #0
 800289c:	7013      	strb	r3, [r2, #0]
 800289e:	233e      	movs	r3, #62	; 0x3e
 80028a0:	18fa      	adds	r2, r7, r3
 80028a2:	1c0b      	adds	r3, r1, #0
 80028a4:	7013      	strb	r3, [r2, #0]
 80028a6:	233d      	movs	r3, #61	; 0x3d
 80028a8:	18fa      	adds	r2, r7, r3
 80028aa:	1c33      	adds	r3, r6, #0
 80028ac:	7013      	strb	r3, [r2, #0]
 80028ae:	466b      	mov	r3, sp
 80028b0:	001e      	movs	r6, r3
	uint8_t buff[size + 2];
 80028b2:	233d      	movs	r3, #61	; 0x3d
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	1c9a      	adds	r2, r3, #2
 80028ba:	1e53      	subs	r3, r2, #1
 80028bc:	657b      	str	r3, [r7, #84]	; 0x54
 80028be:	0013      	movs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	69b8      	ldr	r0, [r7, #24]
 80028c8:	69f9      	ldr	r1, [r7, #28]
 80028ca:	0003      	movs	r3, r0
 80028cc:	0f5b      	lsrs	r3, r3, #29
 80028ce:	469c      	mov	ip, r3
 80028d0:	000b      	movs	r3, r1
 80028d2:	00dd      	lsls	r5, r3, #3
 80028d4:	4663      	mov	r3, ip
 80028d6:	431d      	orrs	r5, r3
 80028d8:	0003      	movs	r3, r0
 80028da:	00dc      	lsls	r4, r3, #3
 80028dc:	0013      	movs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	6938      	ldr	r0, [r7, #16]
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	0003      	movs	r3, r0
 80028ea:	0f5b      	lsrs	r3, r3, #29
 80028ec:	000c      	movs	r4, r1
 80028ee:	00e4      	lsls	r4, r4, #3
 80028f0:	637c      	str	r4, [r7, #52]	; 0x34
 80028f2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80028f4:	431c      	orrs	r4, r3
 80028f6:	637c      	str	r4, [r7, #52]	; 0x34
 80028f8:	0003      	movs	r3, r0
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
 80028fe:	0013      	movs	r3, r2
 8002900:	3307      	adds	r3, #7
 8002902:	08db      	lsrs	r3, r3, #3
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	466a      	mov	r2, sp
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	469d      	mov	sp, r3
 800290c:	466b      	mov	r3, sp
 800290e:	3300      	adds	r3, #0
 8002910:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t read[size];
 8002912:	233d      	movs	r3, #61	; 0x3d
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	001a      	movs	r2, r3
 800291a:	3a01      	subs	r2, #1
 800291c:	64ba      	str	r2, [r7, #72]	; 0x48
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	60fa      	str	r2, [r7, #12]
 8002924:	68b8      	ldr	r0, [r7, #8]
 8002926:	68f9      	ldr	r1, [r7, #12]
 8002928:	0002      	movs	r2, r0
 800292a:	0f52      	lsrs	r2, r2, #29
 800292c:	000c      	movs	r4, r1
 800292e:	00e4      	lsls	r4, r4, #3
 8002930:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002932:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002934:	4314      	orrs	r4, r2
 8002936:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002938:	0002      	movs	r2, r0
 800293a:	00d2      	lsls	r2, r2, #3
 800293c:	62ba      	str	r2, [r7, #40]	; 0x28
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	6838      	ldr	r0, [r7, #0]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	0002      	movs	r2, r0
 800294a:	0f52      	lsrs	r2, r2, #29
 800294c:	000c      	movs	r4, r1
 800294e:	00e4      	lsls	r4, r4, #3
 8002950:	627c      	str	r4, [r7, #36]	; 0x24
 8002952:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002954:	4314      	orrs	r4, r2
 8002956:	627c      	str	r4, [r7, #36]	; 0x24
 8002958:	0002      	movs	r2, r0
 800295a:	00d2      	lsls	r2, r2, #3
 800295c:	623a      	str	r2, [r7, #32]
 800295e:	3307      	adds	r3, #7
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	466a      	mov	r2, sp
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	469d      	mov	sp, r3
 800296a:	466b      	mov	r3, sp
 800296c:	3300      	adds	r3, #0
 800296e:	647b      	str	r3, [r7, #68]	; 0x44

	m24c64ReadNBytes(page, read, offset, size);
 8002970:	233d      	movs	r3, #61	; 0x3d
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	781c      	ldrb	r4, [r3, #0]
 8002976:	233e      	movs	r3, #62	; 0x3e
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800297e:	233f      	movs	r3, #63	; 0x3f
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	7818      	ldrb	r0, [r3, #0]
 8002984:	0023      	movs	r3, r4
 8002986:	f7ff ff40 	bl	800280a <m24c64ReadNBytes>

	if (strncmp((const char*) data, (const char*) read, (size_t) size)) {
 800298a:	233d      	movs	r3, #61	; 0x3d
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	0018      	movs	r0, r3
 8002996:	f004 fb2f 	bl	8006ff8 <strncmp>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d037      	beq.n	8002a0e <m24c64WriteNBytes+0x184>
		buff[0] = (page << PADDRPOSITION | offset) >> 8;
 800299e:	233f      	movs	r3, #63	; 0x3f
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	233e      	movs	r3, #62	; 0x3e
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	121b      	asrs	r3, r3, #8
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b4:	701a      	strb	r2, [r3, #0]
		buff[1] = (page << PADDRPOSITION | offset) & 0xff;
 80029b6:	233f      	movs	r3, #63	; 0x3f
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	015b      	lsls	r3, r3, #5
 80029be:	b25a      	sxtb	r2, r3
 80029c0:	233e      	movs	r3, #62	; 0x3e
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d0:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < size; i++) {
 80029d2:	2300      	movs	r3, #0
 80029d4:	653b      	str	r3, [r7, #80]	; 0x50
 80029d6:	e00a      	b.n	80029ee <m24c64WriteNBytes+0x164>
			buff[i + 2] = data[i];
 80029d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029dc:	18d2      	adds	r2, r2, r3
 80029de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e0:	3302      	adds	r3, #2
 80029e2:	7811      	ldrb	r1, [r2, #0]
 80029e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e6:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < size; i++) {
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	3301      	adds	r3, #1
 80029ec:	653b      	str	r3, [r7, #80]	; 0x50
 80029ee:	233d      	movs	r3, #61	; 0x3d
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029f6:	429a      	cmp	r2, r3
 80029f8:	dbee      	blt.n	80029d8 <m24c64WriteNBytes+0x14e>
		}
		i2c1MasterByteTx(CHIP_ADDR, buff, size + 2);
 80029fa:	233d      	movs	r3, #61	; 0x3d
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3302      	adds	r3, #2
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a06:	0019      	movs	r1, r3
 8002a08:	20a0      	movs	r0, #160	; 0xa0
 8002a0a:	f7ff fe21 	bl	8002650 <i2c1MasterByteTx>
	}
	HAL_Delay(6);
 8002a0e:	2006      	movs	r0, #6
 8002a10:	f001 fff8 	bl	8004a04 <HAL_Delay>
 8002a14:	46b5      	mov	sp, r6
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b017      	add	sp, #92	; 0x5c
 8002a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a22:	b0ef      	sub	sp, #444	; 0x1bc
 8002a24:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	MAX2871_t ppl;
	ppl.FreqOUTold = 0;
 8002a26:	4bea      	ldr	r3, [pc, #936]	; (8002dd0 <main+0x3b0>)
 8002a28:	26d4      	movs	r6, #212	; 0xd4
 8002a2a:	0076      	lsls	r6, r6, #1
 8002a2c:	199b      	adds	r3, r3, r6
 8002a2e:	2010      	movs	r0, #16
 8002a30:	183a      	adds	r2, r7, r0
 8002a32:	1899      	adds	r1, r3, r2
 8002a34:	2200      	movs	r2, #0
 8002a36:	2300      	movs	r3, #0
 8002a38:	608a      	str	r2, [r1, #8]
 8002a3a:	60cb      	str	r3, [r1, #12]
	ppl_ptr = &ppl;
 8002a3c:	4be5      	ldr	r3, [pc, #916]	; (8002dd4 <main+0x3b4>)
 8002a3e:	2238      	movs	r2, #56	; 0x38
 8002a40:	1812      	adds	r2, r2, r0
 8002a42:	19d2      	adds	r2, r2, r7
 8002a44:	601a      	str	r2, [r3, #0]
	ppl_ptr->ATTBYTE = 0;
 8002a46:	4be3      	ldr	r3, [pc, #908]	; (8002dd4 <main+0x3b4>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2390      	movs	r3, #144	; 0x90
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2100      	movs	r1, #0
 8002a50:	50d1      	str	r1, [r2, r3]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a52:	f001 ff51 	bl	80048f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002a56:	f000 fb0f 	bl	8003078 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002a5a:	f000 fc47 	bl	80032ec <MX_GPIO_Init>
	MX_I2C1_Init();
 8002a5e:	f000 fb77 	bl	8003150 <MX_I2C1_Init>
	MX_SPI2_Init();
 8002a62:	f000 fbb5 	bl	80031d0 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8002a66:	f000 fbf3 	bl	8003250 <MX_USART1_UART_Init>
	MX_CRC_Init();
 8002a6a:	f000 fb4d 	bl	8003108 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	i2c1MasterInit();
 8002a6e:	f7ff fc95 	bl	800239c <i2c1MasterInit>
	led_init(&led);
 8002a72:	231c      	movs	r3, #28
 8002a74:	2010      	movs	r0, #16
 8002a76:	181a      	adds	r2, r3, r0
 8002a78:	19d3      	adds	r3, r2, r7
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff fe3c 	bl	80026f8 <led_init>
	max2871Init(&ppl);
 8002a80:	2238      	movs	r2, #56	; 0x38
 8002a82:	2310      	movs	r3, #16
 8002a84:	18d1      	adds	r1, r2, r3
 8002a86:	19cb      	adds	r3, r1, r7
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 fcd7 	bl	800343c <max2871Init>
	uint8_t addrList[5] = { 0 };
 8002a8e:	4bd2      	ldr	r3, [pc, #840]	; (8002dd8 <main+0x3b8>)
 8002a90:	199b      	adds	r3, r3, r6
 8002a92:	2110      	movs	r1, #16
 8002a94:	468c      	mov	ip, r1
 8002a96:	44bc      	add	ip, r7
 8002a98:	4463      	add	r3, ip
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	711a      	strb	r2, [r3, #4]
	uint8_t freq_init[FREQ_OUT_SIZE] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
 8002aa2:	4bce      	ldr	r3, [pc, #824]	; (8002ddc <main+0x3bc>)
 8002aa4:	199b      	adds	r3, r3, r6
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	468c      	mov	ip, r1
 8002aaa:	44bc      	add	ip, r7
 8002aac:	4463      	add	r3, ip
 8002aae:	4acc      	ldr	r2, [pc, #816]	; (8002de0 <main+0x3c0>)
 8002ab0:	ca03      	ldmia	r2!, {r0, r1}
 8002ab2:	c303      	stmia	r3!, {r0, r1}
			0x77, 0x88 };
	m24c64WriteNBytes(BASE_ADDR, freq_init, FREQ_OUT_ADDR, FREQ_OUT_SIZE);
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	19d9      	adds	r1, r3, r7
 8002abc:	2308      	movs	r3, #8
 8002abe:	2203      	movs	r2, #3
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	f7ff fee2 	bl	800288a <m24c64WriteNBytes>
	uint8_t buffer[10] = { 0 };
 8002ac6:	4bc7      	ldr	r3, [pc, #796]	; (8002de4 <main+0x3c4>)
 8002ac8:	199b      	adds	r3, r3, r6
 8002aca:	2110      	movs	r1, #16
 8002acc:	468c      	mov	ip, r1
 8002ace:	44bc      	add	ip, r7
 8002ad0:	4463      	add	r3, ip
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	2206      	movs	r2, #6
 8002ada:	2100      	movs	r1, #0
 8002adc:	0018      	movs	r0, r3
 8002ade:	f004 fa83 	bl	8006fe8 <memset>

	m24c64ReadNBytes(BASE_ADDR, buffer, FREQ_OUT_ADDR, FREQ_OUT_SIZE);
 8002ae2:	2610      	movs	r6, #16
 8002ae4:	19b9      	adds	r1, r7, r6
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	2203      	movs	r2, #3
 8002aea:	2003      	movs	r0, #3
 8002aec:	f7ff fe8d 	bl	800280a <m24c64ReadNBytes>

	for (int i = FREQ_OUT_SIZE - 1; i >= 0; i--)
 8002af0:	2307      	movs	r3, #7
 8002af2:	22d2      	movs	r2, #210	; 0xd2
 8002af4:	0052      	lsls	r2, r2, #1
 8002af6:	1992      	adds	r2, r2, r6
 8002af8:	19d2      	adds	r2, r2, r7
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e03c      	b.n	8002b78 <main+0x158>
		ppl.FreqOut |= (buffer[i] << (i * 8));
 8002afe:	4bb4      	ldr	r3, [pc, #720]	; (8002dd0 <main+0x3b0>)
 8002b00:	20d4      	movs	r0, #212	; 0xd4
 8002b02:	0040      	lsls	r0, r0, #1
 8002b04:	181b      	adds	r3, r3, r0
 8002b06:	2210      	movs	r2, #16
 8002b08:	4694      	mov	ip, r2
 8002b0a:	44bc      	add	ip, r7
 8002b0c:	4463      	add	r3, ip
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	49b4      	ldr	r1, [pc, #720]	; (8002de4 <main+0x3c4>)
 8002b14:	1809      	adds	r1, r1, r0
 8002b16:	2010      	movs	r0, #16
 8002b18:	183e      	adds	r6, r7, r0
 8002b1a:	1988      	adds	r0, r1, r6
 8002b1c:	26d2      	movs	r6, #210	; 0xd2
 8002b1e:	0076      	lsls	r6, r6, #1
 8002b20:	2110      	movs	r1, #16
 8002b22:	1871      	adds	r1, r6, r1
 8002b24:	19c9      	adds	r1, r1, r7
 8002b26:	6809      	ldr	r1, [r1, #0]
 8002b28:	1841      	adds	r1, r0, r1
 8002b2a:	7809      	ldrb	r1, [r1, #0]
 8002b2c:	0008      	movs	r0, r1
 8002b2e:	2110      	movs	r1, #16
 8002b30:	1876      	adds	r6, r6, r1
 8002b32:	19f1      	adds	r1, r6, r7
 8002b34:	6809      	ldr	r1, [r1, #0]
 8002b36:	00c9      	lsls	r1, r1, #3
 8002b38:	4088      	lsls	r0, r1
 8002b3a:	0001      	movs	r1, r0
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	17c9      	asrs	r1, r1, #31
 8002b40:	60f9      	str	r1, [r7, #12]
 8002b42:	68b8      	ldr	r0, [r7, #8]
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	0006      	movs	r6, r0
 8002b48:	4316      	orrs	r6, r2
 8002b4a:	0034      	movs	r4, r6
 8002b4c:	4319      	orrs	r1, r3
 8002b4e:	000d      	movs	r5, r1
 8002b50:	4b9f      	ldr	r3, [pc, #636]	; (8002dd0 <main+0x3b0>)
 8002b52:	20d4      	movs	r0, #212	; 0xd4
 8002b54:	0040      	lsls	r0, r0, #1
 8002b56:	181b      	adds	r3, r3, r0
 8002b58:	2010      	movs	r0, #16
 8002b5a:	4684      	mov	ip, r0
 8002b5c:	44bc      	add	ip, r7
 8002b5e:	4463      	add	r3, ip
 8002b60:	601c      	str	r4, [r3, #0]
 8002b62:	605d      	str	r5, [r3, #4]
	for (int i = FREQ_OUT_SIZE - 1; i >= 0; i--)
 8002b64:	26d2      	movs	r6, #210	; 0xd2
 8002b66:	0076      	lsls	r6, r6, #1
 8002b68:	2210      	movs	r2, #16
 8002b6a:	18b3      	adds	r3, r6, r2
 8002b6c:	19db      	adds	r3, r3, r7
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	18b2      	adds	r2, r6, r2
 8002b74:	19d2      	adds	r2, r2, r7
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	23d2      	movs	r3, #210	; 0xd2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	19db      	adds	r3, r3, r7
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	daba      	bge.n	8002afe <main+0xde>

	m24c64ReadNBytes(BASE_ADDR, buffer, FREQ_OUT_ADDR + FREQ_OUT_SIZE,
 8002b88:	18b9      	adds	r1, r7, r2
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	220b      	movs	r2, #11
 8002b8e:	2003      	movs	r0, #3
 8002b90:	f7ff fe3b 	bl	800280a <m24c64ReadNBytes>
			LACT_SIZE);
	ppl.LACT = buffer[0] + buffer[1] / 2.0;
 8002b94:	4b93      	ldr	r3, [pc, #588]	; (8002de4 <main+0x3c4>)
 8002b96:	26d4      	movs	r6, #212	; 0xd4
 8002b98:	0076      	lsls	r6, r6, #1
 8002b9a:	199b      	adds	r3, r3, r6
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	468c      	mov	ip, r1
 8002ba0:	44bc      	add	ip, r7
 8002ba2:	4463      	add	r3, ip
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff f9a6 	bl	8001ef8 <__aeabi_i2d>
 8002bac:	0004      	movs	r4, r0
 8002bae:	000d      	movs	r5, r1
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <main+0x3c4>)
 8002bb2:	199b      	adds	r3, r3, r6
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	468c      	mov	ip, r1
 8002bb8:	44bc      	add	ip, r7
 8002bba:	4463      	add	r3, ip
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7ff f99a 	bl	8001ef8 <__aeabi_i2d>
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	f7fe f86b 	bl	8000ca4 <__aeabi_ddiv>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	000b      	movs	r3, r1
 8002bd2:	0020      	movs	r0, r4
 8002bd4:	0029      	movs	r1, r5
 8002bd6:	f7fd fd29 	bl	800062c <__aeabi_dadd>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	000b      	movs	r3, r1
 8002bde:	0010      	movs	r0, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	f7ff f9df 	bl	8001fa4 <__aeabi_d2f>
 8002be6:	1c02      	adds	r2, r0, #0
 8002be8:	4b79      	ldr	r3, [pc, #484]	; (8002dd0 <main+0x3b0>)
 8002bea:	199b      	adds	r3, r3, r6
 8002bec:	2110      	movs	r1, #16
 8002bee:	468c      	mov	ip, r1
 8002bf0:	44bc      	add	ip, r7
 8002bf2:	4463      	add	r3, ip
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28

	if (ppl.FreqOut == -1) {
 8002bf6:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <main+0x3b0>)
 8002bf8:	199b      	adds	r3, r3, r6
 8002bfa:	2110      	movs	r1, #16
 8002bfc:	468c      	mov	ip, r1
 8002bfe:	44bc      	add	ip, r7
 8002c00:	4463      	add	r3, ip
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	1c51      	adds	r1, r2, #1
 8002c08:	d112      	bne.n	8002c30 <main+0x210>
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	d110      	bne.n	8002c30 <main+0x210>
		ppl.FreqOut = 4000000000;
 8002c0e:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <main+0x3b0>)
 8002c10:	199b      	adds	r3, r3, r6
 8002c12:	2210      	movs	r2, #16
 8002c14:	18ba      	adds	r2, r7, r2
 8002c16:	1899      	adds	r1, r3, r2
 8002c18:	4a73      	ldr	r2, [pc, #460]	; (8002de8 <main+0x3c8>)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	600a      	str	r2, [r1, #0]
 8002c1e:	604b      	str	r3, [r1, #4]
		ppl.LACT = 12;
 8002c20:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <main+0x3b0>)
 8002c22:	199b      	adds	r3, r3, r6
 8002c24:	2210      	movs	r2, #16
 8002c26:	4694      	mov	ip, r2
 8002c28:	44bc      	add	ip, r7
 8002c2a:	4463      	add	r3, ip
 8002c2c:	4a6f      	ldr	r2, [pc, #444]	; (8002dec <main+0x3cc>)
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	HAL_Delay(200);
 8002c30:	20c8      	movs	r0, #200	; 0xc8
 8002c32:	f001 fee7 	bl	8004a04 <HAL_Delay>
	max2871CalculateRegisterValues(&ppl);
 8002c36:	2438      	movs	r4, #56	; 0x38
 8002c38:	2510      	movs	r5, #16
 8002c3a:	1963      	adds	r3, r4, r5
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 fd64 	bl	800370c <max2871CalculateRegisterValues>

	max2871RegisterInit(&hspi2, &ppl);
 8002c44:	1963      	adds	r3, r4, r5
 8002c46:	19da      	adds	r2, r3, r7
 8002c48:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <main+0x3d0>)
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f001 faf3 	bl	8004238 <max2871RegisterInit>
	uint8_t IODIRA = 0x00;
 8002c52:	2198      	movs	r1, #152	; 0x98
 8002c54:	31ff      	adds	r1, #255	; 0xff
 8002c56:	0028      	movs	r0, r5
 8002c58:	180b      	adds	r3, r1, r0
 8002c5a:	19db      	adds	r3, r3, r7
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]

	buffer[0] = 0x00;
 8002c60:	4b60      	ldr	r3, [pc, #384]	; (8002de4 <main+0x3c4>)
 8002c62:	24d4      	movs	r4, #212	; 0xd4
 8002c64:	0064      	lsls	r4, r4, #1
 8002c66:	191b      	adds	r3, r3, r4
 8002c68:	2210      	movs	r2, #16
 8002c6a:	4694      	mov	ip, r2
 8002c6c:	44bc      	add	ip, r7
 8002c6e:	4463      	add	r3, ip
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
	buffer[1] = IODIRA;
 8002c74:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <main+0x3c4>)
 8002c76:	191b      	adds	r3, r3, r4
 8002c78:	2210      	movs	r2, #16
 8002c7a:	4694      	mov	ip, r2
 8002c7c:	44bc      	add	ip, r7
 8002c7e:	4463      	add	r3, ip
 8002c80:	180a      	adds	r2, r1, r0
 8002c82:	19d2      	adds	r2, r2, r7
 8002c84:	7812      	ldrb	r2, [r2, #0]
 8002c86:	705a      	strb	r2, [r3, #1]
	m24c64WriteNBytes(BASE_ADDR, buffer,
 8002c88:	0005      	movs	r5, r0
 8002c8a:	1839      	adds	r1, r7, r0
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	220d      	movs	r2, #13
 8002c90:	2003      	movs	r0, #3
 8002c92:	f7ff fdfa 	bl	800288a <m24c64WriteNBytes>
			FREQ_OUT_ADDR + FREQ_OUT_SIZE + LACT_SIZE, MCPADR_SIZE);
	uint8_t IODIRB = 0x01;
 8002c96:	21cb      	movs	r1, #203	; 0xcb
 8002c98:	0049      	lsls	r1, r1, #1
 8002c9a:	0028      	movs	r0, r5
 8002c9c:	180b      	adds	r3, r1, r0
 8002c9e:	19db      	adds	r3, r3, r7
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
	buffer[0] = 0x00;
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <main+0x3c4>)
 8002ca6:	191b      	adds	r3, r3, r4
 8002ca8:	2210      	movs	r2, #16
 8002caa:	4694      	mov	ip, r2
 8002cac:	44bc      	add	ip, r7
 8002cae:	4463      	add	r3, ip
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
	buffer[1] = IODIRB;
 8002cb4:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <main+0x3c4>)
 8002cb6:	191b      	adds	r3, r3, r4
 8002cb8:	2210      	movs	r2, #16
 8002cba:	4694      	mov	ip, r2
 8002cbc:	44bc      	add	ip, r7
 8002cbe:	4463      	add	r3, ip
 8002cc0:	0004      	movs	r4, r0
 8002cc2:	190a      	adds	r2, r1, r4
 8002cc4:	19d2      	adds	r2, r2, r7
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	705a      	strb	r2, [r3, #1]
	m24c64WriteNBytes(BASE_ADDR, buffer,
 8002cca:	1939      	adds	r1, r7, r4
 8002ccc:	2302      	movs	r3, #2
 8002cce:	220d      	movs	r2, #13
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f7ff fdda 	bl	800288a <m24c64WriteNBytes>
	int Valor_5;
	int Valor_6;
	int Valor_7;
	int Valor_8;
	int Valor_9;
	unsigned long suma_current = -1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	425b      	negs	r3, r3
 8002cda:	22d0      	movs	r2, #208	; 0xd0
 8002cdc:	0052      	lsls	r2, r2, #1
 8002cde:	1912      	adds	r2, r2, r4
 8002ce0:	19d2      	adds	r2, r2, r7
 8002ce2:	6013      	str	r3, [r2, #0]
	unsigned long suma_read;
	unsigned long suma_new = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	22ce      	movs	r2, #206	; 0xce
 8002ce8:	0052      	lsls	r2, r2, #1
 8002cea:	1912      	adds	r2, r2, r4
 8002cec:	19d2      	adds	r2, r2, r7
 8002cee:	6013      	str	r3, [r2, #0]
	unsigned long ultima_suma = HAL_GetTick();
 8002cf0:	f001 fe7e 	bl	80049f0 <HAL_GetTick>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	22cc      	movs	r2, #204	; 0xcc
 8002cf8:	0052      	lsls	r2, r2, #1
 8002cfa:	0021      	movs	r1, r4
 8002cfc:	1852      	adds	r2, r2, r1
 8002cfe:	19d2      	adds	r2, r2, r7
 8002d00:	6013      	str	r3, [r2, #0]
	unsigned long FreqBase = 149500000;
 8002d02:	4b3c      	ldr	r3, [pc, #240]	; (8002df4 <main+0x3d4>)
 8002d04:	22c8      	movs	r2, #200	; 0xc8
 8002d06:	0052      	lsls	r2, r2, #1
 8002d08:	1852      	adds	r2, r2, r1
 8002d0a:	19d2      	adds	r2, r2, r7
 8002d0c:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 8002d0e:	23a0      	movs	r3, #160	; 0xa0
 8002d10:	05db      	lsls	r3, r3, #23
 8002d12:	2201      	movs	r2, #1
 8002d14:	2120      	movs	r1, #32
 8002d16:	0018      	movs	r0, r3
 8002d18:	f002 f9a1 	bl	800505e <HAL_GPIO_WritePin>

	while (1) {
	/* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */

		led_enable_kalive(&led);
 8002d1c:	231c      	movs	r3, #28
 8002d1e:	2210      	movs	r2, #16
 8002d20:	189b      	adds	r3, r3, r2
 8002d22:	19db      	adds	r3, r3, r7
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff fd21 	bl	800276c <led_enable_kalive>

		Valor_0 = HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) ? 0 : 12500;
 8002d2a:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <main+0x3d8>)
 8002d2c:	2104      	movs	r1, #4
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f002 f978 	bl	8005024 <HAL_GPIO_ReadPin>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d001      	beq.n	8002d3c <main+0x31c>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <main+0x31e>
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <main+0x3dc>)
 8002d3e:	22c6      	movs	r2, #198	; 0xc6
 8002d40:	0052      	lsls	r2, r2, #1
 8002d42:	2110      	movs	r1, #16
 8002d44:	1852      	adds	r2, r2, r1
 8002d46:	19d2      	adds	r2, r2, r7
 8002d48:	6013      	str	r3, [r2, #0]
		Valor_1 = HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) ? 0 : 25000;
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	005a      	lsls	r2, r3, #1
 8002d4e:	23a0      	movs	r3, #160	; 0xa0
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f002 f965 	bl	8005024 <HAL_GPIO_ReadPin>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d001      	beq.n	8002d62 <main+0x342>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <main+0x344>
 8002d62:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <main+0x3e0>)
 8002d64:	22c4      	movs	r2, #196	; 0xc4
 8002d66:	0052      	lsls	r2, r2, #1
 8002d68:	2110      	movs	r1, #16
 8002d6a:	1852      	adds	r2, r2, r1
 8002d6c:	19d2      	adds	r2, r2, r7
 8002d6e:	6013      	str	r3, [r2, #0]
		Valor_2 = HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) ? 0 : 50000;
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <main+0x3e4>)
 8002d72:	2140      	movs	r1, #64	; 0x40
 8002d74:	0018      	movs	r0, r3
 8002d76:	f002 f955 	bl	8005024 <HAL_GPIO_ReadPin>
 8002d7a:	1e03      	subs	r3, r0, #0
 8002d7c:	d001      	beq.n	8002d82 <main+0x362>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e000      	b.n	8002d84 <main+0x364>
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <main+0x3e8>)
 8002d84:	22c2      	movs	r2, #194	; 0xc2
 8002d86:	0052      	lsls	r2, r2, #1
 8002d88:	2110      	movs	r1, #16
 8002d8a:	1852      	adds	r2, r2, r1
 8002d8c:	19d2      	adds	r2, r2, r7
 8002d8e:	6013      	str	r3, [r2, #0]
		Valor_3 = HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) ? 0 : 100000;
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	011a      	lsls	r2, r3, #4
 8002d94:	23a0      	movs	r3, #160	; 0xa0
 8002d96:	05db      	lsls	r3, r3, #23
 8002d98:	0011      	movs	r1, r2
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f002 f942 	bl	8005024 <HAL_GPIO_ReadPin>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d001      	beq.n	8002da8 <main+0x388>
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <main+0x38a>
 8002da8:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <main+0x3ec>)
 8002daa:	22c0      	movs	r2, #192	; 0xc0
 8002dac:	0052      	lsls	r2, r2, #1
 8002dae:	2110      	movs	r1, #16
 8002db0:	1852      	adds	r2, r2, r1
 8002db2:	19d2      	adds	r2, r2, r7
 8002db4:	6013      	str	r3, [r2, #0]
		Valor_4 = HAL_GPIO_ReadPin(SW_4_GPIO_Port, SW_4_Pin) ? 0 : 200000;
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	23a0      	movs	r3, #160	; 0xa0
 8002dbc:	05db      	lsls	r3, r3, #23
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f002 f92f 	bl	8005024 <HAL_GPIO_ReadPin>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d022      	beq.n	8002e10 <main+0x3f0>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e021      	b.n	8002e12 <main+0x3f2>
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	fffffe90 	.word	0xfffffe90
 8002dd4:	20000198 	.word	0x20000198
 8002dd8:	fffffe6c 	.word	0xfffffe6c
 8002ddc:	fffffe64 	.word	0xfffffe64
 8002de0:	08007034 	.word	0x08007034
 8002de4:	fffffe58 	.word	0xfffffe58
 8002de8:	ee6b2800 	.word	0xee6b2800
 8002dec:	41400000 	.word	0x41400000
 8002df0:	200000a0 	.word	0x200000a0
 8002df4:	08e93060 	.word	0x08e93060
 8002df8:	50000400 	.word	0x50000400
 8002dfc:	000030d4 	.word	0x000030d4
 8002e00:	000061a8 	.word	0x000061a8
 8002e04:	50000800 	.word	0x50000800
 8002e08:	0000c350 	.word	0x0000c350
 8002e0c:	000186a0 	.word	0x000186a0
 8002e10:	4b90      	ldr	r3, [pc, #576]	; (8003054 <main+0x634>)
 8002e12:	22be      	movs	r2, #190	; 0xbe
 8002e14:	0052      	lsls	r2, r2, #1
 8002e16:	2110      	movs	r1, #16
 8002e18:	1852      	adds	r2, r2, r1
 8002e1a:	19d2      	adds	r2, r2, r7
 8002e1c:	6013      	str	r3, [r2, #0]
		Valor_5 = HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin) ? 0 : 400000;
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	23a0      	movs	r3, #160	; 0xa0
 8002e24:	05db      	lsls	r3, r3, #23
 8002e26:	0011      	movs	r1, r2
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f002 f8fb 	bl	8005024 <HAL_GPIO_ReadPin>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d001      	beq.n	8002e36 <main+0x416>
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <main+0x418>
 8002e36:	4b88      	ldr	r3, [pc, #544]	; (8003058 <main+0x638>)
 8002e38:	22bc      	movs	r2, #188	; 0xbc
 8002e3a:	0052      	lsls	r2, r2, #1
 8002e3c:	2110      	movs	r1, #16
 8002e3e:	1852      	adds	r2, r2, r1
 8002e40:	19d2      	adds	r2, r2, r7
 8002e42:	6013      	str	r3, [r2, #0]
		Valor_6 = HAL_GPIO_ReadPin(SW_6_GPIO_Port, SW_6_Pin) ? 0 : 800000;
 8002e44:	4b85      	ldr	r3, [pc, #532]	; (800305c <main+0x63c>)
 8002e46:	2108      	movs	r1, #8
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f002 f8eb 	bl	8005024 <HAL_GPIO_ReadPin>
 8002e4e:	1e03      	subs	r3, r0, #0
 8002e50:	d001      	beq.n	8002e56 <main+0x436>
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <main+0x438>
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <main+0x640>)
 8002e58:	22ba      	movs	r2, #186	; 0xba
 8002e5a:	0052      	lsls	r2, r2, #1
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	1852      	adds	r2, r2, r1
 8002e60:	19d2      	adds	r2, r2, r7
 8002e62:	6013      	str	r3, [r2, #0]
		Valor_7 = HAL_GPIO_ReadPin(SW_7_GPIO_Port, SW_7_Pin) ? 0 : 1600000;
 8002e64:	4b7d      	ldr	r3, [pc, #500]	; (800305c <main+0x63c>)
 8002e66:	2110      	movs	r1, #16
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f002 f8db 	bl	8005024 <HAL_GPIO_ReadPin>
 8002e6e:	1e03      	subs	r3, r0, #0
 8002e70:	d001      	beq.n	8002e76 <main+0x456>
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <main+0x458>
 8002e76:	4b7b      	ldr	r3, [pc, #492]	; (8003064 <main+0x644>)
 8002e78:	22b8      	movs	r2, #184	; 0xb8
 8002e7a:	0052      	lsls	r2, r2, #1
 8002e7c:	2110      	movs	r1, #16
 8002e7e:	1852      	adds	r2, r2, r1
 8002e80:	19d2      	adds	r2, r2, r7
 8002e82:	6013      	str	r3, [r2, #0]
		Valor_8 = HAL_GPIO_ReadPin(SW_8_GPIO_Port, SW_8_Pin) ? 0 : 3200000;
 8002e84:	4b75      	ldr	r3, [pc, #468]	; (800305c <main+0x63c>)
 8002e86:	2120      	movs	r1, #32
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f002 f8cb 	bl	8005024 <HAL_GPIO_ReadPin>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d001      	beq.n	8002e96 <main+0x476>
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <main+0x478>
 8002e96:	4b74      	ldr	r3, [pc, #464]	; (8003068 <main+0x648>)
 8002e98:	22b6      	movs	r2, #182	; 0xb6
 8002e9a:	0052      	lsls	r2, r2, #1
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	1852      	adds	r2, r2, r1
 8002ea0:	19d2      	adds	r2, r2, r7
 8002ea2:	6013      	str	r3, [r2, #0]
		Valor_9 = HAL_GPIO_ReadPin(SW_9_GPIO_Port, SW_9_Pin) ? 0 : 6400000;
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4a6c      	ldr	r2, [pc, #432]	; (800305c <main+0x63c>)
 8002eaa:	0019      	movs	r1, r3
 8002eac:	0010      	movs	r0, r2
 8002eae:	f002 f8b9 	bl	8005024 <HAL_GPIO_ReadPin>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d001      	beq.n	8002eba <main+0x49a>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <main+0x49c>
 8002eba:	4b6c      	ldr	r3, [pc, #432]	; (800306c <main+0x64c>)
 8002ebc:	21b4      	movs	r1, #180	; 0xb4
 8002ebe:	0049      	lsls	r1, r1, #1
 8002ec0:	2010      	movs	r0, #16
 8002ec2:	180a      	adds	r2, r1, r0
 8002ec4:	19d2      	adds	r2, r2, r7
 8002ec6:	6013      	str	r3, [r2, #0]

		suma_read = (Valor_0) + (Valor_1) + (Valor_2) + (Valor_3) + (Valor_4)
 8002ec8:	23c6      	movs	r3, #198	; 0xc6
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	181b      	adds	r3, r3, r0
 8002ece:	19db      	adds	r3, r3, r7
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	23c4      	movs	r3, #196	; 0xc4
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	181b      	adds	r3, r3, r0
 8002ed8:	19db      	adds	r3, r3, r7
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	18d2      	adds	r2, r2, r3
 8002ede:	23c2      	movs	r3, #194	; 0xc2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	181b      	adds	r3, r3, r0
 8002ee4:	19db      	adds	r3, r3, r7
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	18d2      	adds	r2, r2, r3
 8002eea:	23c0      	movs	r3, #192	; 0xc0
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	181b      	adds	r3, r3, r0
 8002ef0:	19db      	adds	r3, r3, r7
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	18d2      	adds	r2, r2, r3
 8002ef6:	23be      	movs	r3, #190	; 0xbe
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	181b      	adds	r3, r3, r0
 8002efc:	19db      	adds	r3, r3, r7
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	18d2      	adds	r2, r2, r3
								+ (Valor_5) + (Valor_6) + (Valor_7) + (Valor_8) + (Valor_9);
 8002f02:	23bc      	movs	r3, #188	; 0xbc
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	181b      	adds	r3, r3, r0
 8002f08:	19db      	adds	r3, r3, r7
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	18d2      	adds	r2, r2, r3
 8002f0e:	23ba      	movs	r3, #186	; 0xba
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	181b      	adds	r3, r3, r0
 8002f14:	19db      	adds	r3, r3, r7
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	18d2      	adds	r2, r2, r3
 8002f1a:	23b8      	movs	r3, #184	; 0xb8
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	181b      	adds	r3, r3, r0
 8002f20:	19db      	adds	r3, r3, r7
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	18d2      	adds	r2, r2, r3
 8002f26:	23b6      	movs	r3, #182	; 0xb6
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	181b      	adds	r3, r3, r0
 8002f2c:	19db      	adds	r3, r3, r7
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	18d2      	adds	r2, r2, r3
 8002f32:	180b      	adds	r3, r1, r0
 8002f34:	19db      	adds	r3, r3, r7
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	18d3      	adds	r3, r2, r3
		suma_read = (Valor_0) + (Valor_1) + (Valor_2) + (Valor_3) + (Valor_4)
 8002f3a:	24b2      	movs	r4, #178	; 0xb2
 8002f3c:	0064      	lsls	r4, r4, #1
 8002f3e:	1822      	adds	r2, r4, r0
 8002f40:	19d2      	adds	r2, r2, r7
 8002f42:	6013      	str	r3, [r2, #0]

		if (suma_read != suma_new) {
 8002f44:	0006      	movs	r6, r0
 8002f46:	1823      	adds	r3, r4, r0
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	25ce      	movs	r5, #206	; 0xce
 8002f4e:	006d      	lsls	r5, r5, #1
 8002f50:	19ab      	adds	r3, r5, r6
 8002f52:	19db      	adds	r3, r3, r7
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d022      	beq.n	8002fa0 <main+0x580>
			suma_end_off();
 8002f5a:	23a0      	movs	r3, #160	; 0xa0
 8002f5c:	05db      	lsls	r3, r3, #23
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	23a0      	movs	r3, #160	; 0xa0
 8002f62:	05db      	lsls	r3, r3, #23
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	438a      	bics	r2, r1
 8002f68:	615a      	str	r2, [r3, #20]
			ultima_suma = HAL_GetTick();
 8002f6a:	f001 fd41 	bl	80049f0 <HAL_GetTick>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	22cc      	movs	r2, #204	; 0xcc
 8002f72:	0052      	lsls	r2, r2, #1
 8002f74:	1992      	adds	r2, r2, r6
 8002f76:	19d2      	adds	r2, r2, r7
 8002f78:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_RESET);
 8002f7a:	23a0      	movs	r3, #160	; 0xa0
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2120      	movs	r1, #32
 8002f82:	0018      	movs	r0, r3
 8002f84:	f002 f86b 	bl	800505e <HAL_GPIO_WritePin>
			suma_changing_on();
 8002f88:	4b34      	ldr	r3, [pc, #208]	; (800305c <main+0x63c>)
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	4b33      	ldr	r3, [pc, #204]	; (800305c <main+0x63c>)
 8002f8e:	2101      	movs	r1, #1
 8002f90:	430a      	orrs	r2, r1
 8002f92:	615a      	str	r2, [r3, #20]
			suma_new = suma_read;
 8002f94:	19a3      	adds	r3, r4, r6
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	19aa      	adds	r2, r5, r6
 8002f9c:	19d2      	adds	r2, r2, r7
 8002f9e:	6013      	str	r3, [r2, #0]
		}

		if ((HAL_GetTick() - ultima_suma) > 100) {
 8002fa0:	f001 fd26 	bl	80049f0 <HAL_GetTick>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	23cc      	movs	r3, #204	; 0xcc
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2110      	movs	r1, #16
 8002fac:	185b      	adds	r3, r3, r1
 8002fae:	19db      	adds	r3, r3, r7
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	; 0x64
 8002fb6:	d800      	bhi.n	8002fba <main+0x59a>
 8002fb8:	e6b0      	b.n	8002d1c <main+0x2fc>
			if (suma_new != suma_current) {
 8002fba:	24ce      	movs	r4, #206	; 0xce
 8002fbc:	0064      	lsls	r4, r4, #1
 8002fbe:	000e      	movs	r6, r1
 8002fc0:	19a3      	adds	r3, r4, r6
 8002fc2:	19db      	adds	r3, r3, r7
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	25d0      	movs	r5, #208	; 0xd0
 8002fc8:	006d      	lsls	r5, r5, #1
 8002fca:	19ab      	adds	r3, r5, r6
 8002fcc:	19db      	adds	r3, r3, r7
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d100      	bne.n	8002fd6 <main+0x5b6>
 8002fd4:	e6a2      	b.n	8002d1c <main+0x2fc>
				ppl.FreqOut = suma_read + FreqBase;
 8002fd6:	23b2      	movs	r3, #178	; 0xb2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	199b      	adds	r3, r3, r6
 8002fdc:	19db      	adds	r3, r3, r7
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	23c8      	movs	r3, #200	; 0xc8
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	199b      	adds	r3, r3, r6
 8002fe6:	19db      	adds	r3, r3, r7
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	18d3      	adds	r3, r2, r3
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <main+0x650>)
 8002ff4:	22d4      	movs	r2, #212	; 0xd4
 8002ff6:	0052      	lsls	r2, r2, #1
 8002ff8:	189b      	adds	r3, r3, r2
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	4694      	mov	ip, r2
 8002ffe:	44bc      	add	ip, r7
 8003000:	4463      	add	r3, ip
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6019      	str	r1, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
				max2871Program(&hspi2, &ppl);
 800300a:	2338      	movs	r3, #56	; 0x38
 800300c:	199b      	adds	r3, r3, r6
 800300e:	19da      	adds	r2, r3, r7
 8003010:	4b18      	ldr	r3, [pc, #96]	; (8003074 <main+0x654>)
 8003012:	0011      	movs	r1, r2
 8003014:	0018      	movs	r0, r3
 8003016:	f001 fa49 	bl	80044ac <max2871Program>
				HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 800301a:	23a0      	movs	r3, #160	; 0xa0
 800301c:	05db      	lsls	r3, r3, #23
 800301e:	2201      	movs	r2, #1
 8003020:	2120      	movs	r1, #32
 8003022:	0018      	movs	r0, r3
 8003024:	f002 f81b 	bl	800505e <HAL_GPIO_WritePin>
				suma_changing_off();
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <main+0x63c>)
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <main+0x63c>)
 800302e:	2101      	movs	r1, #1
 8003030:	438a      	bics	r2, r1
 8003032:	615a      	str	r2, [r3, #20]
				suma_end_on();
 8003034:	23a0      	movs	r3, #160	; 0xa0
 8003036:	05db      	lsls	r3, r3, #23
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	23a0      	movs	r3, #160	; 0xa0
 800303c:	05db      	lsls	r3, r3, #23
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	430a      	orrs	r2, r1
 8003042:	615a      	str	r2, [r3, #20]
				suma_current = suma_new;
 8003044:	19a3      	adds	r3, r4, r6
 8003046:	19db      	adds	r3, r3, r7
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	19aa      	adds	r2, r5, r6
 800304c:	19d2      	adds	r2, r2, r7
 800304e:	6013      	str	r3, [r2, #0]
		led_enable_kalive(&led);
 8003050:	e664      	b.n	8002d1c <main+0x2fc>
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	00030d40 	.word	0x00030d40
 8003058:	00061a80 	.word	0x00061a80
 800305c:	50000400 	.word	0x50000400
 8003060:	000c3500 	.word	0x000c3500
 8003064:	00186a00 	.word	0x00186a00
 8003068:	0030d400 	.word	0x0030d400
 800306c:	0061a800 	.word	0x0061a800
 8003070:	fffffe90 	.word	0xfffffe90
 8003074:	200000a0 	.word	0x200000a0

08003078 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b093      	sub	sp, #76	; 0x4c
 800307c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800307e:	2414      	movs	r4, #20
 8003080:	193b      	adds	r3, r7, r4
 8003082:	0018      	movs	r0, r3
 8003084:	2334      	movs	r3, #52	; 0x34
 8003086:	001a      	movs	r2, r3
 8003088:	2100      	movs	r1, #0
 800308a:	f003 ffad 	bl	8006fe8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	0018      	movs	r0, r3
 8003092:	2310      	movs	r3, #16
 8003094:	001a      	movs	r2, r3
 8003096:	2100      	movs	r1, #0
 8003098:	f003 ffa6 	bl	8006fe8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f002 f927 	bl	80052f4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030a6:	193b      	adds	r3, r7, r4
 80030a8:	2202      	movs	r2, #2
 80030aa:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030ac:	193b      	adds	r3, r7, r4
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	0052      	lsls	r2, r2, #1
 80030b2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	2240      	movs	r2, #64	; 0x40
 80030be:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	2200      	movs	r2, #0
 80030c4:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	0018      	movs	r0, r3
 80030ca:	f002 f95f 	bl	800538c <HAL_RCC_OscConfig>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d001      	beq.n	80030d6 <SystemClock_Config+0x5e>
		Error_Handler();
 80030d2:	f000 f9ad 	bl	8003430 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	2200      	movs	r2, #0
 80030e0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	2100      	movs	r1, #0
 80030f2:	0018      	movs	r0, r3
 80030f4:	f002 fc5a 	bl	80059ac <HAL_RCC_ClockConfig>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d001      	beq.n	8003100 <SystemClock_Config+0x88>
		Error_Handler();
 80030fc:	f000 f998 	bl	8003430 <Error_Handler>
	}
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b013      	add	sp, #76	; 0x4c
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <MX_CRC_Init+0x40>)
 800310e:	4a0f      	ldr	r2, [pc, #60]	; (800314c <MX_CRC_Init+0x44>)
 8003110:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <MX_CRC_Init+0x40>)
 8003114:	2200      	movs	r2, #0
 8003116:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <MX_CRC_Init+0x40>)
 800311a:	2200      	movs	r2, #0
 800311c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <MX_CRC_Init+0x40>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <MX_CRC_Init+0x40>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <MX_CRC_Init+0x40>)
 800312c:	2201      	movs	r2, #1
 800312e:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <MX_CRC_Init+0x40>)
 8003132:	0018      	movs	r0, r3
 8003134:	f001 fd3e 	bl	8004bb4 <HAL_CRC_Init>
 8003138:	1e03      	subs	r3, r0, #0
 800313a:	d001      	beq.n	8003140 <MX_CRC_Init+0x38>
		Error_Handler();
 800313c:	f000 f978 	bl	8003430 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	20000028 	.word	0x20000028
 800314c:	40023000 	.word	0x40023000

08003150 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <MX_I2C1_Init+0x74>)
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <MX_I2C1_Init+0x78>)
 8003158:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <MX_I2C1_Init+0x74>)
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <MX_I2C1_Init+0x7c>)
 800315e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003160:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <MX_I2C1_Init+0x74>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <MX_I2C1_Init+0x74>)
 8003168:	2201      	movs	r2, #1
 800316a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <MX_I2C1_Init+0x74>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_I2C1_Init+0x74>)
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <MX_I2C1_Init+0x74>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_I2C1_Init+0x74>)
 8003180:	2200      	movs	r2, #0
 8003182:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <MX_I2C1_Init+0x74>)
 8003186:	2200      	movs	r2, #0
 8003188:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_I2C1_Init+0x74>)
 800318c:	0018      	movs	r0, r3
 800318e:	f001 ff83 	bl	8005098 <HAL_I2C_Init>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d001      	beq.n	800319a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8003196:	f000 f94b 	bl	8003430 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <MX_I2C1_Init+0x74>)
 800319c:	2100      	movs	r1, #0
 800319e:	0018      	movs	r0, r3
 80031a0:	f002 f810 	bl	80051c4 <HAL_I2CEx_ConfigAnalogFilter>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80031a8:	f000 f942 	bl	8003430 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <MX_I2C1_Init+0x74>)
 80031ae:	2100      	movs	r1, #0
 80031b0:	0018      	movs	r0, r3
 80031b2:	f002 f853 	bl	800525c <HAL_I2CEx_ConfigDigitalFilter>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d001      	beq.n	80031be <MX_I2C1_Init+0x6e>
		Error_Handler();
 80031ba:	f000 f939 	bl	8003430 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000004c 	.word	0x2000004c
 80031c8:	40005400 	.word	0x40005400
 80031cc:	00303d5b 	.word	0x00303d5b

080031d0 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <MX_SPI2_Init+0x78>)
 80031d6:	4a1d      	ldr	r2, [pc, #116]	; (800324c <MX_SPI2_Init+0x7c>)
 80031d8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <MX_SPI2_Init+0x78>)
 80031dc:	2282      	movs	r2, #130	; 0x82
 80031de:	0052      	lsls	r2, r2, #1
 80031e0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <MX_SPI2_Init+0x78>)
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	0212      	lsls	r2, r2, #8
 80031e8:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <MX_SPI2_Init+0x78>)
 80031ec:	22e0      	movs	r2, #224	; 0xe0
 80031ee:	00d2      	lsls	r2, r2, #3
 80031f0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <MX_SPI2_Init+0x78>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <MX_SPI2_Init+0x78>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <MX_SPI2_Init+0x78>)
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <MX_SPI2_Init+0x78>)
 8003208:	2200      	movs	r2, #0
 800320a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <MX_SPI2_Init+0x78>)
 800320e:	2200      	movs	r2, #0
 8003210:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <MX_SPI2_Init+0x78>)
 8003214:	2200      	movs	r2, #0
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <MX_SPI2_Init+0x78>)
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <MX_SPI2_Init+0x78>)
 8003220:	2207      	movs	r2, #7
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <MX_SPI2_Init+0x78>)
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <MX_SPI2_Init+0x78>)
 800322c:	2208      	movs	r2, #8
 800322e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <MX_SPI2_Init+0x78>)
 8003232:	0018      	movs	r0, r3
 8003234:	f002 fe8a 	bl	8005f4c <HAL_SPI_Init>
 8003238:	1e03      	subs	r3, r0, #0
 800323a:	d001      	beq.n	8003240 <MX_SPI2_Init+0x70>
		Error_Handler();
 800323c:	f000 f8f8 	bl	8003430 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	200000a0 	.word	0x200000a0
 800324c:	40003800 	.word	0x40003800

08003250 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 8003256:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <MX_USART1_UART_Init+0x98>)
 8003258:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 800325c:	22e1      	movs	r2, #225	; 0xe1
 800325e:	0252      	lsls	r2, r2, #9
 8003260:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 8003276:	220c      	movs	r2, #12
 8003278:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 8003294:	2200      	movs	r2, #0
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 800329a:	0018      	movs	r0, r3
 800329c:	f003 f9dc 	bl	8006658 <HAL_UART_Init>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d001      	beq.n	80032a8 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 80032a4:	f000 f8c4 	bl	8003430 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 80032aa:	2100      	movs	r1, #0
 80032ac:	0018      	movs	r0, r3
 80032ae:	f003 fd97 	bl	8006de0 <HAL_UARTEx_SetTxFifoThreshold>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d001      	beq.n	80032ba <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80032b6:	f000 f8bb 	bl	8003430 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 80032bc:	2100      	movs	r1, #0
 80032be:	0018      	movs	r0, r3
 80032c0:	f003 fdce 	bl	8006e60 <HAL_UARTEx_SetRxFifoThreshold>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d001      	beq.n	80032cc <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80032c8:	f000 f8b2 	bl	8003430 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <MX_USART1_UART_Init+0x94>)
 80032ce:	0018      	movs	r0, r3
 80032d0:	f003 fd4c 	bl	8006d6c <HAL_UARTEx_DisableFifoMode>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80032d8:	f000 f8aa 	bl	8003430 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000104 	.word	0x20000104
 80032e8:	40013800 	.word	0x40013800

080032ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80032f2:	240c      	movs	r4, #12
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	0018      	movs	r0, r3
 80032f8:	2314      	movs	r3, #20
 80032fa:	001a      	movs	r2, r3
 80032fc:	2100      	movs	r1, #0
 80032fe:	f003 fe73 	bl	8006fe8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	4b45      	ldr	r3, [pc, #276]	; (8003418 <MX_GPIO_Init+0x12c>)
 8003304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003306:	4b44      	ldr	r3, [pc, #272]	; (8003418 <MX_GPIO_Init+0x12c>)
 8003308:	2102      	movs	r1, #2
 800330a:	430a      	orrs	r2, r1
 800330c:	635a      	str	r2, [r3, #52]	; 0x34
 800330e:	4b42      	ldr	r3, [pc, #264]	; (8003418 <MX_GPIO_Init+0x12c>)
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	2202      	movs	r2, #2
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <MX_GPIO_Init+0x12c>)
 800331c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331e:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <MX_GPIO_Init+0x12c>)
 8003320:	2104      	movs	r1, #4
 8003322:	430a      	orrs	r2, r1
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
 8003326:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <MX_GPIO_Init+0x12c>)
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	2204      	movs	r2, #4
 800332c:	4013      	ands	r3, r2
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <MX_GPIO_Init+0x12c>)
 8003334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <MX_GPIO_Init+0x12c>)
 8003338:	2101      	movs	r1, #1
 800333a:	430a      	orrs	r2, r1
 800333c:	635a      	str	r2, [r3, #52]	; 0x34
 800333e:	4b36      	ldr	r3, [pc, #216]	; (8003418 <MX_GPIO_Init+0x12c>)
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	2201      	movs	r2, #1
 8003344:	4013      	ands	r3, r2
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin,
 800334a:	4934      	ldr	r1, [pc, #208]	; (800341c <MX_GPIO_Init+0x130>)
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <MX_GPIO_Init+0x134>)
 800334e:	2200      	movs	r2, #0
 8003350:	0018      	movs	r0, r3
 8003352:	f001 fe84 	bl	800505e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8003356:	23a0      	movs	r3, #160	; 0xa0
 8003358:	05db      	lsls	r3, r3, #23
 800335a:	2200      	movs	r2, #0
 800335c:	21ae      	movs	r1, #174	; 0xae
 800335e:	0018      	movs	r0, r3
 8003360:	f001 fe7d 	bl	800505e <HAL_GPIO_WritePin>
			MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin | MAX_RF_ENABLE_Pin | LED_1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RS485_CTRL_Pin LED_2_Pin LED_3_Pin */
	GPIO_InitStruct.Pin = RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin;
 8003364:	193b      	adds	r3, r7, r4
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <MX_GPIO_Init+0x130>)
 8003368:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336a:	193b      	adds	r3, r7, r4
 800336c:	2201      	movs	r2, #1
 800336e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	193b      	adds	r3, r7, r4
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	193b      	adds	r3, r7, r4
 8003378:	2200      	movs	r2, #0
 800337a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337c:	193b      	adds	r3, r7, r4
 800337e:	4a28      	ldr	r2, [pc, #160]	; (8003420 <MX_GPIO_Init+0x134>)
 8003380:	0019      	movs	r1, r3
 8003382:	0010      	movs	r0, r2
 8003384:	f001 fcea 	bl	8004d5c <HAL_GPIO_Init>

	/*Configure GPIO pins : TEST_INPUT_1_Pin TEST_INPUT_2_Pin SW_2_Pin */
	GPIO_InitStruct.Pin = TEST_INPUT_1_Pin | TEST_INPUT_2_Pin | SW_2_Pin;
 8003388:	193b      	adds	r3, r7, r4
 800338a:	4a26      	ldr	r2, [pc, #152]	; (8003424 <MX_GPIO_Init+0x138>)
 800338c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800338e:	193b      	adds	r3, r7, r4
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	193b      	adds	r3, r7, r4
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339a:	193b      	adds	r3, r7, r4
 800339c:	4a22      	ldr	r2, [pc, #136]	; (8003428 <MX_GPIO_Init+0x13c>)
 800339e:	0019      	movs	r1, r3
 80033a0:	0010      	movs	r0, r2
 80033a2:	f001 fcdb 	bl	8004d5c <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LE_Pin MAX_CE_Pin MAX_MUX_Pin MAX_RF_ENABLE_Pin
	 LED_1_Pin */
	GPIO_InitStruct.Pin = MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	22ae      	movs	r2, #174	; 0xae
 80033aa:	601a      	str	r2, [r3, #0]
			| MAX_RF_ENABLE_Pin | LED_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ac:	193b      	adds	r3, r7, r4
 80033ae:	2201      	movs	r2, #1
 80033b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033be:	193a      	adds	r2, r7, r4
 80033c0:	23a0      	movs	r3, #160	; 0xa0
 80033c2:	05db      	lsls	r3, r3, #23
 80033c4:	0011      	movs	r1, r2
 80033c6:	0018      	movs	r0, r3
 80033c8:	f001 fcc8 	bl	8004d5c <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LOCK_DETECTOR_Pin SW_1_Pin SW_3_Pin SW_4_Pin
	 SW_5_Pin */
	GPIO_InitStruct.Pin = MAX_LOCK_DETECTOR_Pin | SW_1_Pin | SW_3_Pin | SW_4_Pin
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	4a17      	ldr	r2, [pc, #92]	; (800342c <MX_GPIO_Init+0x140>)
 80033d0:	601a      	str	r2, [r3, #0]
			| SW_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	2200      	movs	r2, #0
 80033d6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033de:	193a      	adds	r2, r7, r4
 80033e0:	23a0      	movs	r3, #160	; 0xa0
 80033e2:	05db      	lsls	r3, r3, #23
 80033e4:	0011      	movs	r1, r2
 80033e6:	0018      	movs	r0, r3
 80033e8:	f001 fcb8 	bl	8004d5c <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_0_Pin SW_6_Pin SW_7_Pin SW_8_Pin
	 SW_9_Pin */
	GPIO_InitStruct.Pin = SW_0_Pin | SW_6_Pin | SW_7_Pin | SW_8_Pin | SW_9_Pin;
 80033ec:	0021      	movs	r1, r4
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	229e      	movs	r2, #158	; 0x9e
 80033f2:	0052      	lsls	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003402:	187b      	adds	r3, r7, r1
 8003404:	4a06      	ldr	r2, [pc, #24]	; (8003420 <MX_GPIO_Init+0x134>)
 8003406:	0019      	movs	r1, r3
 8003408:	0010      	movs	r0, r2
 800340a:	f001 fca7 	bl	8004d5c <HAL_GPIO_Init>

}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b009      	add	sp, #36	; 0x24
 8003414:	bd90      	pop	{r4, r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	40021000 	.word	0x40021000
 800341c:	00000203 	.word	0x00000203
 8003420:	50000400 	.word	0x50000400
 8003424:	0000c040 	.word	0x0000c040
 8003428:	50000800 	.word	0x50000800
 800342c:	00009940 	.word	0x00009940

08003430 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003434:	b672      	cpsid	i
}
 8003436:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003438:	e7fe      	b.n	8003438 <Error_Handler+0x8>
	...

0800343c <max2871Init>:
 *      Author: artur
 */

#include "max2871.h"

void max2871Init(MAX2871_t *ppl) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	//composition of MAX2971 Registers

	ppl->FreqOut = 0;
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	2300      	movs	r3, #0
 800344a:	600a      	str	r2, [r1, #0]
 800344c:	604b      	str	r3, [r1, #4]
	ppl->FreqOUTold = 0;
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	2300      	movs	r3, #0
 8003454:	608a      	str	r2, [r1, #8]
 8003456:	60cb      	str	r3, [r1, #12]
	ppl->FMIN = 23499999;
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4a81      	ldr	r2, [pc, #516]	; (8003660 <max2871Init+0x224>)
 800345c:	2300      	movs	r3, #0
 800345e:	610a      	str	r2, [r1, #16]
 8003460:	614b      	str	r3, [r1, #20]
	ppl->FMAX = 6000000001;
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4a7f      	ldr	r2, [pc, #508]	; (8003664 <max2871Init+0x228>)
 8003466:	2301      	movs	r3, #1
 8003468:	618a      	str	r2, [r1, #24]
 800346a:	61cb      	str	r3, [r1, #28]
	ppl->LMAX = 12;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a7e      	ldr	r2, [pc, #504]	; (8003668 <max2871Init+0x22c>)
 8003470:	621a      	str	r2, [r3, #32]
	ppl->LMIN = 12 - 31.5;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a7d      	ldr	r2, [pc, #500]	; (800366c <max2871Init+0x230>)
 8003476:	625a      	str	r2, [r3, #36]	; 0x24
	ppl->LACT = 12.0;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a7b      	ldr	r2, [pc, #492]	; (8003668 <max2871Init+0x22c>)
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
	ppl->ATT = 0.0;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c
	ppl->CAL = 0.0;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
	ppl->DIVA = 0x0UL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	635a      	str	r2, [r3, #52]	; 0x34

	ppl->register0.INT = 0x0UL;     //Enables fractional-N mode
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
	ppl->register0.NDIV = 0x0UL;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
	ppl->register0.FRAC = 0x0UL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
	ppl->register0.ADDR0 = 0x0UL;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44

	ppl->register1.CPL = 0x3UL;     //Charge pump liniarity 30%
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2203      	movs	r2, #3
 80034ac:	649a      	str	r2, [r3, #72]	; 0x48
	ppl->register1.CPT = 0x00UL;    //Charge pump test mode  normal mode
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	64da      	str	r2, [r3, #76]	; 0x4c
	ppl->register1.PHASE = 0x1UL;   //Phase Value (recomened)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	651a      	str	r2, [r3, #80]	; 0x50
	ppl->register1.MODULUS = 0xFA0UL; //4000 for max resolution
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	22fa      	movs	r2, #250	; 0xfa
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
	ppl->register1.ADDR1  =   0x1UL;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58

	ppl->register2.LDS = 0x1UL; 	// 1 if fPFD > 32 MHz
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	65da      	str	r2, [r3, #92]	; 0x5c
	ppl->register2.SDN = 0x0UL; 	//noise mode  Low-noise mode
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
	ppl->register2.MUX = 0x6UL;		//MUX pin configuration  Digital lock detect
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2206      	movs	r2, #6
 80034d8:	665a      	str	r2, [r3, #100]	; 0x64
	ppl->register2.DBR = 0x0UL; 	//reference doubler is disabled
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	669a      	str	r2, [r3, #104]	; 0x68
	ppl->register2.RDIV2 = 0x0UL; 	//reference divide-by-2 is disabled
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	66da      	str	r2, [r3, #108]	; 0x6c
	ppl->register2.RCNT = 0x0UL; 	// reference divide Value is unused
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	671a      	str	r2, [r3, #112]	; 0x70
	ppl->register2.REG4DB = 0x0UL; 	//double buffer mode disabled
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	675a      	str	r2, [r3, #116]	; 0x74
	ppl->register2.CP = 0x00UL; 	//charge pump current  0.32 mA (1.36/RSET * (1 + CP[3:0]) RSET  5k1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	679a      	str	r2, [r3, #120]	; 0x78
	ppl->register2.LDF = 0x0UL;		// lock detect function  Frac-N lock detect
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	67da      	str	r2, [r3, #124]	; 0x7c
	ppl->register2.LDP = 0x0UL;  	// lock detect precision  10ns
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	2100      	movs	r1, #0
 8003504:	5099      	str	r1, [r3, r2]
	ppl->register2.PDP = 0x1UL; 	//phase detector polarity set positive
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2284      	movs	r2, #132	; 0x84
 800350a:	2101      	movs	r1, #1
 800350c:	5099      	str	r1, [r3, r2]
	ppl->register2.SHDN = 0x0UL;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2288      	movs	r2, #136	; 0x88
 8003512:	2100      	movs	r1, #0
 8003514:	5099      	str	r1, [r3, r2]
	ppl->register2.TRI = 0x0UL;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	228c      	movs	r2, #140	; 0x8c
 800351a:	2100      	movs	r1, #0
 800351c:	5099      	str	r1, [r3, r2]
	ppl->register2.RST = 0x0UL;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2290      	movs	r2, #144	; 0x90
 8003522:	2100      	movs	r1, #0
 8003524:	5099      	str	r1, [r3, r2]
	ppl->register2.ADDR2 = 0x2UL;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2294      	movs	r2, #148	; 0x94
 800352a:	2102      	movs	r1, #2
 800352c:	5099      	str	r1, [r3, r2]

	ppl->register3.VCO_MS = 0x0UL;		// VCO manual selection: unused
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2298      	movs	r2, #152	; 0x98
 8003532:	2100      	movs	r1, #0
 8003534:	5099      	str	r1, [r3, r2]
	ppl->register3.VAS_SHDN = 0x0UL; 	// VAS enabled
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	229c      	movs	r2, #156	; 0x9c
 800353a:	2100      	movs	r1, #0
 800353c:	5099      	str	r1, [r3, r2]
	ppl->register3.RETUNE = 0x1UL; 	    // VAS temperature compensation enabled
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	22a0      	movs	r2, #160	; 0xa0
 8003542:	2101      	movs	r1, #1
 8003544:	5099      	str	r1, [r3, r2]
	ppl->register3.CSM = 0x0UL; 	    // Cycle slip mode disabled
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	22a4      	movs	r2, #164	; 0xa4
 800354a:	2100      	movs	r1, #0
 800354c:	5099      	str	r1, [r3, r2]
	ppl->register3.MUTEDEL = 0x0UL; 	// mute delay mode disabled
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	22a8      	movs	r2, #168	; 0xa8
 8003552:	2100      	movs	r1, #0
 8003554:	5099      	str	r1, [r3, r2]
	ppl->register3.CDM = 0x1UL; 	    // Fast-lock mode enabled
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	22ac      	movs	r2, #172	; 0xac
 800355a:	2101      	movs	r1, #1
 800355c:	5099      	str	r1, [r3, r2]
	ppl->register3.CDIV = 0x0UL;		// clock divider value unused
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	22b0      	movs	r2, #176	; 0xb0
 8003562:	2100      	movs	r1, #0
 8003564:	5099      	str	r1, [r3, r2]
	ppl->register3.ADDR3 = 0x3UL;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	22b4      	movs	r2, #180	; 0xb4
 800356a:	2103      	movs	r1, #3
 800356c:	5099      	str	r1, [r3, r2]

	ppl->register4.RES = 0x3UL;		    // Reserved
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	22b8      	movs	r2, #184	; 0xb8
 8003572:	2103      	movs	r1, #3
 8003574:	5099      	str	r1, [r3, r2]
	ppl->register4.SDLDO = 0x0UL; 	    // LDO enabled
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	22bc      	movs	r2, #188	; 0xbc
 800357a:	2100      	movs	r1, #0
 800357c:	5099      	str	r1, [r3, r2]
	ppl->register4.SDDIV = 0x0UL; 	    // VCO Divider enabled
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	22c0      	movs	r2, #192	; 0xc0
 8003582:	2100      	movs	r1, #0
 8003584:	5099      	str	r1, [r3, r2]
	ppl->register4.SDREF = 0x0UL; 	    // Reference input enabled
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	22c4      	movs	r2, #196	; 0xc4
 800358a:	2100      	movs	r1, #0
 800358c:	5099      	str	r1, [r3, r2]
	ppl->register4.FB = 0x1UL; 	        // VCO to N counter mode is NOT divided
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	22c8      	movs	r2, #200	; 0xc8
 8003592:	2101      	movs	r1, #1
 8003594:	5099      	str	r1, [r3, r2]
	ppl->register4.BS = 0x30FFUL; 	    // shoud be choosen so that fPFD/BS  50kH or less
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	22cc      	movs	r2, #204	; 0xcc
 800359a:	4935      	ldr	r1, [pc, #212]	; (8003670 <max2871Init+0x234>)
 800359c:	5099      	str	r1, [r3, r2]
	ppl->register4.SDVCO = 0x0UL;		// VCO enabled
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	22d0      	movs	r2, #208	; 0xd0
 80035a2:	2100      	movs	r1, #0
 80035a4:	5099      	str	r1, [r3, r2]
	ppl->register4.MTLD = 0x0UL;        // RFOUT Mute until Lock detect mode disabled
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	22d4      	movs	r2, #212	; 0xd4
 80035aa:	2100      	movs	r1, #0
 80035ac:	5099      	str	r1, [r3, r2]
	ppl->register4.BDIV = 0x0UL;		// RFOUTB is divided (so it's the same as RFOUTA)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	22d8      	movs	r2, #216	; 0xd8
 80035b2:	2100      	movs	r1, #0
 80035b4:	5099      	str	r1, [r3, r2]
	ppl->register4.RFB_EN = 0x0UL; 	    // RFOUTB enabled (modificado 6-02-23)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	22dc      	movs	r2, #220	; 0xdc
 80035ba:	2100      	movs	r1, #0
 80035bc:	5099      	str	r1, [r3, r2]
	ppl->register4.BPWR = 0x3UL; 	    // RFOUTB  5 dBm
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	22e0      	movs	r2, #224	; 0xe0
 80035c2:	2103      	movs	r1, #3
 80035c4:	5099      	str	r1, [r3, r2]
	ppl->register4.RFA_EN = 0x1UL; 	    // RFOUTA enabled
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	22e4      	movs	r2, #228	; 0xe4
 80035ca:	2101      	movs	r1, #1
 80035cc:	5099      	str	r1, [r3, r2]
	ppl->register4.APWR = 0x3UL; 	    // RFOUTA  5dBm
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	22e8      	movs	r2, #232	; 0xe8
 80035d2:	2103      	movs	r1, #3
 80035d4:	5099      	str	r1, [r3, r2]
	ppl->register4.ADDR4 = 0x4UL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	22ec      	movs	r2, #236	; 0xec
 80035da:	2104      	movs	r1, #4
 80035dc:	5099      	str	r1, [r3, r2]

	ppl->register5.VAS_DLY = 0x3UL; 	// 0x0 if VAS_TEMP  0, 0x3 if VAS_TEMP  1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	22f0      	movs	r2, #240	; 0xf0
 80035e2:	2103      	movs	r1, #3
 80035e4:	5099      	str	r1, [r3, r2]
	ppl->register5.SDPLL = 0x0UL;		// PLL enabled
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	22f4      	movs	r2, #244	; 0xf4
 80035ea:	2100      	movs	r1, #0
 80035ec:	5099      	str	r1, [r3, r2]
	ppl->register5.F01 = 0x1UL;         // if F  0 then int
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	22f8      	movs	r2, #248	; 0xf8
 80035f2:	2101      	movs	r1, #1
 80035f4:	5099      	str	r1, [r3, r2]
	ppl->register5.LD = 0x3UL;		    // Lock-Detect pin function  HIGH
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	22fc      	movs	r2, #252	; 0xfc
 80035fa:	2103      	movs	r1, #3
 80035fc:	5099      	str	r1, [r3, r2]
	ppl->register5.MUX_MSB = 0x0UL; 	// MSB of MUX
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2100      	movs	r1, #0
 8003606:	50d1      	str	r1, [r2, r3]
	ppl->register5.ADCS = 0x0UL; 	    // ADC normal operation (ADC isn't used)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	2382      	movs	r3, #130	; 0x82
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2100      	movs	r1, #0
 8003610:	50d1      	str	r1, [r2, r3]
	ppl->register5.ADCM = 0x0UL; 	    // ADC disabled
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	2384      	movs	r3, #132	; 0x84
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2100      	movs	r1, #0
 800361a:	50d1      	str	r1, [r2, r3]
	ppl->register5.ADDR5 = 0x5UL;
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	2386      	movs	r3, #134	; 0x86
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2105      	movs	r1, #5
 8003624:	50d1      	str	r1, [r2, r3]

	ppl->MCPADR = 0x27;
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	2388      	movs	r3, #136	; 0x88
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2127      	movs	r1, #39	; 0x27
 800362e:	50d1      	str	r1, [r2, r3]
	ppl->ATTREGADR = 0x12; // ATTENUATOR, MCP REG A
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	238a      	movs	r3, #138	; 0x8a
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2112      	movs	r1, #18
 8003638:	50d1      	str	r1, [r2, r3]
	ppl->CALREGADR = 0x13; // CALIBRATION, MCP REG B
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	238c      	movs	r3, #140	; 0x8c
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	2113      	movs	r1, #19
 8003642:	50d1      	str	r1, [r2, r3]
	ppl->CALBYTE = 0x00;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	238e      	movs	r3, #142	; 0x8e
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2100      	movs	r1, #0
 800364c:	50d1      	str	r1, [r2, r3]
	ppl->ATTBYTE = 0x00;
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	2390      	movs	r3, #144	; 0x90
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2100      	movs	r1, #0
 8003656:	50d1      	str	r1, [r2, r3]

}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}
 8003660:	016694df 	.word	0x016694df
 8003664:	65a0bc01 	.word	0x65a0bc01
 8003668:	41400000 	.word	0x41400000
 800366c:	c19c0000 	.word	0xc19c0000
 8003670:	000030ff 	.word	0x000030ff

08003674 <max2871Write>:
	}
}

void max2871Write(SPI_HandleTypeDef *hspi2, unsigned long data)
//Writes 32 Bit value to register of MAX2871
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[4]={0};
 800367e:	240c      	movs	r4, #12
 8003680:	193b      	adds	r3, r7, r4
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

    buffer[0] = (data & 0xFF000000) >> 24;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	0e1b      	lsrs	r3, r3, #24
 800368a:	b2da      	uxtb	r2, r3
 800368c:	193b      	adds	r3, r7, r4
 800368e:	701a      	strb	r2, [r3, #0]
    buffer[1] = (data & 0x00FF0000) >> 16;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b2da      	uxtb	r2, r3
 8003696:	193b      	adds	r3, r7, r4
 8003698:	705a      	strb	r2, [r3, #1]
    buffer[2] = (data & 0x0000FF00) >> 8;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	193b      	adds	r3, r7, r4
 80036a2:	709a      	strb	r2, [r3, #2]
    buffer[3] = (data & 0x000000FF);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	193b      	adds	r3, r7, r4
 80036aa:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_RESET);
 80036ac:	23a0      	movs	r3, #160	; 0xa0
 80036ae:	05db      	lsls	r3, r3, #23
 80036b0:	2200      	movs	r2, #0
 80036b2:	2104      	movs	r1, #4
 80036b4:	0018      	movs	r0, r3
 80036b6:	f001 fcd2 	bl	800505e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_RESET);
 80036ba:	23a0      	movs	r3, #160	; 0xa0
 80036bc:	05db      	lsls	r3, r3, #23
 80036be:	2200      	movs	r2, #0
 80036c0:	2102      	movs	r1, #2
 80036c2:	0018      	movs	r0, r3
 80036c4:	f001 fccb 	bl	800505e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80036c8:	2001      	movs	r0, #1
 80036ca:	f001 f99b 	bl	8004a04 <HAL_Delay>
	HAL_SPI_Transmit(hspi2, buffer, 4, 100);
 80036ce:	1939      	adds	r1, r7, r4
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	2364      	movs	r3, #100	; 0x64
 80036d4:	2204      	movs	r2, #4
 80036d6:	f002 fcf1 	bl	80060bc <HAL_SPI_Transmit>
	HAL_Delay(1);
 80036da:	2001      	movs	r0, #1
 80036dc:	f001 f992 	bl	8004a04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_SET);
 80036e0:	23a0      	movs	r3, #160	; 0xa0
 80036e2:	05db      	lsls	r3, r3, #23
 80036e4:	2201      	movs	r2, #1
 80036e6:	2104      	movs	r1, #4
 80036e8:	0018      	movs	r0, r3
 80036ea:	f001 fcb8 	bl	800505e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_SET);
 80036ee:	23a0      	movs	r3, #160	; 0xa0
 80036f0:	05db      	lsls	r3, r3, #23
 80036f2:	2201      	movs	r2, #1
 80036f4:	2102      	movs	r1, #2
 80036f6:	0018      	movs	r0, r3
 80036f8:	f001 fcb1 	bl	800505e <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80036fc:	2032      	movs	r0, #50	; 0x32
 80036fe:	f001 f981 	bl	8004a04 <HAL_Delay>
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b005      	add	sp, #20
 8003708:	bd90      	pop	{r4, r7, pc}
	...

0800370c <max2871CalculateRegisterValues>:

void max2871CalculateRegisterValues(MAX2871_t *ppl) //calculates values of NDIV, FRAC & DIVA
{
 800370c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370e:	b0bf      	sub	sp, #252	; 0xfc
 8003710:	af00      	add	r7, sp, #0
 8003712:	22dc      	movs	r2, #220	; 0xdc
 8003714:	2308      	movs	r3, #8
 8003716:	18d3      	adds	r3, r2, r3
 8003718:	19db      	adds	r3, r3, r7
 800371a:	6018      	str	r0, [r3, #0]
	double rest;
	unsigned long FREQREF = 50000000.0;  // FREQREF X 5
 800371c:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <max2871CalculateRegisterValues+0x248>)
 800371e:	21ec      	movs	r1, #236	; 0xec
 8003720:	2008      	movs	r0, #8
 8003722:	1809      	adds	r1, r1, r0
 8003724:	19c9      	adds	r1, r1, r7
 8003726:	600b      	str	r3, [r1, #0]
	unsigned long RESOL = 4000.0;
 8003728:	23fa      	movs	r3, #250	; 0xfa
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	21e8      	movs	r1, #232	; 0xe8
 800372e:	2008      	movs	r0, #8
 8003730:	1809      	adds	r1, r1, r0
 8003732:	19c9      	adds	r1, r1, r7
 8003734:	600b      	str	r3, [r1, #0]
	if (ppl->FreqOut >= 3000000000) {
 8003736:	2308      	movs	r3, #8
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	19db      	adds	r3, r3, r7
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <max2871CalculateRegisterValues+0x42>
 8003746:	d173      	bne.n	8003830 <max2871CalculateRegisterValues+0x124>
 8003748:	4983      	ldr	r1, [pc, #524]	; (8003958 <max2871CalculateRegisterValues+0x24c>)
 800374a:	428a      	cmp	r2, r1
 800374c:	d970      	bls.n	8003830 <max2871CalculateRegisterValues+0x124>
		ppl->DIVA = 0;
 800374e:	26dc      	movs	r6, #220	; 0xdc
 8003750:	2308      	movs	r3, #8
 8003752:	18f3      	adds	r3, r6, r3
 8003754:	19db      	adds	r3, r3, r7
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2200      	movs	r2, #0
 800375a:	635a      	str	r2, [r3, #52]	; 0x34
		ppl->register0.NDIV = ppl->FreqOut / FREQREF;
 800375c:	2308      	movs	r3, #8
 800375e:	18f3      	adds	r3, r6, r3
 8003760:	19db      	adds	r3, r3, r7
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	24ec      	movs	r4, #236	; 0xec
 800376a:	2308      	movs	r3, #8
 800376c:	18e3      	adds	r3, r4, r3
 800376e:	19db      	adds	r3, r3, r7
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	18ba      	adds	r2, r7, r2
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	2300      	movs	r3, #0
 800377a:	2284      	movs	r2, #132	; 0x84
 800377c:	18ba      	adds	r2, r7, r2
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f7fc fe30 	bl	80003ec <__aeabi_uldivmod>
 800378c:	0002      	movs	r2, r0
 800378e:	000b      	movs	r3, r1
 8003790:	2308      	movs	r3, #8
 8003792:	18f3      	adds	r3, r6, r3
 8003794:	19db      	adds	r3, r3, r7
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	63da      	str	r2, [r3, #60]	; 0x3c
		rest = ppl->FreqOut % FREQREF;
 800379a:	2308      	movs	r3, #8
 800379c:	18f3      	adds	r3, r6, r3
 800379e:	19db      	adds	r3, r3, r7
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	2308      	movs	r3, #8
 80037a8:	18e3      	adds	r3, r4, r3
 80037aa:	19db      	adds	r3, r3, r7
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80037b0:	2300      	movs	r3, #0
 80037b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037b8:	f7fc fe18 	bl	80003ec <__aeabi_uldivmod>
 80037bc:	0010      	movs	r0, r2
 80037be:	0019      	movs	r1, r3
 80037c0:	f7fc fe52 	bl	8000468 <__aeabi_ul2d>
 80037c4:	0002      	movs	r2, r0
 80037c6:	000b      	movs	r3, r1
 80037c8:	25e0      	movs	r5, #224	; 0xe0
 80037ca:	2108      	movs	r1, #8
 80037cc:	1869      	adds	r1, r5, r1
 80037ce:	19c9      	adds	r1, r1, r7
 80037d0:	600a      	str	r2, [r1, #0]
 80037d2:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FREQREF * RESOL;
 80037d4:	2308      	movs	r3, #8
 80037d6:	18e3      	adds	r3, r4, r3
 80037d8:	19db      	adds	r3, r3, r7
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	f7fe fbbc 	bl	8001f58 <__aeabi_ui2d>
 80037e0:	0002      	movs	r2, r0
 80037e2:	000b      	movs	r3, r1
 80037e4:	2108      	movs	r1, #8
 80037e6:	1869      	adds	r1, r5, r1
 80037e8:	19c9      	adds	r1, r1, r7
 80037ea:	6808      	ldr	r0, [r1, #0]
 80037ec:	6849      	ldr	r1, [r1, #4]
 80037ee:	f7fd fa59 	bl	8000ca4 <__aeabi_ddiv>
 80037f2:	0002      	movs	r2, r0
 80037f4:	000b      	movs	r3, r1
 80037f6:	0014      	movs	r4, r2
 80037f8:	001d      	movs	r5, r3
 80037fa:	23e8      	movs	r3, #232	; 0xe8
 80037fc:	2208      	movs	r2, #8
 80037fe:	189b      	adds	r3, r3, r2
 8003800:	19db      	adds	r3, r3, r7
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	f7fe fba8 	bl	8001f58 <__aeabi_ui2d>
 8003808:	0002      	movs	r2, r0
 800380a:	000b      	movs	r3, r1
 800380c:	0020      	movs	r0, r4
 800380e:	0029      	movs	r1, r5
 8003810:	f7fd fd3e 	bl	8001290 <__aeabi_dmul>
 8003814:	0002      	movs	r2, r0
 8003816:	000b      	movs	r3, r1
 8003818:	0010      	movs	r0, r2
 800381a:	0019      	movs	r1, r3
 800381c:	f7fc fe06 	bl	800042c <__aeabi_d2uiz>
 8003820:	0002      	movs	r2, r0
 8003822:	2308      	movs	r3, #8
 8003824:	18f3      	adds	r3, r6, r3
 8003826:	19db      	adds	r3, r3, r7
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
		ppl->DIVA = 7;
		ppl->register0.NDIV = ppl->FreqOut * 128 / FREQREF;
		rest = ppl->FreqOut * 128 % FREQREF;
		ppl->register0.FRAC = rest / FREQREF * RESOL;
	}
}
 800382c:	f000 fcfc 	bl	8004228 <max2871CalculateRegisterValues+0xb1c>
	} else if ((ppl->FreqOut < 3000000000) && (ppl->FreqOut >= 1500000000)) {
 8003830:	23dc      	movs	r3, #220	; 0xdc
 8003832:	2208      	movs	r2, #8
 8003834:	189b      	adds	r3, r3, r2
 8003836:	19db      	adds	r3, r3, r7
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d000      	beq.n	8003844 <max2871CalculateRegisterValues+0x138>
 8003842:	e08d      	b.n	8003960 <max2871CalculateRegisterValues+0x254>
 8003844:	d103      	bne.n	800384e <max2871CalculateRegisterValues+0x142>
 8003846:	4944      	ldr	r1, [pc, #272]	; (8003958 <max2871CalculateRegisterValues+0x24c>)
 8003848:	428a      	cmp	r2, r1
 800384a:	d900      	bls.n	800384e <max2871CalculateRegisterValues+0x142>
 800384c:	e088      	b.n	8003960 <max2871CalculateRegisterValues+0x254>
 800384e:	23dc      	movs	r3, #220	; 0xdc
 8003850:	2208      	movs	r2, #8
 8003852:	189b      	adds	r3, r3, r2
 8003854:	19db      	adds	r3, r3, r7
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <max2871CalculateRegisterValues+0x160>
 8003860:	d000      	beq.n	8003864 <max2871CalculateRegisterValues+0x158>
 8003862:	e07d      	b.n	8003960 <max2871CalculateRegisterValues+0x254>
 8003864:	493d      	ldr	r1, [pc, #244]	; (800395c <max2871CalculateRegisterValues+0x250>)
 8003866:	428a      	cmp	r2, r1
 8003868:	d800      	bhi.n	800386c <max2871CalculateRegisterValues+0x160>
 800386a:	e079      	b.n	8003960 <max2871CalculateRegisterValues+0x254>
		ppl->DIVA = 1;
 800386c:	26dc      	movs	r6, #220	; 0xdc
 800386e:	2308      	movs	r3, #8
 8003870:	18f3      	adds	r3, r6, r3
 8003872:	19db      	adds	r3, r3, r7
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	635a      	str	r2, [r3, #52]	; 0x34
		ppl->register0.NDIV = ppl->FreqOut * 2 / FREQREF;
 800387a:	2308      	movs	r3, #8
 800387c:	18f3      	adds	r3, r6, r3
 800387e:	19db      	adds	r3, r3, r7
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	1892      	adds	r2, r2, r2
 8003888:	415b      	adcs	r3, r3
 800388a:	0010      	movs	r0, r2
 800388c:	0019      	movs	r1, r3
 800388e:	24ec      	movs	r4, #236	; 0xec
 8003890:	2308      	movs	r3, #8
 8003892:	18e3      	adds	r3, r4, r3
 8003894:	19db      	adds	r3, r3, r7
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	673b      	str	r3, [r7, #112]	; 0x70
 800389a:	2300      	movs	r3, #0
 800389c:	677b      	str	r3, [r7, #116]	; 0x74
 800389e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a2:	f7fc fda3 	bl	80003ec <__aeabi_uldivmod>
 80038a6:	0002      	movs	r2, r0
 80038a8:	000b      	movs	r3, r1
 80038aa:	2308      	movs	r3, #8
 80038ac:	18f3      	adds	r3, r6, r3
 80038ae:	19db      	adds	r3, r3, r7
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c
		rest = ppl->FreqOut * 2 % FREQREF;
 80038b4:	2308      	movs	r3, #8
 80038b6:	18f3      	adds	r3, r6, r3
 80038b8:	19db      	adds	r3, r3, r7
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	1892      	adds	r2, r2, r2
 80038c2:	415b      	adcs	r3, r3
 80038c4:	0010      	movs	r0, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	2308      	movs	r3, #8
 80038ca:	18e3      	adds	r3, r4, r3
 80038cc:	19db      	adds	r3, r3, r7
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d2:	2300      	movs	r3, #0
 80038d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	f7fc fd87 	bl	80003ec <__aeabi_uldivmod>
 80038de:	0010      	movs	r0, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	f7fc fdc1 	bl	8000468 <__aeabi_ul2d>
 80038e6:	0002      	movs	r2, r0
 80038e8:	000b      	movs	r3, r1
 80038ea:	25e0      	movs	r5, #224	; 0xe0
 80038ec:	2108      	movs	r1, #8
 80038ee:	1869      	adds	r1, r5, r1
 80038f0:	19c9      	adds	r1, r1, r7
 80038f2:	600a      	str	r2, [r1, #0]
 80038f4:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest /FREQREF * RESOL;
 80038f6:	2308      	movs	r3, #8
 80038f8:	18e3      	adds	r3, r4, r3
 80038fa:	19db      	adds	r3, r3, r7
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	f7fe fb2b 	bl	8001f58 <__aeabi_ui2d>
 8003902:	0002      	movs	r2, r0
 8003904:	000b      	movs	r3, r1
 8003906:	2108      	movs	r1, #8
 8003908:	1869      	adds	r1, r5, r1
 800390a:	19c9      	adds	r1, r1, r7
 800390c:	6808      	ldr	r0, [r1, #0]
 800390e:	6849      	ldr	r1, [r1, #4]
 8003910:	f7fd f9c8 	bl	8000ca4 <__aeabi_ddiv>
 8003914:	0002      	movs	r2, r0
 8003916:	000b      	movs	r3, r1
 8003918:	0014      	movs	r4, r2
 800391a:	001d      	movs	r5, r3
 800391c:	23e8      	movs	r3, #232	; 0xe8
 800391e:	2208      	movs	r2, #8
 8003920:	189b      	adds	r3, r3, r2
 8003922:	19db      	adds	r3, r3, r7
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	f7fe fb17 	bl	8001f58 <__aeabi_ui2d>
 800392a:	0002      	movs	r2, r0
 800392c:	000b      	movs	r3, r1
 800392e:	0020      	movs	r0, r4
 8003930:	0029      	movs	r1, r5
 8003932:	f7fd fcad 	bl	8001290 <__aeabi_dmul>
 8003936:	0002      	movs	r2, r0
 8003938:	000b      	movs	r3, r1
 800393a:	0010      	movs	r0, r2
 800393c:	0019      	movs	r1, r3
 800393e:	f7fc fd75 	bl	800042c <__aeabi_d2uiz>
 8003942:	0002      	movs	r2, r0
 8003944:	2308      	movs	r3, #8
 8003946:	18f3      	adds	r3, r6, r3
 8003948:	19db      	adds	r3, r3, r7
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
 800394e:	f000 fc6b 	bl	8004228 <max2871CalculateRegisterValues+0xb1c>
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	02faf080 	.word	0x02faf080
 8003958:	b2d05dff 	.word	0xb2d05dff
 800395c:	59682eff 	.word	0x59682eff
	} else if ((ppl->FreqOut < 1500000000) && (ppl->FreqOut >= 750000000)) {
 8003960:	23dc      	movs	r3, #220	; 0xdc
 8003962:	2208      	movs	r2, #8
 8003964:	189b      	adds	r3, r3, r2
 8003966:	19db      	adds	r3, r3, r7
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d000      	beq.n	8003974 <max2871CalculateRegisterValues+0x268>
 8003972:	e0aa      	b.n	8003aca <max2871CalculateRegisterValues+0x3be>
 8003974:	d103      	bne.n	800397e <max2871CalculateRegisterValues+0x272>
 8003976:	49b5      	ldr	r1, [pc, #724]	; (8003c4c <max2871CalculateRegisterValues+0x540>)
 8003978:	428a      	cmp	r2, r1
 800397a:	d900      	bls.n	800397e <max2871CalculateRegisterValues+0x272>
 800397c:	e0a5      	b.n	8003aca <max2871CalculateRegisterValues+0x3be>
 800397e:	23dc      	movs	r3, #220	; 0xdc
 8003980:	2208      	movs	r2, #8
 8003982:	189b      	adds	r3, r3, r2
 8003984:	19db      	adds	r3, r3, r7
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <max2871CalculateRegisterValues+0x290>
 8003990:	d000      	beq.n	8003994 <max2871CalculateRegisterValues+0x288>
 8003992:	e09a      	b.n	8003aca <max2871CalculateRegisterValues+0x3be>
 8003994:	49ae      	ldr	r1, [pc, #696]	; (8003c50 <max2871CalculateRegisterValues+0x544>)
 8003996:	428a      	cmp	r2, r1
 8003998:	d800      	bhi.n	800399c <max2871CalculateRegisterValues+0x290>
 800399a:	e096      	b.n	8003aca <max2871CalculateRegisterValues+0x3be>
		ppl->DIVA = 2;
 800399c:	26dc      	movs	r6, #220	; 0xdc
 800399e:	2308      	movs	r3, #8
 80039a0:	18f3      	adds	r3, r6, r3
 80039a2:	19db      	adds	r3, r3, r7
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2202      	movs	r2, #2
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34
		ppl->register0.NDIV = ppl->FreqOut * 4 / FREQREF;
 80039aa:	2308      	movs	r3, #8
 80039ac:	18f3      	adds	r3, r6, r3
 80039ae:	19db      	adds	r3, r3, r7
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	0f91      	lsrs	r1, r2, #30
 80039b8:	0098      	lsls	r0, r3, #2
 80039ba:	24d4      	movs	r4, #212	; 0xd4
 80039bc:	2508      	movs	r5, #8
 80039be:	1965      	adds	r5, r4, r5
 80039c0:	19ed      	adds	r5, r5, r7
 80039c2:	6028      	str	r0, [r5, #0]
 80039c4:	0020      	movs	r0, r4
 80039c6:	0005      	movs	r5, r0
 80039c8:	2408      	movs	r4, #8
 80039ca:	1900      	adds	r0, r0, r4
 80039cc:	19c4      	adds	r4, r0, r7
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	4308      	orrs	r0, r1
 80039d2:	0029      	movs	r1, r5
 80039d4:	2408      	movs	r4, #8
 80039d6:	1909      	adds	r1, r1, r4
 80039d8:	19c9      	adds	r1, r1, r7
 80039da:	6008      	str	r0, [r1, #0]
 80039dc:	0093      	lsls	r3, r2, #2
 80039de:	21d0      	movs	r1, #208	; 0xd0
 80039e0:	2208      	movs	r2, #8
 80039e2:	188a      	adds	r2, r1, r2
 80039e4:	19d2      	adds	r2, r2, r7
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	23ec      	movs	r3, #236	; 0xec
 80039ea:	001c      	movs	r4, r3
 80039ec:	2208      	movs	r2, #8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	19da      	adds	r2, r3, r7
 80039f2:	6813      	ldr	r3, [r2, #0]
 80039f4:	663b      	str	r3, [r7, #96]	; 0x60
 80039f6:	2300      	movs	r3, #0
 80039f8:	667b      	str	r3, [r7, #100]	; 0x64
 80039fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039fe:	2008      	movs	r0, #8
 8003a00:	1809      	adds	r1, r1, r0
 8003a02:	19c9      	adds	r1, r1, r7
 8003a04:	6808      	ldr	r0, [r1, #0]
 8003a06:	6849      	ldr	r1, [r1, #4]
 8003a08:	f7fc fcf0 	bl	80003ec <__aeabi_uldivmod>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	000b      	movs	r3, r1
 8003a10:	2308      	movs	r3, #8
 8003a12:	18f3      	adds	r3, r6, r3
 8003a14:	19d9      	adds	r1, r3, r7
 8003a16:	680b      	ldr	r3, [r1, #0]
 8003a18:	63da      	str	r2, [r3, #60]	; 0x3c
		rest = ppl->FreqOut * 4 % FREQREF;
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	18f3      	adds	r3, r6, r3
 8003a1e:	19da      	adds	r2, r3, r7
 8003a20:	6813      	ldr	r3, [r2, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0f91      	lsrs	r1, r2, #30
 8003a28:	0098      	lsls	r0, r3, #2
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4308      	orrs	r0, r1
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	0093      	lsls	r3, r2, #2
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	0023      	movs	r3, r4
 8003a38:	001d      	movs	r5, r3
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	19da      	adds	r2, r3, r7
 8003a40:	6813      	ldr	r3, [r2, #0]
 8003a42:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a44:	2300      	movs	r3, #0
 8003a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4c:	6838      	ldr	r0, [r7, #0]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	f7fc fccc 	bl	80003ec <__aeabi_uldivmod>
 8003a54:	0010      	movs	r0, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	f7fc fd06 	bl	8000468 <__aeabi_ul2d>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	000b      	movs	r3, r1
 8003a60:	24e0      	movs	r4, #224	; 0xe0
 8003a62:	2108      	movs	r1, #8
 8003a64:	1861      	adds	r1, r4, r1
 8003a66:	19c9      	adds	r1, r1, r7
 8003a68:	600a      	str	r2, [r1, #0]
 8003a6a:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FREQREF * RESOL;
 8003a6c:	002b      	movs	r3, r5
 8003a6e:	2208      	movs	r2, #8
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	19db      	adds	r3, r3, r7
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	f7fe fa6f 	bl	8001f58 <__aeabi_ui2d>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	000b      	movs	r3, r1
 8003a7e:	2108      	movs	r1, #8
 8003a80:	1861      	adds	r1, r4, r1
 8003a82:	19c9      	adds	r1, r1, r7
 8003a84:	6808      	ldr	r0, [r1, #0]
 8003a86:	6849      	ldr	r1, [r1, #4]
 8003a88:	f7fd f90c 	bl	8000ca4 <__aeabi_ddiv>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	000b      	movs	r3, r1
 8003a90:	0014      	movs	r4, r2
 8003a92:	001d      	movs	r5, r3
 8003a94:	23e8      	movs	r3, #232	; 0xe8
 8003a96:	2208      	movs	r2, #8
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	19db      	adds	r3, r3, r7
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	f7fe fa5b 	bl	8001f58 <__aeabi_ui2d>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	000b      	movs	r3, r1
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	0029      	movs	r1, r5
 8003aaa:	f7fd fbf1 	bl	8001290 <__aeabi_dmul>
 8003aae:	0002      	movs	r2, r0
 8003ab0:	000b      	movs	r3, r1
 8003ab2:	0010      	movs	r0, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	f7fc fcb9 	bl	800042c <__aeabi_d2uiz>
 8003aba:	0002      	movs	r2, r0
 8003abc:	2308      	movs	r3, #8
 8003abe:	18f3      	adds	r3, r6, r3
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ac6:	f000 fbaf 	bl	8004228 <max2871CalculateRegisterValues+0xb1c>
	} else if ((ppl->FreqOut < 750000000) && (ppl->FreqOut >= 375000000)) {
 8003aca:	23dc      	movs	r3, #220	; 0xdc
 8003acc:	2208      	movs	r2, #8
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	19db      	adds	r3, r3, r7
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d000      	beq.n	8003ade <max2871CalculateRegisterValues+0x3d2>
 8003adc:	e0bc      	b.n	8003c58 <max2871CalculateRegisterValues+0x54c>
 8003ade:	d103      	bne.n	8003ae8 <max2871CalculateRegisterValues+0x3dc>
 8003ae0:	495b      	ldr	r1, [pc, #364]	; (8003c50 <max2871CalculateRegisterValues+0x544>)
 8003ae2:	428a      	cmp	r2, r1
 8003ae4:	d900      	bls.n	8003ae8 <max2871CalculateRegisterValues+0x3dc>
 8003ae6:	e0b7      	b.n	8003c58 <max2871CalculateRegisterValues+0x54c>
 8003ae8:	23dc      	movs	r3, #220	; 0xdc
 8003aea:	2208      	movs	r2, #8
 8003aec:	189b      	adds	r3, r3, r2
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <max2871CalculateRegisterValues+0x3fa>
 8003afa:	d000      	beq.n	8003afe <max2871CalculateRegisterValues+0x3f2>
 8003afc:	e0ac      	b.n	8003c58 <max2871CalculateRegisterValues+0x54c>
 8003afe:	4955      	ldr	r1, [pc, #340]	; (8003c54 <max2871CalculateRegisterValues+0x548>)
 8003b00:	428a      	cmp	r2, r1
 8003b02:	d800      	bhi.n	8003b06 <max2871CalculateRegisterValues+0x3fa>
 8003b04:	e0a8      	b.n	8003c58 <max2871CalculateRegisterValues+0x54c>
		ppl->DIVA = 3;
 8003b06:	26dc      	movs	r6, #220	; 0xdc
 8003b08:	2308      	movs	r3, #8
 8003b0a:	18f3      	adds	r3, r6, r3
 8003b0c:	19db      	adds	r3, r3, r7
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2203      	movs	r2, #3
 8003b12:	635a      	str	r2, [r3, #52]	; 0x34
		ppl->register0.NDIV = ppl->FreqOut * 8 / FREQREF;
 8003b14:	2308      	movs	r3, #8
 8003b16:	18f3      	adds	r3, r6, r3
 8003b18:	19db      	adds	r3, r3, r7
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	0f51      	lsrs	r1, r2, #29
 8003b22:	00d8      	lsls	r0, r3, #3
 8003b24:	24cc      	movs	r4, #204	; 0xcc
 8003b26:	2508      	movs	r5, #8
 8003b28:	1965      	adds	r5, r4, r5
 8003b2a:	19ed      	adds	r5, r5, r7
 8003b2c:	6028      	str	r0, [r5, #0]
 8003b2e:	2008      	movs	r0, #8
 8003b30:	1820      	adds	r0, r4, r0
 8003b32:	19c0      	adds	r0, r0, r7
 8003b34:	6800      	ldr	r0, [r0, #0]
 8003b36:	4308      	orrs	r0, r1
 8003b38:	2108      	movs	r1, #8
 8003b3a:	1861      	adds	r1, r4, r1
 8003b3c:	19c9      	adds	r1, r1, r7
 8003b3e:	6008      	str	r0, [r1, #0]
 8003b40:	00d3      	lsls	r3, r2, #3
 8003b42:	21c8      	movs	r1, #200	; 0xc8
 8003b44:	2208      	movs	r2, #8
 8003b46:	188a      	adds	r2, r1, r2
 8003b48:	19d2      	adds	r2, r2, r7
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	24ec      	movs	r4, #236	; 0xec
 8003b4e:	2308      	movs	r3, #8
 8003b50:	18e3      	adds	r3, r4, r3
 8003b52:	19db      	adds	r3, r3, r7
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	653b      	str	r3, [r7, #80]	; 0x50
 8003b58:	2300      	movs	r3, #0
 8003b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b60:	2008      	movs	r0, #8
 8003b62:	1809      	adds	r1, r1, r0
 8003b64:	19c9      	adds	r1, r1, r7
 8003b66:	6808      	ldr	r0, [r1, #0]
 8003b68:	6849      	ldr	r1, [r1, #4]
 8003b6a:	f7fc fc3f 	bl	80003ec <__aeabi_uldivmod>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	000b      	movs	r3, r1
 8003b72:	2308      	movs	r3, #8
 8003b74:	18f3      	adds	r3, r6, r3
 8003b76:	19db      	adds	r3, r3, r7
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c
		rest = ppl->FreqOut * 8 % FREQREF;
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	18f3      	adds	r3, r6, r3
 8003b80:	19db      	adds	r3, r3, r7
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0f51      	lsrs	r1, r2, #29
 8003b8a:	468c      	mov	ip, r1
 8003b8c:	00d8      	lsls	r0, r3, #3
 8003b8e:	25c4      	movs	r5, #196	; 0xc4
 8003b90:	2108      	movs	r1, #8
 8003b92:	1869      	adds	r1, r5, r1
 8003b94:	19c9      	adds	r1, r1, r7
 8003b96:	6008      	str	r0, [r1, #0]
 8003b98:	2108      	movs	r1, #8
 8003b9a:	1869      	adds	r1, r5, r1
 8003b9c:	19c8      	adds	r0, r1, r7
 8003b9e:	6800      	ldr	r0, [r0, #0]
 8003ba0:	4661      	mov	r1, ip
 8003ba2:	4308      	orrs	r0, r1
 8003ba4:	2108      	movs	r1, #8
 8003ba6:	1869      	adds	r1, r5, r1
 8003ba8:	19c9      	adds	r1, r1, r7
 8003baa:	6008      	str	r0, [r1, #0]
 8003bac:	00d3      	lsls	r3, r2, #3
 8003bae:	21c0      	movs	r1, #192	; 0xc0
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	188a      	adds	r2, r1, r2
 8003bb4:	19d2      	adds	r2, r2, r7
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	2308      	movs	r3, #8
 8003bba:	18e3      	adds	r3, r4, r3
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bca:	2008      	movs	r0, #8
 8003bcc:	1809      	adds	r1, r1, r0
 8003bce:	19c9      	adds	r1, r1, r7
 8003bd0:	6808      	ldr	r0, [r1, #0]
 8003bd2:	6849      	ldr	r1, [r1, #4]
 8003bd4:	f7fc fc0a 	bl	80003ec <__aeabi_uldivmod>
 8003bd8:	0010      	movs	r0, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	f7fc fc44 	bl	8000468 <__aeabi_ul2d>
 8003be0:	0002      	movs	r2, r0
 8003be2:	000b      	movs	r3, r1
 8003be4:	25e0      	movs	r5, #224	; 0xe0
 8003be6:	2108      	movs	r1, #8
 8003be8:	1869      	adds	r1, r5, r1
 8003bea:	19c9      	adds	r1, r1, r7
 8003bec:	600a      	str	r2, [r1, #0]
 8003bee:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FREQREF * RESOL;
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	18e3      	adds	r3, r4, r3
 8003bf4:	19db      	adds	r3, r3, r7
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	f7fe f9ae 	bl	8001f58 <__aeabi_ui2d>
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	000b      	movs	r3, r1
 8003c00:	2108      	movs	r1, #8
 8003c02:	1869      	adds	r1, r5, r1
 8003c04:	19c9      	adds	r1, r1, r7
 8003c06:	6808      	ldr	r0, [r1, #0]
 8003c08:	6849      	ldr	r1, [r1, #4]
 8003c0a:	f7fd f84b 	bl	8000ca4 <__aeabi_ddiv>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	000b      	movs	r3, r1
 8003c12:	0014      	movs	r4, r2
 8003c14:	001d      	movs	r5, r3
 8003c16:	23e8      	movs	r3, #232	; 0xe8
 8003c18:	2208      	movs	r2, #8
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	19db      	adds	r3, r3, r7
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	f7fe f99a 	bl	8001f58 <__aeabi_ui2d>
 8003c24:	0002      	movs	r2, r0
 8003c26:	000b      	movs	r3, r1
 8003c28:	0020      	movs	r0, r4
 8003c2a:	0029      	movs	r1, r5
 8003c2c:	f7fd fb30 	bl	8001290 <__aeabi_dmul>
 8003c30:	0002      	movs	r2, r0
 8003c32:	000b      	movs	r3, r1
 8003c34:	0010      	movs	r0, r2
 8003c36:	0019      	movs	r1, r3
 8003c38:	f7fc fbf8 	bl	800042c <__aeabi_d2uiz>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	2308      	movs	r3, #8
 8003c40:	18f3      	adds	r3, r6, r3
 8003c42:	19db      	adds	r3, r3, r7
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
 8003c48:	e2ee      	b.n	8004228 <max2871CalculateRegisterValues+0xb1c>
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	59682eff 	.word	0x59682eff
 8003c50:	2cb4177f 	.word	0x2cb4177f
 8003c54:	165a0bbf 	.word	0x165a0bbf
	} else if ((ppl->FreqOut < 375000000) && (ppl->FreqOut >= 187500000)) {
 8003c58:	23dc      	movs	r3, #220	; 0xdc
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d000      	beq.n	8003c6c <max2871CalculateRegisterValues+0x560>
 8003c6a:	e0b5      	b.n	8003dd8 <max2871CalculateRegisterValues+0x6cc>
 8003c6c:	d103      	bne.n	8003c76 <max2871CalculateRegisterValues+0x56a>
 8003c6e:	49ba      	ldr	r1, [pc, #744]	; (8003f58 <max2871CalculateRegisterValues+0x84c>)
 8003c70:	428a      	cmp	r2, r1
 8003c72:	d900      	bls.n	8003c76 <max2871CalculateRegisterValues+0x56a>
 8003c74:	e0b0      	b.n	8003dd8 <max2871CalculateRegisterValues+0x6cc>
 8003c76:	23dc      	movs	r3, #220	; 0xdc
 8003c78:	2208      	movs	r2, #8
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	19db      	adds	r3, r3, r7
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <max2871CalculateRegisterValues+0x588>
 8003c88:	d000      	beq.n	8003c8c <max2871CalculateRegisterValues+0x580>
 8003c8a:	e0a5      	b.n	8003dd8 <max2871CalculateRegisterValues+0x6cc>
 8003c8c:	49b3      	ldr	r1, [pc, #716]	; (8003f5c <max2871CalculateRegisterValues+0x850>)
 8003c8e:	428a      	cmp	r2, r1
 8003c90:	d800      	bhi.n	8003c94 <max2871CalculateRegisterValues+0x588>
 8003c92:	e0a1      	b.n	8003dd8 <max2871CalculateRegisterValues+0x6cc>
		ppl->DIVA = 4;
 8003c94:	26dc      	movs	r6, #220	; 0xdc
 8003c96:	2308      	movs	r3, #8
 8003c98:	18f3      	adds	r3, r6, r3
 8003c9a:	19db      	adds	r3, r3, r7
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34
		ppl->register0.NDIV = ppl->FreqOut * 16 / FREQREF;
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	18f3      	adds	r3, r6, r3
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	0f11      	lsrs	r1, r2, #28
 8003cb0:	0118      	lsls	r0, r3, #4
 8003cb2:	24bc      	movs	r4, #188	; 0xbc
 8003cb4:	2508      	movs	r5, #8
 8003cb6:	1965      	adds	r5, r4, r5
 8003cb8:	19ed      	adds	r5, r5, r7
 8003cba:	6028      	str	r0, [r5, #0]
 8003cbc:	2008      	movs	r0, #8
 8003cbe:	1820      	adds	r0, r4, r0
 8003cc0:	19c0      	adds	r0, r0, r7
 8003cc2:	6800      	ldr	r0, [r0, #0]
 8003cc4:	4308      	orrs	r0, r1
 8003cc6:	2108      	movs	r1, #8
 8003cc8:	1861      	adds	r1, r4, r1
 8003cca:	19c9      	adds	r1, r1, r7
 8003ccc:	6008      	str	r0, [r1, #0]
 8003cce:	0113      	lsls	r3, r2, #4
 8003cd0:	21b8      	movs	r1, #184	; 0xb8
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	188a      	adds	r2, r1, r2
 8003cd6:	19d2      	adds	r2, r2, r7
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	24ec      	movs	r4, #236	; 0xec
 8003cdc:	2308      	movs	r3, #8
 8003cde:	18e3      	adds	r3, r4, r3
 8003ce0:	19db      	adds	r3, r3, r7
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cee:	2008      	movs	r0, #8
 8003cf0:	1809      	adds	r1, r1, r0
 8003cf2:	19c9      	adds	r1, r1, r7
 8003cf4:	6808      	ldr	r0, [r1, #0]
 8003cf6:	6849      	ldr	r1, [r1, #4]
 8003cf8:	f7fc fb78 	bl	80003ec <__aeabi_uldivmod>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	000b      	movs	r3, r1
 8003d00:	2308      	movs	r3, #8
 8003d02:	18f3      	adds	r3, r6, r3
 8003d04:	19db      	adds	r3, r3, r7
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	63da      	str	r2, [r3, #60]	; 0x3c
		rest = ppl->FreqOut * 16 % FREQREF;
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	18f3      	adds	r3, r6, r3
 8003d0e:	19db      	adds	r3, r3, r7
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	0f11      	lsrs	r1, r2, #28
 8003d18:	468c      	mov	ip, r1
 8003d1a:	0118      	lsls	r0, r3, #4
 8003d1c:	25b4      	movs	r5, #180	; 0xb4
 8003d1e:	2108      	movs	r1, #8
 8003d20:	1869      	adds	r1, r5, r1
 8003d22:	19c9      	adds	r1, r1, r7
 8003d24:	6008      	str	r0, [r1, #0]
 8003d26:	2108      	movs	r1, #8
 8003d28:	1869      	adds	r1, r5, r1
 8003d2a:	19c8      	adds	r0, r1, r7
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	4661      	mov	r1, ip
 8003d30:	4308      	orrs	r0, r1
 8003d32:	2108      	movs	r1, #8
 8003d34:	1869      	adds	r1, r5, r1
 8003d36:	19c9      	adds	r1, r1, r7
 8003d38:	6008      	str	r0, [r1, #0]
 8003d3a:	0113      	lsls	r3, r2, #4
 8003d3c:	21b0      	movs	r1, #176	; 0xb0
 8003d3e:	2208      	movs	r2, #8
 8003d40:	188a      	adds	r2, r1, r2
 8003d42:	19d2      	adds	r2, r2, r7
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	2308      	movs	r3, #8
 8003d48:	18e3      	adds	r3, r4, r3
 8003d4a:	19db      	adds	r3, r3, r7
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d50:	2300      	movs	r3, #0
 8003d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	2008      	movs	r0, #8
 8003d5a:	1809      	adds	r1, r1, r0
 8003d5c:	19c9      	adds	r1, r1, r7
 8003d5e:	6808      	ldr	r0, [r1, #0]
 8003d60:	6849      	ldr	r1, [r1, #4]
 8003d62:	f7fc fb43 	bl	80003ec <__aeabi_uldivmod>
 8003d66:	0010      	movs	r0, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	f7fc fb7d 	bl	8000468 <__aeabi_ul2d>
 8003d6e:	0002      	movs	r2, r0
 8003d70:	000b      	movs	r3, r1
 8003d72:	25e0      	movs	r5, #224	; 0xe0
 8003d74:	2108      	movs	r1, #8
 8003d76:	1869      	adds	r1, r5, r1
 8003d78:	19c9      	adds	r1, r1, r7
 8003d7a:	600a      	str	r2, [r1, #0]
 8003d7c:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FREQREF * RESOL;
 8003d7e:	2308      	movs	r3, #8
 8003d80:	18e3      	adds	r3, r4, r3
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	f7fe f8e7 	bl	8001f58 <__aeabi_ui2d>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	000b      	movs	r3, r1
 8003d8e:	2108      	movs	r1, #8
 8003d90:	1869      	adds	r1, r5, r1
 8003d92:	19c9      	adds	r1, r1, r7
 8003d94:	6808      	ldr	r0, [r1, #0]
 8003d96:	6849      	ldr	r1, [r1, #4]
 8003d98:	f7fc ff84 	bl	8000ca4 <__aeabi_ddiv>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	000b      	movs	r3, r1
 8003da0:	0014      	movs	r4, r2
 8003da2:	001d      	movs	r5, r3
 8003da4:	23e8      	movs	r3, #232	; 0xe8
 8003da6:	2208      	movs	r2, #8
 8003da8:	189b      	adds	r3, r3, r2
 8003daa:	19db      	adds	r3, r3, r7
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	f7fe f8d3 	bl	8001f58 <__aeabi_ui2d>
 8003db2:	0002      	movs	r2, r0
 8003db4:	000b      	movs	r3, r1
 8003db6:	0020      	movs	r0, r4
 8003db8:	0029      	movs	r1, r5
 8003dba:	f7fd fa69 	bl	8001290 <__aeabi_dmul>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	000b      	movs	r3, r1
 8003dc2:	0010      	movs	r0, r2
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	f7fc fb31 	bl	800042c <__aeabi_d2uiz>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	2308      	movs	r3, #8
 8003dce:	18f3      	adds	r3, r6, r3
 8003dd0:	19db      	adds	r3, r3, r7
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd6:	e227      	b.n	8004228 <max2871CalculateRegisterValues+0xb1c>
	} else if ((ppl->FreqOut < 187500000) && (ppl->FreqOut >= 93750000)) {
 8003dd8:	23dc      	movs	r3, #220	; 0xdc
 8003dda:	2208      	movs	r2, #8
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	19db      	adds	r3, r3, r7
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d000      	beq.n	8003dec <max2871CalculateRegisterValues+0x6e0>
 8003dea:	e0bb      	b.n	8003f64 <max2871CalculateRegisterValues+0x858>
 8003dec:	d103      	bne.n	8003df6 <max2871CalculateRegisterValues+0x6ea>
 8003dee:	495b      	ldr	r1, [pc, #364]	; (8003f5c <max2871CalculateRegisterValues+0x850>)
 8003df0:	428a      	cmp	r2, r1
 8003df2:	d900      	bls.n	8003df6 <max2871CalculateRegisterValues+0x6ea>
 8003df4:	e0b6      	b.n	8003f64 <max2871CalculateRegisterValues+0x858>
 8003df6:	23dc      	movs	r3, #220	; 0xdc
 8003df8:	2208      	movs	r2, #8
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	19db      	adds	r3, r3, r7
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <max2871CalculateRegisterValues+0x708>
 8003e08:	d000      	beq.n	8003e0c <max2871CalculateRegisterValues+0x700>
 8003e0a:	e0ab      	b.n	8003f64 <max2871CalculateRegisterValues+0x858>
 8003e0c:	4954      	ldr	r1, [pc, #336]	; (8003f60 <max2871CalculateRegisterValues+0x854>)
 8003e0e:	428a      	cmp	r2, r1
 8003e10:	d800      	bhi.n	8003e14 <max2871CalculateRegisterValues+0x708>
 8003e12:	e0a7      	b.n	8003f64 <max2871CalculateRegisterValues+0x858>
		ppl->DIVA = 5;
 8003e14:	26dc      	movs	r6, #220	; 0xdc
 8003e16:	2308      	movs	r3, #8
 8003e18:	18f3      	adds	r3, r6, r3
 8003e1a:	19db      	adds	r3, r3, r7
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2205      	movs	r2, #5
 8003e20:	635a      	str	r2, [r3, #52]	; 0x34
		ppl->register0.NDIV = ppl->FreqOut * 32 / FREQREF;
 8003e22:	2308      	movs	r3, #8
 8003e24:	18f3      	adds	r3, r6, r3
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	0ed1      	lsrs	r1, r2, #27
 8003e30:	0158      	lsls	r0, r3, #5
 8003e32:	24ac      	movs	r4, #172	; 0xac
 8003e34:	2508      	movs	r5, #8
 8003e36:	1965      	adds	r5, r4, r5
 8003e38:	19ed      	adds	r5, r5, r7
 8003e3a:	6028      	str	r0, [r5, #0]
 8003e3c:	2008      	movs	r0, #8
 8003e3e:	1820      	adds	r0, r4, r0
 8003e40:	19c0      	adds	r0, r0, r7
 8003e42:	6800      	ldr	r0, [r0, #0]
 8003e44:	4308      	orrs	r0, r1
 8003e46:	2108      	movs	r1, #8
 8003e48:	1861      	adds	r1, r4, r1
 8003e4a:	19c9      	adds	r1, r1, r7
 8003e4c:	6008      	str	r0, [r1, #0]
 8003e4e:	0153      	lsls	r3, r2, #5
 8003e50:	21a8      	movs	r1, #168	; 0xa8
 8003e52:	2208      	movs	r2, #8
 8003e54:	188a      	adds	r2, r1, r2
 8003e56:	19d2      	adds	r2, r2, r7
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	24ec      	movs	r4, #236	; 0xec
 8003e5c:	2308      	movs	r3, #8
 8003e5e:	18e3      	adds	r3, r4, r3
 8003e60:	19db      	adds	r3, r3, r7
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
 8003e66:	2300      	movs	r3, #0
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	2008      	movs	r0, #8
 8003e70:	1809      	adds	r1, r1, r0
 8003e72:	19c9      	adds	r1, r1, r7
 8003e74:	6808      	ldr	r0, [r1, #0]
 8003e76:	6849      	ldr	r1, [r1, #4]
 8003e78:	f7fc fab8 	bl	80003ec <__aeabi_uldivmod>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	000b      	movs	r3, r1
 8003e80:	2308      	movs	r3, #8
 8003e82:	18f3      	adds	r3, r6, r3
 8003e84:	19db      	adds	r3, r3, r7
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	63da      	str	r2, [r3, #60]	; 0x3c
		rest = ppl->FreqOut * 32 % FREQREF;
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	18f3      	adds	r3, r6, r3
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	0ed1      	lsrs	r1, r2, #27
 8003e98:	468c      	mov	ip, r1
 8003e9a:	0158      	lsls	r0, r3, #5
 8003e9c:	25a4      	movs	r5, #164	; 0xa4
 8003e9e:	2108      	movs	r1, #8
 8003ea0:	1869      	adds	r1, r5, r1
 8003ea2:	19c9      	adds	r1, r1, r7
 8003ea4:	6008      	str	r0, [r1, #0]
 8003ea6:	2108      	movs	r1, #8
 8003ea8:	1869      	adds	r1, r5, r1
 8003eaa:	19c8      	adds	r0, r1, r7
 8003eac:	6800      	ldr	r0, [r0, #0]
 8003eae:	4661      	mov	r1, ip
 8003eb0:	4308      	orrs	r0, r1
 8003eb2:	2108      	movs	r1, #8
 8003eb4:	1869      	adds	r1, r5, r1
 8003eb6:	19c9      	adds	r1, r1, r7
 8003eb8:	6008      	str	r0, [r1, #0]
 8003eba:	0153      	lsls	r3, r2, #5
 8003ebc:	21a0      	movs	r1, #160	; 0xa0
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	188a      	adds	r2, r1, r2
 8003ec2:	19d2      	adds	r2, r2, r7
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	18e3      	adds	r3, r4, r3
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	2008      	movs	r0, #8
 8003eda:	1809      	adds	r1, r1, r0
 8003edc:	19c9      	adds	r1, r1, r7
 8003ede:	6808      	ldr	r0, [r1, #0]
 8003ee0:	6849      	ldr	r1, [r1, #4]
 8003ee2:	f7fc fa83 	bl	80003ec <__aeabi_uldivmod>
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	f7fc fabd 	bl	8000468 <__aeabi_ul2d>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	000b      	movs	r3, r1
 8003ef2:	25e0      	movs	r5, #224	; 0xe0
 8003ef4:	2108      	movs	r1, #8
 8003ef6:	1869      	adds	r1, r5, r1
 8003ef8:	19c9      	adds	r1, r1, r7
 8003efa:	600a      	str	r2, [r1, #0]
 8003efc:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FREQREF * RESOL;
 8003efe:	2308      	movs	r3, #8
 8003f00:	18e3      	adds	r3, r4, r3
 8003f02:	19db      	adds	r3, r3, r7
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	f7fe f827 	bl	8001f58 <__aeabi_ui2d>
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	000b      	movs	r3, r1
 8003f0e:	2108      	movs	r1, #8
 8003f10:	1869      	adds	r1, r5, r1
 8003f12:	19c9      	adds	r1, r1, r7
 8003f14:	6808      	ldr	r0, [r1, #0]
 8003f16:	6849      	ldr	r1, [r1, #4]
 8003f18:	f7fc fec4 	bl	8000ca4 <__aeabi_ddiv>
 8003f1c:	0002      	movs	r2, r0
 8003f1e:	000b      	movs	r3, r1
 8003f20:	0014      	movs	r4, r2
 8003f22:	001d      	movs	r5, r3
 8003f24:	23e8      	movs	r3, #232	; 0xe8
 8003f26:	2208      	movs	r2, #8
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	19db      	adds	r3, r3, r7
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	f7fe f813 	bl	8001f58 <__aeabi_ui2d>
 8003f32:	0002      	movs	r2, r0
 8003f34:	000b      	movs	r3, r1
 8003f36:	0020      	movs	r0, r4
 8003f38:	0029      	movs	r1, r5
 8003f3a:	f7fd f9a9 	bl	8001290 <__aeabi_dmul>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	000b      	movs	r3, r1
 8003f42:	0010      	movs	r0, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	f7fc fa71 	bl	800042c <__aeabi_d2uiz>
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	18f3      	adds	r3, r6, r3
 8003f50:	19db      	adds	r3, r3, r7
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
 8003f56:	e167      	b.n	8004228 <max2871CalculateRegisterValues+0xb1c>
 8003f58:	165a0bbf 	.word	0x165a0bbf
 8003f5c:	0b2d05df 	.word	0x0b2d05df
 8003f60:	059682ef 	.word	0x059682ef
	} else if ((ppl->FreqOut < 93750000) && (ppl->FreqOut >= 46875000)) {
 8003f64:	23dc      	movs	r3, #220	; 0xdc
 8003f66:	2208      	movs	r2, #8
 8003f68:	189b      	adds	r3, r3, r2
 8003f6a:	19db      	adds	r3, r3, r7
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d000      	beq.n	8003f78 <max2871CalculateRegisterValues+0x86c>
 8003f76:	e0b5      	b.n	80040e4 <max2871CalculateRegisterValues+0x9d8>
 8003f78:	d103      	bne.n	8003f82 <max2871CalculateRegisterValues+0x876>
 8003f7a:	49ad      	ldr	r1, [pc, #692]	; (8004230 <max2871CalculateRegisterValues+0xb24>)
 8003f7c:	428a      	cmp	r2, r1
 8003f7e:	d900      	bls.n	8003f82 <max2871CalculateRegisterValues+0x876>
 8003f80:	e0b0      	b.n	80040e4 <max2871CalculateRegisterValues+0x9d8>
 8003f82:	23dc      	movs	r3, #220	; 0xdc
 8003f84:	2208      	movs	r2, #8
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	19db      	adds	r3, r3, r7
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <max2871CalculateRegisterValues+0x894>
 8003f94:	d000      	beq.n	8003f98 <max2871CalculateRegisterValues+0x88c>
 8003f96:	e0a5      	b.n	80040e4 <max2871CalculateRegisterValues+0x9d8>
 8003f98:	49a6      	ldr	r1, [pc, #664]	; (8004234 <max2871CalculateRegisterValues+0xb28>)
 8003f9a:	428a      	cmp	r2, r1
 8003f9c:	d800      	bhi.n	8003fa0 <max2871CalculateRegisterValues+0x894>
 8003f9e:	e0a1      	b.n	80040e4 <max2871CalculateRegisterValues+0x9d8>
		ppl->DIVA = 6;
 8003fa0:	26dc      	movs	r6, #220	; 0xdc
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	18f3      	adds	r3, r6, r3
 8003fa6:	19db      	adds	r3, r3, r7
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2206      	movs	r2, #6
 8003fac:	635a      	str	r2, [r3, #52]	; 0x34
		ppl->register0.NDIV = ppl->FreqOut * 64 / FREQREF;
 8003fae:	2308      	movs	r3, #8
 8003fb0:	18f3      	adds	r3, r6, r3
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	0e91      	lsrs	r1, r2, #26
 8003fbc:	0198      	lsls	r0, r3, #6
 8003fbe:	249c      	movs	r4, #156	; 0x9c
 8003fc0:	2508      	movs	r5, #8
 8003fc2:	1965      	adds	r5, r4, r5
 8003fc4:	19ed      	adds	r5, r5, r7
 8003fc6:	6028      	str	r0, [r5, #0]
 8003fc8:	2008      	movs	r0, #8
 8003fca:	1820      	adds	r0, r4, r0
 8003fcc:	19c0      	adds	r0, r0, r7
 8003fce:	6800      	ldr	r0, [r0, #0]
 8003fd0:	4308      	orrs	r0, r1
 8003fd2:	2108      	movs	r1, #8
 8003fd4:	1861      	adds	r1, r4, r1
 8003fd6:	19c9      	adds	r1, r1, r7
 8003fd8:	6008      	str	r0, [r1, #0]
 8003fda:	0193      	lsls	r3, r2, #6
 8003fdc:	2198      	movs	r1, #152	; 0x98
 8003fde:	2208      	movs	r2, #8
 8003fe0:	188a      	adds	r2, r1, r2
 8003fe2:	19d2      	adds	r2, r2, r7
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	24ec      	movs	r4, #236	; 0xec
 8003fe8:	2308      	movs	r3, #8
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	19db      	adds	r3, r3, r7
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	623b      	str	r3, [r7, #32]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff6:	6a3a      	ldr	r2, [r7, #32]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	2008      	movs	r0, #8
 8003ffc:	1809      	adds	r1, r1, r0
 8003ffe:	19c9      	adds	r1, r1, r7
 8004000:	6808      	ldr	r0, [r1, #0]
 8004002:	6849      	ldr	r1, [r1, #4]
 8004004:	f7fc f9f2 	bl	80003ec <__aeabi_uldivmod>
 8004008:	0002      	movs	r2, r0
 800400a:	000b      	movs	r3, r1
 800400c:	2308      	movs	r3, #8
 800400e:	18f3      	adds	r3, r6, r3
 8004010:	19db      	adds	r3, r3, r7
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c
		rest = ppl->FreqOut * 64 % FREQREF;
 8004016:	2308      	movs	r3, #8
 8004018:	18f3      	adds	r3, r6, r3
 800401a:	19db      	adds	r3, r3, r7
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	0e91      	lsrs	r1, r2, #26
 8004024:	468c      	mov	ip, r1
 8004026:	0198      	lsls	r0, r3, #6
 8004028:	2594      	movs	r5, #148	; 0x94
 800402a:	2108      	movs	r1, #8
 800402c:	1869      	adds	r1, r5, r1
 800402e:	19c9      	adds	r1, r1, r7
 8004030:	6008      	str	r0, [r1, #0]
 8004032:	2108      	movs	r1, #8
 8004034:	1869      	adds	r1, r5, r1
 8004036:	19c8      	adds	r0, r1, r7
 8004038:	6800      	ldr	r0, [r0, #0]
 800403a:	4661      	mov	r1, ip
 800403c:	4308      	orrs	r0, r1
 800403e:	2108      	movs	r1, #8
 8004040:	1869      	adds	r1, r5, r1
 8004042:	19c9      	adds	r1, r1, r7
 8004044:	6008      	str	r0, [r1, #0]
 8004046:	0193      	lsls	r3, r2, #6
 8004048:	2190      	movs	r1, #144	; 0x90
 800404a:	2208      	movs	r2, #8
 800404c:	188a      	adds	r2, r1, r2
 800404e:	19d2      	adds	r2, r2, r7
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	2308      	movs	r3, #8
 8004054:	18e3      	adds	r3, r4, r3
 8004056:	19db      	adds	r3, r3, r7
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2008      	movs	r0, #8
 8004066:	1809      	adds	r1, r1, r0
 8004068:	19c9      	adds	r1, r1, r7
 800406a:	6808      	ldr	r0, [r1, #0]
 800406c:	6849      	ldr	r1, [r1, #4]
 800406e:	f7fc f9bd 	bl	80003ec <__aeabi_uldivmod>
 8004072:	0010      	movs	r0, r2
 8004074:	0019      	movs	r1, r3
 8004076:	f7fc f9f7 	bl	8000468 <__aeabi_ul2d>
 800407a:	0002      	movs	r2, r0
 800407c:	000b      	movs	r3, r1
 800407e:	25e0      	movs	r5, #224	; 0xe0
 8004080:	2108      	movs	r1, #8
 8004082:	1869      	adds	r1, r5, r1
 8004084:	19c9      	adds	r1, r1, r7
 8004086:	600a      	str	r2, [r1, #0]
 8004088:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FREQREF * RESOL;
 800408a:	2308      	movs	r3, #8
 800408c:	18e3      	adds	r3, r4, r3
 800408e:	19db      	adds	r3, r3, r7
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f7fd ff61 	bl	8001f58 <__aeabi_ui2d>
 8004096:	0002      	movs	r2, r0
 8004098:	000b      	movs	r3, r1
 800409a:	2108      	movs	r1, #8
 800409c:	1869      	adds	r1, r5, r1
 800409e:	19c9      	adds	r1, r1, r7
 80040a0:	6808      	ldr	r0, [r1, #0]
 80040a2:	6849      	ldr	r1, [r1, #4]
 80040a4:	f7fc fdfe 	bl	8000ca4 <__aeabi_ddiv>
 80040a8:	0002      	movs	r2, r0
 80040aa:	000b      	movs	r3, r1
 80040ac:	0014      	movs	r4, r2
 80040ae:	001d      	movs	r5, r3
 80040b0:	23e8      	movs	r3, #232	; 0xe8
 80040b2:	2208      	movs	r2, #8
 80040b4:	189b      	adds	r3, r3, r2
 80040b6:	19db      	adds	r3, r3, r7
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	f7fd ff4d 	bl	8001f58 <__aeabi_ui2d>
 80040be:	0002      	movs	r2, r0
 80040c0:	000b      	movs	r3, r1
 80040c2:	0020      	movs	r0, r4
 80040c4:	0029      	movs	r1, r5
 80040c6:	f7fd f8e3 	bl	8001290 <__aeabi_dmul>
 80040ca:	0002      	movs	r2, r0
 80040cc:	000b      	movs	r3, r1
 80040ce:	0010      	movs	r0, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	f7fc f9ab 	bl	800042c <__aeabi_d2uiz>
 80040d6:	0002      	movs	r2, r0
 80040d8:	2308      	movs	r3, #8
 80040da:	18f3      	adds	r3, r6, r3
 80040dc:	19db      	adds	r3, r3, r7
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
 80040e2:	e0a1      	b.n	8004228 <max2871CalculateRegisterValues+0xb1c>
		ppl->DIVA = 7;
 80040e4:	26dc      	movs	r6, #220	; 0xdc
 80040e6:	2308      	movs	r3, #8
 80040e8:	18f3      	adds	r3, r6, r3
 80040ea:	19db      	adds	r3, r3, r7
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2207      	movs	r2, #7
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34
		ppl->register0.NDIV = ppl->FreqOut * 128 / FREQREF;
 80040f2:	2308      	movs	r3, #8
 80040f4:	18f3      	adds	r3, r6, r3
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	0e51      	lsrs	r1, r2, #25
 8004100:	01d8      	lsls	r0, r3, #7
 8004102:	248c      	movs	r4, #140	; 0x8c
 8004104:	2508      	movs	r5, #8
 8004106:	1965      	adds	r5, r4, r5
 8004108:	19ed      	adds	r5, r5, r7
 800410a:	6028      	str	r0, [r5, #0]
 800410c:	2008      	movs	r0, #8
 800410e:	1820      	adds	r0, r4, r0
 8004110:	19c0      	adds	r0, r0, r7
 8004112:	6800      	ldr	r0, [r0, #0]
 8004114:	4308      	orrs	r0, r1
 8004116:	2108      	movs	r1, #8
 8004118:	1861      	adds	r1, r4, r1
 800411a:	19c9      	adds	r1, r1, r7
 800411c:	6008      	str	r0, [r1, #0]
 800411e:	01d3      	lsls	r3, r2, #7
 8004120:	2188      	movs	r1, #136	; 0x88
 8004122:	2208      	movs	r2, #8
 8004124:	188a      	adds	r2, r1, r2
 8004126:	19d2      	adds	r2, r2, r7
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	24ec      	movs	r4, #236	; 0xec
 800412c:	2308      	movs	r3, #8
 800412e:	18e3      	adds	r3, r4, r3
 8004130:	19db      	adds	r3, r3, r7
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2008      	movs	r0, #8
 8004140:	1809      	adds	r1, r1, r0
 8004142:	19c9      	adds	r1, r1, r7
 8004144:	6808      	ldr	r0, [r1, #0]
 8004146:	6849      	ldr	r1, [r1, #4]
 8004148:	f7fc f950 	bl	80003ec <__aeabi_uldivmod>
 800414c:	0002      	movs	r2, r0
 800414e:	000b      	movs	r3, r1
 8004150:	2308      	movs	r3, #8
 8004152:	18f3      	adds	r3, r6, r3
 8004154:	19db      	adds	r3, r3, r7
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	63da      	str	r2, [r3, #60]	; 0x3c
		rest = ppl->FreqOut * 128 % FREQREF;
 800415a:	2308      	movs	r3, #8
 800415c:	18f3      	adds	r3, r6, r3
 800415e:	19db      	adds	r3, r3, r7
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	0e51      	lsrs	r1, r2, #25
 8004168:	468c      	mov	ip, r1
 800416a:	01d8      	lsls	r0, r3, #7
 800416c:	2584      	movs	r5, #132	; 0x84
 800416e:	2108      	movs	r1, #8
 8004170:	1869      	adds	r1, r5, r1
 8004172:	19c9      	adds	r1, r1, r7
 8004174:	6008      	str	r0, [r1, #0]
 8004176:	2108      	movs	r1, #8
 8004178:	1869      	adds	r1, r5, r1
 800417a:	19c8      	adds	r0, r1, r7
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	4661      	mov	r1, ip
 8004180:	4308      	orrs	r0, r1
 8004182:	2108      	movs	r1, #8
 8004184:	1869      	adds	r1, r5, r1
 8004186:	19c9      	adds	r1, r1, r7
 8004188:	6008      	str	r0, [r1, #0]
 800418a:	01d3      	lsls	r3, r2, #7
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	2208      	movs	r2, #8
 8004190:	188a      	adds	r2, r1, r2
 8004192:	19d2      	adds	r2, r2, r7
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	2308      	movs	r3, #8
 8004198:	18e3      	adds	r3, r4, r3
 800419a:	19db      	adds	r3, r3, r7
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2008      	movs	r0, #8
 80041aa:	1809      	adds	r1, r1, r0
 80041ac:	19c9      	adds	r1, r1, r7
 80041ae:	6808      	ldr	r0, [r1, #0]
 80041b0:	6849      	ldr	r1, [r1, #4]
 80041b2:	f7fc f91b 	bl	80003ec <__aeabi_uldivmod>
 80041b6:	0010      	movs	r0, r2
 80041b8:	0019      	movs	r1, r3
 80041ba:	f7fc f955 	bl	8000468 <__aeabi_ul2d>
 80041be:	0002      	movs	r2, r0
 80041c0:	000b      	movs	r3, r1
 80041c2:	25e0      	movs	r5, #224	; 0xe0
 80041c4:	2108      	movs	r1, #8
 80041c6:	1869      	adds	r1, r5, r1
 80041c8:	19c9      	adds	r1, r1, r7
 80041ca:	600a      	str	r2, [r1, #0]
 80041cc:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FREQREF * RESOL;
 80041ce:	2308      	movs	r3, #8
 80041d0:	18e3      	adds	r3, r4, r3
 80041d2:	19db      	adds	r3, r3, r7
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	f7fd febf 	bl	8001f58 <__aeabi_ui2d>
 80041da:	0002      	movs	r2, r0
 80041dc:	000b      	movs	r3, r1
 80041de:	2108      	movs	r1, #8
 80041e0:	1869      	adds	r1, r5, r1
 80041e2:	19c9      	adds	r1, r1, r7
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	6849      	ldr	r1, [r1, #4]
 80041e8:	f7fc fd5c 	bl	8000ca4 <__aeabi_ddiv>
 80041ec:	0002      	movs	r2, r0
 80041ee:	000b      	movs	r3, r1
 80041f0:	0014      	movs	r4, r2
 80041f2:	001d      	movs	r5, r3
 80041f4:	23e8      	movs	r3, #232	; 0xe8
 80041f6:	2208      	movs	r2, #8
 80041f8:	189b      	adds	r3, r3, r2
 80041fa:	19db      	adds	r3, r3, r7
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	f7fd feab 	bl	8001f58 <__aeabi_ui2d>
 8004202:	0002      	movs	r2, r0
 8004204:	000b      	movs	r3, r1
 8004206:	0020      	movs	r0, r4
 8004208:	0029      	movs	r1, r5
 800420a:	f7fd f841 	bl	8001290 <__aeabi_dmul>
 800420e:	0002      	movs	r2, r0
 8004210:	000b      	movs	r3, r1
 8004212:	0010      	movs	r0, r2
 8004214:	0019      	movs	r1, r3
 8004216:	f7fc f909 	bl	800042c <__aeabi_d2uiz>
 800421a:	0002      	movs	r2, r0
 800421c:	2308      	movs	r3, #8
 800421e:	18f3      	adds	r3, r6, r3
 8004220:	19db      	adds	r3, r3, r7
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004226:	e7ff      	b.n	8004228 <max2871CalculateRegisterValues+0xb1c>
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b03f      	add	sp, #252	; 0xfc
 800422e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004230:	059682ef 	.word	0x059682ef
 8004234:	02cb4177 	.word	0x02cb4177

08004238 <max2871RegisterInit>:

unsigned long max2871RegisterInit(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]

	unsigned long composedRegisterValue;

	for (int i = 0; i < 2; i++) {
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	e127      	b.n	8004498 <max2871RegisterInit+0x260>
		composedRegisterValue = ppl->register5.VAS_DLY << 29| ppl->register5.SDPLL << 25 | ppl->register5.F01 << 24
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	22f0      	movs	r2, #240	; 0xf0
 800424c:	589b      	ldr	r3, [r3, r2]
 800424e:	075a      	lsls	r2, r3, #29
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	21f4      	movs	r1, #244	; 0xf4
 8004254:	585b      	ldr	r3, [r3, r1]
 8004256:	065b      	lsls	r3, r3, #25
 8004258:	431a      	orrs	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	21f8      	movs	r1, #248	; 0xf8
 800425e:	585b      	ldr	r3, [r3, r1]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	431a      	orrs	r2, r3
		| ppl->register5.LD << 22 | ppl->register5.MUX_MSB << 18 | ppl->register5.ADCS << 6 | ppl->register5.ADCM << 3 | ppl->register5.ADDR5;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	21fc      	movs	r1, #252	; 0xfc
 8004268:	585b      	ldr	r3, [r3, r1]
 800426a:	059b      	lsls	r3, r3, #22
 800426c:	431a      	orrs	r2, r3
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	58cb      	ldr	r3, [r1, r3]
 8004276:	049b      	lsls	r3, r3, #18
 8004278:	431a      	orrs	r2, r3
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	2382      	movs	r3, #130	; 0x82
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	58cb      	ldr	r3, [r1, r3]
 8004282:	019b      	lsls	r3, r3, #6
 8004284:	431a      	orrs	r2, r3
 8004286:	6839      	ldr	r1, [r7, #0]
 8004288:	2384      	movs	r3, #132	; 0x84
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	58cb      	ldr	r3, [r1, r3]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	431a      	orrs	r2, r3
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	2386      	movs	r3, #134	; 0x86
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	58cb      	ldr	r3, [r1, r3]
		composedRegisterValue = ppl->register5.VAS_DLY << 29| ppl->register5.SDPLL << 25 | ppl->register5.F01 << 24
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

		max2871Write(hspi2, composedRegisterValue);
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	0011      	movs	r1, r2
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff f9e5 	bl	8003674 <max2871Write>
		HAL_Delay(20);
 80042aa:	2014      	movs	r0, #20
 80042ac:	f000 fbaa 	bl	8004a04 <HAL_Delay>

		composedRegisterValue = ppl->register4.RES << 29| ppl->register4.SDLDO << 28 | ppl->register4.SDDIV << 27
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	22b8      	movs	r2, #184	; 0xb8
 80042b4:	589b      	ldr	r3, [r3, r2]
 80042b6:	075a      	lsls	r2, r3, #29
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	21bc      	movs	r1, #188	; 0xbc
 80042bc:	585b      	ldr	r3, [r3, r1]
 80042be:	071b      	lsls	r3, r3, #28
 80042c0:	431a      	orrs	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	21c0      	movs	r1, #192	; 0xc0
 80042c6:	585b      	ldr	r3, [r3, r1]
 80042c8:	06db      	lsls	r3, r3, #27
 80042ca:	431a      	orrs	r2, r3
		| ppl->register4.SDREF << 26 | ppl->register4.FB << 23 | ppl->DIVA << 20 | ppl->register4.BS << 12 | ppl->register4.SDVCO << 11
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	21c4      	movs	r1, #196	; 0xc4
 80042d0:	585b      	ldr	r3, [r3, r1]
 80042d2:	069b      	lsls	r3, r3, #26
 80042d4:	431a      	orrs	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	21c8      	movs	r1, #200	; 0xc8
 80042da:	585b      	ldr	r3, [r3, r1]
 80042dc:	05db      	lsls	r3, r3, #23
 80042de:	431a      	orrs	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	051b      	lsls	r3, r3, #20
 80042e6:	431a      	orrs	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	21cc      	movs	r1, #204	; 0xcc
 80042ec:	585b      	ldr	r3, [r3, r1]
 80042ee:	031b      	lsls	r3, r3, #12
 80042f0:	431a      	orrs	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	21d0      	movs	r1, #208	; 0xd0
 80042f6:	585b      	ldr	r3, [r3, r1]
 80042f8:	02db      	lsls	r3, r3, #11
 80042fa:	431a      	orrs	r2, r3
		| ppl->register4.MTLD << 10 | ppl->register4.BDIV << 9 | ppl->register4.RFB_EN << 8 | ppl->register4.BPWR << 6 | ppl->register4.RFA_EN << 5
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	21d4      	movs	r1, #212	; 0xd4
 8004300:	585b      	ldr	r3, [r3, r1]
 8004302:	029b      	lsls	r3, r3, #10
 8004304:	431a      	orrs	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	21d8      	movs	r1, #216	; 0xd8
 800430a:	585b      	ldr	r3, [r3, r1]
 800430c:	025b      	lsls	r3, r3, #9
 800430e:	431a      	orrs	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	21dc      	movs	r1, #220	; 0xdc
 8004314:	585b      	ldr	r3, [r3, r1]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	431a      	orrs	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	21e0      	movs	r1, #224	; 0xe0
 800431e:	585b      	ldr	r3, [r3, r1]
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	431a      	orrs	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	21e4      	movs	r1, #228	; 0xe4
 8004328:	585b      	ldr	r3, [r3, r1]
 800432a:	015b      	lsls	r3, r3, #5
 800432c:	431a      	orrs	r2, r3
		| ppl->register4.APWR << 3 | ppl->register4.ADDR4;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	21e8      	movs	r1, #232	; 0xe8
 8004332:	585b      	ldr	r3, [r3, r1]
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	431a      	orrs	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	21ec      	movs	r1, #236	; 0xec
 800433c:	585b      	ldr	r3, [r3, r1]
		composedRegisterValue = ppl->register4.RES << 29| ppl->register4.SDLDO << 28 | ppl->register4.SDDIV << 27
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

		max2871Write(hspi2, composedRegisterValue);
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0011      	movs	r1, r2
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff f993 	bl	8003674 <max2871Write>

		composedRegisterValue = ppl->register3.VCO_MS << 26| ppl->register3.VAS_SHDN << 25 | ppl->register3.RETUNE << 24
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2298      	movs	r2, #152	; 0x98
 8004352:	589b      	ldr	r3, [r3, r2]
 8004354:	069a      	lsls	r2, r3, #26
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	219c      	movs	r1, #156	; 0x9c
 800435a:	585b      	ldr	r3, [r3, r1]
 800435c:	065b      	lsls	r3, r3, #25
 800435e:	431a      	orrs	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	21a0      	movs	r1, #160	; 0xa0
 8004364:	585b      	ldr	r3, [r3, r1]
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	431a      	orrs	r2, r3
		| ppl->register3.CSM << 18 | ppl->register3.MUTEDEL << 17 | ppl->register3.CDM << 15 | ppl->register3.CDIV << 3 | ppl->register3.ADDR3;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	21a4      	movs	r1, #164	; 0xa4
 800436e:	585b      	ldr	r3, [r3, r1]
 8004370:	049b      	lsls	r3, r3, #18
 8004372:	431a      	orrs	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	21a8      	movs	r1, #168	; 0xa8
 8004378:	585b      	ldr	r3, [r3, r1]
 800437a:	045b      	lsls	r3, r3, #17
 800437c:	431a      	orrs	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	21ac      	movs	r1, #172	; 0xac
 8004382:	585b      	ldr	r3, [r3, r1]
 8004384:	03db      	lsls	r3, r3, #15
 8004386:	431a      	orrs	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	21b0      	movs	r1, #176	; 0xb0
 800438c:	585b      	ldr	r3, [r3, r1]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	431a      	orrs	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	21b4      	movs	r1, #180	; 0xb4
 8004396:	585b      	ldr	r3, [r3, r1]
		composedRegisterValue = ppl->register3.VCO_MS << 26| ppl->register3.VAS_SHDN << 25 | ppl->register3.RETUNE << 24
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

		max2871Write(hspi2, composedRegisterValue);
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0011      	movs	r1, r2
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff f966 	bl	8003674 <max2871Write>

		composedRegisterValue = ppl->register2.LDS << 31| ppl->register2.SDN << 29 | ppl->register2.MUX << 26 | ppl->register2.DBR << 25
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	07da      	lsls	r2, r3, #31
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b2:	075b      	lsls	r3, r3, #29
 80043b4:	431a      	orrs	r2, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ba:	069b      	lsls	r3, r3, #26
 80043bc:	431a      	orrs	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c2:	065b      	lsls	r3, r3, #25
 80043c4:	431a      	orrs	r2, r3
		| ppl->register2.RDIV2 << 24 | ppl->register2.RCNT << 14 | ppl->register2.REG4DB << 13 | ppl->register2.CP << 9 | ppl->register2.LDF << 8
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	431a      	orrs	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	039b      	lsls	r3, r3, #14
 80043d4:	431a      	orrs	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043da:	035b      	lsls	r3, r3, #13
 80043dc:	431a      	orrs	r2, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e2:	025b      	lsls	r3, r3, #9
 80043e4:	431a      	orrs	r2, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	431a      	orrs	r2, r3
		| ppl->register2.LDP << 7 | ppl->register2.PDP << 6 | ppl->register2.SHDN << 5 | ppl->register2.TRI << 4 | ppl->register2.RST << 3 | ppl->register2.ADDR2;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	585b      	ldr	r3, [r3, r1]
 80043f4:	01db      	lsls	r3, r3, #7
 80043f6:	431a      	orrs	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2184      	movs	r1, #132	; 0x84
 80043fc:	585b      	ldr	r3, [r3, r1]
 80043fe:	019b      	lsls	r3, r3, #6
 8004400:	431a      	orrs	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2188      	movs	r1, #136	; 0x88
 8004406:	585b      	ldr	r3, [r3, r1]
 8004408:	015b      	lsls	r3, r3, #5
 800440a:	431a      	orrs	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	218c      	movs	r1, #140	; 0x8c
 8004410:	585b      	ldr	r3, [r3, r1]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	431a      	orrs	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2190      	movs	r1, #144	; 0x90
 800441a:	585b      	ldr	r3, [r3, r1]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	431a      	orrs	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2194      	movs	r1, #148	; 0x94
 8004424:	585b      	ldr	r3, [r3, r1]
		composedRegisterValue = ppl->register2.LDS << 31| ppl->register2.SDN << 29 | ppl->register2.MUX << 26 | ppl->register2.DBR << 25
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

		max2871Write(hspi2, composedRegisterValue);
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	0011      	movs	r1, r2
 8004430:	0018      	movs	r0, r3
 8004432:	f7ff f91f 	bl	8003674 <max2871Write>
		composedRegisterValue = ppl->register1.CPL << 29| ppl->register1.CPT << 27 | ppl->register1.PHASE << 15
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443a:	075a      	lsls	r2, r3, #29
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004440:	06db      	lsls	r3, r3, #27
 8004442:	431a      	orrs	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	03db      	lsls	r3, r3, #15
 800444a:	431a      	orrs	r2, r3
		| ppl->register1.MODULUS << 3 | ppl->register1.ADDR1;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	431a      	orrs	r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		composedRegisterValue = ppl->register1.CPL << 29| ppl->register1.CPT << 27 | ppl->register1.PHASE << 15
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

		max2871Write(hspi2, composedRegisterValue);
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0011      	movs	r1, r2
 8004462:	0018      	movs	r0, r3
 8004464:	f7ff f906 	bl	8003674 <max2871Write>

		composedRegisterValue = ppl->register0.INT << 31
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	07da      	lsls	r2, r3, #31
				| ppl->register0.NDIV << 15 | ppl->register0.FRAC << 3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	03db      	lsls	r3, r3, #15
 8004474:	431a      	orrs	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	431a      	orrs	r2, r3
				| ppl->register0.ADDR0;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		composedRegisterValue = ppl->register0.INT << 31
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
		max2871Write(hspi2, composedRegisterValue);
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	0011      	movs	r1, r2
 800448c:	0018      	movs	r0, r3
 800448e:	f7ff f8f1 	bl	8003674 <max2871Write>
	for (int i = 0; i < 2; i++) {
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3301      	adds	r3, #1
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b01      	cmp	r3, #1
 800449c:	dc00      	bgt.n	80044a0 <max2871RegisterInit+0x268>
 800449e:	e6d3      	b.n	8004248 <max2871RegisterInit+0x10>

	}

	return composedRegisterValue;
 80044a0:	68fb      	ldr	r3, [r7, #12]
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b004      	add	sp, #16
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <max2871Program>:
void max2871Program(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) // compose register value of register 0 and 4
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]

	unsigned long composedRegisterValue;

	max2871CalculateRegisterValues(ppl);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f7ff f927 	bl	800370c <max2871CalculateRegisterValues>

	composedRegisterValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	07da      	lsls	r2, r3, #31
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c8:	03db      	lsls	r3, r3, #15
 80044ca:	431a      	orrs	r2, r3
			| ppl->register0.FRAC << 3 | ppl->register0.ADDR0;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	431a      	orrs	r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	composedRegisterValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

	max2871Write(hspi2, composedRegisterValue);
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0011      	movs	r1, r2
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7ff f8c6 	bl	8003674 <max2871Write>

    HAL_Delay(1300); // New delay
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <max2871Program+0xec>)
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 fa8a 	bl	8004a04 <HAL_Delay>

	composedRegisterValue = ppl->register4.RES << 29|ppl->register4.SDLDO << 28|ppl->register4.SDDIV << 27
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	22b8      	movs	r2, #184	; 0xb8
 80044f4:	589b      	ldr	r3, [r3, r2]
 80044f6:	075a      	lsls	r2, r3, #29
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	21bc      	movs	r1, #188	; 0xbc
 80044fc:	585b      	ldr	r3, [r3, r1]
 80044fe:	071b      	lsls	r3, r3, #28
 8004500:	431a      	orrs	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	21c0      	movs	r1, #192	; 0xc0
 8004506:	585b      	ldr	r3, [r3, r1]
 8004508:	06db      	lsls	r3, r3, #27
 800450a:	431a      	orrs	r2, r3
	| ppl->register4.SDREF << 26|ppl->register4.FB << 23|ppl->DIVA << 20|ppl->register4.BS << 12
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	21c4      	movs	r1, #196	; 0xc4
 8004510:	585b      	ldr	r3, [r3, r1]
 8004512:	069b      	lsls	r3, r3, #26
 8004514:	431a      	orrs	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	21c8      	movs	r1, #200	; 0xc8
 800451a:	585b      	ldr	r3, [r3, r1]
 800451c:	05db      	lsls	r3, r3, #23
 800451e:	431a      	orrs	r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	051b      	lsls	r3, r3, #20
 8004526:	431a      	orrs	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	21cc      	movs	r1, #204	; 0xcc
 800452c:	585b      	ldr	r3, [r3, r1]
 800452e:	031b      	lsls	r3, r3, #12
 8004530:	431a      	orrs	r2, r3
	|ppl->register4.SDVCO << 11|ppl->register4.MTLD << 10|ppl->register4.BDIV << 9|ppl->register4.RFB_EN << 8
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	21d0      	movs	r1, #208	; 0xd0
 8004536:	585b      	ldr	r3, [r3, r1]
 8004538:	02db      	lsls	r3, r3, #11
 800453a:	431a      	orrs	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	21d4      	movs	r1, #212	; 0xd4
 8004540:	585b      	ldr	r3, [r3, r1]
 8004542:	029b      	lsls	r3, r3, #10
 8004544:	431a      	orrs	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	21d8      	movs	r1, #216	; 0xd8
 800454a:	585b      	ldr	r3, [r3, r1]
 800454c:	025b      	lsls	r3, r3, #9
 800454e:	431a      	orrs	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	21dc      	movs	r1, #220	; 0xdc
 8004554:	585b      	ldr	r3, [r3, r1]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	431a      	orrs	r2, r3
	|ppl->register4.BPWR << 6|ppl->register4.RFA_EN << 5|ppl->register4.APWR << 3|ppl->register4.ADDR4;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	21e0      	movs	r1, #224	; 0xe0
 800455e:	585b      	ldr	r3, [r3, r1]
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	431a      	orrs	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	21e4      	movs	r1, #228	; 0xe4
 8004568:	585b      	ldr	r3, [r3, r1]
 800456a:	015b      	lsls	r3, r3, #5
 800456c:	431a      	orrs	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	21e8      	movs	r1, #232	; 0xe8
 8004572:	585b      	ldr	r3, [r3, r1]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	431a      	orrs	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	21ec      	movs	r1, #236	; 0xec
 800457c:	585b      	ldr	r3, [r3, r1]
	composedRegisterValue = ppl->register4.RES << 29|ppl->register4.SDLDO << 28|ppl->register4.SDDIV << 27
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

	max2871Write(hspi2, composedRegisterValue);
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0011      	movs	r1, r2
 8004588:	0018      	movs	r0, r3
 800458a:	f7ff f873 	bl	8003674 <max2871Write>
}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	46bd      	mov	sp, r7
 8004592:	b004      	add	sp, #16
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	00000514 	.word	0x00000514

0800459c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <HAL_MspInit+0x44>)
 80045a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a6:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <HAL_MspInit+0x44>)
 80045a8:	2101      	movs	r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
 80045ae:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <HAL_MspInit+0x44>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2201      	movs	r2, #1
 80045b4:	4013      	ands	r3, r2
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_MspInit+0x44>)
 80045bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <HAL_MspInit+0x44>)
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	0549      	lsls	r1, r1, #21
 80045c4:	430a      	orrs	r2, r1
 80045c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <HAL_MspInit+0x44>)
 80045ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	055b      	lsls	r3, r3, #21
 80045d0:	4013      	ands	r3, r2
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	40021000 	.word	0x40021000

080045e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_CRC_MspInit+0x38>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10d      	bne.n	8004612 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_CRC_MspInit+0x3c>)
 80045f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_CRC_MspInit+0x3c>)
 80045fc:	2180      	movs	r1, #128	; 0x80
 80045fe:	0149      	lsls	r1, r1, #5
 8004600:	430a      	orrs	r2, r1
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_CRC_MspInit+0x3c>)
 8004606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	46bd      	mov	sp, r7
 8004616:	b004      	add	sp, #16
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	40023000 	.word	0x40023000
 8004620:	40021000 	.word	0x40021000

08004624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b091      	sub	sp, #68	; 0x44
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	232c      	movs	r3, #44	; 0x2c
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	0018      	movs	r0, r3
 8004632:	2314      	movs	r3, #20
 8004634:	001a      	movs	r2, r3
 8004636:	2100      	movs	r1, #0
 8004638:	f002 fcd6 	bl	8006fe8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800463c:	2414      	movs	r4, #20
 800463e:	193b      	adds	r3, r7, r4
 8004640:	0018      	movs	r0, r3
 8004642:	2318      	movs	r3, #24
 8004644:	001a      	movs	r2, r3
 8004646:	2100      	movs	r1, #0
 8004648:	f002 fcce 	bl	8006fe8 <memset>
  if(hi2c->Instance==I2C1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <HAL_I2C_MspInit+0xb8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d13d      	bne.n	80046d2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004656:	193b      	adds	r3, r7, r4
 8004658:	2220      	movs	r2, #32
 800465a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800465c:	193b      	adds	r3, r7, r4
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004662:	193b      	adds	r3, r7, r4
 8004664:	0018      	movs	r0, r3
 8004666:	f001 fb4b 	bl	8005d00 <HAL_RCCEx_PeriphCLKConfig>
 800466a:	1e03      	subs	r3, r0, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800466e:	f7fe fedf 	bl	8003430 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_I2C_MspInit+0xbc>)
 8004674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004676:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_I2C_MspInit+0xbc>)
 8004678:	2102      	movs	r1, #2
 800467a:	430a      	orrs	r2, r1
 800467c:	635a      	str	r2, [r3, #52]	; 0x34
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <HAL_I2C_MspInit+0xbc>)
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	2202      	movs	r2, #2
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	187b      	adds	r3, r7, r1
 800468e:	22c0      	movs	r2, #192	; 0xc0
 8004690:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004692:	187b      	adds	r3, r7, r1
 8004694:	2212      	movs	r2, #18
 8004696:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	187b      	adds	r3, r7, r1
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469e:	187b      	adds	r3, r7, r1
 80046a0:	2200      	movs	r2, #0
 80046a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	2206      	movs	r2, #6
 80046a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	4a0d      	ldr	r2, [pc, #52]	; (80046e4 <HAL_I2C_MspInit+0xc0>)
 80046ae:	0019      	movs	r1, r3
 80046b0:	0010      	movs	r0, r2
 80046b2:	f000 fb53 	bl	8004d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_I2C_MspInit+0xbc>)
 80046b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_I2C_MspInit+0xbc>)
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	0389      	lsls	r1, r1, #14
 80046c0:	430a      	orrs	r2, r1
 80046c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_I2C_MspInit+0xbc>)
 80046c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	039b      	lsls	r3, r3, #14
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b011      	add	sp, #68	; 0x44
 80046d8:	bd90      	pop	{r4, r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	40005400 	.word	0x40005400
 80046e0:	40021000 	.word	0x40021000
 80046e4:	50000400 	.word	0x50000400

080046e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b08b      	sub	sp, #44	; 0x2c
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	2414      	movs	r4, #20
 80046f2:	193b      	adds	r3, r7, r4
 80046f4:	0018      	movs	r0, r3
 80046f6:	2314      	movs	r3, #20
 80046f8:	001a      	movs	r2, r3
 80046fa:	2100      	movs	r1, #0
 80046fc:	f002 fc74 	bl	8006fe8 <memset>
  if(hspi->Instance==SPI2)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <HAL_SPI_MspInit+0xb8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d146      	bne.n	8004798 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <HAL_SPI_MspInit+0xbc>)
 800470c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470e:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_SPI_MspInit+0xbc>)
 8004710:	2180      	movs	r1, #128	; 0x80
 8004712:	01c9      	lsls	r1, r1, #7
 8004714:	430a      	orrs	r2, r1
 8004716:	63da      	str	r2, [r3, #60]	; 0x3c
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_SPI_MspInit+0xbc>)
 800471a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	01db      	lsls	r3, r3, #7
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <HAL_SPI_MspInit+0xbc>)
 8004728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472a:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <HAL_SPI_MspInit+0xbc>)
 800472c:	2101      	movs	r1, #1
 800472e:	430a      	orrs	r2, r1
 8004730:	635a      	str	r2, [r3, #52]	; 0x34
 8004732:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <HAL_SPI_MspInit+0xbc>)
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	2201      	movs	r2, #1
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MAX_SCK_Pin;
 800473e:	193b      	adds	r3, r7, r4
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	193b      	adds	r3, r7, r4
 8004746:	2202      	movs	r2, #2
 8004748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474a:	193b      	adds	r3, r7, r4
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004750:	193b      	adds	r3, r7, r4
 8004752:	2200      	movs	r2, #0
 8004754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004756:	193b      	adds	r3, r7, r4
 8004758:	2200      	movs	r2, #0
 800475a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_SCK_GPIO_Port, &GPIO_InitStruct);
 800475c:	193a      	adds	r2, r7, r4
 800475e:	23a0      	movs	r3, #160	; 0xa0
 8004760:	05db      	lsls	r3, r3, #23
 8004762:	0011      	movs	r1, r2
 8004764:	0018      	movs	r0, r3
 8004766:	f000 faf9 	bl	8004d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAX_DATA_Pin;
 800476a:	0021      	movs	r1, r4
 800476c:	187b      	adds	r3, r7, r1
 800476e:	2210      	movs	r2, #16
 8004770:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004772:	187b      	adds	r3, r7, r1
 8004774:	2202      	movs	r2, #2
 8004776:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	187b      	adds	r3, r7, r1
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477e:	187b      	adds	r3, r7, r1
 8004780:	2200      	movs	r2, #0
 8004782:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004784:	187b      	adds	r3, r7, r1
 8004786:	2201      	movs	r2, #1
 8004788:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_DATA_GPIO_Port, &GPIO_InitStruct);
 800478a:	187a      	adds	r2, r7, r1
 800478c:	23a0      	movs	r3, #160	; 0xa0
 800478e:	05db      	lsls	r3, r3, #23
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f000 fae2 	bl	8004d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b00b      	add	sp, #44	; 0x2c
 800479e:	bd90      	pop	{r4, r7, pc}
 80047a0:	40003800 	.word	0x40003800
 80047a4:	40021000 	.word	0x40021000

080047a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b091      	sub	sp, #68	; 0x44
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	232c      	movs	r3, #44	; 0x2c
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	0018      	movs	r0, r3
 80047b6:	2314      	movs	r3, #20
 80047b8:	001a      	movs	r2, r3
 80047ba:	2100      	movs	r1, #0
 80047bc:	f002 fc14 	bl	8006fe8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047c0:	2414      	movs	r4, #20
 80047c2:	193b      	adds	r3, r7, r4
 80047c4:	0018      	movs	r0, r3
 80047c6:	2318      	movs	r3, #24
 80047c8:	001a      	movs	r2, r3
 80047ca:	2100      	movs	r1, #0
 80047cc:	f002 fc0c 	bl	8006fe8 <memset>
  if(huart->Instance==USART1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a23      	ldr	r2, [pc, #140]	; (8004864 <HAL_UART_MspInit+0xbc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d13f      	bne.n	800485a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80047da:	193b      	adds	r3, r7, r4
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80047e0:	193b      	adds	r3, r7, r4
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047e6:	193b      	adds	r3, r7, r4
 80047e8:	0018      	movs	r0, r3
 80047ea:	f001 fa89 	bl	8005d00 <HAL_RCCEx_PeriphCLKConfig>
 80047ee:	1e03      	subs	r3, r0, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80047f2:	f7fe fe1d 	bl	8003430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047f6:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <HAL_UART_MspInit+0xc0>)
 80047f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_UART_MspInit+0xc0>)
 80047fc:	2180      	movs	r1, #128	; 0x80
 80047fe:	01c9      	lsls	r1, r1, #7
 8004800:	430a      	orrs	r2, r1
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
 8004804:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_UART_MspInit+0xc0>)
 8004806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	01db      	lsls	r3, r3, #7
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <HAL_UART_MspInit+0xc0>)
 8004814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_UART_MspInit+0xc0>)
 8004818:	2101      	movs	r1, #1
 800481a:	430a      	orrs	r2, r1
 800481c:	635a      	str	r2, [r3, #52]	; 0x34
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_UART_MspInit+0xc0>)
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	2201      	movs	r2, #1
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800482a:	212c      	movs	r1, #44	; 0x2c
 800482c:	187b      	adds	r3, r7, r1
 800482e:	22c0      	movs	r2, #192	; 0xc0
 8004830:	00d2      	lsls	r2, r2, #3
 8004832:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004834:	187b      	adds	r3, r7, r1
 8004836:	2202      	movs	r2, #2
 8004838:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	187b      	adds	r3, r7, r1
 800483c:	2200      	movs	r2, #0
 800483e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004840:	187b      	adds	r3, r7, r1
 8004842:	2200      	movs	r2, #0
 8004844:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004846:	187b      	adds	r3, r7, r1
 8004848:	2201      	movs	r2, #1
 800484a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484c:	187a      	adds	r2, r7, r1
 800484e:	23a0      	movs	r3, #160	; 0xa0
 8004850:	05db      	lsls	r3, r3, #23
 8004852:	0011      	movs	r1, r2
 8004854:	0018      	movs	r0, r3
 8004856:	f000 fa81 	bl	8004d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b011      	add	sp, #68	; 0x44
 8004860:	bd90      	pop	{r4, r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	40013800 	.word	0x40013800
 8004868:	40021000 	.word	0x40021000

0800486c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004870:	e7fe      	b.n	8004870 <NMI_Handler+0x4>

08004872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004876:	e7fe      	b.n	8004876 <HardFault_Handler+0x4>

08004878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004890:	f000 f89c 	bl	80049cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048a4:	480d      	ldr	r0, [pc, #52]	; (80048dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80048a8:	f7ff fff7 	bl	800489a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048ac:	480c      	ldr	r0, [pc, #48]	; (80048e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80048ae:	490d      	ldr	r1, [pc, #52]	; (80048e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80048b0:	4a0d      	ldr	r2, [pc, #52]	; (80048e8 <LoopForever+0xe>)
  movs r3, #0
 80048b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b4:	e002      	b.n	80048bc <LoopCopyDataInit>

080048b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ba:	3304      	adds	r3, #4

080048bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048c0:	d3f9      	bcc.n	80048b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048c2:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80048c4:	4c0a      	ldr	r4, [pc, #40]	; (80048f0 <LoopForever+0x16>)
  movs r3, #0
 80048c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048c8:	e001      	b.n	80048ce <LoopFillZerobss>

080048ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048cc:	3204      	adds	r2, #4

080048ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048d0:	d3fb      	bcc.n	80048ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80048d2:	f002 fb65 	bl	8006fa0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80048d6:	f7fe f8a3 	bl	8002a20 <main>

080048da <LoopForever>:

LoopForever:
  b LoopForever
 80048da:	e7fe      	b.n	80048da <LoopForever>
  ldr   r0, =_estack
 80048dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80048e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80048e8:	08007154 	.word	0x08007154
  ldr r2, =_sbss
 80048ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80048f0:	200001a0 	.word	0x200001a0

080048f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048f4:	e7fe      	b.n	80048f4 <ADC1_IRQHandler>
	...

080048f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048fe:	1dfb      	adds	r3, r7, #7
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_Init+0x3c>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_Init+0x3c>)
 800490a:	2180      	movs	r1, #128	; 0x80
 800490c:	0049      	lsls	r1, r1, #1
 800490e:	430a      	orrs	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004912:	2003      	movs	r0, #3
 8004914:	f000 f810 	bl	8004938 <HAL_InitTick>
 8004918:	1e03      	subs	r3, r0, #0
 800491a:	d003      	beq.n	8004924 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800491c:	1dfb      	adds	r3, r7, #7
 800491e:	2201      	movs	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	e001      	b.n	8004928 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004924:	f7ff fe3a 	bl	800459c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004928:	1dfb      	adds	r3, r7, #7
 800492a:	781b      	ldrb	r3, [r3, #0]
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b002      	add	sp, #8
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40022000 	.word	0x40022000

08004938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004940:	230f      	movs	r3, #15
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004948:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_InitTick+0x88>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02b      	beq.n	80049a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_InitTick+0x8c>)
 8004952:	681c      	ldr	r4, [r3, #0]
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <HAL_InitTick+0x88>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	0019      	movs	r1, r3
 800495a:	23fa      	movs	r3, #250	; 0xfa
 800495c:	0098      	lsls	r0, r3, #2
 800495e:	f7fb fbcf 	bl	8000100 <__udivsi3>
 8004962:	0003      	movs	r3, r0
 8004964:	0019      	movs	r1, r3
 8004966:	0020      	movs	r0, r4
 8004968:	f7fb fbca 	bl	8000100 <__udivsi3>
 800496c:	0003      	movs	r3, r0
 800496e:	0018      	movs	r0, r3
 8004970:	f000 f913 	bl	8004b9a <HAL_SYSTICK_Config>
 8004974:	1e03      	subs	r3, r0, #0
 8004976:	d112      	bne.n	800499e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d80a      	bhi.n	8004994 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	2301      	movs	r3, #1
 8004982:	425b      	negs	r3, r3
 8004984:	2200      	movs	r2, #0
 8004986:	0018      	movs	r0, r3
 8004988:	f000 f8f2 	bl	8004b70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800498c:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <HAL_InitTick+0x90>)
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e00d      	b.n	80049b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004994:	230f      	movs	r3, #15
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e008      	b.n	80049b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800499e:	230f      	movs	r3, #15
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e003      	b.n	80049b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80049a8:	230f      	movs	r3, #15
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80049b0:	230f      	movs	r3, #15
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b005      	add	sp, #20
 80049bc:	bd90      	pop	{r4, r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	20000008 	.word	0x20000008
 80049c4:	20000000 	.word	0x20000000
 80049c8:	20000004 	.word	0x20000004

080049cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_IncTick+0x1c>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	001a      	movs	r2, r3
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_IncTick+0x20>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	18d2      	adds	r2, r2, r3
 80049dc:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_IncTick+0x20>)
 80049de:	601a      	str	r2, [r3, #0]
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	20000008 	.word	0x20000008
 80049ec:	2000019c 	.word	0x2000019c

080049f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  return uwTick;
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <HAL_GetTick+0x10>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	2000019c 	.word	0x2000019c

08004a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a0c:	f7ff fff0 	bl	80049f0 <HAL_GetTick>
 8004a10:	0003      	movs	r3, r0
 8004a12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	d005      	beq.n	8004a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <HAL_Delay+0x44>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	001a      	movs	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	189b      	adds	r3, r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	f7ff ffe0 	bl	80049f0 <HAL_GetTick>
 8004a30:	0002      	movs	r2, r0
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d8f7      	bhi.n	8004a2c <HAL_Delay+0x28>
  {
  }
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b004      	add	sp, #16
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	20000008 	.word	0x20000008

08004a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	0002      	movs	r2, r0
 8004a54:	6039      	str	r1, [r7, #0]
 8004a56:	1dfb      	adds	r3, r7, #7
 8004a58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a5a:	1dfb      	adds	r3, r7, #7
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a60:	d828      	bhi.n	8004ab4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a62:	4a2f      	ldr	r2, [pc, #188]	; (8004b20 <__NVIC_SetPriority+0xd4>)
 8004a64:	1dfb      	adds	r3, r7, #7
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b25b      	sxtb	r3, r3
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	33c0      	adds	r3, #192	; 0xc0
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	589b      	ldr	r3, [r3, r2]
 8004a72:	1dfa      	adds	r2, r7, #7
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	0011      	movs	r1, r2
 8004a78:	2203      	movs	r2, #3
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	00d2      	lsls	r2, r2, #3
 8004a7e:	21ff      	movs	r1, #255	; 0xff
 8004a80:	4091      	lsls	r1, r2
 8004a82:	000a      	movs	r2, r1
 8004a84:	43d2      	mvns	r2, r2
 8004a86:	401a      	ands	r2, r3
 8004a88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	22ff      	movs	r2, #255	; 0xff
 8004a90:	401a      	ands	r2, r3
 8004a92:	1dfb      	adds	r3, r7, #7
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	0018      	movs	r0, r3
 8004a98:	2303      	movs	r3, #3
 8004a9a:	4003      	ands	r3, r0
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004aa0:	481f      	ldr	r0, [pc, #124]	; (8004b20 <__NVIC_SetPriority+0xd4>)
 8004aa2:	1dfb      	adds	r3, r7, #7
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b25b      	sxtb	r3, r3
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	33c0      	adds	r3, #192	; 0xc0
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ab2:	e031      	b.n	8004b18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <__NVIC_SetPriority+0xd8>)
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	0019      	movs	r1, r3
 8004abc:	230f      	movs	r3, #15
 8004abe:	400b      	ands	r3, r1
 8004ac0:	3b08      	subs	r3, #8
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	3306      	adds	r3, #6
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	3304      	adds	r3, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	1dfa      	adds	r2, r7, #7
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	0011      	movs	r1, r2
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	400a      	ands	r2, r1
 8004ad8:	00d2      	lsls	r2, r2, #3
 8004ada:	21ff      	movs	r1, #255	; 0xff
 8004adc:	4091      	lsls	r1, r2
 8004ade:	000a      	movs	r2, r1
 8004ae0:	43d2      	mvns	r2, r2
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	019b      	lsls	r3, r3, #6
 8004aea:	22ff      	movs	r2, #255	; 0xff
 8004aec:	401a      	ands	r2, r3
 8004aee:	1dfb      	adds	r3, r7, #7
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	0018      	movs	r0, r3
 8004af4:	2303      	movs	r3, #3
 8004af6:	4003      	ands	r3, r0
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004afc:	4809      	ldr	r0, [pc, #36]	; (8004b24 <__NVIC_SetPriority+0xd8>)
 8004afe:	1dfb      	adds	r3, r7, #7
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	001c      	movs	r4, r3
 8004b04:	230f      	movs	r3, #15
 8004b06:	4023      	ands	r3, r4
 8004b08:	3b08      	subs	r3, #8
 8004b0a:	089b      	lsrs	r3, r3, #2
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	3306      	adds	r3, #6
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	18c3      	adds	r3, r0, r3
 8004b14:	3304      	adds	r3, #4
 8004b16:	601a      	str	r2, [r3, #0]
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b003      	add	sp, #12
 8004b1e:	bd90      	pop	{r4, r7, pc}
 8004b20:	e000e100 	.word	0xe000e100
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	1e5a      	subs	r2, r3, #1
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	045b      	lsls	r3, r3, #17
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d301      	bcc.n	8004b40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e010      	b.n	8004b62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <SysTick_Config+0x44>)
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	3a01      	subs	r2, #1
 8004b46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b48:	2301      	movs	r3, #1
 8004b4a:	425b      	negs	r3, r3
 8004b4c:	2103      	movs	r1, #3
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7ff ff7c 	bl	8004a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <SysTick_Config+0x44>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b5a:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <SysTick_Config+0x44>)
 8004b5c:	2207      	movs	r2, #7
 8004b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b002      	add	sp, #8
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	e000e010 	.word	0xe000e010

08004b70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	210f      	movs	r1, #15
 8004b7c:	187b      	adds	r3, r7, r1
 8004b7e:	1c02      	adds	r2, r0, #0
 8004b80:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	0011      	movs	r1, r2
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7ff ff5d 	bl	8004a4c <__NVIC_SetPriority>
}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b004      	add	sp, #16
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7ff ffbf 	bl	8004b28 <SysTick_Config>
 8004baa:	0003      	movs	r3, r0
}
 8004bac:	0018      	movs	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e056      	b.n	8004c74 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7f5b      	ldrb	r3, [r3, #29]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7ff fd03 	bl	80045e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	791b      	ldrb	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10c      	bne.n	8004c06 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <HAL_CRC_Init+0xc8>)
 8004bf2:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2118      	movs	r1, #24
 8004c00:	438a      	bics	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	e00b      	b.n	8004c1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 f835 	bl	8004c80 <HAL_CRCEx_Polynomial_Set>
 8004c16:	1e03      	subs	r3, r0, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e02a      	b.n	8004c74 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	795b      	ldrb	r3, [r3, #5]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4252      	negs	r2, r2
 8004c2e:	611a      	str	r2, [r3, #16]
 8004c30:	e004      	b.n	8004c3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6912      	ldr	r2, [r2, #16]
 8004c3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2260      	movs	r2, #96	; 0x60
 8004c44:	4393      	bics	r3, r2
 8004c46:	0019      	movs	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2280      	movs	r2, #128	; 0x80
 8004c5c:	4393      	bics	r3, r2
 8004c5e:	0019      	movs	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	04c11db7 	.word	0x04c11db7

08004c80 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8c:	2317      	movs	r3, #23
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c94:	231f      	movs	r3, #31
 8004c96:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1e5a      	subs	r2, r3, #1
 8004c9e:	613a      	str	r2, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_CRCEx_Polynomial_Set+0x36>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	221f      	movs	r2, #31
 8004ca8:	4013      	ands	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	40da      	lsrs	r2, r3
 8004cae:	0013      	movs	r3, r2
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d0f1      	beq.n	8004c9a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b18      	cmp	r3, #24
 8004cba:	d00f      	beq.n	8004cdc <HAL_CRCEx_Polynomial_Set+0x5c>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b18      	cmp	r3, #24
 8004cc0:	d824      	bhi.n	8004d0c <HAL_CRCEx_Polynomial_Set+0x8c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d011      	beq.n	8004cec <HAL_CRCEx_Polynomial_Set+0x6c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b10      	cmp	r3, #16
 8004ccc:	d81e      	bhi.n	8004d0c <HAL_CRCEx_Polynomial_Set+0x8c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_CRCEx_Polynomial_Set+0x96>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d010      	beq.n	8004cfc <HAL_CRCEx_Polynomial_Set+0x7c>
 8004cda:	e017      	b.n	8004d0c <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d91b      	bls.n	8004d1a <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8004ce2:	2317      	movs	r3, #23
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004cea:	e016      	b.n	8004d1a <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b07      	cmp	r3, #7
 8004cf0:	d915      	bls.n	8004d1e <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8004cf2:	2317      	movs	r3, #23
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004cfa:	e010      	b.n	8004d1e <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	d90f      	bls.n	8004d22 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8004d02:	2317      	movs	r3, #23
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004d0a:	e00a      	b.n	8004d22 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004d0c:	2317      	movs	r3, #23
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
      break;
 8004d14:	e006      	b.n	8004d24 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	e004      	b.n	8004d24 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	e002      	b.n	8004d24 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	e000      	b.n	8004d24 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004d22:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8004d24:	2317      	movs	r3, #23
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10e      	bne.n	8004d4c <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2218      	movs	r2, #24
 8004d3e:	4393      	bics	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d4c:	2317      	movs	r3, #23
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	781b      	ldrb	r3, [r3, #0]
}
 8004d52:	0018      	movs	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b006      	add	sp, #24
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d6a:	e147      	b.n	8004ffc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2101      	movs	r1, #1
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4091      	lsls	r1, r2
 8004d76:	000a      	movs	r2, r1
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d100      	bne.n	8004d84 <HAL_GPIO_Init+0x28>
 8004d82:	e138      	b.n	8004ff6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2203      	movs	r2, #3
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d005      	beq.n	8004d9c <HAL_GPIO_Init+0x40>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2203      	movs	r2, #3
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d130      	bne.n	8004dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	409a      	lsls	r2, r3
 8004daa:	0013      	movs	r3, r2
 8004dac:	43da      	mvns	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	0013      	movs	r3, r2
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	0013      	movs	r3, r2
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4013      	ands	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	2201      	movs	r2, #1
 8004dea:	401a      	ands	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	409a      	lsls	r2, r3
 8004df0:	0013      	movs	r3, r2
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2203      	movs	r2, #3
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d017      	beq.n	8004e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	2203      	movs	r2, #3
 8004e16:	409a      	lsls	r2, r3
 8004e18:	0013      	movs	r3, r2
 8004e1a:	43da      	mvns	r2, r3
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	0013      	movs	r3, r2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2203      	movs	r2, #3
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d123      	bne.n	8004e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	08da      	lsrs	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3208      	adds	r2, #8
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	58d3      	ldr	r3, [r2, r3]
 8004e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2207      	movs	r2, #7
 8004e58:	4013      	ands	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	220f      	movs	r2, #15
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	0013      	movs	r3, r2
 8004e62:	43da      	mvns	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4013      	ands	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2107      	movs	r1, #7
 8004e72:	400b      	ands	r3, r1
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	409a      	lsls	r2, r3
 8004e78:	0013      	movs	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	08da      	lsrs	r2, r3, #3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3208      	adds	r2, #8
 8004e88:	0092      	lsls	r2, r2, #2
 8004e8a:	6939      	ldr	r1, [r7, #16]
 8004e8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	2203      	movs	r2, #3
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	0013      	movs	r3, r2
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	401a      	ands	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	0013      	movs	r3, r2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	23c0      	movs	r3, #192	; 0xc0
 8004ec8:	029b      	lsls	r3, r3, #10
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d100      	bne.n	8004ed0 <HAL_GPIO_Init+0x174>
 8004ece:	e092      	b.n	8004ff6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004ed0:	4a50      	ldr	r2, [pc, #320]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	3318      	adds	r3, #24
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	589b      	ldr	r3, [r3, r2]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	220f      	movs	r2, #15
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	0013      	movs	r3, r2
 8004eec:	43da      	mvns	r2, r3
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	23a0      	movs	r3, #160	; 0xa0
 8004ef8:	05db      	lsls	r3, r3, #23
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d013      	beq.n	8004f26 <HAL_GPIO_Init+0x1ca>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a45      	ldr	r2, [pc, #276]	; (8005018 <HAL_GPIO_Init+0x2bc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00d      	beq.n	8004f22 <HAL_GPIO_Init+0x1c6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a44      	ldr	r2, [pc, #272]	; (800501c <HAL_GPIO_Init+0x2c0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <HAL_GPIO_Init+0x1c2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a43      	ldr	r2, [pc, #268]	; (8005020 <HAL_GPIO_Init+0x2c4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d101      	bne.n	8004f1a <HAL_GPIO_Init+0x1be>
 8004f16:	2303      	movs	r3, #3
 8004f18:	e006      	b.n	8004f28 <HAL_GPIO_Init+0x1cc>
 8004f1a:	2305      	movs	r3, #5
 8004f1c:	e004      	b.n	8004f28 <HAL_GPIO_Init+0x1cc>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e002      	b.n	8004f28 <HAL_GPIO_Init+0x1cc>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_GPIO_Init+0x1cc>
 8004f26:	2300      	movs	r3, #0
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	2103      	movs	r1, #3
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	00d2      	lsls	r2, r2, #3
 8004f30:	4093      	lsls	r3, r2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004f38:	4936      	ldr	r1, [pc, #216]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	3318      	adds	r3, #24
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f46:	4b33      	ldr	r3, [pc, #204]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	43da      	mvns	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4013      	ands	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	035b      	lsls	r3, r3, #13
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f6a:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	43da      	mvns	r2, r3
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	039b      	lsls	r3, r3, #14
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f94:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004f9c:	2384      	movs	r3, #132	; 0x84
 8004f9e:	58d3      	ldr	r3, [r2, r3]
 8004fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	029b      	lsls	r3, r3, #10
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fc0:	4914      	ldr	r1, [pc, #80]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004fc2:	2284      	movs	r2, #132	; 0x84
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004fc8:	4a12      	ldr	r2, [pc, #72]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	58d3      	ldr	r3, [r2, r3]
 8004fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	43da      	mvns	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	025b      	lsls	r3, r3, #9
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fee:	4909      	ldr	r1, [pc, #36]	; (8005014 <HAL_GPIO_Init+0x2b8>)
 8004ff0:	2280      	movs	r2, #128	; 0x80
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	40da      	lsrs	r2, r3
 8005004:	1e13      	subs	r3, r2, #0
 8005006:	d000      	beq.n	800500a <HAL_GPIO_Init+0x2ae>
 8005008:	e6b0      	b.n	8004d6c <HAL_GPIO_Init+0x10>
  }
}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b006      	add	sp, #24
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021800 	.word	0x40021800
 8005018:	50000400 	.word	0x50000400
 800501c:	50000800 	.word	0x50000800
 8005020:	50000c00 	.word	0x50000c00

08005024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	000a      	movs	r2, r1
 800502e:	1cbb      	adds	r3, r7, #2
 8005030:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	1cba      	adds	r2, r7, #2
 8005038:	8812      	ldrh	r2, [r2, #0]
 800503a:	4013      	ands	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800503e:	230f      	movs	r3, #15
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e003      	b.n	8005050 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005048:	230f      	movs	r3, #15
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005050:	230f      	movs	r3, #15
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	781b      	ldrb	r3, [r3, #0]
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b004      	add	sp, #16
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	0008      	movs	r0, r1
 8005068:	0011      	movs	r1, r2
 800506a:	1cbb      	adds	r3, r7, #2
 800506c:	1c02      	adds	r2, r0, #0
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	1c7b      	adds	r3, r7, #1
 8005072:	1c0a      	adds	r2, r1, #0
 8005074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005076:	1c7b      	adds	r3, r7, #1
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800507e:	1cbb      	adds	r3, r7, #2
 8005080:	881a      	ldrh	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005086:	e003      	b.n	8005090 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005088:	1cbb      	adds	r3, r7, #2
 800508a:	881a      	ldrh	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e082      	b.n	80051b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2241      	movs	r2, #65	; 0x41
 80050ae:	5c9b      	ldrb	r3, [r3, r2]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d107      	bne.n	80050c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2240      	movs	r2, #64	; 0x40
 80050ba:	2100      	movs	r1, #0
 80050bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7ff faaf 	bl	8004624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2241      	movs	r2, #65	; 0x41
 80050ca:	2124      	movs	r1, #36	; 0x24
 80050cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2101      	movs	r1, #1
 80050da:	438a      	bics	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4934      	ldr	r1, [pc, #208]	; (80051b8 <HAL_I2C_Init+0x120>)
 80050e8:	400a      	ands	r2, r1
 80050ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4931      	ldr	r1, [pc, #196]	; (80051bc <HAL_I2C_Init+0x124>)
 80050f8:	400a      	ands	r2, r1
 80050fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d108      	bne.n	8005116 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	0209      	lsls	r1, r1, #8
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	e007      	b.n	8005126 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2184      	movs	r1, #132	; 0x84
 8005120:	0209      	lsls	r1, r1, #8
 8005122:	430a      	orrs	r2, r1
 8005124:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d104      	bne.n	8005138 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	0112      	lsls	r2, r2, #4
 8005136:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	491f      	ldr	r1, [pc, #124]	; (80051c0 <HAL_I2C_Init+0x128>)
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	491a      	ldr	r1, [pc, #104]	; (80051bc <HAL_I2C_Init+0x124>)
 8005154:	400a      	ands	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	431a      	orrs	r2, r3
 8005162:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69d9      	ldr	r1, [r3, #28]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1a      	ldr	r2, [r3, #32]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2101      	movs	r1, #1
 800518e:	430a      	orrs	r2, r1
 8005190:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2241      	movs	r2, #65	; 0x41
 800519c:	2120      	movs	r1, #32
 800519e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2242      	movs	r2, #66	; 0x42
 80051aa:	2100      	movs	r1, #0
 80051ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b002      	add	sp, #8
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	f0ffffff 	.word	0xf0ffffff
 80051bc:	ffff7fff 	.word	0xffff7fff
 80051c0:	02008000 	.word	0x02008000

080051c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2241      	movs	r2, #65	; 0x41
 80051d2:	5c9b      	ldrb	r3, [r3, r2]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d138      	bne.n	800524c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2240      	movs	r2, #64	; 0x40
 80051de:	5c9b      	ldrb	r3, [r3, r2]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e032      	b.n	800524e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2240      	movs	r2, #64	; 0x40
 80051ec:	2101      	movs	r1, #1
 80051ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2241      	movs	r2, #65	; 0x41
 80051f4:	2124      	movs	r1, #36	; 0x24
 80051f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2101      	movs	r1, #1
 8005204:	438a      	bics	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4911      	ldr	r1, [pc, #68]	; (8005258 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005214:	400a      	ands	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2101      	movs	r1, #1
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2241      	movs	r2, #65	; 0x41
 800523c:	2120      	movs	r1, #32
 800523e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2240      	movs	r2, #64	; 0x40
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b002      	add	sp, #8
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	ffffefff 	.word	0xffffefff

0800525c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2241      	movs	r2, #65	; 0x41
 800526a:	5c9b      	ldrb	r3, [r3, r2]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b20      	cmp	r3, #32
 8005270:	d139      	bne.n	80052e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2240      	movs	r2, #64	; 0x40
 8005276:	5c9b      	ldrb	r3, [r3, r2]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800527c:	2302      	movs	r3, #2
 800527e:	e033      	b.n	80052e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2240      	movs	r2, #64	; 0x40
 8005284:	2101      	movs	r1, #1
 8005286:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2241      	movs	r2, #65	; 0x41
 800528c:	2124      	movs	r1, #36	; 0x24
 800528e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2101      	movs	r1, #1
 800529c:	438a      	bics	r2, r1
 800529e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2101      	movs	r1, #1
 80052ce:	430a      	orrs	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2241      	movs	r2, #65	; 0x41
 80052d6:	2120      	movs	r1, #32
 80052d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2240      	movs	r2, #64	; 0x40
 80052de:	2100      	movs	r1, #0
 80052e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b004      	add	sp, #16
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	fffff0ff 	.word	0xfffff0ff

080052f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005302:	4013      	ands	r3, r2
 8005304:	0019      	movs	r1, r3
 8005306:	4b17      	ldr	r3, [pc, #92]	; (8005364 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	429a      	cmp	r2, r3
 8005316:	d11f      	bne.n	8005358 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005318:	4b14      	ldr	r3, [pc, #80]	; (800536c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	0013      	movs	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	189b      	adds	r3, r3, r2
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	4912      	ldr	r1, [pc, #72]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005326:	0018      	movs	r0, r3
 8005328:	f7fa feea 	bl	8000100 <__udivsi3>
 800532c:	0003      	movs	r3, r0
 800532e:	3301      	adds	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005332:	e008      	b.n	8005346 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3b01      	subs	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e001      	b.n	8005346 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e009      	b.n	800535a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	401a      	ands	r2, r3
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	429a      	cmp	r2, r3
 8005356:	d0ed      	beq.n	8005334 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b004      	add	sp, #16
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	40007000 	.word	0x40007000
 8005368:	fffff9ff 	.word	0xfffff9ff
 800536c:	20000000 	.word	0x20000000
 8005370:	000f4240 	.word	0x000f4240

08005374 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <LL_RCC_GetAPB1Prescaler+0x14>)
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	23e0      	movs	r3, #224	; 0xe0
 800537e:	01db      	lsls	r3, r3, #7
 8005380:	4013      	ands	r3, r2
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40021000 	.word	0x40021000

0800538c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e2f3      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2201      	movs	r2, #1
 80053a4:	4013      	ands	r3, r2
 80053a6:	d100      	bne.n	80053aa <HAL_RCC_OscConfig+0x1e>
 80053a8:	e07c      	b.n	80054a4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053aa:	4bc3      	ldr	r3, [pc, #780]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2238      	movs	r2, #56	; 0x38
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b4:	4bc0      	ldr	r3, [pc, #768]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	2203      	movs	r2, #3
 80053ba:	4013      	ands	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d102      	bne.n	80053ca <HAL_RCC_OscConfig+0x3e>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d002      	beq.n	80053d0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	4bb9      	ldr	r3, [pc, #740]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	029b      	lsls	r3, r3, #10
 80053d8:	4013      	ands	r3, r2
 80053da:	d062      	beq.n	80054a2 <HAL_RCC_OscConfig+0x116>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d15e      	bne.n	80054a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e2ce      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	025b      	lsls	r3, r3, #9
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x78>
 80053f4:	4bb0      	ldr	r3, [pc, #704]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4baf      	ldr	r3, [pc, #700]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80053fa:	2180      	movs	r1, #128	; 0x80
 80053fc:	0249      	lsls	r1, r1, #9
 80053fe:	430a      	orrs	r2, r1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e020      	b.n	8005446 <HAL_RCC_OscConfig+0xba>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	23a0      	movs	r3, #160	; 0xa0
 800540a:	02db      	lsls	r3, r3, #11
 800540c:	429a      	cmp	r2, r3
 800540e:	d10e      	bne.n	800542e <HAL_RCC_OscConfig+0xa2>
 8005410:	4ba9      	ldr	r3, [pc, #676]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4ba8      	ldr	r3, [pc, #672]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005416:	2180      	movs	r1, #128	; 0x80
 8005418:	02c9      	lsls	r1, r1, #11
 800541a:	430a      	orrs	r2, r1
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	4ba6      	ldr	r3, [pc, #664]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4ba5      	ldr	r3, [pc, #660]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005424:	2180      	movs	r1, #128	; 0x80
 8005426:	0249      	lsls	r1, r1, #9
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e00b      	b.n	8005446 <HAL_RCC_OscConfig+0xba>
 800542e:	4ba2      	ldr	r3, [pc, #648]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4ba1      	ldr	r3, [pc, #644]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005434:	49a1      	ldr	r1, [pc, #644]	; (80056bc <HAL_RCC_OscConfig+0x330>)
 8005436:	400a      	ands	r2, r1
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	4b9f      	ldr	r3, [pc, #636]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b9e      	ldr	r3, [pc, #632]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005440:	499f      	ldr	r1, [pc, #636]	; (80056c0 <HAL_RCC_OscConfig+0x334>)
 8005442:	400a      	ands	r2, r1
 8005444:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d014      	beq.n	8005478 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544e:	f7ff facf 	bl	80049f0 <HAL_GetTick>
 8005452:	0003      	movs	r3, r0
 8005454:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005458:	f7ff faca 	bl	80049f0 <HAL_GetTick>
 800545c:	0002      	movs	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e28d      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800546a:	4b93      	ldr	r3, [pc, #588]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	029b      	lsls	r3, r3, #10
 8005472:	4013      	ands	r3, r2
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0xcc>
 8005476:	e015      	b.n	80054a4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7ff faba 	bl	80049f0 <HAL_GetTick>
 800547c:	0003      	movs	r3, r0
 800547e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005482:	f7ff fab5 	bl	80049f0 <HAL_GetTick>
 8005486:	0002      	movs	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b64      	cmp	r3, #100	; 0x64
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e278      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005494:	4b88      	ldr	r3, [pc, #544]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	029b      	lsls	r3, r3, #10
 800549c:	4013      	ands	r3, r2
 800549e:	d1f0      	bne.n	8005482 <HAL_RCC_OscConfig+0xf6>
 80054a0:	e000      	b.n	80054a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2202      	movs	r2, #2
 80054aa:	4013      	ands	r3, r2
 80054ac:	d100      	bne.n	80054b0 <HAL_RCC_OscConfig+0x124>
 80054ae:	e099      	b.n	80055e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b0:	4b81      	ldr	r3, [pc, #516]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2238      	movs	r2, #56	; 0x38
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ba:	4b7f      	ldr	r3, [pc, #508]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2203      	movs	r2, #3
 80054c0:	4013      	ands	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d102      	bne.n	80054d0 <HAL_RCC_OscConfig+0x144>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d002      	beq.n	80054d6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d135      	bne.n	8005542 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054d6:	4b78      	ldr	r3, [pc, #480]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	4013      	ands	r3, r2
 80054e0:	d005      	beq.n	80054ee <HAL_RCC_OscConfig+0x162>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e24b      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ee:	4b72      	ldr	r3, [pc, #456]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4a74      	ldr	r2, [pc, #464]	; (80056c4 <HAL_RCC_OscConfig+0x338>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	0019      	movs	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	021a      	lsls	r2, r3, #8
 80054fe:	4b6e      	ldr	r3, [pc, #440]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d112      	bne.n	8005530 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800550a:	4b6b      	ldr	r3, [pc, #428]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6e      	ldr	r2, [pc, #440]	; (80056c8 <HAL_RCC_OscConfig+0x33c>)
 8005510:	4013      	ands	r3, r2
 8005512:	0019      	movs	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	4b67      	ldr	r3, [pc, #412]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800551e:	4b66      	ldr	r3, [pc, #408]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	0adb      	lsrs	r3, r3, #11
 8005524:	2207      	movs	r2, #7
 8005526:	4013      	ands	r3, r2
 8005528:	4a68      	ldr	r2, [pc, #416]	; (80056cc <HAL_RCC_OscConfig+0x340>)
 800552a:	40da      	lsrs	r2, r3
 800552c:	4b68      	ldr	r3, [pc, #416]	; (80056d0 <HAL_RCC_OscConfig+0x344>)
 800552e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005530:	4b68      	ldr	r3, [pc, #416]	; (80056d4 <HAL_RCC_OscConfig+0x348>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0018      	movs	r0, r3
 8005536:	f7ff f9ff 	bl	8004938 <HAL_InitTick>
 800553a:	1e03      	subs	r3, r0, #0
 800553c:	d051      	beq.n	80055e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e221      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d030      	beq.n	80055ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800554a:	4b5b      	ldr	r3, [pc, #364]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a5e      	ldr	r2, [pc, #376]	; (80056c8 <HAL_RCC_OscConfig+0x33c>)
 8005550:	4013      	ands	r3, r2
 8005552:	0019      	movs	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	4b57      	ldr	r3, [pc, #348]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800555a:	430a      	orrs	r2, r1
 800555c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800555e:	4b56      	ldr	r3, [pc, #344]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b55      	ldr	r3, [pc, #340]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005564:	2180      	movs	r1, #128	; 0x80
 8005566:	0049      	lsls	r1, r1, #1
 8005568:	430a      	orrs	r2, r1
 800556a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556c:	f7ff fa40 	bl	80049f0 <HAL_GetTick>
 8005570:	0003      	movs	r3, r0
 8005572:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005576:	f7ff fa3b 	bl	80049f0 <HAL_GetTick>
 800557a:	0002      	movs	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e1fe      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005588:	4b4b      	ldr	r3, [pc, #300]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4013      	ands	r3, r2
 8005592:	d0f0      	beq.n	8005576 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005594:	4b48      	ldr	r3, [pc, #288]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a4a      	ldr	r2, [pc, #296]	; (80056c4 <HAL_RCC_OscConfig+0x338>)
 800559a:	4013      	ands	r3, r2
 800559c:	0019      	movs	r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	4b44      	ldr	r3, [pc, #272]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	e01b      	b.n	80055e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80055ac:	4b42      	ldr	r3, [pc, #264]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b41      	ldr	r3, [pc, #260]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80055b2:	4949      	ldr	r1, [pc, #292]	; (80056d8 <HAL_RCC_OscConfig+0x34c>)
 80055b4:	400a      	ands	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7ff fa1a 	bl	80049f0 <HAL_GetTick>
 80055bc:	0003      	movs	r3, r0
 80055be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055c2:	f7ff fa15 	bl	80049f0 <HAL_GetTick>
 80055c6:	0002      	movs	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e1d8      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055d4:	4b38      	ldr	r3, [pc, #224]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4013      	ands	r3, r2
 80055de:	d1f0      	bne.n	80055c2 <HAL_RCC_OscConfig+0x236>
 80055e0:	e000      	b.n	80055e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2208      	movs	r2, #8
 80055ea:	4013      	ands	r3, r2
 80055ec:	d047      	beq.n	800567e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80055ee:	4b32      	ldr	r3, [pc, #200]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2238      	movs	r2, #56	; 0x38
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b18      	cmp	r3, #24
 80055f8:	d10a      	bne.n	8005610 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80055fa:	4b2f      	ldr	r3, [pc, #188]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80055fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fe:	2202      	movs	r2, #2
 8005600:	4013      	ands	r3, r2
 8005602:	d03c      	beq.n	800567e <HAL_RCC_OscConfig+0x2f2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d138      	bne.n	800567e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e1ba      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005618:	4b27      	ldr	r3, [pc, #156]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800561a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800561c:	4b26      	ldr	r3, [pc, #152]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800561e:	2101      	movs	r1, #1
 8005620:	430a      	orrs	r2, r1
 8005622:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7ff f9e4 	bl	80049f0 <HAL_GetTick>
 8005628:	0003      	movs	r3, r0
 800562a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800562e:	f7ff f9df 	bl	80049f0 <HAL_GetTick>
 8005632:	0002      	movs	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e1a2      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005644:	2202      	movs	r2, #2
 8005646:	4013      	ands	r3, r2
 8005648:	d0f1      	beq.n	800562e <HAL_RCC_OscConfig+0x2a2>
 800564a:	e018      	b.n	800567e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 800564e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005650:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005652:	2101      	movs	r1, #1
 8005654:	438a      	bics	r2, r1
 8005656:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005658:	f7ff f9ca 	bl	80049f0 <HAL_GetTick>
 800565c:	0003      	movs	r3, r0
 800565e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005662:	f7ff f9c5 	bl	80049f0 <HAL_GetTick>
 8005666:	0002      	movs	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e188      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005678:	2202      	movs	r2, #2
 800567a:	4013      	ands	r3, r2
 800567c:	d1f1      	bne.n	8005662 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2204      	movs	r2, #4
 8005684:	4013      	ands	r3, r2
 8005686:	d100      	bne.n	800568a <HAL_RCC_OscConfig+0x2fe>
 8005688:	e0c6      	b.n	8005818 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800568a:	231f      	movs	r3, #31
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2238      	movs	r2, #56	; 0x38
 8005698:	4013      	ands	r3, r2
 800569a:	2b20      	cmp	r3, #32
 800569c:	d11e      	bne.n	80056dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_RCC_OscConfig+0x32c>)
 80056a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a2:	2202      	movs	r2, #2
 80056a4:	4013      	ands	r3, r2
 80056a6:	d100      	bne.n	80056aa <HAL_RCC_OscConfig+0x31e>
 80056a8:	e0b6      	b.n	8005818 <HAL_RCC_OscConfig+0x48c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d000      	beq.n	80056b4 <HAL_RCC_OscConfig+0x328>
 80056b2:	e0b1      	b.n	8005818 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e166      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
 80056b8:	40021000 	.word	0x40021000
 80056bc:	fffeffff 	.word	0xfffeffff
 80056c0:	fffbffff 	.word	0xfffbffff
 80056c4:	ffff80ff 	.word	0xffff80ff
 80056c8:	ffffc7ff 	.word	0xffffc7ff
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	20000000 	.word	0x20000000
 80056d4:	20000004 	.word	0x20000004
 80056d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056dc:	4bac      	ldr	r3, [pc, #688]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80056de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	055b      	lsls	r3, r3, #21
 80056e4:	4013      	ands	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_RCC_OscConfig+0x360>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <HAL_RCC_OscConfig+0x362>
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d011      	beq.n	8005716 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	4ba7      	ldr	r3, [pc, #668]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80056f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056f6:	4ba6      	ldr	r3, [pc, #664]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	0549      	lsls	r1, r1, #21
 80056fc:	430a      	orrs	r2, r1
 80056fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8005700:	4ba3      	ldr	r3, [pc, #652]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	055b      	lsls	r3, r3, #21
 8005708:	4013      	ands	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800570e:	231f      	movs	r3, #31
 8005710:	18fb      	adds	r3, r7, r3
 8005712:	2201      	movs	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005716:	4b9f      	ldr	r3, [pc, #636]	; (8005994 <HAL_RCC_OscConfig+0x608>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4013      	ands	r3, r2
 8005720:	d11a      	bne.n	8005758 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005722:	4b9c      	ldr	r3, [pc, #624]	; (8005994 <HAL_RCC_OscConfig+0x608>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b9b      	ldr	r3, [pc, #620]	; (8005994 <HAL_RCC_OscConfig+0x608>)
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	0049      	lsls	r1, r1, #1
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005730:	f7ff f95e 	bl	80049f0 <HAL_GetTick>
 8005734:	0003      	movs	r3, r0
 8005736:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573a:	f7ff f959 	bl	80049f0 <HAL_GetTick>
 800573e:	0002      	movs	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e11c      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800574c:	4b91      	ldr	r3, [pc, #580]	; (8005994 <HAL_RCC_OscConfig+0x608>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	4013      	ands	r3, r2
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d106      	bne.n	800576e <HAL_RCC_OscConfig+0x3e2>
 8005760:	4b8b      	ldr	r3, [pc, #556]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005764:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005766:	2101      	movs	r1, #1
 8005768:	430a      	orrs	r2, r1
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c
 800576c:	e01c      	b.n	80057a8 <HAL_RCC_OscConfig+0x41c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	2b05      	cmp	r3, #5
 8005774:	d10c      	bne.n	8005790 <HAL_RCC_OscConfig+0x404>
 8005776:	4b86      	ldr	r3, [pc, #536]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005778:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800577a:	4b85      	ldr	r3, [pc, #532]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800577c:	2104      	movs	r1, #4
 800577e:	430a      	orrs	r2, r1
 8005780:	65da      	str	r2, [r3, #92]	; 0x5c
 8005782:	4b83      	ldr	r3, [pc, #524]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005786:	4b82      	ldr	r3, [pc, #520]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005788:	2101      	movs	r1, #1
 800578a:	430a      	orrs	r2, r1
 800578c:	65da      	str	r2, [r3, #92]	; 0x5c
 800578e:	e00b      	b.n	80057a8 <HAL_RCC_OscConfig+0x41c>
 8005790:	4b7f      	ldr	r3, [pc, #508]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005794:	4b7e      	ldr	r3, [pc, #504]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005796:	2101      	movs	r1, #1
 8005798:	438a      	bics	r2, r1
 800579a:	65da      	str	r2, [r3, #92]	; 0x5c
 800579c:	4b7c      	ldr	r3, [pc, #496]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800579e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057a0:	4b7b      	ldr	r3, [pc, #492]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80057a2:	2104      	movs	r1, #4
 80057a4:	438a      	bics	r2, r1
 80057a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d014      	beq.n	80057da <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7ff f91e 	bl	80049f0 <HAL_GetTick>
 80057b4:	0003      	movs	r3, r0
 80057b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b8:	e009      	b.n	80057ce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ba:	f7ff f919 	bl	80049f0 <HAL_GetTick>
 80057be:	0002      	movs	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	4a74      	ldr	r2, [pc, #464]	; (8005998 <HAL_RCC_OscConfig+0x60c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e0db      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ce:	4b70      	ldr	r3, [pc, #448]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	2202      	movs	r2, #2
 80057d4:	4013      	ands	r3, r2
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x42e>
 80057d8:	e013      	b.n	8005802 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7ff f909 	bl	80049f0 <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057e2:	e009      	b.n	80057f8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e4:	f7ff f904 	bl	80049f0 <HAL_GetTick>
 80057e8:	0002      	movs	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	4a6a      	ldr	r2, [pc, #424]	; (8005998 <HAL_RCC_OscConfig+0x60c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e0c6      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057f8:	4b65      	ldr	r3, [pc, #404]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80057fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fc:	2202      	movs	r2, #2
 80057fe:	4013      	ands	r3, r2
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005802:	231f      	movs	r3, #31
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d105      	bne.n	8005818 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800580c:	4b60      	ldr	r3, [pc, #384]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800580e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005810:	4b5f      	ldr	r3, [pc, #380]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005812:	4962      	ldr	r1, [pc, #392]	; (800599c <HAL_RCC_OscConfig+0x610>)
 8005814:	400a      	ands	r2, r1
 8005816:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d100      	bne.n	8005822 <HAL_RCC_OscConfig+0x496>
 8005820:	e0b0      	b.n	8005984 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005822:	4b5b      	ldr	r3, [pc, #364]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2238      	movs	r2, #56	; 0x38
 8005828:	4013      	ands	r3, r2
 800582a:	2b10      	cmp	r3, #16
 800582c:	d100      	bne.n	8005830 <HAL_RCC_OscConfig+0x4a4>
 800582e:	e078      	b.n	8005922 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d153      	bne.n	80058e0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005838:	4b55      	ldr	r3, [pc, #340]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b54      	ldr	r3, [pc, #336]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800583e:	4958      	ldr	r1, [pc, #352]	; (80059a0 <HAL_RCC_OscConfig+0x614>)
 8005840:	400a      	ands	r2, r1
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7ff f8d4 	bl	80049f0 <HAL_GetTick>
 8005848:	0003      	movs	r3, r0
 800584a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584e:	f7ff f8cf 	bl	80049f0 <HAL_GetTick>
 8005852:	0002      	movs	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e092      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005860:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	049b      	lsls	r3, r3, #18
 8005868:	4013      	ands	r3, r2
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800586c:	4b48      	ldr	r3, [pc, #288]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4a4c      	ldr	r2, [pc, #304]	; (80059a4 <HAL_RCC_OscConfig+0x618>)
 8005872:	4013      	ands	r3, r2
 8005874:	0019      	movs	r1, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1a      	ldr	r2, [r3, #32]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	431a      	orrs	r2, r3
 8005894:	4b3e      	ldr	r3, [pc, #248]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005896:	430a      	orrs	r2, r1
 8005898:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800589a:	4b3d      	ldr	r3, [pc, #244]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b3c      	ldr	r3, [pc, #240]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	0449      	lsls	r1, r1, #17
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80058a8:	4b39      	ldr	r3, [pc, #228]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	4b38      	ldr	r3, [pc, #224]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	0549      	lsls	r1, r1, #21
 80058b2:	430a      	orrs	r2, r1
 80058b4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7ff f89b 	bl	80049f0 <HAL_GetTick>
 80058ba:	0003      	movs	r3, r0
 80058bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c0:	f7ff f896 	bl	80049f0 <HAL_GetTick>
 80058c4:	0002      	movs	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e059      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	049b      	lsls	r3, r3, #18
 80058da:	4013      	ands	r3, r2
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x534>
 80058de:	e051      	b.n	8005984 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e0:	4b2b      	ldr	r3, [pc, #172]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b2a      	ldr	r3, [pc, #168]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 80058e6:	492e      	ldr	r1, [pc, #184]	; (80059a0 <HAL_RCC_OscConfig+0x614>)
 80058e8:	400a      	ands	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7ff f880 	bl	80049f0 <HAL_GetTick>
 80058f0:	0003      	movs	r3, r0
 80058f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f6:	f7ff f87b 	bl	80049f0 <HAL_GetTick>
 80058fa:	0002      	movs	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e03e      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005908:	4b21      	ldr	r3, [pc, #132]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	049b      	lsls	r3, r3, #18
 8005910:	4013      	ands	r3, r2
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005914:	4b1e      	ldr	r3, [pc, #120]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 800591a:	4923      	ldr	r1, [pc, #140]	; (80059a8 <HAL_RCC_OscConfig+0x61c>)
 800591c:	400a      	ands	r2, r1
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	e030      	b.n	8005984 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e02b      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800592e:	4b18      	ldr	r3, [pc, #96]	; (8005990 <HAL_RCC_OscConfig+0x604>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2203      	movs	r2, #3
 8005938:	401a      	ands	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	429a      	cmp	r2, r3
 8005940:	d11e      	bne.n	8005980 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2270      	movs	r2, #112	; 0x70
 8005946:	401a      	ands	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d117      	bne.n	8005980 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	23fe      	movs	r3, #254	; 0xfe
 8005954:	01db      	lsls	r3, r3, #7
 8005956:	401a      	ands	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800595e:	429a      	cmp	r2, r3
 8005960:	d10e      	bne.n	8005980 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	23f8      	movs	r3, #248	; 0xf8
 8005966:	039b      	lsls	r3, r3, #14
 8005968:	401a      	ands	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d106      	bne.n	8005980 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	0f5b      	lsrs	r3, r3, #29
 8005976:	075a      	lsls	r2, r3, #29
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	b008      	add	sp, #32
 800598c:	bd80      	pop	{r7, pc}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	40021000 	.word	0x40021000
 8005994:	40007000 	.word	0x40007000
 8005998:	00001388 	.word	0x00001388
 800599c:	efffffff 	.word	0xefffffff
 80059a0:	feffffff 	.word	0xfeffffff
 80059a4:	1fc1808c 	.word	0x1fc1808c
 80059a8:	effefffc 	.word	0xeffefffc

080059ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0e9      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059c0:	4b76      	ldr	r3, [pc, #472]	; (8005b9c <HAL_RCC_ClockConfig+0x1f0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2207      	movs	r2, #7
 80059c6:	4013      	ands	r3, r2
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d91e      	bls.n	8005a0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ce:	4b73      	ldr	r3, [pc, #460]	; (8005b9c <HAL_RCC_ClockConfig+0x1f0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2207      	movs	r2, #7
 80059d4:	4393      	bics	r3, r2
 80059d6:	0019      	movs	r1, r3
 80059d8:	4b70      	ldr	r3, [pc, #448]	; (8005b9c <HAL_RCC_ClockConfig+0x1f0>)
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059e0:	f7ff f806 	bl	80049f0 <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059e8:	e009      	b.n	80059fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ea:	f7ff f801 	bl	80049f0 <HAL_GetTick>
 80059ee:	0002      	movs	r2, r0
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	4a6a      	ldr	r2, [pc, #424]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0ca      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059fe:	4b67      	ldr	r3, [pc, #412]	; (8005b9c <HAL_RCC_ClockConfig+0x1f0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2207      	movs	r2, #7
 8005a04:	4013      	ands	r3, r2
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d1ee      	bne.n	80059ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2202      	movs	r2, #2
 8005a12:	4013      	ands	r3, r2
 8005a14:	d015      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d006      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005a20:	4b60      	ldr	r3, [pc, #384]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	4b5f      	ldr	r3, [pc, #380]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a26:	21e0      	movs	r1, #224	; 0xe0
 8005a28:	01c9      	lsls	r1, r1, #7
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2e:	4b5d      	ldr	r3, [pc, #372]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	4a5d      	ldr	r2, [pc, #372]	; (8005ba8 <HAL_RCC_ClockConfig+0x1fc>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	0019      	movs	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	4b59      	ldr	r3, [pc, #356]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2201      	movs	r2, #1
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d057      	beq.n	8005afc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d107      	bne.n	8005a64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a54:	4b53      	ldr	r3, [pc, #332]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d12b      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e097      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	049b      	lsls	r3, r3, #18
 8005a74:	4013      	ands	r3, r2
 8005a76:	d11f      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e08b      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d107      	bne.n	8005a94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a84:	4b47      	ldr	r3, [pc, #284]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d113      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e07f      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a9c:	4b41      	ldr	r3, [pc, #260]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d108      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e074      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aaa:	4b3e      	ldr	r3, [pc, #248]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	2202      	movs	r2, #2
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e06d      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ab8:	4b3a      	ldr	r3, [pc, #232]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2207      	movs	r2, #7
 8005abe:	4393      	bics	r3, r2
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	4b37      	ldr	r3, [pc, #220]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005acc:	f7fe ff90 	bl	80049f0 <HAL_GetTick>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad4:	e009      	b.n	8005aea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad6:	f7fe ff8b 	bl	80049f0 <HAL_GetTick>
 8005ada:	0002      	movs	r2, r0
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e054      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aea:	4b2e      	ldr	r3, [pc, #184]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2238      	movs	r2, #56	; 0x38
 8005af0:	401a      	ands	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d1ec      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005afc:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <HAL_RCC_ClockConfig+0x1f0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2207      	movs	r2, #7
 8005b02:	4013      	ands	r3, r2
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d21e      	bcs.n	8005b48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0a:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <HAL_RCC_ClockConfig+0x1f0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2207      	movs	r2, #7
 8005b10:	4393      	bics	r3, r2
 8005b12:	0019      	movs	r1, r3
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <HAL_RCC_ClockConfig+0x1f0>)
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b1c:	f7fe ff68 	bl	80049f0 <HAL_GetTick>
 8005b20:	0003      	movs	r3, r0
 8005b22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b24:	e009      	b.n	8005b3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b26:	f7fe ff63 	bl	80049f0 <HAL_GetTick>
 8005b2a:	0002      	movs	r2, r0
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e02c      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b3a:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <HAL_RCC_ClockConfig+0x1f0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2207      	movs	r2, #7
 8005b40:	4013      	ands	r3, r2
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d1ee      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d009      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005b52:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <HAL_RCC_ClockConfig+0x200>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b62:	430a      	orrs	r2, r1
 8005b64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b66:	f000 f829 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 8005b6a:	0001      	movs	r1, r0
 8005b6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	0a1b      	lsrs	r3, r3, #8
 8005b72:	220f      	movs	r2, #15
 8005b74:	401a      	ands	r2, r3
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <HAL_RCC_ClockConfig+0x204>)
 8005b78:	0092      	lsls	r2, r2, #2
 8005b7a:	58d3      	ldr	r3, [r2, r3]
 8005b7c:	221f      	movs	r2, #31
 8005b7e:	4013      	ands	r3, r2
 8005b80:	000a      	movs	r2, r1
 8005b82:	40da      	lsrs	r2, r3
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005b86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_ClockConfig+0x20c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7fe fed3 	bl	8004938 <HAL_InitTick>
 8005b92:	0003      	movs	r3, r0
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b004      	add	sp, #16
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40022000 	.word	0x40022000
 8005ba0:	00001388 	.word	0x00001388
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	fffff0ff 	.word	0xfffff0ff
 8005bac:	ffff8fff 	.word	0xffff8fff
 8005bb0:	080070bc 	.word	0x080070bc
 8005bb4:	20000000 	.word	0x20000000
 8005bb8:	20000004 	.word	0x20000004

08005bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bc2:	4b3c      	ldr	r3, [pc, #240]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2238      	movs	r2, #56	; 0x38
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d10f      	bne.n	8005bec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005bcc:	4b39      	ldr	r3, [pc, #228]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	0adb      	lsrs	r3, r3, #11
 8005bd2:	2207      	movs	r2, #7
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	0013      	movs	r3, r2
 8005bdc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	4835      	ldr	r0, [pc, #212]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005be2:	f7fa fa8d 	bl	8000100 <__udivsi3>
 8005be6:	0003      	movs	r3, r0
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	e05d      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bec:	4b31      	ldr	r3, [pc, #196]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2238      	movs	r2, #56	; 0x38
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d102      	bne.n	8005bfe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bf8:	4b30      	ldr	r3, [pc, #192]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x100>)
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	e054      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bfe:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2238      	movs	r2, #56	; 0x38
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d138      	bne.n	8005c7c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005c0a:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2203      	movs	r2, #3
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c14:	4b27      	ldr	r3, [pc, #156]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	2207      	movs	r2, #7
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d10d      	bne.n	8005c44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	4824      	ldr	r0, [pc, #144]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x100>)
 8005c2c:	f7fa fa68 	bl	8000100 <__udivsi3>
 8005c30:	0003      	movs	r3, r0
 8005c32:	0019      	movs	r1, r3
 8005c34:	4b1f      	ldr	r3, [pc, #124]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	227f      	movs	r2, #127	; 0x7f
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	434b      	muls	r3, r1
 8005c40:	617b      	str	r3, [r7, #20]
        break;
 8005c42:	e00d      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	481c      	ldr	r0, [pc, #112]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c48:	f7fa fa5a 	bl	8000100 <__udivsi3>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	0019      	movs	r1, r3
 8005c50:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	227f      	movs	r2, #127	; 0x7f
 8005c58:	4013      	ands	r3, r2
 8005c5a:	434b      	muls	r3, r1
 8005c5c:	617b      	str	r3, [r7, #20]
        break;
 8005c5e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	0f5b      	lsrs	r3, r3, #29
 8005c66:	2207      	movs	r2, #7
 8005c68:	4013      	ands	r3, r2
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	6978      	ldr	r0, [r7, #20]
 8005c72:	f7fa fa45 	bl	8000100 <__udivsi3>
 8005c76:	0003      	movs	r3, r0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e015      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2238      	movs	r2, #56	; 0x38
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d103      	bne.n	8005c90 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	613b      	str	r3, [r7, #16]
 8005c8e:	e00b      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2238      	movs	r2, #56	; 0x38
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b18      	cmp	r3, #24
 8005c9a:	d103      	bne.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c9c:	23fa      	movs	r3, #250	; 0xfa
 8005c9e:	01db      	lsls	r3, r3, #7
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e001      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ca8:	693b      	ldr	r3, [r7, #16]
}
 8005caa:	0018      	movs	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b006      	add	sp, #24
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	00f42400 	.word	0x00f42400
 8005cbc:	007a1200 	.word	0x007a1200

08005cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc4:	4b02      	ldr	r3, [pc, #8]	; (8005cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
}
 8005cc8:	0018      	movs	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	20000000 	.word	0x20000000

08005cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd4:	b5b0      	push	{r4, r5, r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cd8:	f7ff fff2 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005cdc:	0004      	movs	r4, r0
 8005cde:	f7ff fb49 	bl	8005374 <LL_RCC_GetAPB1Prescaler>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	0b1a      	lsrs	r2, r3, #12
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ce8:	0092      	lsls	r2, r2, #2
 8005cea:	58d3      	ldr	r3, [r2, r3]
 8005cec:	221f      	movs	r2, #31
 8005cee:	4013      	ands	r3, r2
 8005cf0:	40dc      	lsrs	r4, r3
 8005cf2:	0023      	movs	r3, r4
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	080070fc 	.word	0x080070fc

08005d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005d08:	2313      	movs	r3, #19
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d10:	2312      	movs	r3, #18
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	2380      	movs	r3, #128	; 0x80
 8005d1e:	029b      	lsls	r3, r3, #10
 8005d20:	4013      	ands	r3, r2
 8005d22:	d100      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005d24:	e0a3      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d26:	2011      	movs	r0, #17
 8005d28:	183b      	adds	r3, r7, r0
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d2e:	4b7f      	ldr	r3, [pc, #508]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	055b      	lsls	r3, r3, #21
 8005d36:	4013      	ands	r3, r2
 8005d38:	d110      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	4b7c      	ldr	r3, [pc, #496]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3e:	4b7b      	ldr	r3, [pc, #492]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	0549      	lsls	r1, r1, #21
 8005d44:	430a      	orrs	r2, r1
 8005d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d48:	4b78      	ldr	r3, [pc, #480]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	055b      	lsls	r3, r3, #21
 8005d50:	4013      	ands	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d56:	183b      	adds	r3, r7, r0
 8005d58:	2201      	movs	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d5c:	4b74      	ldr	r3, [pc, #464]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b73      	ldr	r3, [pc, #460]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	0049      	lsls	r1, r1, #1
 8005d66:	430a      	orrs	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d6a:	f7fe fe41 	bl	80049f0 <HAL_GetTick>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d72:	e00b      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d74:	f7fe fe3c 	bl	80049f0 <HAL_GetTick>
 8005d78:	0002      	movs	r2, r0
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d904      	bls.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d82:	2313      	movs	r3, #19
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	2203      	movs	r2, #3
 8005d88:	701a      	strb	r2, [r3, #0]
        break;
 8005d8a:	e005      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d8c:	4b68      	ldr	r3, [pc, #416]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	4013      	ands	r3, r2
 8005d96:	d0ed      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005d98:	2313      	movs	r3, #19
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d154      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005da2:	4b62      	ldr	r3, [pc, #392]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005da4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005da6:	23c0      	movs	r3, #192	; 0xc0
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4013      	ands	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d019      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d014      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dbe:	4b5b      	ldr	r3, [pc, #364]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc2:	4a5c      	ldr	r2, [pc, #368]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dc8:	4b58      	ldr	r3, [pc, #352]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dcc:	4b57      	ldr	r3, [pc, #348]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	0249      	lsls	r1, r1, #9
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dd6:	4b55      	ldr	r3, [pc, #340]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dda:	4b54      	ldr	r3, [pc, #336]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ddc:	4956      	ldr	r1, [pc, #344]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005dde:	400a      	ands	r2, r1
 8005de0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005de2:	4b52      	ldr	r3, [pc, #328]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2201      	movs	r2, #1
 8005dec:	4013      	ands	r3, r2
 8005dee:	d016      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fe fdfe 	bl	80049f0 <HAL_GetTick>
 8005df4:	0003      	movs	r3, r0
 8005df6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005df8:	e00c      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fe fdf9 	bl	80049f0 <HAL_GetTick>
 8005dfe:	0002      	movs	r2, r0
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	4a4d      	ldr	r2, [pc, #308]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d904      	bls.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005e0a:	2313      	movs	r3, #19
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	2203      	movs	r2, #3
 8005e10:	701a      	strb	r2, [r3, #0]
            break;
 8005e12:	e004      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e14:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e18:	2202      	movs	r2, #2
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d0ed      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005e1e:	2313      	movs	r3, #19
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e28:	4b40      	ldr	r3, [pc, #256]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2c:	4a41      	ldr	r2, [pc, #260]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	0019      	movs	r1, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	4b3d      	ldr	r3, [pc, #244]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e3c:	e00c      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e3e:	2312      	movs	r3, #18
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	2213      	movs	r2, #19
 8005e44:	18ba      	adds	r2, r7, r2
 8005e46:	7812      	ldrb	r2, [r2, #0]
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	e005      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	2312      	movs	r3, #18
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	2213      	movs	r2, #19
 8005e52:	18ba      	adds	r2, r7, r2
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e58:	2311      	movs	r3, #17
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4b32      	ldr	r3, [pc, #200]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e66:	4b31      	ldr	r3, [pc, #196]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e68:	4935      	ldr	r1, [pc, #212]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e6a:	400a      	ands	r2, r1
 8005e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2201      	movs	r2, #1
 8005e74:	4013      	ands	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e78:	4b2c      	ldr	r3, [pc, #176]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	4393      	bics	r3, r2
 8005e80:	0019      	movs	r1, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	4b29      	ldr	r3, [pc, #164]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2220      	movs	r2, #32
 8005e92:	4013      	ands	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e96:	4b25      	ldr	r3, [pc, #148]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	01db      	lsls	r3, r3, #7
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d015      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eb6:	4b1d      	ldr	r3, [pc, #116]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	0899      	lsrs	r1, r3, #2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	4b1a      	ldr	r3, [pc, #104]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	05db      	lsls	r3, r3, #23
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ed4:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	0249      	lsls	r1, r1, #9
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	4013      	ands	r3, r2
 8005eec:	d016      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005eee:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005efe:	430a      	orrs	r2, r1
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	01db      	lsls	r3, r3, #7
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d106      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f14:	2180      	movs	r1, #128	; 0x80
 8005f16:	0249      	lsls	r1, r1, #9
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005f1c:	2312      	movs	r3, #18
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	781b      	ldrb	r3, [r3, #0]
}
 8005f22:	0018      	movs	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b006      	add	sp, #24
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40007000 	.word	0x40007000
 8005f34:	fffffcff 	.word	0xfffffcff
 8005f38:	fffeffff 	.word	0xfffeffff
 8005f3c:	00001388 	.word	0x00001388
 8005f40:	efffffff 	.word	0xefffffff
 8005f44:	ffffcfff 	.word	0xffffcfff
 8005f48:	ffff3fff 	.word	0xffff3fff

08005f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e0a8      	b.n	80060b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	2382      	movs	r3, #130	; 0x82
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d009      	beq.n	8005f86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	61da      	str	r2, [r3, #28]
 8005f78:	e005      	b.n	8005f86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	225d      	movs	r2, #93	; 0x5d
 8005f90:	5c9b      	ldrb	r3, [r3, r2]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d107      	bne.n	8005fa8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	225c      	movs	r2, #92	; 0x5c
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7fe fba0 	bl	80046e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	225d      	movs	r2, #93	; 0x5d
 8005fac:	2102      	movs	r1, #2
 8005fae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2140      	movs	r1, #64	; 0x40
 8005fbc:	438a      	bics	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	23e0      	movs	r3, #224	; 0xe0
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d902      	bls.n	8005fd2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e002      	b.n	8005fd8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	015b      	lsls	r3, r3, #5
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	23f0      	movs	r3, #240	; 0xf0
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d008      	beq.n	8005ff6 <HAL_SPI_Init+0xaa>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	23e0      	movs	r3, #224	; 0xe0
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d002      	beq.n	8005ff6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	2382      	movs	r3, #130	; 0x82
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	401a      	ands	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6899      	ldr	r1, [r3, #8]
 8006004:	2384      	movs	r3, #132	; 0x84
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	400b      	ands	r3, r1
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2102      	movs	r1, #2
 8006012:	400b      	ands	r3, r1
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	2101      	movs	r1, #1
 800601c:	400b      	ands	r3, r1
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6999      	ldr	r1, [r3, #24]
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	400b      	ands	r3, r1
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	2138      	movs	r1, #56	; 0x38
 8006032:	400b      	ands	r3, r1
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	2180      	movs	r1, #128	; 0x80
 800603c:	400b      	ands	r3, r1
 800603e:	431a      	orrs	r2, r3
 8006040:	0011      	movs	r1, r2
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	019b      	lsls	r3, r3, #6
 800604a:	401a      	ands	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	2204      	movs	r2, #4
 800605c:	401a      	ands	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2110      	movs	r1, #16
 8006064:	400b      	ands	r3, r1
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	2108      	movs	r1, #8
 800606e:	400b      	ands	r3, r1
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68d9      	ldr	r1, [r3, #12]
 8006076:	23f0      	movs	r3, #240	; 0xf0
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	400b      	ands	r3, r1
 800607c:	431a      	orrs	r2, r3
 800607e:	0011      	movs	r1, r2
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	015b      	lsls	r3, r3, #5
 8006086:	401a      	ands	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4907      	ldr	r1, [pc, #28]	; (80060b8 <HAL_SPI_Init+0x16c>)
 800609c:	400a      	ands	r2, r1
 800609e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	225d      	movs	r2, #93	; 0x5d
 80060aa:	2101      	movs	r1, #1
 80060ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b004      	add	sp, #16
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	fffff7ff 	.word	0xfffff7ff

080060bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	1dbb      	adds	r3, r7, #6
 80060ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060cc:	231f      	movs	r3, #31
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	225c      	movs	r2, #92	; 0x5c
 80060d8:	5c9b      	ldrb	r3, [r3, r2]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_SPI_Transmit+0x26>
 80060de:	2302      	movs	r3, #2
 80060e0:	e140      	b.n	8006364 <HAL_SPI_Transmit+0x2a8>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	225c      	movs	r2, #92	; 0x5c
 80060e6:	2101      	movs	r1, #1
 80060e8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ea:	f7fe fc81 	bl	80049f0 <HAL_GetTick>
 80060ee:	0003      	movs	r3, r0
 80060f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80060f2:	2316      	movs	r3, #22
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	1dba      	adds	r2, r7, #6
 80060f8:	8812      	ldrh	r2, [r2, #0]
 80060fa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	225d      	movs	r2, #93	; 0x5d
 8006100:	5c9b      	ldrb	r3, [r3, r2]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d004      	beq.n	8006112 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006108:	231f      	movs	r3, #31
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	2202      	movs	r2, #2
 800610e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006110:	e11d      	b.n	800634e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_SPI_Transmit+0x64>
 8006118:	1dbb      	adds	r3, r7, #6
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006120:	231f      	movs	r3, #31
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]
    goto error;
 8006128:	e111      	b.n	800634e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	225d      	movs	r2, #93	; 0x5d
 800612e:	2103      	movs	r1, #3
 8006130:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1dba      	adds	r2, r7, #6
 8006142:	8812      	ldrh	r2, [r2, #0]
 8006144:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1dba      	adds	r2, r7, #6
 800614a:	8812      	ldrh	r2, [r2, #0]
 800614c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2244      	movs	r2, #68	; 0x44
 8006158:	2100      	movs	r1, #0
 800615a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2246      	movs	r2, #70	; 0x46
 8006160:	2100      	movs	r1, #0
 8006162:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	429a      	cmp	r2, r3
 800617a:	d110      	bne.n	800619e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2140      	movs	r1, #64	; 0x40
 8006188:	438a      	bics	r2, r1
 800618a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2180      	movs	r1, #128	; 0x80
 8006198:	01c9      	lsls	r1, r1, #7
 800619a:	430a      	orrs	r2, r1
 800619c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2240      	movs	r2, #64	; 0x40
 80061a6:	4013      	ands	r3, r2
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d007      	beq.n	80061bc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2140      	movs	r1, #64	; 0x40
 80061b8:	430a      	orrs	r2, r1
 80061ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	23e0      	movs	r3, #224	; 0xe0
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d94e      	bls.n	8006266 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <HAL_SPI_Transmit+0x11e>
 80061d0:	2316      	movs	r3, #22
 80061d2:	18fb      	adds	r3, r7, r3
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d13f      	bne.n	800625a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061fe:	e02c      	b.n	800625a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2202      	movs	r2, #2
 8006208:	4013      	ands	r3, r2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d112      	bne.n	8006234 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	881a      	ldrh	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	1c9a      	adds	r2, r3, #2
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006232:	e012      	b.n	800625a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006234:	f7fe fbdc 	bl	80049f0 <HAL_GetTick>
 8006238:	0002      	movs	r2, r0
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d802      	bhi.n	800624a <HAL_SPI_Transmit+0x18e>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	3301      	adds	r3, #1
 8006248:	d102      	bne.n	8006250 <HAL_SPI_Transmit+0x194>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006250:	231f      	movs	r3, #31
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	2203      	movs	r2, #3
 8006256:	701a      	strb	r2, [r3, #0]
          goto error;
 8006258:	e079      	b.n	800634e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1cd      	bne.n	8006200 <HAL_SPI_Transmit+0x144>
 8006264:	e04f      	b.n	8006306 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <HAL_SPI_Transmit+0x1bc>
 800626e:	2316      	movs	r3, #22
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d141      	bne.n	80062fc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800629e:	e02d      	b.n	80062fc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2202      	movs	r2, #2
 80062a8:	4013      	ands	r3, r2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d113      	bne.n	80062d6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062d4:	e012      	b.n	80062fc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d6:	f7fe fb8b 	bl	80049f0 <HAL_GetTick>
 80062da:	0002      	movs	r2, r0
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d802      	bhi.n	80062ec <HAL_SPI_Transmit+0x230>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	d102      	bne.n	80062f2 <HAL_SPI_Transmit+0x236>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80062f2:	231f      	movs	r3, #31
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	2203      	movs	r2, #3
 80062f8:	701a      	strb	r2, [r3, #0]
          goto error;
 80062fa:	e028      	b.n	800634e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1cc      	bne.n	80062a0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	0018      	movs	r0, r3
 800630e:	f000 f95d 	bl	80065cc <SPI_EndRxTxTransaction>
 8006312:	1e03      	subs	r3, r0, #0
 8006314:	d002      	beq.n	800631c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006342:	231f      	movs	r3, #31
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	2201      	movs	r2, #1
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e000      	b.n	800634e <HAL_SPI_Transmit+0x292>
  }

error:
 800634c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	225d      	movs	r2, #93	; 0x5d
 8006352:	2101      	movs	r1, #1
 8006354:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	225c      	movs	r2, #92	; 0x5c
 800635a:	2100      	movs	r1, #0
 800635c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800635e:	231f      	movs	r3, #31
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	781b      	ldrb	r3, [r3, #0]
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b008      	add	sp, #32
 800636a:	bd80      	pop	{r7, pc}

0800636c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	1dfb      	adds	r3, r7, #7
 800637a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800637c:	f7fe fb38 	bl	80049f0 <HAL_GetTick>
 8006380:	0002      	movs	r2, r0
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	18d3      	adds	r3, r2, r3
 800638a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800638c:	f7fe fb30 	bl	80049f0 <HAL_GetTick>
 8006390:	0003      	movs	r3, r0
 8006392:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006394:	4b3a      	ldr	r3, [pc, #232]	; (8006480 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	015b      	lsls	r3, r3, #5
 800639a:	0d1b      	lsrs	r3, r3, #20
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	4353      	muls	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a2:	e058      	b.n	8006456 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	3301      	adds	r3, #1
 80063a8:	d055      	beq.n	8006456 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063aa:	f7fe fb21 	bl	80049f0 <HAL_GetTick>
 80063ae:	0002      	movs	r2, r0
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d902      	bls.n	80063c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d142      	bne.n	8006446 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	21e0      	movs	r1, #224	; 0xe0
 80063cc:	438a      	bics	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	2382      	movs	r3, #130	; 0x82
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	429a      	cmp	r2, r3
 80063da:	d113      	bne.n	8006404 <SPI_WaitFlagStateUntilTimeout+0x98>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d005      	beq.n	80063f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	2380      	movs	r3, #128	; 0x80
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d107      	bne.n	8006404 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2140      	movs	r1, #64	; 0x40
 8006400:	438a      	bics	r2, r1
 8006402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	019b      	lsls	r3, r3, #6
 800640c:	429a      	cmp	r2, r3
 800640e:	d110      	bne.n	8006432 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	491a      	ldr	r1, [pc, #104]	; (8006484 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800641c:	400a      	ands	r2, r1
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	0189      	lsls	r1, r1, #6
 800642e:	430a      	orrs	r2, r1
 8006430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	225d      	movs	r2, #93	; 0x5d
 8006436:	2101      	movs	r1, #1
 8006438:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	225c      	movs	r2, #92	; 0x5c
 800643e:	2100      	movs	r1, #0
 8006440:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e017      	b.n	8006476 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	3b01      	subs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	4013      	ands	r3, r2
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	425a      	negs	r2, r3
 8006466:	4153      	adcs	r3, r2
 8006468:	b2db      	uxtb	r3, r3
 800646a:	001a      	movs	r2, r3
 800646c:	1dfb      	adds	r3, r7, #7
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d197      	bne.n	80063a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	0018      	movs	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	b008      	add	sp, #32
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	20000000 	.word	0x20000000
 8006484:	ffffdfff 	.word	0xffffdfff

08006488 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006496:	2317      	movs	r3, #23
 8006498:	18fb      	adds	r3, r7, r3
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800649e:	f7fe faa7 	bl	80049f0 <HAL_GetTick>
 80064a2:	0002      	movs	r2, r0
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	18d3      	adds	r3, r2, r3
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064ae:	f7fe fa9f 	bl	80049f0 <HAL_GetTick>
 80064b2:	0003      	movs	r3, r0
 80064b4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064be:	4b41      	ldr	r3, [pc, #260]	; (80065c4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	0013      	movs	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	00da      	lsls	r2, r3, #3
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	0d1b      	lsrs	r3, r3, #20
 80064ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d0:	4353      	muls	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80064d4:	e068      	b.n	80065a8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	23c0      	movs	r3, #192	; 0xc0
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	429a      	cmp	r2, r3
 80064de:	d10a      	bne.n	80064f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	2117      	movs	r1, #23
 80064ee:	187b      	adds	r3, r7, r1
 80064f0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064f2:	187b      	adds	r3, r7, r1
 80064f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	3301      	adds	r3, #1
 80064fa:	d055      	beq.n	80065a8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064fc:	f7fe fa78 	bl	80049f0 <HAL_GetTick>
 8006500:	0002      	movs	r2, r0
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	429a      	cmp	r2, r3
 800650a:	d902      	bls.n	8006512 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d142      	bne.n	8006598 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	21e0      	movs	r1, #224	; 0xe0
 800651e:	438a      	bics	r2, r1
 8006520:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	2382      	movs	r3, #130	; 0x82
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	429a      	cmp	r2, r3
 800652c:	d113      	bne.n	8006556 <SPI_WaitFifoStateUntilTimeout+0xce>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	429a      	cmp	r2, r3
 8006538:	d005      	beq.n	8006546 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	429a      	cmp	r2, r3
 8006544:	d107      	bne.n	8006556 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	438a      	bics	r2, r1
 8006554:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	019b      	lsls	r3, r3, #6
 800655e:	429a      	cmp	r2, r3
 8006560:	d110      	bne.n	8006584 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4916      	ldr	r1, [pc, #88]	; (80065c8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800656e:	400a      	ands	r2, r1
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2180      	movs	r1, #128	; 0x80
 800657e:	0189      	lsls	r1, r1, #6
 8006580:	430a      	orrs	r2, r1
 8006582:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	225d      	movs	r2, #93	; 0x5d
 8006588:	2101      	movs	r1, #1
 800658a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	225c      	movs	r2, #92	; 0x5c
 8006590:	2100      	movs	r1, #0
 8006592:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e010      	b.n	80065ba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4013      	ands	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d18e      	bne.n	80064d6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	0018      	movs	r0, r3
 80065bc:	46bd      	mov	sp, r7
 80065be:	b00a      	add	sp, #40	; 0x28
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	20000000 	.word	0x20000000
 80065c8:	ffffdfff 	.word	0xffffdfff

080065cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	23c0      	movs	r3, #192	; 0xc0
 80065dc:	0159      	lsls	r1, r3, #5
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	0013      	movs	r3, r2
 80065e6:	2200      	movs	r2, #0
 80065e8:	f7ff ff4e 	bl	8006488 <SPI_WaitFifoStateUntilTimeout>
 80065ec:	1e03      	subs	r3, r0, #0
 80065ee:	d007      	beq.n	8006600 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f4:	2220      	movs	r2, #32
 80065f6:	431a      	orrs	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e027      	b.n	8006650 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	0013      	movs	r3, r2
 800660a:	2200      	movs	r2, #0
 800660c:	2180      	movs	r1, #128	; 0x80
 800660e:	f7ff fead 	bl	800636c <SPI_WaitFlagStateUntilTimeout>
 8006612:	1e03      	subs	r3, r0, #0
 8006614:	d007      	beq.n	8006626 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661a:	2220      	movs	r2, #32
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e014      	b.n	8006650 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	23c0      	movs	r3, #192	; 0xc0
 800662a:	00d9      	lsls	r1, r3, #3
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	0013      	movs	r3, r2
 8006634:	2200      	movs	r2, #0
 8006636:	f7ff ff27 	bl	8006488 <SPI_WaitFifoStateUntilTimeout>
 800663a:	1e03      	subs	r3, r0, #0
 800663c:	d007      	beq.n	800664e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006642:	2220      	movs	r2, #32
 8006644:	431a      	orrs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e000      	b.n	8006650 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	0018      	movs	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	b004      	add	sp, #16
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e046      	b.n	80066f8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2288      	movs	r2, #136	; 0x88
 800666e:	589b      	ldr	r3, [r3, r2]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d107      	bne.n	8006684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2284      	movs	r2, #132	; 0x84
 8006678:	2100      	movs	r1, #0
 800667a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	0018      	movs	r0, r3
 8006680:	f7fe f892 	bl	80047a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2288      	movs	r2, #136	; 0x88
 8006688:	2124      	movs	r1, #36	; 0x24
 800668a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2101      	movs	r1, #1
 8006698:	438a      	bics	r2, r1
 800669a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	0018      	movs	r0, r3
 80066a0:	f000 f830 	bl	8006704 <UART_SetConfig>
 80066a4:	0003      	movs	r3, r0
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e024      	b.n	80066f8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f000 f98d 	bl	80069d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	490d      	ldr	r1, [pc, #52]	; (8006700 <HAL_UART_Init+0xa8>)
 80066ca:	400a      	ands	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	212a      	movs	r1, #42	; 0x2a
 80066da:	438a      	bics	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2101      	movs	r1, #1
 80066ea:	430a      	orrs	r2, r1
 80066ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	0018      	movs	r0, r3
 80066f2:	f000 fa25 	bl	8006b40 <UART_CheckIdleState>
 80066f6:	0003      	movs	r3, r0
}
 80066f8:	0018      	movs	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	b002      	add	sp, #8
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	ffffb7ff 	.word	0xffffb7ff

08006704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800670c:	231a      	movs	r3, #26
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	4313      	orrs	r3, r2
 800672a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4aa1      	ldr	r2, [pc, #644]	; (80069b8 <UART_SetConfig+0x2b4>)
 8006734:	4013      	ands	r3, r2
 8006736:	0019      	movs	r1, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	430a      	orrs	r2, r1
 8006740:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4a9c      	ldr	r2, [pc, #624]	; (80069bc <UART_SetConfig+0x2b8>)
 800674a:	4013      	ands	r3, r2
 800674c:	0019      	movs	r1, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	4313      	orrs	r3, r2
 8006768:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	4a93      	ldr	r2, [pc, #588]	; (80069c0 <UART_SetConfig+0x2bc>)
 8006772:	4013      	ands	r3, r2
 8006774:	0019      	movs	r1, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	430a      	orrs	r2, r1
 800677e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	220f      	movs	r2, #15
 8006788:	4393      	bics	r3, r2
 800678a:	0019      	movs	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a89      	ldr	r2, [pc, #548]	; (80069c4 <UART_SetConfig+0x2c0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d127      	bne.n	80067f2 <UART_SetConfig+0xee>
 80067a2:	4b89      	ldr	r3, [pc, #548]	; (80069c8 <UART_SetConfig+0x2c4>)
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	2203      	movs	r2, #3
 80067a8:	4013      	ands	r3, r2
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d017      	beq.n	80067de <UART_SetConfig+0xda>
 80067ae:	d81b      	bhi.n	80067e8 <UART_SetConfig+0xe4>
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d00a      	beq.n	80067ca <UART_SetConfig+0xc6>
 80067b4:	d818      	bhi.n	80067e8 <UART_SetConfig+0xe4>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <UART_SetConfig+0xbc>
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d00a      	beq.n	80067d4 <UART_SetConfig+0xd0>
 80067be:	e013      	b.n	80067e8 <UART_SetConfig+0xe4>
 80067c0:	231b      	movs	r3, #27
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e021      	b.n	800680e <UART_SetConfig+0x10a>
 80067ca:	231b      	movs	r3, #27
 80067cc:	18fb      	adds	r3, r7, r3
 80067ce:	2202      	movs	r2, #2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e01c      	b.n	800680e <UART_SetConfig+0x10a>
 80067d4:	231b      	movs	r3, #27
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	2204      	movs	r2, #4
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e017      	b.n	800680e <UART_SetConfig+0x10a>
 80067de:	231b      	movs	r3, #27
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2208      	movs	r2, #8
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e012      	b.n	800680e <UART_SetConfig+0x10a>
 80067e8:	231b      	movs	r3, #27
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	2210      	movs	r2, #16
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	e00d      	b.n	800680e <UART_SetConfig+0x10a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a75      	ldr	r2, [pc, #468]	; (80069cc <UART_SetConfig+0x2c8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d104      	bne.n	8006806 <UART_SetConfig+0x102>
 80067fc:	231b      	movs	r3, #27
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	2200      	movs	r2, #0
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	e003      	b.n	800680e <UART_SetConfig+0x10a>
 8006806:	231b      	movs	r3, #27
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	2210      	movs	r2, #16
 800680c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69da      	ldr	r2, [r3, #28]
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	429a      	cmp	r2, r3
 8006818:	d000      	beq.n	800681c <UART_SetConfig+0x118>
 800681a:	e065      	b.n	80068e8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800681c:	231b      	movs	r3, #27
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b08      	cmp	r3, #8
 8006824:	d015      	beq.n	8006852 <UART_SetConfig+0x14e>
 8006826:	dc18      	bgt.n	800685a <UART_SetConfig+0x156>
 8006828:	2b04      	cmp	r3, #4
 800682a:	d00d      	beq.n	8006848 <UART_SetConfig+0x144>
 800682c:	dc15      	bgt.n	800685a <UART_SetConfig+0x156>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <UART_SetConfig+0x134>
 8006832:	2b02      	cmp	r3, #2
 8006834:	d005      	beq.n	8006842 <UART_SetConfig+0x13e>
 8006836:	e010      	b.n	800685a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006838:	f7ff fa4c 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 800683c:	0003      	movs	r3, r0
 800683e:	617b      	str	r3, [r7, #20]
        break;
 8006840:	e012      	b.n	8006868 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006842:	4b63      	ldr	r3, [pc, #396]	; (80069d0 <UART_SetConfig+0x2cc>)
 8006844:	617b      	str	r3, [r7, #20]
        break;
 8006846:	e00f      	b.n	8006868 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006848:	f7ff f9b8 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 800684c:	0003      	movs	r3, r0
 800684e:	617b      	str	r3, [r7, #20]
        break;
 8006850:	e00a      	b.n	8006868 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	617b      	str	r3, [r7, #20]
        break;
 8006858:	e006      	b.n	8006868 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800685e:	231a      	movs	r3, #26
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	2201      	movs	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
        break;
 8006866:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d100      	bne.n	8006870 <UART_SetConfig+0x16c>
 800686e:	e08d      	b.n	800698c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006874:	4b57      	ldr	r3, [pc, #348]	; (80069d4 <UART_SetConfig+0x2d0>)
 8006876:	0052      	lsls	r2, r2, #1
 8006878:	5ad3      	ldrh	r3, [r2, r3]
 800687a:	0019      	movs	r1, r3
 800687c:	6978      	ldr	r0, [r7, #20]
 800687e:	f7f9 fc3f 	bl	8000100 <__udivsi3>
 8006882:	0003      	movs	r3, r0
 8006884:	005a      	lsls	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	18d2      	adds	r2, r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	0019      	movs	r1, r3
 8006894:	0010      	movs	r0, r2
 8006896:	f7f9 fc33 	bl	8000100 <__udivsi3>
 800689a:	0003      	movs	r3, r0
 800689c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b0f      	cmp	r3, #15
 80068a2:	d91c      	bls.n	80068de <UART_SetConfig+0x1da>
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	2380      	movs	r3, #128	; 0x80
 80068a8:	025b      	lsls	r3, r3, #9
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d217      	bcs.n	80068de <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	200e      	movs	r0, #14
 80068b4:	183b      	adds	r3, r7, r0
 80068b6:	210f      	movs	r1, #15
 80068b8:	438a      	bics	r2, r1
 80068ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2207      	movs	r2, #7
 80068c4:	4013      	ands	r3, r2
 80068c6:	b299      	uxth	r1, r3
 80068c8:	183b      	adds	r3, r7, r0
 80068ca:	183a      	adds	r2, r7, r0
 80068cc:	8812      	ldrh	r2, [r2, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	183a      	adds	r2, r7, r0
 80068d8:	8812      	ldrh	r2, [r2, #0]
 80068da:	60da      	str	r2, [r3, #12]
 80068dc:	e056      	b.n	800698c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80068de:	231a      	movs	r3, #26
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	e051      	b.n	800698c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068e8:	231b      	movs	r3, #27
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d015      	beq.n	800691e <UART_SetConfig+0x21a>
 80068f2:	dc18      	bgt.n	8006926 <UART_SetConfig+0x222>
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d00d      	beq.n	8006914 <UART_SetConfig+0x210>
 80068f8:	dc15      	bgt.n	8006926 <UART_SetConfig+0x222>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <UART_SetConfig+0x200>
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d005      	beq.n	800690e <UART_SetConfig+0x20a>
 8006902:	e010      	b.n	8006926 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006904:	f7ff f9e6 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8006908:	0003      	movs	r3, r0
 800690a:	617b      	str	r3, [r7, #20]
        break;
 800690c:	e012      	b.n	8006934 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800690e:	4b30      	ldr	r3, [pc, #192]	; (80069d0 <UART_SetConfig+0x2cc>)
 8006910:	617b      	str	r3, [r7, #20]
        break;
 8006912:	e00f      	b.n	8006934 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006914:	f7ff f952 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 8006918:	0003      	movs	r3, r0
 800691a:	617b      	str	r3, [r7, #20]
        break;
 800691c:	e00a      	b.n	8006934 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691e:	2380      	movs	r3, #128	; 0x80
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	617b      	str	r3, [r7, #20]
        break;
 8006924:	e006      	b.n	8006934 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800692a:	231a      	movs	r3, #26
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	2201      	movs	r2, #1
 8006930:	701a      	strb	r2, [r3, #0]
        break;
 8006932:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d028      	beq.n	800698c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800693e:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <UART_SetConfig+0x2d0>)
 8006940:	0052      	lsls	r2, r2, #1
 8006942:	5ad3      	ldrh	r3, [r2, r3]
 8006944:	0019      	movs	r1, r3
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	f7f9 fbda 	bl	8000100 <__udivsi3>
 800694c:	0003      	movs	r3, r0
 800694e:	001a      	movs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	18d2      	adds	r2, r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	0019      	movs	r1, r3
 800695e:	0010      	movs	r0, r2
 8006960:	f7f9 fbce 	bl	8000100 <__udivsi3>
 8006964:	0003      	movs	r3, r0
 8006966:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b0f      	cmp	r3, #15
 800696c:	d90a      	bls.n	8006984 <UART_SetConfig+0x280>
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	025b      	lsls	r3, r3, #9
 8006974:	429a      	cmp	r2, r3
 8006976:	d205      	bcs.n	8006984 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	b29a      	uxth	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60da      	str	r2, [r3, #12]
 8006982:	e003      	b.n	800698c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006984:	231a      	movs	r3, #26
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	226a      	movs	r2, #106	; 0x6a
 8006990:	2101      	movs	r1, #1
 8006992:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2268      	movs	r2, #104	; 0x68
 8006998:	2101      	movs	r1, #1
 800699a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80069a8:	231a      	movs	r3, #26
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	781b      	ldrb	r3, [r3, #0]
}
 80069ae:	0018      	movs	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b008      	add	sp, #32
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	cfff69f3 	.word	0xcfff69f3
 80069bc:	ffffcfff 	.word	0xffffcfff
 80069c0:	11fff4ff 	.word	0x11fff4ff
 80069c4:	40013800 	.word	0x40013800
 80069c8:	40021000 	.word	0x40021000
 80069cc:	40004400 	.word	0x40004400
 80069d0:	00f42400 	.word	0x00f42400
 80069d4:	0800711c 	.word	0x0800711c

080069d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	2201      	movs	r2, #1
 80069e6:	4013      	ands	r3, r2
 80069e8:	d00b      	beq.n	8006a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a4a      	ldr	r2, [pc, #296]	; (8006b1c <UART_AdvFeatureConfig+0x144>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	0019      	movs	r1, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	2202      	movs	r2, #2
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d00b      	beq.n	8006a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4a43      	ldr	r2, [pc, #268]	; (8006b20 <UART_AdvFeatureConfig+0x148>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	0019      	movs	r1, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	2204      	movs	r2, #4
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4a3b      	ldr	r2, [pc, #236]	; (8006b24 <UART_AdvFeatureConfig+0x14c>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	0019      	movs	r1, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	2208      	movs	r2, #8
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d00b      	beq.n	8006a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	4a34      	ldr	r2, [pc, #208]	; (8006b28 <UART_AdvFeatureConfig+0x150>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	2210      	movs	r2, #16
 8006a6e:	4013      	ands	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	4a2c      	ldr	r2, [pc, #176]	; (8006b2c <UART_AdvFeatureConfig+0x154>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	0019      	movs	r1, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	2220      	movs	r2, #32
 8006a90:	4013      	ands	r3, r2
 8006a92:	d00b      	beq.n	8006aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	4a25      	ldr	r2, [pc, #148]	; (8006b30 <UART_AdvFeatureConfig+0x158>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	0019      	movs	r1, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	2240      	movs	r2, #64	; 0x40
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d01d      	beq.n	8006af2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <UART_AdvFeatureConfig+0x15c>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad2:	2380      	movs	r3, #128	; 0x80
 8006ad4:	035b      	lsls	r3, r3, #13
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d10b      	bne.n	8006af2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <UART_AdvFeatureConfig+0x160>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	2280      	movs	r2, #128	; 0x80
 8006af8:	4013      	ands	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4a0e      	ldr	r2, [pc, #56]	; (8006b3c <UART_AdvFeatureConfig+0x164>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	0019      	movs	r1, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  }
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b002      	add	sp, #8
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	fffdffff 	.word	0xfffdffff
 8006b20:	fffeffff 	.word	0xfffeffff
 8006b24:	fffbffff 	.word	0xfffbffff
 8006b28:	ffff7fff 	.word	0xffff7fff
 8006b2c:	ffffefff 	.word	0xffffefff
 8006b30:	ffffdfff 	.word	0xffffdfff
 8006b34:	ffefffff 	.word	0xffefffff
 8006b38:	ff9fffff 	.word	0xff9fffff
 8006b3c:	fff7ffff 	.word	0xfff7ffff

08006b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2290      	movs	r2, #144	; 0x90
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b50:	f7fd ff4e 	bl	80049f0 <HAL_GetTick>
 8006b54:	0003      	movs	r3, r0
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2208      	movs	r2, #8
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	d10c      	bne.n	8006b80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2280      	movs	r2, #128	; 0x80
 8006b6a:	0391      	lsls	r1, r2, #14
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	4a1a      	ldr	r2, [pc, #104]	; (8006bd8 <UART_CheckIdleState+0x98>)
 8006b70:	9200      	str	r2, [sp, #0]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f000 f832 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 8006b78:	1e03      	subs	r3, r0, #0
 8006b7a:	d001      	beq.n	8006b80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e026      	b.n	8006bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2204      	movs	r2, #4
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d10c      	bne.n	8006ba8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2280      	movs	r2, #128	; 0x80
 8006b92:	03d1      	lsls	r1, r2, #15
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <UART_CheckIdleState+0x98>)
 8006b98:	9200      	str	r2, [sp, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f000 f81e 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 8006ba0:	1e03      	subs	r3, r0, #0
 8006ba2:	d001      	beq.n	8006ba8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e012      	b.n	8006bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2288      	movs	r2, #136	; 0x88
 8006bac:	2120      	movs	r1, #32
 8006bae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	228c      	movs	r2, #140	; 0x8c
 8006bb4:	2120      	movs	r1, #32
 8006bb6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2284      	movs	r2, #132	; 0x84
 8006bc8:	2100      	movs	r1, #0
 8006bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	0018      	movs	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b004      	add	sp, #16
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	01ffffff 	.word	0x01ffffff

08006bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b094      	sub	sp, #80	; 0x50
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	1dfb      	adds	r3, r7, #7
 8006bea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bec:	e0a7      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	d100      	bne.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006bf4:	e0a3      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fd fefb 	bl	80049f0 <HAL_GetTick>
 8006bfa:	0002      	movs	r2, r0
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d13f      	bne.n	8006c8c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c14:	647b      	str	r3, [r7, #68]	; 0x44
 8006c16:	2301      	movs	r3, #1
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	f383 8810 	msr	PRIMASK, r3
}
 8006c20:	46c0      	nop			; (mov r8, r8)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	494e      	ldr	r1, [pc, #312]	; (8006d68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006c2e:	400a      	ands	r2, r1
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c34:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	f383 8810 	msr	PRIMASK, r3
}
 8006c3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	643b      	str	r3, [r7, #64]	; 0x40
 8006c48:	2301      	movs	r3, #1
 8006c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f383 8810 	msr	PRIMASK, r3
}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2101      	movs	r1, #1
 8006c60:	438a      	bics	r2, r1
 8006c62:	609a      	str	r2, [r3, #8]
 8006c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6a:	f383 8810 	msr	PRIMASK, r3
}
 8006c6e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2288      	movs	r2, #136	; 0x88
 8006c74:	2120      	movs	r1, #32
 8006c76:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	228c      	movs	r2, #140	; 0x8c
 8006c7c:	2120      	movs	r1, #32
 8006c7e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2284      	movs	r2, #132	; 0x84
 8006c84:	2100      	movs	r1, #0
 8006c86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e069      	b.n	8006d60 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2204      	movs	r2, #4
 8006c94:	4013      	ands	r3, r2
 8006c96:	d052      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69da      	ldr	r2, [r3, #28]
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d148      	bne.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2280      	movs	r2, #128	; 0x80
 8006cb2:	0112      	lsls	r2, r2, #4
 8006cb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cba:	613b      	str	r3, [r7, #16]
  return(result);
 8006cbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f383 8810 	msr	PRIMASK, r3
}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4924      	ldr	r1, [pc, #144]	; (8006d68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006cd8:	400a      	ands	r2, r1
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f383 8810 	msr	PRIMASK, r3
}
 8006ce6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cec:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	f383 8810 	msr	PRIMASK, r3
}
 8006cfc:	46c0      	nop			; (mov r8, r8)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2101      	movs	r1, #1
 8006d0a:	438a      	bics	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]
 8006d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	f383 8810 	msr	PRIMASK, r3
}
 8006d18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2288      	movs	r2, #136	; 0x88
 8006d1e:	2120      	movs	r1, #32
 8006d20:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	228c      	movs	r2, #140	; 0x8c
 8006d26:	2120      	movs	r1, #32
 8006d28:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2290      	movs	r2, #144	; 0x90
 8006d2e:	2120      	movs	r1, #32
 8006d30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2284      	movs	r2, #132	; 0x84
 8006d36:	2100      	movs	r1, #0
 8006d38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e010      	b.n	8006d60 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	4013      	ands	r3, r2
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	425a      	negs	r2, r3
 8006d4e:	4153      	adcs	r3, r2
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	001a      	movs	r2, r3
 8006d54:	1dfb      	adds	r3, r7, #7
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d100      	bne.n	8006d5e <UART_WaitOnFlagUntilTimeout+0x182>
 8006d5c:	e747      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b014      	add	sp, #80	; 0x50
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	fffffe5f 	.word	0xfffffe5f

08006d6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2284      	movs	r2, #132	; 0x84
 8006d78:	5c9b      	ldrb	r3, [r3, r2]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e027      	b.n	8006dd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2284      	movs	r2, #132	; 0x84
 8006d86:	2101      	movs	r1, #1
 8006d88:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2288      	movs	r2, #136	; 0x88
 8006d8e:	2124      	movs	r1, #36	; 0x24
 8006d90:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2101      	movs	r1, #1
 8006da6:	438a      	bics	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4a0b      	ldr	r2, [pc, #44]	; (8006ddc <HAL_UARTEx_DisableFifoMode+0x70>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2288      	movs	r2, #136	; 0x88
 8006dc4:	2120      	movs	r1, #32
 8006dc6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2284      	movs	r2, #132	; 0x84
 8006dcc:	2100      	movs	r1, #0
 8006dce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	b004      	add	sp, #16
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	dfffffff 	.word	0xdfffffff

08006de0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2284      	movs	r2, #132	; 0x84
 8006dee:	5c9b      	ldrb	r3, [r3, r2]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e02e      	b.n	8006e56 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2284      	movs	r2, #132	; 0x84
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2288      	movs	r2, #136	; 0x88
 8006e04:	2124      	movs	r1, #36	; 0x24
 8006e06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	438a      	bics	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	08d9      	lsrs	r1, r3, #3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	0018      	movs	r0, r3
 8006e38:	f000 f854 	bl	8006ee4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2288      	movs	r2, #136	; 0x88
 8006e48:	2120      	movs	r1, #32
 8006e4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2284      	movs	r2, #132	; 0x84
 8006e50:	2100      	movs	r1, #0
 8006e52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b004      	add	sp, #16
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2284      	movs	r2, #132	; 0x84
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e02f      	b.n	8006ed8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2284      	movs	r2, #132	; 0x84
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2288      	movs	r2, #136	; 0x88
 8006e84:	2124      	movs	r1, #36	; 0x24
 8006e86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	4a0e      	ldr	r2, [pc, #56]	; (8006ee0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f000 f813 	bl	8006ee4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2288      	movs	r2, #136	; 0x88
 8006eca:	2120      	movs	r1, #32
 8006ecc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2284      	movs	r2, #132	; 0x84
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	0018      	movs	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b004      	add	sp, #16
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	f1ffffff 	.word	0xf1ffffff

08006ee4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d108      	bne.n	8006f06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	226a      	movs	r2, #106	; 0x6a
 8006ef8:	2101      	movs	r1, #1
 8006efa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2268      	movs	r2, #104	; 0x68
 8006f00:	2101      	movs	r1, #1
 8006f02:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f04:	e043      	b.n	8006f8e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f06:	260f      	movs	r6, #15
 8006f08:	19bb      	adds	r3, r7, r6
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f0e:	200e      	movs	r0, #14
 8006f10:	183b      	adds	r3, r7, r0
 8006f12:	2208      	movs	r2, #8
 8006f14:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	0e5b      	lsrs	r3, r3, #25
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	240d      	movs	r4, #13
 8006f22:	193b      	adds	r3, r7, r4
 8006f24:	2107      	movs	r1, #7
 8006f26:	400a      	ands	r2, r1
 8006f28:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	0f5b      	lsrs	r3, r3, #29
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	250c      	movs	r5, #12
 8006f36:	197b      	adds	r3, r7, r5
 8006f38:	2107      	movs	r1, #7
 8006f3a:	400a      	ands	r2, r1
 8006f3c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f3e:	183b      	adds	r3, r7, r0
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	197a      	adds	r2, r7, r5
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	4914      	ldr	r1, [pc, #80]	; (8006f98 <UARTEx_SetNbDataToProcess+0xb4>)
 8006f48:	5c8a      	ldrb	r2, [r1, r2]
 8006f4a:	435a      	muls	r2, r3
 8006f4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f4e:	197b      	adds	r3, r7, r5
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	4a12      	ldr	r2, [pc, #72]	; (8006f9c <UARTEx_SetNbDataToProcess+0xb8>)
 8006f54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f56:	0019      	movs	r1, r3
 8006f58:	f7f9 f95c 	bl	8000214 <__divsi3>
 8006f5c:	0003      	movs	r3, r0
 8006f5e:	b299      	uxth	r1, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	226a      	movs	r2, #106	; 0x6a
 8006f64:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f66:	19bb      	adds	r3, r7, r6
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	193a      	adds	r2, r7, r4
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	490a      	ldr	r1, [pc, #40]	; (8006f98 <UARTEx_SetNbDataToProcess+0xb4>)
 8006f70:	5c8a      	ldrb	r2, [r1, r2]
 8006f72:	435a      	muls	r2, r3
 8006f74:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f76:	193b      	adds	r3, r7, r4
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <UARTEx_SetNbDataToProcess+0xb8>)
 8006f7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f7e:	0019      	movs	r1, r3
 8006f80:	f7f9 f948 	bl	8000214 <__divsi3>
 8006f84:	0003      	movs	r3, r0
 8006f86:	b299      	uxth	r1, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2268      	movs	r2, #104	; 0x68
 8006f8c:	5299      	strh	r1, [r3, r2]
}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b005      	add	sp, #20
 8006f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	08007134 	.word	0x08007134
 8006f9c:	0800713c 	.word	0x0800713c

08006fa0 <__libc_init_array>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	2600      	movs	r6, #0
 8006fa4:	4d0c      	ldr	r5, [pc, #48]	; (8006fd8 <__libc_init_array+0x38>)
 8006fa6:	4c0d      	ldr	r4, [pc, #52]	; (8006fdc <__libc_init_array+0x3c>)
 8006fa8:	1b64      	subs	r4, r4, r5
 8006faa:	10a4      	asrs	r4, r4, #2
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	d109      	bne.n	8006fc4 <__libc_init_array+0x24>
 8006fb0:	2600      	movs	r6, #0
 8006fb2:	f000 f833 	bl	800701c <_init>
 8006fb6:	4d0a      	ldr	r5, [pc, #40]	; (8006fe0 <__libc_init_array+0x40>)
 8006fb8:	4c0a      	ldr	r4, [pc, #40]	; (8006fe4 <__libc_init_array+0x44>)
 8006fba:	1b64      	subs	r4, r4, r5
 8006fbc:	10a4      	asrs	r4, r4, #2
 8006fbe:	42a6      	cmp	r6, r4
 8006fc0:	d105      	bne.n	8006fce <__libc_init_array+0x2e>
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	00b3      	lsls	r3, r6, #2
 8006fc6:	58eb      	ldr	r3, [r5, r3]
 8006fc8:	4798      	blx	r3
 8006fca:	3601      	adds	r6, #1
 8006fcc:	e7ee      	b.n	8006fac <__libc_init_array+0xc>
 8006fce:	00b3      	lsls	r3, r6, #2
 8006fd0:	58eb      	ldr	r3, [r5, r3]
 8006fd2:	4798      	blx	r3
 8006fd4:	3601      	adds	r6, #1
 8006fd6:	e7f2      	b.n	8006fbe <__libc_init_array+0x1e>
 8006fd8:	0800714c 	.word	0x0800714c
 8006fdc:	0800714c 	.word	0x0800714c
 8006fe0:	0800714c 	.word	0x0800714c
 8006fe4:	08007150 	.word	0x08007150

08006fe8 <memset>:
 8006fe8:	0003      	movs	r3, r0
 8006fea:	1882      	adds	r2, r0, r2
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d100      	bne.n	8006ff2 <memset+0xa>
 8006ff0:	4770      	bx	lr
 8006ff2:	7019      	strb	r1, [r3, #0]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	e7f9      	b.n	8006fec <memset+0x4>

08006ff8 <strncmp>:
 8006ff8:	b530      	push	{r4, r5, lr}
 8006ffa:	0005      	movs	r5, r0
 8006ffc:	1e10      	subs	r0, r2, #0
 8006ffe:	d008      	beq.n	8007012 <strncmp+0x1a>
 8007000:	2400      	movs	r4, #0
 8007002:	3a01      	subs	r2, #1
 8007004:	5d2b      	ldrb	r3, [r5, r4]
 8007006:	5d08      	ldrb	r0, [r1, r4]
 8007008:	4283      	cmp	r3, r0
 800700a:	d101      	bne.n	8007010 <strncmp+0x18>
 800700c:	4294      	cmp	r4, r2
 800700e:	d101      	bne.n	8007014 <strncmp+0x1c>
 8007010:	1a18      	subs	r0, r3, r0
 8007012:	bd30      	pop	{r4, r5, pc}
 8007014:	3401      	adds	r4, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f4      	bne.n	8007004 <strncmp+0xc>
 800701a:	e7f9      	b.n	8007010 <strncmp+0x18>

0800701c <_init>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr

08007028 <_fini>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr
