
DRS_tone_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c44  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006020  08006020  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006020  08006020  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006020  08006020  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08006098  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08006098  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c153  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002743  00000000  00000000  0002c1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f01  00000000  00000000  0002fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea00  00000000  00000000  00046b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861c9  00000000  00000000  00055559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002764  00000000  00000000  000db774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005ce4 	.word	0x08005ce4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08005ce4 	.word	0x08005ce4

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cdrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0010      	movs	r0, r2
 8000230:	4662      	mov	r2, ip
 8000232:	468c      	mov	ip, r1
 8000234:	0019      	movs	r1, r3
 8000236:	4663      	mov	r3, ip
 8000238:	e000      	b.n	800023c <__aeabi_cdcmpeq>
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_cdcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fbef 	bl	8000a20 <__ledf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cdcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_dcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fb3f 	bl	80008d0 <__eqdf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_dcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fbe1 	bl	8000a20 <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_dcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_dcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fbd7 	bl	8000a20 <__ledf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_dcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_dcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb67 	bl	8000954 <__gedf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_dcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_dcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fb5d 	bl	8000954 <__gedf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_dcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_d2uiz>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	2200      	movs	r2, #0
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <__aeabi_d2uiz+0x38>)
 80002ae:	0004      	movs	r4, r0
 80002b0:	000d      	movs	r5, r1
 80002b2:	f7ff ffef 	bl	8000294 <__aeabi_dcmpge>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d104      	bne.n	80002c4 <__aeabi_d2uiz+0x1c>
 80002ba:	0020      	movs	r0, r4
 80002bc:	0029      	movs	r1, r5
 80002be:	f001 fa11 	bl	80016e4 <__aeabi_d2iz>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <__aeabi_d2uiz+0x38>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	0020      	movs	r0, r4
 80002ca:	0029      	movs	r1, r5
 80002cc:	f000 fe78 	bl	8000fc0 <__aeabi_dsub>
 80002d0:	f001 fa08 	bl	80016e4 <__aeabi_d2iz>
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	061b      	lsls	r3, r3, #24
 80002d8:	469c      	mov	ip, r3
 80002da:	4460      	add	r0, ip
 80002dc:	e7f1      	b.n	80002c2 <__aeabi_d2uiz+0x1a>
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	41e00000 	.word	0x41e00000

080002e4 <__aeabi_ddiv>:
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	4657      	mov	r7, sl
 80002e8:	464e      	mov	r6, r9
 80002ea:	4645      	mov	r5, r8
 80002ec:	46de      	mov	lr, fp
 80002ee:	b5e0      	push	{r5, r6, r7, lr}
 80002f0:	4681      	mov	r9, r0
 80002f2:	0005      	movs	r5, r0
 80002f4:	030c      	lsls	r4, r1, #12
 80002f6:	0048      	lsls	r0, r1, #1
 80002f8:	4692      	mov	sl, r2
 80002fa:	001f      	movs	r7, r3
 80002fc:	b085      	sub	sp, #20
 80002fe:	0b24      	lsrs	r4, r4, #12
 8000300:	0d40      	lsrs	r0, r0, #21
 8000302:	0fce      	lsrs	r6, r1, #31
 8000304:	2800      	cmp	r0, #0
 8000306:	d100      	bne.n	800030a <__aeabi_ddiv+0x26>
 8000308:	e156      	b.n	80005b8 <__aeabi_ddiv+0x2d4>
 800030a:	4bd4      	ldr	r3, [pc, #848]	; (800065c <__aeabi_ddiv+0x378>)
 800030c:	4298      	cmp	r0, r3
 800030e:	d100      	bne.n	8000312 <__aeabi_ddiv+0x2e>
 8000310:	e172      	b.n	80005f8 <__aeabi_ddiv+0x314>
 8000312:	0f6b      	lsrs	r3, r5, #29
 8000314:	00e4      	lsls	r4, r4, #3
 8000316:	431c      	orrs	r4, r3
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	041b      	lsls	r3, r3, #16
 800031c:	4323      	orrs	r3, r4
 800031e:	4698      	mov	r8, r3
 8000320:	4bcf      	ldr	r3, [pc, #828]	; (8000660 <__aeabi_ddiv+0x37c>)
 8000322:	00ed      	lsls	r5, r5, #3
 8000324:	469b      	mov	fp, r3
 8000326:	2300      	movs	r3, #0
 8000328:	4699      	mov	r9, r3
 800032a:	4483      	add	fp, r0
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	033c      	lsls	r4, r7, #12
 8000330:	007b      	lsls	r3, r7, #1
 8000332:	4650      	mov	r0, sl
 8000334:	0b24      	lsrs	r4, r4, #12
 8000336:	0d5b      	lsrs	r3, r3, #21
 8000338:	0fff      	lsrs	r7, r7, #31
 800033a:	2b00      	cmp	r3, #0
 800033c:	d100      	bne.n	8000340 <__aeabi_ddiv+0x5c>
 800033e:	e11f      	b.n	8000580 <__aeabi_ddiv+0x29c>
 8000340:	4ac6      	ldr	r2, [pc, #792]	; (800065c <__aeabi_ddiv+0x378>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d100      	bne.n	8000348 <__aeabi_ddiv+0x64>
 8000346:	e162      	b.n	800060e <__aeabi_ddiv+0x32a>
 8000348:	49c5      	ldr	r1, [pc, #788]	; (8000660 <__aeabi_ddiv+0x37c>)
 800034a:	0f42      	lsrs	r2, r0, #29
 800034c:	468c      	mov	ip, r1
 800034e:	00e4      	lsls	r4, r4, #3
 8000350:	4659      	mov	r1, fp
 8000352:	4314      	orrs	r4, r2
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	4463      	add	r3, ip
 8000358:	0412      	lsls	r2, r2, #16
 800035a:	1acb      	subs	r3, r1, r3
 800035c:	4314      	orrs	r4, r2
 800035e:	469b      	mov	fp, r3
 8000360:	00c2      	lsls	r2, r0, #3
 8000362:	2000      	movs	r0, #0
 8000364:	0033      	movs	r3, r6
 8000366:	407b      	eors	r3, r7
 8000368:	469a      	mov	sl, r3
 800036a:	464b      	mov	r3, r9
 800036c:	2b0f      	cmp	r3, #15
 800036e:	d827      	bhi.n	80003c0 <__aeabi_ddiv+0xdc>
 8000370:	49bc      	ldr	r1, [pc, #752]	; (8000664 <__aeabi_ddiv+0x380>)
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	58cb      	ldr	r3, [r1, r3]
 8000376:	469f      	mov	pc, r3
 8000378:	46b2      	mov	sl, r6
 800037a:	9b00      	ldr	r3, [sp, #0]
 800037c:	2b02      	cmp	r3, #2
 800037e:	d016      	beq.n	80003ae <__aeabi_ddiv+0xca>
 8000380:	2b03      	cmp	r3, #3
 8000382:	d100      	bne.n	8000386 <__aeabi_ddiv+0xa2>
 8000384:	e28e      	b.n	80008a4 <__aeabi_ddiv+0x5c0>
 8000386:	2b01      	cmp	r3, #1
 8000388:	d000      	beq.n	800038c <__aeabi_ddiv+0xa8>
 800038a:	e0d9      	b.n	8000540 <__aeabi_ddiv+0x25c>
 800038c:	2300      	movs	r3, #0
 800038e:	2400      	movs	r4, #0
 8000390:	2500      	movs	r5, #0
 8000392:	4652      	mov	r2, sl
 8000394:	051b      	lsls	r3, r3, #20
 8000396:	4323      	orrs	r3, r4
 8000398:	07d2      	lsls	r2, r2, #31
 800039a:	4313      	orrs	r3, r2
 800039c:	0028      	movs	r0, r5
 800039e:	0019      	movs	r1, r3
 80003a0:	b005      	add	sp, #20
 80003a2:	bcf0      	pop	{r4, r5, r6, r7}
 80003a4:	46bb      	mov	fp, r7
 80003a6:	46b2      	mov	sl, r6
 80003a8:	46a9      	mov	r9, r5
 80003aa:	46a0      	mov	r8, r4
 80003ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ae:	2400      	movs	r4, #0
 80003b0:	2500      	movs	r5, #0
 80003b2:	4baa      	ldr	r3, [pc, #680]	; (800065c <__aeabi_ddiv+0x378>)
 80003b4:	e7ed      	b.n	8000392 <__aeabi_ddiv+0xae>
 80003b6:	46ba      	mov	sl, r7
 80003b8:	46a0      	mov	r8, r4
 80003ba:	0015      	movs	r5, r2
 80003bc:	9000      	str	r0, [sp, #0]
 80003be:	e7dc      	b.n	800037a <__aeabi_ddiv+0x96>
 80003c0:	4544      	cmp	r4, r8
 80003c2:	d200      	bcs.n	80003c6 <__aeabi_ddiv+0xe2>
 80003c4:	e1c7      	b.n	8000756 <__aeabi_ddiv+0x472>
 80003c6:	d100      	bne.n	80003ca <__aeabi_ddiv+0xe6>
 80003c8:	e1c2      	b.n	8000750 <__aeabi_ddiv+0x46c>
 80003ca:	2301      	movs	r3, #1
 80003cc:	425b      	negs	r3, r3
 80003ce:	469c      	mov	ip, r3
 80003d0:	002e      	movs	r6, r5
 80003d2:	4640      	mov	r0, r8
 80003d4:	2500      	movs	r5, #0
 80003d6:	44e3      	add	fp, ip
 80003d8:	0223      	lsls	r3, r4, #8
 80003da:	0e14      	lsrs	r4, r2, #24
 80003dc:	431c      	orrs	r4, r3
 80003de:	0c1b      	lsrs	r3, r3, #16
 80003e0:	4699      	mov	r9, r3
 80003e2:	0423      	lsls	r3, r4, #16
 80003e4:	0c1f      	lsrs	r7, r3, #16
 80003e6:	0212      	lsls	r2, r2, #8
 80003e8:	4649      	mov	r1, r9
 80003ea:	9200      	str	r2, [sp, #0]
 80003ec:	9701      	str	r7, [sp, #4]
 80003ee:	f7ff ff17 	bl	8000220 <__aeabi_uidivmod>
 80003f2:	0002      	movs	r2, r0
 80003f4:	437a      	muls	r2, r7
 80003f6:	040b      	lsls	r3, r1, #16
 80003f8:	0c31      	lsrs	r1, r6, #16
 80003fa:	4680      	mov	r8, r0
 80003fc:	4319      	orrs	r1, r3
 80003fe:	428a      	cmp	r2, r1
 8000400:	d907      	bls.n	8000412 <__aeabi_ddiv+0x12e>
 8000402:	2301      	movs	r3, #1
 8000404:	425b      	negs	r3, r3
 8000406:	469c      	mov	ip, r3
 8000408:	1909      	adds	r1, r1, r4
 800040a:	44e0      	add	r8, ip
 800040c:	428c      	cmp	r4, r1
 800040e:	d800      	bhi.n	8000412 <__aeabi_ddiv+0x12e>
 8000410:	e207      	b.n	8000822 <__aeabi_ddiv+0x53e>
 8000412:	1a88      	subs	r0, r1, r2
 8000414:	4649      	mov	r1, r9
 8000416:	f7ff ff03 	bl	8000220 <__aeabi_uidivmod>
 800041a:	0409      	lsls	r1, r1, #16
 800041c:	468c      	mov	ip, r1
 800041e:	0431      	lsls	r1, r6, #16
 8000420:	4666      	mov	r6, ip
 8000422:	9a01      	ldr	r2, [sp, #4]
 8000424:	0c09      	lsrs	r1, r1, #16
 8000426:	4342      	muls	r2, r0
 8000428:	0003      	movs	r3, r0
 800042a:	4331      	orrs	r1, r6
 800042c:	428a      	cmp	r2, r1
 800042e:	d904      	bls.n	800043a <__aeabi_ddiv+0x156>
 8000430:	1909      	adds	r1, r1, r4
 8000432:	3b01      	subs	r3, #1
 8000434:	428c      	cmp	r4, r1
 8000436:	d800      	bhi.n	800043a <__aeabi_ddiv+0x156>
 8000438:	e1ed      	b.n	8000816 <__aeabi_ddiv+0x532>
 800043a:	1a88      	subs	r0, r1, r2
 800043c:	4642      	mov	r2, r8
 800043e:	0412      	lsls	r2, r2, #16
 8000440:	431a      	orrs	r2, r3
 8000442:	4690      	mov	r8, r2
 8000444:	4641      	mov	r1, r8
 8000446:	9b00      	ldr	r3, [sp, #0]
 8000448:	040e      	lsls	r6, r1, #16
 800044a:	0c1b      	lsrs	r3, r3, #16
 800044c:	001f      	movs	r7, r3
 800044e:	9302      	str	r3, [sp, #8]
 8000450:	9b00      	ldr	r3, [sp, #0]
 8000452:	0c36      	lsrs	r6, r6, #16
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	0c19      	lsrs	r1, r3, #16
 8000458:	000b      	movs	r3, r1
 800045a:	4373      	muls	r3, r6
 800045c:	0c12      	lsrs	r2, r2, #16
 800045e:	437e      	muls	r6, r7
 8000460:	9103      	str	r1, [sp, #12]
 8000462:	4351      	muls	r1, r2
 8000464:	437a      	muls	r2, r7
 8000466:	0c1f      	lsrs	r7, r3, #16
 8000468:	46bc      	mov	ip, r7
 800046a:	1876      	adds	r6, r6, r1
 800046c:	4466      	add	r6, ip
 800046e:	42b1      	cmp	r1, r6
 8000470:	d903      	bls.n	800047a <__aeabi_ddiv+0x196>
 8000472:	2180      	movs	r1, #128	; 0x80
 8000474:	0249      	lsls	r1, r1, #9
 8000476:	468c      	mov	ip, r1
 8000478:	4462      	add	r2, ip
 800047a:	0c31      	lsrs	r1, r6, #16
 800047c:	188a      	adds	r2, r1, r2
 800047e:	0431      	lsls	r1, r6, #16
 8000480:	041e      	lsls	r6, r3, #16
 8000482:	0c36      	lsrs	r6, r6, #16
 8000484:	198e      	adds	r6, r1, r6
 8000486:	4290      	cmp	r0, r2
 8000488:	d302      	bcc.n	8000490 <__aeabi_ddiv+0x1ac>
 800048a:	d112      	bne.n	80004b2 <__aeabi_ddiv+0x1ce>
 800048c:	42b5      	cmp	r5, r6
 800048e:	d210      	bcs.n	80004b2 <__aeabi_ddiv+0x1ce>
 8000490:	4643      	mov	r3, r8
 8000492:	1e59      	subs	r1, r3, #1
 8000494:	9b00      	ldr	r3, [sp, #0]
 8000496:	469c      	mov	ip, r3
 8000498:	4465      	add	r5, ip
 800049a:	001f      	movs	r7, r3
 800049c:	429d      	cmp	r5, r3
 800049e:	419b      	sbcs	r3, r3
 80004a0:	425b      	negs	r3, r3
 80004a2:	191b      	adds	r3, r3, r4
 80004a4:	18c0      	adds	r0, r0, r3
 80004a6:	4284      	cmp	r4, r0
 80004a8:	d200      	bcs.n	80004ac <__aeabi_ddiv+0x1c8>
 80004aa:	e1a0      	b.n	80007ee <__aeabi_ddiv+0x50a>
 80004ac:	d100      	bne.n	80004b0 <__aeabi_ddiv+0x1cc>
 80004ae:	e19b      	b.n	80007e8 <__aeabi_ddiv+0x504>
 80004b0:	4688      	mov	r8, r1
 80004b2:	1bae      	subs	r6, r5, r6
 80004b4:	42b5      	cmp	r5, r6
 80004b6:	41ad      	sbcs	r5, r5
 80004b8:	1a80      	subs	r0, r0, r2
 80004ba:	426d      	negs	r5, r5
 80004bc:	1b40      	subs	r0, r0, r5
 80004be:	4284      	cmp	r4, r0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_ddiv+0x1e0>
 80004c2:	e1d5      	b.n	8000870 <__aeabi_ddiv+0x58c>
 80004c4:	4649      	mov	r1, r9
 80004c6:	f7ff feab 	bl	8000220 <__aeabi_uidivmod>
 80004ca:	9a01      	ldr	r2, [sp, #4]
 80004cc:	040b      	lsls	r3, r1, #16
 80004ce:	4342      	muls	r2, r0
 80004d0:	0c31      	lsrs	r1, r6, #16
 80004d2:	0005      	movs	r5, r0
 80004d4:	4319      	orrs	r1, r3
 80004d6:	428a      	cmp	r2, r1
 80004d8:	d900      	bls.n	80004dc <__aeabi_ddiv+0x1f8>
 80004da:	e16c      	b.n	80007b6 <__aeabi_ddiv+0x4d2>
 80004dc:	1a88      	subs	r0, r1, r2
 80004de:	4649      	mov	r1, r9
 80004e0:	f7ff fe9e 	bl	8000220 <__aeabi_uidivmod>
 80004e4:	9a01      	ldr	r2, [sp, #4]
 80004e6:	0436      	lsls	r6, r6, #16
 80004e8:	4342      	muls	r2, r0
 80004ea:	0409      	lsls	r1, r1, #16
 80004ec:	0c36      	lsrs	r6, r6, #16
 80004ee:	0003      	movs	r3, r0
 80004f0:	430e      	orrs	r6, r1
 80004f2:	42b2      	cmp	r2, r6
 80004f4:	d900      	bls.n	80004f8 <__aeabi_ddiv+0x214>
 80004f6:	e153      	b.n	80007a0 <__aeabi_ddiv+0x4bc>
 80004f8:	9803      	ldr	r0, [sp, #12]
 80004fa:	1ab6      	subs	r6, r6, r2
 80004fc:	0002      	movs	r2, r0
 80004fe:	042d      	lsls	r5, r5, #16
 8000500:	431d      	orrs	r5, r3
 8000502:	9f02      	ldr	r7, [sp, #8]
 8000504:	042b      	lsls	r3, r5, #16
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	435a      	muls	r2, r3
 800050a:	437b      	muls	r3, r7
 800050c:	469c      	mov	ip, r3
 800050e:	0c29      	lsrs	r1, r5, #16
 8000510:	4348      	muls	r0, r1
 8000512:	0c13      	lsrs	r3, r2, #16
 8000514:	4484      	add	ip, r0
 8000516:	4463      	add	r3, ip
 8000518:	4379      	muls	r1, r7
 800051a:	4298      	cmp	r0, r3
 800051c:	d903      	bls.n	8000526 <__aeabi_ddiv+0x242>
 800051e:	2080      	movs	r0, #128	; 0x80
 8000520:	0240      	lsls	r0, r0, #9
 8000522:	4684      	mov	ip, r0
 8000524:	4461      	add	r1, ip
 8000526:	0c18      	lsrs	r0, r3, #16
 8000528:	0412      	lsls	r2, r2, #16
 800052a:	041b      	lsls	r3, r3, #16
 800052c:	0c12      	lsrs	r2, r2, #16
 800052e:	1841      	adds	r1, r0, r1
 8000530:	189b      	adds	r3, r3, r2
 8000532:	428e      	cmp	r6, r1
 8000534:	d200      	bcs.n	8000538 <__aeabi_ddiv+0x254>
 8000536:	e0ff      	b.n	8000738 <__aeabi_ddiv+0x454>
 8000538:	d100      	bne.n	800053c <__aeabi_ddiv+0x258>
 800053a:	e0fa      	b.n	8000732 <__aeabi_ddiv+0x44e>
 800053c:	2301      	movs	r3, #1
 800053e:	431d      	orrs	r5, r3
 8000540:	4a49      	ldr	r2, [pc, #292]	; (8000668 <__aeabi_ddiv+0x384>)
 8000542:	445a      	add	r2, fp
 8000544:	2a00      	cmp	r2, #0
 8000546:	dc00      	bgt.n	800054a <__aeabi_ddiv+0x266>
 8000548:	e0aa      	b.n	80006a0 <__aeabi_ddiv+0x3bc>
 800054a:	076b      	lsls	r3, r5, #29
 800054c:	d000      	beq.n	8000550 <__aeabi_ddiv+0x26c>
 800054e:	e13d      	b.n	80007cc <__aeabi_ddiv+0x4e8>
 8000550:	08ed      	lsrs	r5, r5, #3
 8000552:	4643      	mov	r3, r8
 8000554:	01db      	lsls	r3, r3, #7
 8000556:	d506      	bpl.n	8000566 <__aeabi_ddiv+0x282>
 8000558:	4642      	mov	r2, r8
 800055a:	4b44      	ldr	r3, [pc, #272]	; (800066c <__aeabi_ddiv+0x388>)
 800055c:	401a      	ands	r2, r3
 800055e:	4690      	mov	r8, r2
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	00d2      	lsls	r2, r2, #3
 8000564:	445a      	add	r2, fp
 8000566:	4b42      	ldr	r3, [pc, #264]	; (8000670 <__aeabi_ddiv+0x38c>)
 8000568:	429a      	cmp	r2, r3
 800056a:	dd00      	ble.n	800056e <__aeabi_ddiv+0x28a>
 800056c:	e71f      	b.n	80003ae <__aeabi_ddiv+0xca>
 800056e:	4643      	mov	r3, r8
 8000570:	075b      	lsls	r3, r3, #29
 8000572:	431d      	orrs	r5, r3
 8000574:	4643      	mov	r3, r8
 8000576:	0552      	lsls	r2, r2, #21
 8000578:	025c      	lsls	r4, r3, #9
 800057a:	0b24      	lsrs	r4, r4, #12
 800057c:	0d53      	lsrs	r3, r2, #21
 800057e:	e708      	b.n	8000392 <__aeabi_ddiv+0xae>
 8000580:	4652      	mov	r2, sl
 8000582:	4322      	orrs	r2, r4
 8000584:	d100      	bne.n	8000588 <__aeabi_ddiv+0x2a4>
 8000586:	e07b      	b.n	8000680 <__aeabi_ddiv+0x39c>
 8000588:	2c00      	cmp	r4, #0
 800058a:	d100      	bne.n	800058e <__aeabi_ddiv+0x2aa>
 800058c:	e0fa      	b.n	8000784 <__aeabi_ddiv+0x4a0>
 800058e:	0020      	movs	r0, r4
 8000590:	f001 f904 	bl	800179c <__clzsi2>
 8000594:	0002      	movs	r2, r0
 8000596:	3a0b      	subs	r2, #11
 8000598:	231d      	movs	r3, #29
 800059a:	0001      	movs	r1, r0
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	4652      	mov	r2, sl
 80005a0:	3908      	subs	r1, #8
 80005a2:	40da      	lsrs	r2, r3
 80005a4:	408c      	lsls	r4, r1
 80005a6:	4314      	orrs	r4, r2
 80005a8:	4652      	mov	r2, sl
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4b31      	ldr	r3, [pc, #196]	; (8000674 <__aeabi_ddiv+0x390>)
 80005ae:	4458      	add	r0, fp
 80005b0:	469b      	mov	fp, r3
 80005b2:	4483      	add	fp, r0
 80005b4:	2000      	movs	r0, #0
 80005b6:	e6d5      	b.n	8000364 <__aeabi_ddiv+0x80>
 80005b8:	464b      	mov	r3, r9
 80005ba:	4323      	orrs	r3, r4
 80005bc:	4698      	mov	r8, r3
 80005be:	d044      	beq.n	800064a <__aeabi_ddiv+0x366>
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_ddiv+0x2e2>
 80005c4:	e0ce      	b.n	8000764 <__aeabi_ddiv+0x480>
 80005c6:	0020      	movs	r0, r4
 80005c8:	f001 f8e8 	bl	800179c <__clzsi2>
 80005cc:	0001      	movs	r1, r0
 80005ce:	0002      	movs	r2, r0
 80005d0:	390b      	subs	r1, #11
 80005d2:	231d      	movs	r3, #29
 80005d4:	1a5b      	subs	r3, r3, r1
 80005d6:	4649      	mov	r1, r9
 80005d8:	0010      	movs	r0, r2
 80005da:	40d9      	lsrs	r1, r3
 80005dc:	3808      	subs	r0, #8
 80005de:	4084      	lsls	r4, r0
 80005e0:	000b      	movs	r3, r1
 80005e2:	464d      	mov	r5, r9
 80005e4:	4323      	orrs	r3, r4
 80005e6:	4698      	mov	r8, r3
 80005e8:	4085      	lsls	r5, r0
 80005ea:	4823      	ldr	r0, [pc, #140]	; (8000678 <__aeabi_ddiv+0x394>)
 80005ec:	1a83      	subs	r3, r0, r2
 80005ee:	469b      	mov	fp, r3
 80005f0:	2300      	movs	r3, #0
 80005f2:	4699      	mov	r9, r3
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	e69a      	b.n	800032e <__aeabi_ddiv+0x4a>
 80005f8:	464b      	mov	r3, r9
 80005fa:	4323      	orrs	r3, r4
 80005fc:	4698      	mov	r8, r3
 80005fe:	d11d      	bne.n	800063c <__aeabi_ddiv+0x358>
 8000600:	2308      	movs	r3, #8
 8000602:	4699      	mov	r9, r3
 8000604:	3b06      	subs	r3, #6
 8000606:	2500      	movs	r5, #0
 8000608:	4683      	mov	fp, r0
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	e68f      	b.n	800032e <__aeabi_ddiv+0x4a>
 800060e:	4652      	mov	r2, sl
 8000610:	4322      	orrs	r2, r4
 8000612:	d109      	bne.n	8000628 <__aeabi_ddiv+0x344>
 8000614:	2302      	movs	r3, #2
 8000616:	4649      	mov	r1, r9
 8000618:	4319      	orrs	r1, r3
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <__aeabi_ddiv+0x398>)
 800061c:	4689      	mov	r9, r1
 800061e:	469c      	mov	ip, r3
 8000620:	2400      	movs	r4, #0
 8000622:	2002      	movs	r0, #2
 8000624:	44e3      	add	fp, ip
 8000626:	e69d      	b.n	8000364 <__aeabi_ddiv+0x80>
 8000628:	2303      	movs	r3, #3
 800062a:	464a      	mov	r2, r9
 800062c:	431a      	orrs	r2, r3
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <__aeabi_ddiv+0x398>)
 8000630:	4691      	mov	r9, r2
 8000632:	469c      	mov	ip, r3
 8000634:	4652      	mov	r2, sl
 8000636:	2003      	movs	r0, #3
 8000638:	44e3      	add	fp, ip
 800063a:	e693      	b.n	8000364 <__aeabi_ddiv+0x80>
 800063c:	230c      	movs	r3, #12
 800063e:	4699      	mov	r9, r3
 8000640:	3b09      	subs	r3, #9
 8000642:	46a0      	mov	r8, r4
 8000644:	4683      	mov	fp, r0
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	e671      	b.n	800032e <__aeabi_ddiv+0x4a>
 800064a:	2304      	movs	r3, #4
 800064c:	4699      	mov	r9, r3
 800064e:	2300      	movs	r3, #0
 8000650:	469b      	mov	fp, r3
 8000652:	3301      	adds	r3, #1
 8000654:	2500      	movs	r5, #0
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	e669      	b.n	800032e <__aeabi_ddiv+0x4a>
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	000007ff 	.word	0x000007ff
 8000660:	fffffc01 	.word	0xfffffc01
 8000664:	08005f04 	.word	0x08005f04
 8000668:	000003ff 	.word	0x000003ff
 800066c:	feffffff 	.word	0xfeffffff
 8000670:	000007fe 	.word	0x000007fe
 8000674:	000003f3 	.word	0x000003f3
 8000678:	fffffc0d 	.word	0xfffffc0d
 800067c:	fffff801 	.word	0xfffff801
 8000680:	4649      	mov	r1, r9
 8000682:	2301      	movs	r3, #1
 8000684:	4319      	orrs	r1, r3
 8000686:	4689      	mov	r9, r1
 8000688:	2400      	movs	r4, #0
 800068a:	2001      	movs	r0, #1
 800068c:	e66a      	b.n	8000364 <__aeabi_ddiv+0x80>
 800068e:	2300      	movs	r3, #0
 8000690:	2480      	movs	r4, #128	; 0x80
 8000692:	469a      	mov	sl, r3
 8000694:	2500      	movs	r5, #0
 8000696:	4b8a      	ldr	r3, [pc, #552]	; (80008c0 <__aeabi_ddiv+0x5dc>)
 8000698:	0324      	lsls	r4, r4, #12
 800069a:	e67a      	b.n	8000392 <__aeabi_ddiv+0xae>
 800069c:	2501      	movs	r5, #1
 800069e:	426d      	negs	r5, r5
 80006a0:	2301      	movs	r3, #1
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	2b38      	cmp	r3, #56	; 0x38
 80006a6:	dd00      	ble.n	80006aa <__aeabi_ddiv+0x3c6>
 80006a8:	e670      	b.n	800038c <__aeabi_ddiv+0xa8>
 80006aa:	2b1f      	cmp	r3, #31
 80006ac:	dc00      	bgt.n	80006b0 <__aeabi_ddiv+0x3cc>
 80006ae:	e0bf      	b.n	8000830 <__aeabi_ddiv+0x54c>
 80006b0:	211f      	movs	r1, #31
 80006b2:	4249      	negs	r1, r1
 80006b4:	1a8a      	subs	r2, r1, r2
 80006b6:	4641      	mov	r1, r8
 80006b8:	40d1      	lsrs	r1, r2
 80006ba:	000a      	movs	r2, r1
 80006bc:	2b20      	cmp	r3, #32
 80006be:	d004      	beq.n	80006ca <__aeabi_ddiv+0x3e6>
 80006c0:	4641      	mov	r1, r8
 80006c2:	4b80      	ldr	r3, [pc, #512]	; (80008c4 <__aeabi_ddiv+0x5e0>)
 80006c4:	445b      	add	r3, fp
 80006c6:	4099      	lsls	r1, r3
 80006c8:	430d      	orrs	r5, r1
 80006ca:	1e6b      	subs	r3, r5, #1
 80006cc:	419d      	sbcs	r5, r3
 80006ce:	2307      	movs	r3, #7
 80006d0:	432a      	orrs	r2, r5
 80006d2:	001d      	movs	r5, r3
 80006d4:	2400      	movs	r4, #0
 80006d6:	4015      	ands	r5, r2
 80006d8:	4213      	tst	r3, r2
 80006da:	d100      	bne.n	80006de <__aeabi_ddiv+0x3fa>
 80006dc:	e0d4      	b.n	8000888 <__aeabi_ddiv+0x5a4>
 80006de:	210f      	movs	r1, #15
 80006e0:	2300      	movs	r3, #0
 80006e2:	4011      	ands	r1, r2
 80006e4:	2904      	cmp	r1, #4
 80006e6:	d100      	bne.n	80006ea <__aeabi_ddiv+0x406>
 80006e8:	e0cb      	b.n	8000882 <__aeabi_ddiv+0x59e>
 80006ea:	1d11      	adds	r1, r2, #4
 80006ec:	4291      	cmp	r1, r2
 80006ee:	4192      	sbcs	r2, r2
 80006f0:	4252      	negs	r2, r2
 80006f2:	189b      	adds	r3, r3, r2
 80006f4:	000a      	movs	r2, r1
 80006f6:	0219      	lsls	r1, r3, #8
 80006f8:	d400      	bmi.n	80006fc <__aeabi_ddiv+0x418>
 80006fa:	e0c2      	b.n	8000882 <__aeabi_ddiv+0x59e>
 80006fc:	2301      	movs	r3, #1
 80006fe:	2400      	movs	r4, #0
 8000700:	2500      	movs	r5, #0
 8000702:	e646      	b.n	8000392 <__aeabi_ddiv+0xae>
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	4641      	mov	r1, r8
 8000708:	031b      	lsls	r3, r3, #12
 800070a:	4219      	tst	r1, r3
 800070c:	d008      	beq.n	8000720 <__aeabi_ddiv+0x43c>
 800070e:	421c      	tst	r4, r3
 8000710:	d106      	bne.n	8000720 <__aeabi_ddiv+0x43c>
 8000712:	431c      	orrs	r4, r3
 8000714:	0324      	lsls	r4, r4, #12
 8000716:	46ba      	mov	sl, r7
 8000718:	0015      	movs	r5, r2
 800071a:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <__aeabi_ddiv+0x5dc>)
 800071c:	0b24      	lsrs	r4, r4, #12
 800071e:	e638      	b.n	8000392 <__aeabi_ddiv+0xae>
 8000720:	2480      	movs	r4, #128	; 0x80
 8000722:	4643      	mov	r3, r8
 8000724:	0324      	lsls	r4, r4, #12
 8000726:	431c      	orrs	r4, r3
 8000728:	0324      	lsls	r4, r4, #12
 800072a:	46b2      	mov	sl, r6
 800072c:	4b64      	ldr	r3, [pc, #400]	; (80008c0 <__aeabi_ddiv+0x5dc>)
 800072e:	0b24      	lsrs	r4, r4, #12
 8000730:	e62f      	b.n	8000392 <__aeabi_ddiv+0xae>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_ddiv+0x454>
 8000736:	e703      	b.n	8000540 <__aeabi_ddiv+0x25c>
 8000738:	19a6      	adds	r6, r4, r6
 800073a:	1e68      	subs	r0, r5, #1
 800073c:	42a6      	cmp	r6, r4
 800073e:	d200      	bcs.n	8000742 <__aeabi_ddiv+0x45e>
 8000740:	e08d      	b.n	800085e <__aeabi_ddiv+0x57a>
 8000742:	428e      	cmp	r6, r1
 8000744:	d200      	bcs.n	8000748 <__aeabi_ddiv+0x464>
 8000746:	e0a3      	b.n	8000890 <__aeabi_ddiv+0x5ac>
 8000748:	d100      	bne.n	800074c <__aeabi_ddiv+0x468>
 800074a:	e0b3      	b.n	80008b4 <__aeabi_ddiv+0x5d0>
 800074c:	0005      	movs	r5, r0
 800074e:	e6f5      	b.n	800053c <__aeabi_ddiv+0x258>
 8000750:	42aa      	cmp	r2, r5
 8000752:	d900      	bls.n	8000756 <__aeabi_ddiv+0x472>
 8000754:	e639      	b.n	80003ca <__aeabi_ddiv+0xe6>
 8000756:	4643      	mov	r3, r8
 8000758:	07de      	lsls	r6, r3, #31
 800075a:	0858      	lsrs	r0, r3, #1
 800075c:	086b      	lsrs	r3, r5, #1
 800075e:	431e      	orrs	r6, r3
 8000760:	07ed      	lsls	r5, r5, #31
 8000762:	e639      	b.n	80003d8 <__aeabi_ddiv+0xf4>
 8000764:	4648      	mov	r0, r9
 8000766:	f001 f819 	bl	800179c <__clzsi2>
 800076a:	0001      	movs	r1, r0
 800076c:	0002      	movs	r2, r0
 800076e:	3115      	adds	r1, #21
 8000770:	3220      	adds	r2, #32
 8000772:	291c      	cmp	r1, #28
 8000774:	dc00      	bgt.n	8000778 <__aeabi_ddiv+0x494>
 8000776:	e72c      	b.n	80005d2 <__aeabi_ddiv+0x2ee>
 8000778:	464b      	mov	r3, r9
 800077a:	3808      	subs	r0, #8
 800077c:	4083      	lsls	r3, r0
 800077e:	2500      	movs	r5, #0
 8000780:	4698      	mov	r8, r3
 8000782:	e732      	b.n	80005ea <__aeabi_ddiv+0x306>
 8000784:	f001 f80a 	bl	800179c <__clzsi2>
 8000788:	0003      	movs	r3, r0
 800078a:	001a      	movs	r2, r3
 800078c:	3215      	adds	r2, #21
 800078e:	3020      	adds	r0, #32
 8000790:	2a1c      	cmp	r2, #28
 8000792:	dc00      	bgt.n	8000796 <__aeabi_ddiv+0x4b2>
 8000794:	e700      	b.n	8000598 <__aeabi_ddiv+0x2b4>
 8000796:	4654      	mov	r4, sl
 8000798:	3b08      	subs	r3, #8
 800079a:	2200      	movs	r2, #0
 800079c:	409c      	lsls	r4, r3
 800079e:	e705      	b.n	80005ac <__aeabi_ddiv+0x2c8>
 80007a0:	1936      	adds	r6, r6, r4
 80007a2:	3b01      	subs	r3, #1
 80007a4:	42b4      	cmp	r4, r6
 80007a6:	d900      	bls.n	80007aa <__aeabi_ddiv+0x4c6>
 80007a8:	e6a6      	b.n	80004f8 <__aeabi_ddiv+0x214>
 80007aa:	42b2      	cmp	r2, r6
 80007ac:	d800      	bhi.n	80007b0 <__aeabi_ddiv+0x4cc>
 80007ae:	e6a3      	b.n	80004f8 <__aeabi_ddiv+0x214>
 80007b0:	1e83      	subs	r3, r0, #2
 80007b2:	1936      	adds	r6, r6, r4
 80007b4:	e6a0      	b.n	80004f8 <__aeabi_ddiv+0x214>
 80007b6:	1909      	adds	r1, r1, r4
 80007b8:	3d01      	subs	r5, #1
 80007ba:	428c      	cmp	r4, r1
 80007bc:	d900      	bls.n	80007c0 <__aeabi_ddiv+0x4dc>
 80007be:	e68d      	b.n	80004dc <__aeabi_ddiv+0x1f8>
 80007c0:	428a      	cmp	r2, r1
 80007c2:	d800      	bhi.n	80007c6 <__aeabi_ddiv+0x4e2>
 80007c4:	e68a      	b.n	80004dc <__aeabi_ddiv+0x1f8>
 80007c6:	1e85      	subs	r5, r0, #2
 80007c8:	1909      	adds	r1, r1, r4
 80007ca:	e687      	b.n	80004dc <__aeabi_ddiv+0x1f8>
 80007cc:	230f      	movs	r3, #15
 80007ce:	402b      	ands	r3, r5
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d100      	bne.n	80007d6 <__aeabi_ddiv+0x4f2>
 80007d4:	e6bc      	b.n	8000550 <__aeabi_ddiv+0x26c>
 80007d6:	2305      	movs	r3, #5
 80007d8:	425b      	negs	r3, r3
 80007da:	42ab      	cmp	r3, r5
 80007dc:	419b      	sbcs	r3, r3
 80007de:	3504      	adds	r5, #4
 80007e0:	425b      	negs	r3, r3
 80007e2:	08ed      	lsrs	r5, r5, #3
 80007e4:	4498      	add	r8, r3
 80007e6:	e6b4      	b.n	8000552 <__aeabi_ddiv+0x26e>
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d900      	bls.n	80007ee <__aeabi_ddiv+0x50a>
 80007ec:	e660      	b.n	80004b0 <__aeabi_ddiv+0x1cc>
 80007ee:	4282      	cmp	r2, r0
 80007f0:	d804      	bhi.n	80007fc <__aeabi_ddiv+0x518>
 80007f2:	d000      	beq.n	80007f6 <__aeabi_ddiv+0x512>
 80007f4:	e65c      	b.n	80004b0 <__aeabi_ddiv+0x1cc>
 80007f6:	42ae      	cmp	r6, r5
 80007f8:	d800      	bhi.n	80007fc <__aeabi_ddiv+0x518>
 80007fa:	e659      	b.n	80004b0 <__aeabi_ddiv+0x1cc>
 80007fc:	2302      	movs	r3, #2
 80007fe:	425b      	negs	r3, r3
 8000800:	469c      	mov	ip, r3
 8000802:	9b00      	ldr	r3, [sp, #0]
 8000804:	44e0      	add	r8, ip
 8000806:	469c      	mov	ip, r3
 8000808:	4465      	add	r5, ip
 800080a:	429d      	cmp	r5, r3
 800080c:	419b      	sbcs	r3, r3
 800080e:	425b      	negs	r3, r3
 8000810:	191b      	adds	r3, r3, r4
 8000812:	18c0      	adds	r0, r0, r3
 8000814:	e64d      	b.n	80004b2 <__aeabi_ddiv+0x1ce>
 8000816:	428a      	cmp	r2, r1
 8000818:	d800      	bhi.n	800081c <__aeabi_ddiv+0x538>
 800081a:	e60e      	b.n	800043a <__aeabi_ddiv+0x156>
 800081c:	1e83      	subs	r3, r0, #2
 800081e:	1909      	adds	r1, r1, r4
 8000820:	e60b      	b.n	800043a <__aeabi_ddiv+0x156>
 8000822:	428a      	cmp	r2, r1
 8000824:	d800      	bhi.n	8000828 <__aeabi_ddiv+0x544>
 8000826:	e5f4      	b.n	8000412 <__aeabi_ddiv+0x12e>
 8000828:	1e83      	subs	r3, r0, #2
 800082a:	4698      	mov	r8, r3
 800082c:	1909      	adds	r1, r1, r4
 800082e:	e5f0      	b.n	8000412 <__aeabi_ddiv+0x12e>
 8000830:	4925      	ldr	r1, [pc, #148]	; (80008c8 <__aeabi_ddiv+0x5e4>)
 8000832:	0028      	movs	r0, r5
 8000834:	4459      	add	r1, fp
 8000836:	408d      	lsls	r5, r1
 8000838:	4642      	mov	r2, r8
 800083a:	408a      	lsls	r2, r1
 800083c:	1e69      	subs	r1, r5, #1
 800083e:	418d      	sbcs	r5, r1
 8000840:	4641      	mov	r1, r8
 8000842:	40d8      	lsrs	r0, r3
 8000844:	40d9      	lsrs	r1, r3
 8000846:	4302      	orrs	r2, r0
 8000848:	432a      	orrs	r2, r5
 800084a:	000b      	movs	r3, r1
 800084c:	0751      	lsls	r1, r2, #29
 800084e:	d100      	bne.n	8000852 <__aeabi_ddiv+0x56e>
 8000850:	e751      	b.n	80006f6 <__aeabi_ddiv+0x412>
 8000852:	210f      	movs	r1, #15
 8000854:	4011      	ands	r1, r2
 8000856:	2904      	cmp	r1, #4
 8000858:	d000      	beq.n	800085c <__aeabi_ddiv+0x578>
 800085a:	e746      	b.n	80006ea <__aeabi_ddiv+0x406>
 800085c:	e74b      	b.n	80006f6 <__aeabi_ddiv+0x412>
 800085e:	0005      	movs	r5, r0
 8000860:	428e      	cmp	r6, r1
 8000862:	d000      	beq.n	8000866 <__aeabi_ddiv+0x582>
 8000864:	e66a      	b.n	800053c <__aeabi_ddiv+0x258>
 8000866:	9a00      	ldr	r2, [sp, #0]
 8000868:	4293      	cmp	r3, r2
 800086a:	d000      	beq.n	800086e <__aeabi_ddiv+0x58a>
 800086c:	e666      	b.n	800053c <__aeabi_ddiv+0x258>
 800086e:	e667      	b.n	8000540 <__aeabi_ddiv+0x25c>
 8000870:	4a16      	ldr	r2, [pc, #88]	; (80008cc <__aeabi_ddiv+0x5e8>)
 8000872:	445a      	add	r2, fp
 8000874:	2a00      	cmp	r2, #0
 8000876:	dc00      	bgt.n	800087a <__aeabi_ddiv+0x596>
 8000878:	e710      	b.n	800069c <__aeabi_ddiv+0x3b8>
 800087a:	2301      	movs	r3, #1
 800087c:	2500      	movs	r5, #0
 800087e:	4498      	add	r8, r3
 8000880:	e667      	b.n	8000552 <__aeabi_ddiv+0x26e>
 8000882:	075d      	lsls	r5, r3, #29
 8000884:	025b      	lsls	r3, r3, #9
 8000886:	0b1c      	lsrs	r4, r3, #12
 8000888:	08d2      	lsrs	r2, r2, #3
 800088a:	2300      	movs	r3, #0
 800088c:	4315      	orrs	r5, r2
 800088e:	e580      	b.n	8000392 <__aeabi_ddiv+0xae>
 8000890:	9800      	ldr	r0, [sp, #0]
 8000892:	3d02      	subs	r5, #2
 8000894:	0042      	lsls	r2, r0, #1
 8000896:	4282      	cmp	r2, r0
 8000898:	41bf      	sbcs	r7, r7
 800089a:	427f      	negs	r7, r7
 800089c:	193c      	adds	r4, r7, r4
 800089e:	1936      	adds	r6, r6, r4
 80008a0:	9200      	str	r2, [sp, #0]
 80008a2:	e7dd      	b.n	8000860 <__aeabi_ddiv+0x57c>
 80008a4:	2480      	movs	r4, #128	; 0x80
 80008a6:	4643      	mov	r3, r8
 80008a8:	0324      	lsls	r4, r4, #12
 80008aa:	431c      	orrs	r4, r3
 80008ac:	0324      	lsls	r4, r4, #12
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__aeabi_ddiv+0x5dc>)
 80008b0:	0b24      	lsrs	r4, r4, #12
 80008b2:	e56e      	b.n	8000392 <__aeabi_ddiv+0xae>
 80008b4:	9a00      	ldr	r2, [sp, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3ea      	bcc.n	8000890 <__aeabi_ddiv+0x5ac>
 80008ba:	0005      	movs	r5, r0
 80008bc:	e7d3      	b.n	8000866 <__aeabi_ddiv+0x582>
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	000007ff 	.word	0x000007ff
 80008c4:	0000043e 	.word	0x0000043e
 80008c8:	0000041e 	.word	0x0000041e
 80008cc:	000003ff 	.word	0x000003ff

080008d0 <__eqdf2>:
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	464e      	mov	r6, r9
 80008d4:	4645      	mov	r5, r8
 80008d6:	46de      	mov	lr, fp
 80008d8:	4657      	mov	r7, sl
 80008da:	4690      	mov	r8, r2
 80008dc:	b5e0      	push	{r5, r6, r7, lr}
 80008de:	0017      	movs	r7, r2
 80008e0:	031a      	lsls	r2, r3, #12
 80008e2:	0b12      	lsrs	r2, r2, #12
 80008e4:	0005      	movs	r5, r0
 80008e6:	4684      	mov	ip, r0
 80008e8:	4819      	ldr	r0, [pc, #100]	; (8000950 <__eqdf2+0x80>)
 80008ea:	030e      	lsls	r6, r1, #12
 80008ec:	004c      	lsls	r4, r1, #1
 80008ee:	4691      	mov	r9, r2
 80008f0:	005a      	lsls	r2, r3, #1
 80008f2:	0fdb      	lsrs	r3, r3, #31
 80008f4:	469b      	mov	fp, r3
 80008f6:	0b36      	lsrs	r6, r6, #12
 80008f8:	0d64      	lsrs	r4, r4, #21
 80008fa:	0fc9      	lsrs	r1, r1, #31
 80008fc:	0d52      	lsrs	r2, r2, #21
 80008fe:	4284      	cmp	r4, r0
 8000900:	d019      	beq.n	8000936 <__eqdf2+0x66>
 8000902:	4282      	cmp	r2, r0
 8000904:	d010      	beq.n	8000928 <__eqdf2+0x58>
 8000906:	2001      	movs	r0, #1
 8000908:	4294      	cmp	r4, r2
 800090a:	d10e      	bne.n	800092a <__eqdf2+0x5a>
 800090c:	454e      	cmp	r6, r9
 800090e:	d10c      	bne.n	800092a <__eqdf2+0x5a>
 8000910:	2001      	movs	r0, #1
 8000912:	45c4      	cmp	ip, r8
 8000914:	d109      	bne.n	800092a <__eqdf2+0x5a>
 8000916:	4559      	cmp	r1, fp
 8000918:	d017      	beq.n	800094a <__eqdf2+0x7a>
 800091a:	2c00      	cmp	r4, #0
 800091c:	d105      	bne.n	800092a <__eqdf2+0x5a>
 800091e:	0030      	movs	r0, r6
 8000920:	4328      	orrs	r0, r5
 8000922:	1e43      	subs	r3, r0, #1
 8000924:	4198      	sbcs	r0, r3
 8000926:	e000      	b.n	800092a <__eqdf2+0x5a>
 8000928:	2001      	movs	r0, #1
 800092a:	bcf0      	pop	{r4, r5, r6, r7}
 800092c:	46bb      	mov	fp, r7
 800092e:	46b2      	mov	sl, r6
 8000930:	46a9      	mov	r9, r5
 8000932:	46a0      	mov	r8, r4
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	0033      	movs	r3, r6
 8000938:	2001      	movs	r0, #1
 800093a:	432b      	orrs	r3, r5
 800093c:	d1f5      	bne.n	800092a <__eqdf2+0x5a>
 800093e:	42a2      	cmp	r2, r4
 8000940:	d1f3      	bne.n	800092a <__eqdf2+0x5a>
 8000942:	464b      	mov	r3, r9
 8000944:	433b      	orrs	r3, r7
 8000946:	d1f0      	bne.n	800092a <__eqdf2+0x5a>
 8000948:	e7e2      	b.n	8000910 <__eqdf2+0x40>
 800094a:	2000      	movs	r0, #0
 800094c:	e7ed      	b.n	800092a <__eqdf2+0x5a>
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	000007ff 	.word	0x000007ff

08000954 <__gedf2>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	4647      	mov	r7, r8
 8000958:	46ce      	mov	lr, r9
 800095a:	0004      	movs	r4, r0
 800095c:	0018      	movs	r0, r3
 800095e:	0016      	movs	r6, r2
 8000960:	031b      	lsls	r3, r3, #12
 8000962:	0b1b      	lsrs	r3, r3, #12
 8000964:	4d2d      	ldr	r5, [pc, #180]	; (8000a1c <__gedf2+0xc8>)
 8000966:	004a      	lsls	r2, r1, #1
 8000968:	4699      	mov	r9, r3
 800096a:	b580      	push	{r7, lr}
 800096c:	0043      	lsls	r3, r0, #1
 800096e:	030f      	lsls	r7, r1, #12
 8000970:	46a4      	mov	ip, r4
 8000972:	46b0      	mov	r8, r6
 8000974:	0b3f      	lsrs	r7, r7, #12
 8000976:	0d52      	lsrs	r2, r2, #21
 8000978:	0fc9      	lsrs	r1, r1, #31
 800097a:	0d5b      	lsrs	r3, r3, #21
 800097c:	0fc0      	lsrs	r0, r0, #31
 800097e:	42aa      	cmp	r2, r5
 8000980:	d021      	beq.n	80009c6 <__gedf2+0x72>
 8000982:	42ab      	cmp	r3, r5
 8000984:	d013      	beq.n	80009ae <__gedf2+0x5a>
 8000986:	2a00      	cmp	r2, #0
 8000988:	d122      	bne.n	80009d0 <__gedf2+0x7c>
 800098a:	433c      	orrs	r4, r7
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <__gedf2+0x42>
 8000990:	464d      	mov	r5, r9
 8000992:	432e      	orrs	r6, r5
 8000994:	d022      	beq.n	80009dc <__gedf2+0x88>
 8000996:	2c00      	cmp	r4, #0
 8000998:	d010      	beq.n	80009bc <__gedf2+0x68>
 800099a:	4281      	cmp	r1, r0
 800099c:	d022      	beq.n	80009e4 <__gedf2+0x90>
 800099e:	2002      	movs	r0, #2
 80009a0:	3901      	subs	r1, #1
 80009a2:	4008      	ands	r0, r1
 80009a4:	3801      	subs	r0, #1
 80009a6:	bcc0      	pop	{r6, r7}
 80009a8:	46b9      	mov	r9, r7
 80009aa:	46b0      	mov	r8, r6
 80009ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ae:	464d      	mov	r5, r9
 80009b0:	432e      	orrs	r6, r5
 80009b2:	d129      	bne.n	8000a08 <__gedf2+0xb4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d1f0      	bne.n	800099a <__gedf2+0x46>
 80009b8:	433c      	orrs	r4, r7
 80009ba:	d1ee      	bne.n	800099a <__gedf2+0x46>
 80009bc:	2800      	cmp	r0, #0
 80009be:	d1f2      	bne.n	80009a6 <__gedf2+0x52>
 80009c0:	2001      	movs	r0, #1
 80009c2:	4240      	negs	r0, r0
 80009c4:	e7ef      	b.n	80009a6 <__gedf2+0x52>
 80009c6:	003d      	movs	r5, r7
 80009c8:	4325      	orrs	r5, r4
 80009ca:	d11d      	bne.n	8000a08 <__gedf2+0xb4>
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d0ee      	beq.n	80009ae <__gedf2+0x5a>
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e2      	bne.n	800099a <__gedf2+0x46>
 80009d4:	464c      	mov	r4, r9
 80009d6:	4326      	orrs	r6, r4
 80009d8:	d1df      	bne.n	800099a <__gedf2+0x46>
 80009da:	e7e0      	b.n	800099e <__gedf2+0x4a>
 80009dc:	2000      	movs	r0, #0
 80009de:	2c00      	cmp	r4, #0
 80009e0:	d0e1      	beq.n	80009a6 <__gedf2+0x52>
 80009e2:	e7dc      	b.n	800099e <__gedf2+0x4a>
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dc0a      	bgt.n	80009fe <__gedf2+0xaa>
 80009e8:	dbe8      	blt.n	80009bc <__gedf2+0x68>
 80009ea:	454f      	cmp	r7, r9
 80009ec:	d8d7      	bhi.n	800099e <__gedf2+0x4a>
 80009ee:	d00e      	beq.n	8000a0e <__gedf2+0xba>
 80009f0:	2000      	movs	r0, #0
 80009f2:	454f      	cmp	r7, r9
 80009f4:	d2d7      	bcs.n	80009a6 <__gedf2+0x52>
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d0e2      	beq.n	80009c0 <__gedf2+0x6c>
 80009fa:	0008      	movs	r0, r1
 80009fc:	e7d3      	b.n	80009a6 <__gedf2+0x52>
 80009fe:	4243      	negs	r3, r0
 8000a00:	4158      	adcs	r0, r3
 8000a02:	0040      	lsls	r0, r0, #1
 8000a04:	3801      	subs	r0, #1
 8000a06:	e7ce      	b.n	80009a6 <__gedf2+0x52>
 8000a08:	2002      	movs	r0, #2
 8000a0a:	4240      	negs	r0, r0
 8000a0c:	e7cb      	b.n	80009a6 <__gedf2+0x52>
 8000a0e:	45c4      	cmp	ip, r8
 8000a10:	d8c5      	bhi.n	800099e <__gedf2+0x4a>
 8000a12:	2000      	movs	r0, #0
 8000a14:	45c4      	cmp	ip, r8
 8000a16:	d2c6      	bcs.n	80009a6 <__gedf2+0x52>
 8000a18:	e7ed      	b.n	80009f6 <__gedf2+0xa2>
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	000007ff 	.word	0x000007ff

08000a20 <__ledf2>:
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	4647      	mov	r7, r8
 8000a24:	46ce      	mov	lr, r9
 8000a26:	0004      	movs	r4, r0
 8000a28:	0018      	movs	r0, r3
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	031b      	lsls	r3, r3, #12
 8000a2e:	0b1b      	lsrs	r3, r3, #12
 8000a30:	4d2c      	ldr	r5, [pc, #176]	; (8000ae4 <__ledf2+0xc4>)
 8000a32:	004a      	lsls	r2, r1, #1
 8000a34:	4699      	mov	r9, r3
 8000a36:	b580      	push	{r7, lr}
 8000a38:	0043      	lsls	r3, r0, #1
 8000a3a:	030f      	lsls	r7, r1, #12
 8000a3c:	46a4      	mov	ip, r4
 8000a3e:	46b0      	mov	r8, r6
 8000a40:	0b3f      	lsrs	r7, r7, #12
 8000a42:	0d52      	lsrs	r2, r2, #21
 8000a44:	0fc9      	lsrs	r1, r1, #31
 8000a46:	0d5b      	lsrs	r3, r3, #21
 8000a48:	0fc0      	lsrs	r0, r0, #31
 8000a4a:	42aa      	cmp	r2, r5
 8000a4c:	d00d      	beq.n	8000a6a <__ledf2+0x4a>
 8000a4e:	42ab      	cmp	r3, r5
 8000a50:	d010      	beq.n	8000a74 <__ledf2+0x54>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d127      	bne.n	8000aa6 <__ledf2+0x86>
 8000a56:	433c      	orrs	r4, r7
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <__ledf2+0x60>
 8000a5c:	464d      	mov	r5, r9
 8000a5e:	432e      	orrs	r6, r5
 8000a60:	d10e      	bne.n	8000a80 <__ledf2+0x60>
 8000a62:	2000      	movs	r0, #0
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d015      	beq.n	8000a94 <__ledf2+0x74>
 8000a68:	e00e      	b.n	8000a88 <__ledf2+0x68>
 8000a6a:	003d      	movs	r5, r7
 8000a6c:	4325      	orrs	r5, r4
 8000a6e:	d110      	bne.n	8000a92 <__ledf2+0x72>
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d118      	bne.n	8000aa6 <__ledf2+0x86>
 8000a74:	464d      	mov	r5, r9
 8000a76:	432e      	orrs	r6, r5
 8000a78:	d10b      	bne.n	8000a92 <__ledf2+0x72>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d102      	bne.n	8000a84 <__ledf2+0x64>
 8000a7e:	433c      	orrs	r4, r7
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d00b      	beq.n	8000a9c <__ledf2+0x7c>
 8000a84:	4281      	cmp	r1, r0
 8000a86:	d014      	beq.n	8000ab2 <__ledf2+0x92>
 8000a88:	2002      	movs	r0, #2
 8000a8a:	3901      	subs	r1, #1
 8000a8c:	4008      	ands	r0, r1
 8000a8e:	3801      	subs	r0, #1
 8000a90:	e000      	b.n	8000a94 <__ledf2+0x74>
 8000a92:	2002      	movs	r0, #2
 8000a94:	bcc0      	pop	{r6, r7}
 8000a96:	46b9      	mov	r9, r7
 8000a98:	46b0      	mov	r8, r6
 8000a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d1f9      	bne.n	8000a94 <__ledf2+0x74>
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	4240      	negs	r0, r0
 8000aa4:	e7f6      	b.n	8000a94 <__ledf2+0x74>
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1ec      	bne.n	8000a84 <__ledf2+0x64>
 8000aaa:	464c      	mov	r4, r9
 8000aac:	4326      	orrs	r6, r4
 8000aae:	d1e9      	bne.n	8000a84 <__ledf2+0x64>
 8000ab0:	e7ea      	b.n	8000a88 <__ledf2+0x68>
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dd04      	ble.n	8000ac0 <__ledf2+0xa0>
 8000ab6:	4243      	negs	r3, r0
 8000ab8:	4158      	adcs	r0, r3
 8000aba:	0040      	lsls	r0, r0, #1
 8000abc:	3801      	subs	r0, #1
 8000abe:	e7e9      	b.n	8000a94 <__ledf2+0x74>
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbeb      	blt.n	8000a9c <__ledf2+0x7c>
 8000ac4:	454f      	cmp	r7, r9
 8000ac6:	d8df      	bhi.n	8000a88 <__ledf2+0x68>
 8000ac8:	d006      	beq.n	8000ad8 <__ledf2+0xb8>
 8000aca:	2000      	movs	r0, #0
 8000acc:	454f      	cmp	r7, r9
 8000ace:	d2e1      	bcs.n	8000a94 <__ledf2+0x74>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	d0e5      	beq.n	8000aa0 <__ledf2+0x80>
 8000ad4:	0008      	movs	r0, r1
 8000ad6:	e7dd      	b.n	8000a94 <__ledf2+0x74>
 8000ad8:	45c4      	cmp	ip, r8
 8000ada:	d8d5      	bhi.n	8000a88 <__ledf2+0x68>
 8000adc:	2000      	movs	r0, #0
 8000ade:	45c4      	cmp	ip, r8
 8000ae0:	d2d8      	bcs.n	8000a94 <__ledf2+0x74>
 8000ae2:	e7f5      	b.n	8000ad0 <__ledf2+0xb0>
 8000ae4:	000007ff 	.word	0x000007ff

08000ae8 <__aeabi_dmul>:
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	4657      	mov	r7, sl
 8000aec:	464e      	mov	r6, r9
 8000aee:	4645      	mov	r5, r8
 8000af0:	46de      	mov	lr, fp
 8000af2:	b5e0      	push	{r5, r6, r7, lr}
 8000af4:	4698      	mov	r8, r3
 8000af6:	030c      	lsls	r4, r1, #12
 8000af8:	004b      	lsls	r3, r1, #1
 8000afa:	0006      	movs	r6, r0
 8000afc:	4692      	mov	sl, r2
 8000afe:	b087      	sub	sp, #28
 8000b00:	0b24      	lsrs	r4, r4, #12
 8000b02:	0d5b      	lsrs	r3, r3, #21
 8000b04:	0fcf      	lsrs	r7, r1, #31
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dmul+0x24>
 8000b0a:	e15c      	b.n	8000dc6 <__aeabi_dmul+0x2de>
 8000b0c:	4ad9      	ldr	r2, [pc, #868]	; (8000e74 <__aeabi_dmul+0x38c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dmul+0x2c>
 8000b12:	e175      	b.n	8000e00 <__aeabi_dmul+0x318>
 8000b14:	0f42      	lsrs	r2, r0, #29
 8000b16:	00e4      	lsls	r4, r4, #3
 8000b18:	4314      	orrs	r4, r2
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	0412      	lsls	r2, r2, #16
 8000b1e:	4314      	orrs	r4, r2
 8000b20:	4ad5      	ldr	r2, [pc, #852]	; (8000e78 <__aeabi_dmul+0x390>)
 8000b22:	00c5      	lsls	r5, r0, #3
 8000b24:	4694      	mov	ip, r2
 8000b26:	4463      	add	r3, ip
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469b      	mov	fp, r3
 8000b30:	4643      	mov	r3, r8
 8000b32:	4642      	mov	r2, r8
 8000b34:	031e      	lsls	r6, r3, #12
 8000b36:	0fd2      	lsrs	r2, r2, #31
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4650      	mov	r0, sl
 8000b3c:	4690      	mov	r8, r2
 8000b3e:	0b36      	lsrs	r6, r6, #12
 8000b40:	0d5b      	lsrs	r3, r3, #21
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dmul+0x5e>
 8000b44:	e120      	b.n	8000d88 <__aeabi_dmul+0x2a0>
 8000b46:	4acb      	ldr	r2, [pc, #812]	; (8000e74 <__aeabi_dmul+0x38c>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dmul+0x66>
 8000b4c:	e162      	b.n	8000e14 <__aeabi_dmul+0x32c>
 8000b4e:	49ca      	ldr	r1, [pc, #808]	; (8000e78 <__aeabi_dmul+0x390>)
 8000b50:	0f42      	lsrs	r2, r0, #29
 8000b52:	468c      	mov	ip, r1
 8000b54:	9900      	ldr	r1, [sp, #0]
 8000b56:	4463      	add	r3, ip
 8000b58:	00f6      	lsls	r6, r6, #3
 8000b5a:	468c      	mov	ip, r1
 8000b5c:	4316      	orrs	r6, r2
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	449c      	add	ip, r3
 8000b62:	0412      	lsls	r2, r2, #16
 8000b64:	4663      	mov	r3, ip
 8000b66:	4316      	orrs	r6, r2
 8000b68:	00c2      	lsls	r2, r0, #3
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	9900      	ldr	r1, [sp, #0]
 8000b70:	4643      	mov	r3, r8
 8000b72:	3101      	adds	r1, #1
 8000b74:	468c      	mov	ip, r1
 8000b76:	4649      	mov	r1, r9
 8000b78:	407b      	eors	r3, r7
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	290f      	cmp	r1, #15
 8000b7e:	d826      	bhi.n	8000bce <__aeabi_dmul+0xe6>
 8000b80:	4bbe      	ldr	r3, [pc, #760]	; (8000e7c <__aeabi_dmul+0x394>)
 8000b82:	0089      	lsls	r1, r1, #2
 8000b84:	5859      	ldr	r1, [r3, r1]
 8000b86:	468f      	mov	pc, r1
 8000b88:	4643      	mov	r3, r8
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	0034      	movs	r4, r6
 8000b8e:	0015      	movs	r5, r2
 8000b90:	4683      	mov	fp, r0
 8000b92:	465b      	mov	r3, fp
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d016      	beq.n	8000bc6 <__aeabi_dmul+0xde>
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dmul+0xb6>
 8000b9c:	e203      	b.n	8000fa6 <__aeabi_dmul+0x4be>
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_dmul+0xbc>
 8000ba2:	e0cd      	b.n	8000d40 <__aeabi_dmul+0x258>
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2500      	movs	r5, #0
 8000baa:	9b01      	ldr	r3, [sp, #4]
 8000bac:	0512      	lsls	r2, r2, #20
 8000bae:	4322      	orrs	r2, r4
 8000bb0:	07db      	lsls	r3, r3, #31
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	0028      	movs	r0, r5
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	b007      	add	sp, #28
 8000bba:	bcf0      	pop	{r4, r5, r6, r7}
 8000bbc:	46bb      	mov	fp, r7
 8000bbe:	46b2      	mov	sl, r6
 8000bc0:	46a9      	mov	r9, r5
 8000bc2:	46a0      	mov	r8, r4
 8000bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	2500      	movs	r5, #0
 8000bca:	4aaa      	ldr	r2, [pc, #680]	; (8000e74 <__aeabi_dmul+0x38c>)
 8000bcc:	e7ed      	b.n	8000baa <__aeabi_dmul+0xc2>
 8000bce:	0c28      	lsrs	r0, r5, #16
 8000bd0:	042d      	lsls	r5, r5, #16
 8000bd2:	0c2d      	lsrs	r5, r5, #16
 8000bd4:	002b      	movs	r3, r5
 8000bd6:	0c11      	lsrs	r1, r2, #16
 8000bd8:	0412      	lsls	r2, r2, #16
 8000bda:	0c12      	lsrs	r2, r2, #16
 8000bdc:	4353      	muls	r3, r2
 8000bde:	4698      	mov	r8, r3
 8000be0:	0013      	movs	r3, r2
 8000be2:	002f      	movs	r7, r5
 8000be4:	4343      	muls	r3, r0
 8000be6:	4699      	mov	r9, r3
 8000be8:	434f      	muls	r7, r1
 8000bea:	444f      	add	r7, r9
 8000bec:	46bb      	mov	fp, r7
 8000bee:	4647      	mov	r7, r8
 8000bf0:	000b      	movs	r3, r1
 8000bf2:	0c3f      	lsrs	r7, r7, #16
 8000bf4:	46ba      	mov	sl, r7
 8000bf6:	4343      	muls	r3, r0
 8000bf8:	44da      	add	sl, fp
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	45d1      	cmp	r9, sl
 8000bfe:	d904      	bls.n	8000c0a <__aeabi_dmul+0x122>
 8000c00:	2780      	movs	r7, #128	; 0x80
 8000c02:	027f      	lsls	r7, r7, #9
 8000c04:	46b9      	mov	r9, r7
 8000c06:	444b      	add	r3, r9
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	4653      	mov	r3, sl
 8000c0c:	0c1b      	lsrs	r3, r3, #16
 8000c0e:	469b      	mov	fp, r3
 8000c10:	4653      	mov	r3, sl
 8000c12:	041f      	lsls	r7, r3, #16
 8000c14:	4643      	mov	r3, r8
 8000c16:	041b      	lsls	r3, r3, #16
 8000c18:	0c1b      	lsrs	r3, r3, #16
 8000c1a:	4698      	mov	r8, r3
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	4443      	add	r3, r8
 8000c20:	9304      	str	r3, [sp, #16]
 8000c22:	0c33      	lsrs	r3, r6, #16
 8000c24:	0436      	lsls	r6, r6, #16
 8000c26:	0c36      	lsrs	r6, r6, #16
 8000c28:	4698      	mov	r8, r3
 8000c2a:	0033      	movs	r3, r6
 8000c2c:	4343      	muls	r3, r0
 8000c2e:	4699      	mov	r9, r3
 8000c30:	4643      	mov	r3, r8
 8000c32:	4343      	muls	r3, r0
 8000c34:	002f      	movs	r7, r5
 8000c36:	469a      	mov	sl, r3
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4377      	muls	r7, r6
 8000c3c:	435d      	muls	r5, r3
 8000c3e:	0c38      	lsrs	r0, r7, #16
 8000c40:	444d      	add	r5, r9
 8000c42:	1945      	adds	r5, r0, r5
 8000c44:	45a9      	cmp	r9, r5
 8000c46:	d903      	bls.n	8000c50 <__aeabi_dmul+0x168>
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	025b      	lsls	r3, r3, #9
 8000c4c:	4699      	mov	r9, r3
 8000c4e:	44ca      	add	sl, r9
 8000c50:	043f      	lsls	r7, r7, #16
 8000c52:	0c28      	lsrs	r0, r5, #16
 8000c54:	0c3f      	lsrs	r7, r7, #16
 8000c56:	042d      	lsls	r5, r5, #16
 8000c58:	19ed      	adds	r5, r5, r7
 8000c5a:	0c27      	lsrs	r7, r4, #16
 8000c5c:	0424      	lsls	r4, r4, #16
 8000c5e:	0c24      	lsrs	r4, r4, #16
 8000c60:	0003      	movs	r3, r0
 8000c62:	0020      	movs	r0, r4
 8000c64:	4350      	muls	r0, r2
 8000c66:	437a      	muls	r2, r7
 8000c68:	4691      	mov	r9, r2
 8000c6a:	003a      	movs	r2, r7
 8000c6c:	4453      	add	r3, sl
 8000c6e:	9305      	str	r3, [sp, #20]
 8000c70:	0c03      	lsrs	r3, r0, #16
 8000c72:	469a      	mov	sl, r3
 8000c74:	434a      	muls	r2, r1
 8000c76:	4361      	muls	r1, r4
 8000c78:	4449      	add	r1, r9
 8000c7a:	4451      	add	r1, sl
 8000c7c:	44ab      	add	fp, r5
 8000c7e:	4589      	cmp	r9, r1
 8000c80:	d903      	bls.n	8000c8a <__aeabi_dmul+0x1a2>
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	025b      	lsls	r3, r3, #9
 8000c86:	4699      	mov	r9, r3
 8000c88:	444a      	add	r2, r9
 8000c8a:	0400      	lsls	r0, r0, #16
 8000c8c:	0c0b      	lsrs	r3, r1, #16
 8000c8e:	0c00      	lsrs	r0, r0, #16
 8000c90:	0409      	lsls	r1, r1, #16
 8000c92:	1809      	adds	r1, r1, r0
 8000c94:	0020      	movs	r0, r4
 8000c96:	4699      	mov	r9, r3
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4370      	muls	r0, r6
 8000c9c:	435c      	muls	r4, r3
 8000c9e:	437e      	muls	r6, r7
 8000ca0:	435f      	muls	r7, r3
 8000ca2:	0c03      	lsrs	r3, r0, #16
 8000ca4:	4698      	mov	r8, r3
 8000ca6:	19a4      	adds	r4, r4, r6
 8000ca8:	4444      	add	r4, r8
 8000caa:	444a      	add	r2, r9
 8000cac:	9703      	str	r7, [sp, #12]
 8000cae:	42a6      	cmp	r6, r4
 8000cb0:	d904      	bls.n	8000cbc <__aeabi_dmul+0x1d4>
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	4698      	mov	r8, r3
 8000cb8:	4447      	add	r7, r8
 8000cba:	9703      	str	r7, [sp, #12]
 8000cbc:	0423      	lsls	r3, r4, #16
 8000cbe:	9e02      	ldr	r6, [sp, #8]
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	9b05      	ldr	r3, [sp, #20]
 8000cc4:	445e      	add	r6, fp
 8000cc6:	4698      	mov	r8, r3
 8000cc8:	42ae      	cmp	r6, r5
 8000cca:	41ad      	sbcs	r5, r5
 8000ccc:	1876      	adds	r6, r6, r1
 8000cce:	428e      	cmp	r6, r1
 8000cd0:	4189      	sbcs	r1, r1
 8000cd2:	0400      	lsls	r0, r0, #16
 8000cd4:	0c00      	lsrs	r0, r0, #16
 8000cd6:	4450      	add	r0, sl
 8000cd8:	4440      	add	r0, r8
 8000cda:	426d      	negs	r5, r5
 8000cdc:	1947      	adds	r7, r0, r5
 8000cde:	46b8      	mov	r8, r7
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	4249      	negs	r1, r1
 8000ce4:	4689      	mov	r9, r1
 8000ce6:	44c3      	add	fp, r8
 8000ce8:	44d9      	add	r9, fp
 8000cea:	4298      	cmp	r0, r3
 8000cec:	4180      	sbcs	r0, r0
 8000cee:	45a8      	cmp	r8, r5
 8000cf0:	41ad      	sbcs	r5, r5
 8000cf2:	4593      	cmp	fp, r2
 8000cf4:	4192      	sbcs	r2, r2
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	4189      	sbcs	r1, r1
 8000cfa:	426d      	negs	r5, r5
 8000cfc:	4240      	negs	r0, r0
 8000cfe:	4328      	orrs	r0, r5
 8000d00:	0c24      	lsrs	r4, r4, #16
 8000d02:	4252      	negs	r2, r2
 8000d04:	4249      	negs	r1, r1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	9b03      	ldr	r3, [sp, #12]
 8000d0a:	1900      	adds	r0, r0, r4
 8000d0c:	1880      	adds	r0, r0, r2
 8000d0e:	18c7      	adds	r7, r0, r3
 8000d10:	464b      	mov	r3, r9
 8000d12:	0ddc      	lsrs	r4, r3, #23
 8000d14:	9b04      	ldr	r3, [sp, #16]
 8000d16:	0275      	lsls	r5, r6, #9
 8000d18:	431d      	orrs	r5, r3
 8000d1a:	1e6a      	subs	r2, r5, #1
 8000d1c:	4195      	sbcs	r5, r2
 8000d1e:	464b      	mov	r3, r9
 8000d20:	0df6      	lsrs	r6, r6, #23
 8000d22:	027f      	lsls	r7, r7, #9
 8000d24:	4335      	orrs	r5, r6
 8000d26:	025a      	lsls	r2, r3, #9
 8000d28:	433c      	orrs	r4, r7
 8000d2a:	4315      	orrs	r5, r2
 8000d2c:	01fb      	lsls	r3, r7, #7
 8000d2e:	d400      	bmi.n	8000d32 <__aeabi_dmul+0x24a>
 8000d30:	e11c      	b.n	8000f6c <__aeabi_dmul+0x484>
 8000d32:	2101      	movs	r1, #1
 8000d34:	086a      	lsrs	r2, r5, #1
 8000d36:	400d      	ands	r5, r1
 8000d38:	4315      	orrs	r5, r2
 8000d3a:	07e2      	lsls	r2, r4, #31
 8000d3c:	4315      	orrs	r5, r2
 8000d3e:	0864      	lsrs	r4, r4, #1
 8000d40:	494f      	ldr	r1, [pc, #316]	; (8000e80 <__aeabi_dmul+0x398>)
 8000d42:	4461      	add	r1, ip
 8000d44:	2900      	cmp	r1, #0
 8000d46:	dc00      	bgt.n	8000d4a <__aeabi_dmul+0x262>
 8000d48:	e0b0      	b.n	8000eac <__aeabi_dmul+0x3c4>
 8000d4a:	076b      	lsls	r3, r5, #29
 8000d4c:	d009      	beq.n	8000d62 <__aeabi_dmul+0x27a>
 8000d4e:	220f      	movs	r2, #15
 8000d50:	402a      	ands	r2, r5
 8000d52:	2a04      	cmp	r2, #4
 8000d54:	d005      	beq.n	8000d62 <__aeabi_dmul+0x27a>
 8000d56:	1d2a      	adds	r2, r5, #4
 8000d58:	42aa      	cmp	r2, r5
 8000d5a:	41ad      	sbcs	r5, r5
 8000d5c:	426d      	negs	r5, r5
 8000d5e:	1964      	adds	r4, r4, r5
 8000d60:	0015      	movs	r5, r2
 8000d62:	01e3      	lsls	r3, r4, #7
 8000d64:	d504      	bpl.n	8000d70 <__aeabi_dmul+0x288>
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <__aeabi_dmul+0x39c>)
 8000d6a:	00c9      	lsls	r1, r1, #3
 8000d6c:	4014      	ands	r4, r2
 8000d6e:	4461      	add	r1, ip
 8000d70:	4a45      	ldr	r2, [pc, #276]	; (8000e88 <__aeabi_dmul+0x3a0>)
 8000d72:	4291      	cmp	r1, r2
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_dmul+0x290>
 8000d76:	e726      	b.n	8000bc6 <__aeabi_dmul+0xde>
 8000d78:	0762      	lsls	r2, r4, #29
 8000d7a:	08ed      	lsrs	r5, r5, #3
 8000d7c:	0264      	lsls	r4, r4, #9
 8000d7e:	0549      	lsls	r1, r1, #21
 8000d80:	4315      	orrs	r5, r2
 8000d82:	0b24      	lsrs	r4, r4, #12
 8000d84:	0d4a      	lsrs	r2, r1, #21
 8000d86:	e710      	b.n	8000baa <__aeabi_dmul+0xc2>
 8000d88:	4652      	mov	r2, sl
 8000d8a:	4332      	orrs	r2, r6
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_dmul+0x2a8>
 8000d8e:	e07f      	b.n	8000e90 <__aeabi_dmul+0x3a8>
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dmul+0x2ae>
 8000d94:	e0dc      	b.n	8000f50 <__aeabi_dmul+0x468>
 8000d96:	0030      	movs	r0, r6
 8000d98:	f000 fd00 	bl	800179c <__clzsi2>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	3a0b      	subs	r2, #11
 8000da0:	231d      	movs	r3, #29
 8000da2:	0001      	movs	r1, r0
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	4652      	mov	r2, sl
 8000da8:	3908      	subs	r1, #8
 8000daa:	40da      	lsrs	r2, r3
 8000dac:	408e      	lsls	r6, r1
 8000dae:	4316      	orrs	r6, r2
 8000db0:	4652      	mov	r2, sl
 8000db2:	408a      	lsls	r2, r1
 8000db4:	9b00      	ldr	r3, [sp, #0]
 8000db6:	4935      	ldr	r1, [pc, #212]	; (8000e8c <__aeabi_dmul+0x3a4>)
 8000db8:	1a18      	subs	r0, r3, r0
 8000dba:	0003      	movs	r3, r0
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	4463      	add	r3, ip
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	e6d3      	b.n	8000b6e <__aeabi_dmul+0x86>
 8000dc6:	0025      	movs	r5, r4
 8000dc8:	4305      	orrs	r5, r0
 8000dca:	d04a      	beq.n	8000e62 <__aeabi_dmul+0x37a>
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dmul+0x2ea>
 8000dd0:	e0b0      	b.n	8000f34 <__aeabi_dmul+0x44c>
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f000 fce2 	bl	800179c <__clzsi2>
 8000dd8:	0001      	movs	r1, r0
 8000dda:	0002      	movs	r2, r0
 8000ddc:	390b      	subs	r1, #11
 8000dde:	231d      	movs	r3, #29
 8000de0:	0010      	movs	r0, r2
 8000de2:	1a5b      	subs	r3, r3, r1
 8000de4:	0031      	movs	r1, r6
 8000de6:	0035      	movs	r5, r6
 8000de8:	3808      	subs	r0, #8
 8000dea:	4084      	lsls	r4, r0
 8000dec:	40d9      	lsrs	r1, r3
 8000dee:	4085      	lsls	r5, r0
 8000df0:	430c      	orrs	r4, r1
 8000df2:	4826      	ldr	r0, [pc, #152]	; (8000e8c <__aeabi_dmul+0x3a4>)
 8000df4:	1a83      	subs	r3, r0, r2
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	469b      	mov	fp, r3
 8000dfe:	e697      	b.n	8000b30 <__aeabi_dmul+0x48>
 8000e00:	0005      	movs	r5, r0
 8000e02:	4325      	orrs	r5, r4
 8000e04:	d126      	bne.n	8000e54 <__aeabi_dmul+0x36c>
 8000e06:	2208      	movs	r2, #8
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	4691      	mov	r9, r2
 8000e10:	469b      	mov	fp, r3
 8000e12:	e68d      	b.n	8000b30 <__aeabi_dmul+0x48>
 8000e14:	4652      	mov	r2, sl
 8000e16:	9b00      	ldr	r3, [sp, #0]
 8000e18:	4332      	orrs	r2, r6
 8000e1a:	d110      	bne.n	8000e3e <__aeabi_dmul+0x356>
 8000e1c:	4915      	ldr	r1, [pc, #84]	; (8000e74 <__aeabi_dmul+0x38c>)
 8000e1e:	2600      	movs	r6, #0
 8000e20:	468c      	mov	ip, r1
 8000e22:	4463      	add	r3, ip
 8000e24:	4649      	mov	r1, r9
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2302      	movs	r3, #2
 8000e2a:	4319      	orrs	r1, r3
 8000e2c:	4689      	mov	r9, r1
 8000e2e:	2002      	movs	r0, #2
 8000e30:	e69d      	b.n	8000b6e <__aeabi_dmul+0x86>
 8000e32:	465b      	mov	r3, fp
 8000e34:	9701      	str	r7, [sp, #4]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dmul+0x354>
 8000e3a:	e6ad      	b.n	8000b98 <__aeabi_dmul+0xb0>
 8000e3c:	e6c3      	b.n	8000bc6 <__aeabi_dmul+0xde>
 8000e3e:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <__aeabi_dmul+0x38c>)
 8000e40:	2003      	movs	r0, #3
 8000e42:	4694      	mov	ip, r2
 8000e44:	4463      	add	r3, ip
 8000e46:	464a      	mov	r2, r9
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	4691      	mov	r9, r2
 8000e50:	4652      	mov	r2, sl
 8000e52:	e68c      	b.n	8000b6e <__aeabi_dmul+0x86>
 8000e54:	220c      	movs	r2, #12
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2303      	movs	r3, #3
 8000e5a:	0005      	movs	r5, r0
 8000e5c:	4691      	mov	r9, r2
 8000e5e:	469b      	mov	fp, r3
 8000e60:	e666      	b.n	8000b30 <__aeabi_dmul+0x48>
 8000e62:	2304      	movs	r3, #4
 8000e64:	4699      	mov	r9, r3
 8000e66:	2300      	movs	r3, #0
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	469b      	mov	fp, r3
 8000e70:	e65e      	b.n	8000b30 <__aeabi_dmul+0x48>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	fffffc01 	.word	0xfffffc01
 8000e7c:	08005f44 	.word	0x08005f44
 8000e80:	000003ff 	.word	0x000003ff
 8000e84:	feffffff 	.word	0xfeffffff
 8000e88:	000007fe 	.word	0x000007fe
 8000e8c:	fffffc0d 	.word	0xfffffc0d
 8000e90:	4649      	mov	r1, r9
 8000e92:	2301      	movs	r3, #1
 8000e94:	4319      	orrs	r1, r3
 8000e96:	4689      	mov	r9, r1
 8000e98:	2600      	movs	r6, #0
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	e667      	b.n	8000b6e <__aeabi_dmul+0x86>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2480      	movs	r4, #128	; 0x80
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	4a43      	ldr	r2, [pc, #268]	; (8000fb4 <__aeabi_dmul+0x4cc>)
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	0324      	lsls	r4, r4, #12
 8000eaa:	e67e      	b.n	8000baa <__aeabi_dmul+0xc2>
 8000eac:	2001      	movs	r0, #1
 8000eae:	1a40      	subs	r0, r0, r1
 8000eb0:	2838      	cmp	r0, #56	; 0x38
 8000eb2:	dd00      	ble.n	8000eb6 <__aeabi_dmul+0x3ce>
 8000eb4:	e676      	b.n	8000ba4 <__aeabi_dmul+0xbc>
 8000eb6:	281f      	cmp	r0, #31
 8000eb8:	dd5b      	ble.n	8000f72 <__aeabi_dmul+0x48a>
 8000eba:	221f      	movs	r2, #31
 8000ebc:	0023      	movs	r3, r4
 8000ebe:	4252      	negs	r2, r2
 8000ec0:	1a51      	subs	r1, r2, r1
 8000ec2:	40cb      	lsrs	r3, r1
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	2820      	cmp	r0, #32
 8000ec8:	d003      	beq.n	8000ed2 <__aeabi_dmul+0x3ea>
 8000eca:	4a3b      	ldr	r2, [pc, #236]	; (8000fb8 <__aeabi_dmul+0x4d0>)
 8000ecc:	4462      	add	r2, ip
 8000ece:	4094      	lsls	r4, r2
 8000ed0:	4325      	orrs	r5, r4
 8000ed2:	1e6a      	subs	r2, r5, #1
 8000ed4:	4195      	sbcs	r5, r2
 8000ed6:	002a      	movs	r2, r5
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	2107      	movs	r1, #7
 8000edc:	000d      	movs	r5, r1
 8000ede:	2400      	movs	r4, #0
 8000ee0:	4015      	ands	r5, r2
 8000ee2:	4211      	tst	r1, r2
 8000ee4:	d05b      	beq.n	8000f9e <__aeabi_dmul+0x4b6>
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	2400      	movs	r4, #0
 8000eea:	4011      	ands	r1, r2
 8000eec:	2904      	cmp	r1, #4
 8000eee:	d053      	beq.n	8000f98 <__aeabi_dmul+0x4b0>
 8000ef0:	1d11      	adds	r1, r2, #4
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	4192      	sbcs	r2, r2
 8000ef6:	4252      	negs	r2, r2
 8000ef8:	18a4      	adds	r4, r4, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	0223      	lsls	r3, r4, #8
 8000efe:	d54b      	bpl.n	8000f98 <__aeabi_dmul+0x4b0>
 8000f00:	2201      	movs	r2, #1
 8000f02:	2400      	movs	r4, #0
 8000f04:	2500      	movs	r5, #0
 8000f06:	e650      	b.n	8000baa <__aeabi_dmul+0xc2>
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	031b      	lsls	r3, r3, #12
 8000f0c:	421c      	tst	r4, r3
 8000f0e:	d009      	beq.n	8000f24 <__aeabi_dmul+0x43c>
 8000f10:	421e      	tst	r6, r3
 8000f12:	d107      	bne.n	8000f24 <__aeabi_dmul+0x43c>
 8000f14:	4333      	orrs	r3, r6
 8000f16:	031c      	lsls	r4, r3, #12
 8000f18:	4643      	mov	r3, r8
 8000f1a:	0015      	movs	r5, r2
 8000f1c:	0b24      	lsrs	r4, r4, #12
 8000f1e:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <__aeabi_dmul+0x4cc>)
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	e642      	b.n	8000baa <__aeabi_dmul+0xc2>
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	0312      	lsls	r2, r2, #12
 8000f28:	4314      	orrs	r4, r2
 8000f2a:	0324      	lsls	r4, r4, #12
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <__aeabi_dmul+0x4cc>)
 8000f2e:	0b24      	lsrs	r4, r4, #12
 8000f30:	9701      	str	r7, [sp, #4]
 8000f32:	e63a      	b.n	8000baa <__aeabi_dmul+0xc2>
 8000f34:	f000 fc32 	bl	800179c <__clzsi2>
 8000f38:	0001      	movs	r1, r0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	3115      	adds	r1, #21
 8000f3e:	3220      	adds	r2, #32
 8000f40:	291c      	cmp	r1, #28
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_dmul+0x45e>
 8000f44:	e74b      	b.n	8000dde <__aeabi_dmul+0x2f6>
 8000f46:	0034      	movs	r4, r6
 8000f48:	3808      	subs	r0, #8
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	4084      	lsls	r4, r0
 8000f4e:	e750      	b.n	8000df2 <__aeabi_dmul+0x30a>
 8000f50:	f000 fc24 	bl	800179c <__clzsi2>
 8000f54:	0003      	movs	r3, r0
 8000f56:	001a      	movs	r2, r3
 8000f58:	3215      	adds	r2, #21
 8000f5a:	3020      	adds	r0, #32
 8000f5c:	2a1c      	cmp	r2, #28
 8000f5e:	dc00      	bgt.n	8000f62 <__aeabi_dmul+0x47a>
 8000f60:	e71e      	b.n	8000da0 <__aeabi_dmul+0x2b8>
 8000f62:	4656      	mov	r6, sl
 8000f64:	3b08      	subs	r3, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	409e      	lsls	r6, r3
 8000f6a:	e723      	b.n	8000db4 <__aeabi_dmul+0x2cc>
 8000f6c:	9b00      	ldr	r3, [sp, #0]
 8000f6e:	469c      	mov	ip, r3
 8000f70:	e6e6      	b.n	8000d40 <__aeabi_dmul+0x258>
 8000f72:	4912      	ldr	r1, [pc, #72]	; (8000fbc <__aeabi_dmul+0x4d4>)
 8000f74:	0022      	movs	r2, r4
 8000f76:	4461      	add	r1, ip
 8000f78:	002e      	movs	r6, r5
 8000f7a:	408d      	lsls	r5, r1
 8000f7c:	408a      	lsls	r2, r1
 8000f7e:	40c6      	lsrs	r6, r0
 8000f80:	1e69      	subs	r1, r5, #1
 8000f82:	418d      	sbcs	r5, r1
 8000f84:	4332      	orrs	r2, r6
 8000f86:	432a      	orrs	r2, r5
 8000f88:	40c4      	lsrs	r4, r0
 8000f8a:	0753      	lsls	r3, r2, #29
 8000f8c:	d0b6      	beq.n	8000efc <__aeabi_dmul+0x414>
 8000f8e:	210f      	movs	r1, #15
 8000f90:	4011      	ands	r1, r2
 8000f92:	2904      	cmp	r1, #4
 8000f94:	d1ac      	bne.n	8000ef0 <__aeabi_dmul+0x408>
 8000f96:	e7b1      	b.n	8000efc <__aeabi_dmul+0x414>
 8000f98:	0765      	lsls	r5, r4, #29
 8000f9a:	0264      	lsls	r4, r4, #9
 8000f9c:	0b24      	lsrs	r4, r4, #12
 8000f9e:	08d2      	lsrs	r2, r2, #3
 8000fa0:	4315      	orrs	r5, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	e601      	b.n	8000baa <__aeabi_dmul+0xc2>
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	0312      	lsls	r2, r2, #12
 8000faa:	4314      	orrs	r4, r2
 8000fac:	0324      	lsls	r4, r4, #12
 8000fae:	4a01      	ldr	r2, [pc, #4]	; (8000fb4 <__aeabi_dmul+0x4cc>)
 8000fb0:	0b24      	lsrs	r4, r4, #12
 8000fb2:	e5fa      	b.n	8000baa <__aeabi_dmul+0xc2>
 8000fb4:	000007ff 	.word	0x000007ff
 8000fb8:	0000043e 	.word	0x0000043e
 8000fbc:	0000041e 	.word	0x0000041e

08000fc0 <__aeabi_dsub>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	4657      	mov	r7, sl
 8000fc4:	464e      	mov	r6, r9
 8000fc6:	4645      	mov	r5, r8
 8000fc8:	46de      	mov	lr, fp
 8000fca:	b5e0      	push	{r5, r6, r7, lr}
 8000fcc:	001e      	movs	r6, r3
 8000fce:	0017      	movs	r7, r2
 8000fd0:	004a      	lsls	r2, r1, #1
 8000fd2:	030b      	lsls	r3, r1, #12
 8000fd4:	0d52      	lsrs	r2, r2, #21
 8000fd6:	0a5b      	lsrs	r3, r3, #9
 8000fd8:	4690      	mov	r8, r2
 8000fda:	0f42      	lsrs	r2, r0, #29
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	0fcd      	lsrs	r5, r1, #31
 8000fe0:	4ccd      	ldr	r4, [pc, #820]	; (8001318 <__aeabi_dsub+0x358>)
 8000fe2:	0331      	lsls	r1, r6, #12
 8000fe4:	00c3      	lsls	r3, r0, #3
 8000fe6:	4694      	mov	ip, r2
 8000fe8:	0070      	lsls	r0, r6, #1
 8000fea:	0f7a      	lsrs	r2, r7, #29
 8000fec:	0a49      	lsrs	r1, r1, #9
 8000fee:	00ff      	lsls	r7, r7, #3
 8000ff0:	469a      	mov	sl, r3
 8000ff2:	46b9      	mov	r9, r7
 8000ff4:	0d40      	lsrs	r0, r0, #21
 8000ff6:	0ff6      	lsrs	r6, r6, #31
 8000ff8:	4311      	orrs	r1, r2
 8000ffa:	42a0      	cmp	r0, r4
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dsub+0x40>
 8000ffe:	e0b1      	b.n	8001164 <__aeabi_dsub+0x1a4>
 8001000:	2201      	movs	r2, #1
 8001002:	4056      	eors	r6, r2
 8001004:	46b3      	mov	fp, r6
 8001006:	42b5      	cmp	r5, r6
 8001008:	d100      	bne.n	800100c <__aeabi_dsub+0x4c>
 800100a:	e088      	b.n	800111e <__aeabi_dsub+0x15e>
 800100c:	4642      	mov	r2, r8
 800100e:	1a12      	subs	r2, r2, r0
 8001010:	2a00      	cmp	r2, #0
 8001012:	dc00      	bgt.n	8001016 <__aeabi_dsub+0x56>
 8001014:	e0ae      	b.n	8001174 <__aeabi_dsub+0x1b4>
 8001016:	2800      	cmp	r0, #0
 8001018:	d100      	bne.n	800101c <__aeabi_dsub+0x5c>
 800101a:	e0c1      	b.n	80011a0 <__aeabi_dsub+0x1e0>
 800101c:	48be      	ldr	r0, [pc, #760]	; (8001318 <__aeabi_dsub+0x358>)
 800101e:	4580      	cmp	r8, r0
 8001020:	d100      	bne.n	8001024 <__aeabi_dsub+0x64>
 8001022:	e151      	b.n	80012c8 <__aeabi_dsub+0x308>
 8001024:	2080      	movs	r0, #128	; 0x80
 8001026:	0400      	lsls	r0, r0, #16
 8001028:	4301      	orrs	r1, r0
 800102a:	2a38      	cmp	r2, #56	; 0x38
 800102c:	dd00      	ble.n	8001030 <__aeabi_dsub+0x70>
 800102e:	e17b      	b.n	8001328 <__aeabi_dsub+0x368>
 8001030:	2a1f      	cmp	r2, #31
 8001032:	dd00      	ble.n	8001036 <__aeabi_dsub+0x76>
 8001034:	e1ee      	b.n	8001414 <__aeabi_dsub+0x454>
 8001036:	2020      	movs	r0, #32
 8001038:	003e      	movs	r6, r7
 800103a:	1a80      	subs	r0, r0, r2
 800103c:	000c      	movs	r4, r1
 800103e:	40d6      	lsrs	r6, r2
 8001040:	40d1      	lsrs	r1, r2
 8001042:	4087      	lsls	r7, r0
 8001044:	4662      	mov	r2, ip
 8001046:	4084      	lsls	r4, r0
 8001048:	1a52      	subs	r2, r2, r1
 800104a:	1e78      	subs	r0, r7, #1
 800104c:	4187      	sbcs	r7, r0
 800104e:	4694      	mov	ip, r2
 8001050:	4334      	orrs	r4, r6
 8001052:	4327      	orrs	r7, r4
 8001054:	1bdc      	subs	r4, r3, r7
 8001056:	42a3      	cmp	r3, r4
 8001058:	419b      	sbcs	r3, r3
 800105a:	4662      	mov	r2, ip
 800105c:	425b      	negs	r3, r3
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4699      	mov	r9, r3
 8001062:	464b      	mov	r3, r9
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	d400      	bmi.n	800106a <__aeabi_dsub+0xaa>
 8001068:	e118      	b.n	800129c <__aeabi_dsub+0x2dc>
 800106a:	464b      	mov	r3, r9
 800106c:	0258      	lsls	r0, r3, #9
 800106e:	0a43      	lsrs	r3, r0, #9
 8001070:	4699      	mov	r9, r3
 8001072:	464b      	mov	r3, r9
 8001074:	2b00      	cmp	r3, #0
 8001076:	d100      	bne.n	800107a <__aeabi_dsub+0xba>
 8001078:	e137      	b.n	80012ea <__aeabi_dsub+0x32a>
 800107a:	4648      	mov	r0, r9
 800107c:	f000 fb8e 	bl	800179c <__clzsi2>
 8001080:	0001      	movs	r1, r0
 8001082:	3908      	subs	r1, #8
 8001084:	2320      	movs	r3, #32
 8001086:	0022      	movs	r2, r4
 8001088:	4648      	mov	r0, r9
 800108a:	1a5b      	subs	r3, r3, r1
 800108c:	40da      	lsrs	r2, r3
 800108e:	4088      	lsls	r0, r1
 8001090:	408c      	lsls	r4, r1
 8001092:	4643      	mov	r3, r8
 8001094:	4310      	orrs	r0, r2
 8001096:	4588      	cmp	r8, r1
 8001098:	dd00      	ble.n	800109c <__aeabi_dsub+0xdc>
 800109a:	e136      	b.n	800130a <__aeabi_dsub+0x34a>
 800109c:	1ac9      	subs	r1, r1, r3
 800109e:	1c4b      	adds	r3, r1, #1
 80010a0:	2b1f      	cmp	r3, #31
 80010a2:	dd00      	ble.n	80010a6 <__aeabi_dsub+0xe6>
 80010a4:	e0ea      	b.n	800127c <__aeabi_dsub+0x2bc>
 80010a6:	2220      	movs	r2, #32
 80010a8:	0026      	movs	r6, r4
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	0001      	movs	r1, r0
 80010ae:	4094      	lsls	r4, r2
 80010b0:	40de      	lsrs	r6, r3
 80010b2:	40d8      	lsrs	r0, r3
 80010b4:	2300      	movs	r3, #0
 80010b6:	4091      	lsls	r1, r2
 80010b8:	1e62      	subs	r2, r4, #1
 80010ba:	4194      	sbcs	r4, r2
 80010bc:	4681      	mov	r9, r0
 80010be:	4698      	mov	r8, r3
 80010c0:	4331      	orrs	r1, r6
 80010c2:	430c      	orrs	r4, r1
 80010c4:	0763      	lsls	r3, r4, #29
 80010c6:	d009      	beq.n	80010dc <__aeabi_dsub+0x11c>
 80010c8:	230f      	movs	r3, #15
 80010ca:	4023      	ands	r3, r4
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d005      	beq.n	80010dc <__aeabi_dsub+0x11c>
 80010d0:	1d23      	adds	r3, r4, #4
 80010d2:	42a3      	cmp	r3, r4
 80010d4:	41a4      	sbcs	r4, r4
 80010d6:	4264      	negs	r4, r4
 80010d8:	44a1      	add	r9, r4
 80010da:	001c      	movs	r4, r3
 80010dc:	464b      	mov	r3, r9
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	d400      	bmi.n	80010e4 <__aeabi_dsub+0x124>
 80010e2:	e0de      	b.n	80012a2 <__aeabi_dsub+0x2e2>
 80010e4:	4641      	mov	r1, r8
 80010e6:	4b8c      	ldr	r3, [pc, #560]	; (8001318 <__aeabi_dsub+0x358>)
 80010e8:	3101      	adds	r1, #1
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dsub+0x130>
 80010ee:	e0e7      	b.n	80012c0 <__aeabi_dsub+0x300>
 80010f0:	464b      	mov	r3, r9
 80010f2:	488a      	ldr	r0, [pc, #552]	; (800131c <__aeabi_dsub+0x35c>)
 80010f4:	08e4      	lsrs	r4, r4, #3
 80010f6:	4003      	ands	r3, r0
 80010f8:	0018      	movs	r0, r3
 80010fa:	0549      	lsls	r1, r1, #21
 80010fc:	075b      	lsls	r3, r3, #29
 80010fe:	0240      	lsls	r0, r0, #9
 8001100:	4323      	orrs	r3, r4
 8001102:	0d4a      	lsrs	r2, r1, #21
 8001104:	0b04      	lsrs	r4, r0, #12
 8001106:	0512      	lsls	r2, r2, #20
 8001108:	07ed      	lsls	r5, r5, #31
 800110a:	4322      	orrs	r2, r4
 800110c:	432a      	orrs	r2, r5
 800110e:	0018      	movs	r0, r3
 8001110:	0011      	movs	r1, r2
 8001112:	bcf0      	pop	{r4, r5, r6, r7}
 8001114:	46bb      	mov	fp, r7
 8001116:	46b2      	mov	sl, r6
 8001118:	46a9      	mov	r9, r5
 800111a:	46a0      	mov	r8, r4
 800111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800111e:	4642      	mov	r2, r8
 8001120:	1a12      	subs	r2, r2, r0
 8001122:	2a00      	cmp	r2, #0
 8001124:	dd52      	ble.n	80011cc <__aeabi_dsub+0x20c>
 8001126:	2800      	cmp	r0, #0
 8001128:	d100      	bne.n	800112c <__aeabi_dsub+0x16c>
 800112a:	e09c      	b.n	8001266 <__aeabi_dsub+0x2a6>
 800112c:	45a0      	cmp	r8, r4
 800112e:	d100      	bne.n	8001132 <__aeabi_dsub+0x172>
 8001130:	e0ca      	b.n	80012c8 <__aeabi_dsub+0x308>
 8001132:	2080      	movs	r0, #128	; 0x80
 8001134:	0400      	lsls	r0, r0, #16
 8001136:	4301      	orrs	r1, r0
 8001138:	2a38      	cmp	r2, #56	; 0x38
 800113a:	dd00      	ble.n	800113e <__aeabi_dsub+0x17e>
 800113c:	e149      	b.n	80013d2 <__aeabi_dsub+0x412>
 800113e:	2a1f      	cmp	r2, #31
 8001140:	dc00      	bgt.n	8001144 <__aeabi_dsub+0x184>
 8001142:	e197      	b.n	8001474 <__aeabi_dsub+0x4b4>
 8001144:	0010      	movs	r0, r2
 8001146:	000e      	movs	r6, r1
 8001148:	3820      	subs	r0, #32
 800114a:	40c6      	lsrs	r6, r0
 800114c:	2a20      	cmp	r2, #32
 800114e:	d004      	beq.n	800115a <__aeabi_dsub+0x19a>
 8001150:	2040      	movs	r0, #64	; 0x40
 8001152:	1a82      	subs	r2, r0, r2
 8001154:	4091      	lsls	r1, r2
 8001156:	430f      	orrs	r7, r1
 8001158:	46b9      	mov	r9, r7
 800115a:	464c      	mov	r4, r9
 800115c:	1e62      	subs	r2, r4, #1
 800115e:	4194      	sbcs	r4, r2
 8001160:	4334      	orrs	r4, r6
 8001162:	e13a      	b.n	80013da <__aeabi_dsub+0x41a>
 8001164:	000a      	movs	r2, r1
 8001166:	433a      	orrs	r2, r7
 8001168:	d028      	beq.n	80011bc <__aeabi_dsub+0x1fc>
 800116a:	46b3      	mov	fp, r6
 800116c:	42b5      	cmp	r5, r6
 800116e:	d02b      	beq.n	80011c8 <__aeabi_dsub+0x208>
 8001170:	4a6b      	ldr	r2, [pc, #428]	; (8001320 <__aeabi_dsub+0x360>)
 8001172:	4442      	add	r2, r8
 8001174:	2a00      	cmp	r2, #0
 8001176:	d05d      	beq.n	8001234 <__aeabi_dsub+0x274>
 8001178:	4642      	mov	r2, r8
 800117a:	4644      	mov	r4, r8
 800117c:	1a82      	subs	r2, r0, r2
 800117e:	2c00      	cmp	r4, #0
 8001180:	d000      	beq.n	8001184 <__aeabi_dsub+0x1c4>
 8001182:	e0f5      	b.n	8001370 <__aeabi_dsub+0x3b0>
 8001184:	4665      	mov	r5, ip
 8001186:	431d      	orrs	r5, r3
 8001188:	d100      	bne.n	800118c <__aeabi_dsub+0x1cc>
 800118a:	e19c      	b.n	80014c6 <__aeabi_dsub+0x506>
 800118c:	1e55      	subs	r5, r2, #1
 800118e:	2a01      	cmp	r2, #1
 8001190:	d100      	bne.n	8001194 <__aeabi_dsub+0x1d4>
 8001192:	e1fb      	b.n	800158c <__aeabi_dsub+0x5cc>
 8001194:	4c60      	ldr	r4, [pc, #384]	; (8001318 <__aeabi_dsub+0x358>)
 8001196:	42a2      	cmp	r2, r4
 8001198:	d100      	bne.n	800119c <__aeabi_dsub+0x1dc>
 800119a:	e1bd      	b.n	8001518 <__aeabi_dsub+0x558>
 800119c:	002a      	movs	r2, r5
 800119e:	e0f0      	b.n	8001382 <__aeabi_dsub+0x3c2>
 80011a0:	0008      	movs	r0, r1
 80011a2:	4338      	orrs	r0, r7
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dsub+0x1e8>
 80011a6:	e0c3      	b.n	8001330 <__aeabi_dsub+0x370>
 80011a8:	1e50      	subs	r0, r2, #1
 80011aa:	2a01      	cmp	r2, #1
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dsub+0x1f0>
 80011ae:	e1a8      	b.n	8001502 <__aeabi_dsub+0x542>
 80011b0:	4c59      	ldr	r4, [pc, #356]	; (8001318 <__aeabi_dsub+0x358>)
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dsub+0x1f8>
 80011b6:	e087      	b.n	80012c8 <__aeabi_dsub+0x308>
 80011b8:	0002      	movs	r2, r0
 80011ba:	e736      	b.n	800102a <__aeabi_dsub+0x6a>
 80011bc:	2201      	movs	r2, #1
 80011be:	4056      	eors	r6, r2
 80011c0:	46b3      	mov	fp, r6
 80011c2:	42b5      	cmp	r5, r6
 80011c4:	d000      	beq.n	80011c8 <__aeabi_dsub+0x208>
 80011c6:	e721      	b.n	800100c <__aeabi_dsub+0x4c>
 80011c8:	4a55      	ldr	r2, [pc, #340]	; (8001320 <__aeabi_dsub+0x360>)
 80011ca:	4442      	add	r2, r8
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dsub+0x212>
 80011d0:	e0b5      	b.n	800133e <__aeabi_dsub+0x37e>
 80011d2:	4642      	mov	r2, r8
 80011d4:	4644      	mov	r4, r8
 80011d6:	1a82      	subs	r2, r0, r2
 80011d8:	2c00      	cmp	r4, #0
 80011da:	d100      	bne.n	80011de <__aeabi_dsub+0x21e>
 80011dc:	e138      	b.n	8001450 <__aeabi_dsub+0x490>
 80011de:	4e4e      	ldr	r6, [pc, #312]	; (8001318 <__aeabi_dsub+0x358>)
 80011e0:	42b0      	cmp	r0, r6
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dsub+0x226>
 80011e4:	e1de      	b.n	80015a4 <__aeabi_dsub+0x5e4>
 80011e6:	2680      	movs	r6, #128	; 0x80
 80011e8:	4664      	mov	r4, ip
 80011ea:	0436      	lsls	r6, r6, #16
 80011ec:	4334      	orrs	r4, r6
 80011ee:	46a4      	mov	ip, r4
 80011f0:	2a38      	cmp	r2, #56	; 0x38
 80011f2:	dd00      	ble.n	80011f6 <__aeabi_dsub+0x236>
 80011f4:	e196      	b.n	8001524 <__aeabi_dsub+0x564>
 80011f6:	2a1f      	cmp	r2, #31
 80011f8:	dd00      	ble.n	80011fc <__aeabi_dsub+0x23c>
 80011fa:	e224      	b.n	8001646 <__aeabi_dsub+0x686>
 80011fc:	2620      	movs	r6, #32
 80011fe:	1ab4      	subs	r4, r6, r2
 8001200:	46a2      	mov	sl, r4
 8001202:	4664      	mov	r4, ip
 8001204:	4656      	mov	r6, sl
 8001206:	40b4      	lsls	r4, r6
 8001208:	46a1      	mov	r9, r4
 800120a:	001c      	movs	r4, r3
 800120c:	464e      	mov	r6, r9
 800120e:	40d4      	lsrs	r4, r2
 8001210:	4326      	orrs	r6, r4
 8001212:	0034      	movs	r4, r6
 8001214:	4656      	mov	r6, sl
 8001216:	40b3      	lsls	r3, r6
 8001218:	1e5e      	subs	r6, r3, #1
 800121a:	41b3      	sbcs	r3, r6
 800121c:	431c      	orrs	r4, r3
 800121e:	4663      	mov	r3, ip
 8001220:	40d3      	lsrs	r3, r2
 8001222:	18c9      	adds	r1, r1, r3
 8001224:	19e4      	adds	r4, r4, r7
 8001226:	42bc      	cmp	r4, r7
 8001228:	41bf      	sbcs	r7, r7
 800122a:	427f      	negs	r7, r7
 800122c:	46b9      	mov	r9, r7
 800122e:	4680      	mov	r8, r0
 8001230:	4489      	add	r9, r1
 8001232:	e0d8      	b.n	80013e6 <__aeabi_dsub+0x426>
 8001234:	4640      	mov	r0, r8
 8001236:	4c3b      	ldr	r4, [pc, #236]	; (8001324 <__aeabi_dsub+0x364>)
 8001238:	3001      	adds	r0, #1
 800123a:	4220      	tst	r0, r4
 800123c:	d000      	beq.n	8001240 <__aeabi_dsub+0x280>
 800123e:	e0b4      	b.n	80013aa <__aeabi_dsub+0x3ea>
 8001240:	4640      	mov	r0, r8
 8001242:	2800      	cmp	r0, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_dsub+0x288>
 8001246:	e144      	b.n	80014d2 <__aeabi_dsub+0x512>
 8001248:	4660      	mov	r0, ip
 800124a:	4318      	orrs	r0, r3
 800124c:	d100      	bne.n	8001250 <__aeabi_dsub+0x290>
 800124e:	e190      	b.n	8001572 <__aeabi_dsub+0x5b2>
 8001250:	0008      	movs	r0, r1
 8001252:	4338      	orrs	r0, r7
 8001254:	d000      	beq.n	8001258 <__aeabi_dsub+0x298>
 8001256:	e1aa      	b.n	80015ae <__aeabi_dsub+0x5ee>
 8001258:	4661      	mov	r1, ip
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	0749      	lsls	r1, r1, #29
 800125e:	430b      	orrs	r3, r1
 8001260:	4661      	mov	r1, ip
 8001262:	08cc      	lsrs	r4, r1, #3
 8001264:	e027      	b.n	80012b6 <__aeabi_dsub+0x2f6>
 8001266:	0008      	movs	r0, r1
 8001268:	4338      	orrs	r0, r7
 800126a:	d061      	beq.n	8001330 <__aeabi_dsub+0x370>
 800126c:	1e50      	subs	r0, r2, #1
 800126e:	2a01      	cmp	r2, #1
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x2b4>
 8001272:	e139      	b.n	80014e8 <__aeabi_dsub+0x528>
 8001274:	42a2      	cmp	r2, r4
 8001276:	d027      	beq.n	80012c8 <__aeabi_dsub+0x308>
 8001278:	0002      	movs	r2, r0
 800127a:	e75d      	b.n	8001138 <__aeabi_dsub+0x178>
 800127c:	0002      	movs	r2, r0
 800127e:	391f      	subs	r1, #31
 8001280:	40ca      	lsrs	r2, r1
 8001282:	0011      	movs	r1, r2
 8001284:	2b20      	cmp	r3, #32
 8001286:	d003      	beq.n	8001290 <__aeabi_dsub+0x2d0>
 8001288:	2240      	movs	r2, #64	; 0x40
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4098      	lsls	r0, r3
 800128e:	4304      	orrs	r4, r0
 8001290:	1e63      	subs	r3, r4, #1
 8001292:	419c      	sbcs	r4, r3
 8001294:	2300      	movs	r3, #0
 8001296:	4699      	mov	r9, r3
 8001298:	4698      	mov	r8, r3
 800129a:	430c      	orrs	r4, r1
 800129c:	0763      	lsls	r3, r4, #29
 800129e:	d000      	beq.n	80012a2 <__aeabi_dsub+0x2e2>
 80012a0:	e712      	b.n	80010c8 <__aeabi_dsub+0x108>
 80012a2:	464b      	mov	r3, r9
 80012a4:	464a      	mov	r2, r9
 80012a6:	08e4      	lsrs	r4, r4, #3
 80012a8:	075b      	lsls	r3, r3, #29
 80012aa:	4323      	orrs	r3, r4
 80012ac:	08d4      	lsrs	r4, r2, #3
 80012ae:	4642      	mov	r2, r8
 80012b0:	4919      	ldr	r1, [pc, #100]	; (8001318 <__aeabi_dsub+0x358>)
 80012b2:	428a      	cmp	r2, r1
 80012b4:	d00e      	beq.n	80012d4 <__aeabi_dsub+0x314>
 80012b6:	0324      	lsls	r4, r4, #12
 80012b8:	0552      	lsls	r2, r2, #21
 80012ba:	0b24      	lsrs	r4, r4, #12
 80012bc:	0d52      	lsrs	r2, r2, #21
 80012be:	e722      	b.n	8001106 <__aeabi_dsub+0x146>
 80012c0:	000a      	movs	r2, r1
 80012c2:	2400      	movs	r4, #0
 80012c4:	2300      	movs	r3, #0
 80012c6:	e71e      	b.n	8001106 <__aeabi_dsub+0x146>
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	4662      	mov	r2, ip
 80012cc:	0752      	lsls	r2, r2, #29
 80012ce:	4313      	orrs	r3, r2
 80012d0:	4662      	mov	r2, ip
 80012d2:	08d4      	lsrs	r4, r2, #3
 80012d4:	001a      	movs	r2, r3
 80012d6:	4322      	orrs	r2, r4
 80012d8:	d100      	bne.n	80012dc <__aeabi_dsub+0x31c>
 80012da:	e1fc      	b.n	80016d6 <__aeabi_dsub+0x716>
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	0312      	lsls	r2, r2, #12
 80012e0:	4314      	orrs	r4, r2
 80012e2:	0324      	lsls	r4, r4, #12
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <__aeabi_dsub+0x358>)
 80012e6:	0b24      	lsrs	r4, r4, #12
 80012e8:	e70d      	b.n	8001106 <__aeabi_dsub+0x146>
 80012ea:	0020      	movs	r0, r4
 80012ec:	f000 fa56 	bl	800179c <__clzsi2>
 80012f0:	0001      	movs	r1, r0
 80012f2:	3118      	adds	r1, #24
 80012f4:	291f      	cmp	r1, #31
 80012f6:	dc00      	bgt.n	80012fa <__aeabi_dsub+0x33a>
 80012f8:	e6c4      	b.n	8001084 <__aeabi_dsub+0xc4>
 80012fa:	3808      	subs	r0, #8
 80012fc:	4084      	lsls	r4, r0
 80012fe:	4643      	mov	r3, r8
 8001300:	0020      	movs	r0, r4
 8001302:	2400      	movs	r4, #0
 8001304:	4588      	cmp	r8, r1
 8001306:	dc00      	bgt.n	800130a <__aeabi_dsub+0x34a>
 8001308:	e6c8      	b.n	800109c <__aeabi_dsub+0xdc>
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__aeabi_dsub+0x35c>)
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	4010      	ands	r0, r2
 8001310:	4698      	mov	r8, r3
 8001312:	4681      	mov	r9, r0
 8001314:	e6d6      	b.n	80010c4 <__aeabi_dsub+0x104>
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	000007ff 	.word	0x000007ff
 800131c:	ff7fffff 	.word	0xff7fffff
 8001320:	fffff801 	.word	0xfffff801
 8001324:	000007fe 	.word	0x000007fe
 8001328:	430f      	orrs	r7, r1
 800132a:	1e7a      	subs	r2, r7, #1
 800132c:	4197      	sbcs	r7, r2
 800132e:	e691      	b.n	8001054 <__aeabi_dsub+0x94>
 8001330:	4661      	mov	r1, ip
 8001332:	08db      	lsrs	r3, r3, #3
 8001334:	0749      	lsls	r1, r1, #29
 8001336:	430b      	orrs	r3, r1
 8001338:	4661      	mov	r1, ip
 800133a:	08cc      	lsrs	r4, r1, #3
 800133c:	e7b8      	b.n	80012b0 <__aeabi_dsub+0x2f0>
 800133e:	4640      	mov	r0, r8
 8001340:	4cd3      	ldr	r4, [pc, #844]	; (8001690 <__aeabi_dsub+0x6d0>)
 8001342:	3001      	adds	r0, #1
 8001344:	4220      	tst	r0, r4
 8001346:	d000      	beq.n	800134a <__aeabi_dsub+0x38a>
 8001348:	e0a2      	b.n	8001490 <__aeabi_dsub+0x4d0>
 800134a:	4640      	mov	r0, r8
 800134c:	2800      	cmp	r0, #0
 800134e:	d000      	beq.n	8001352 <__aeabi_dsub+0x392>
 8001350:	e101      	b.n	8001556 <__aeabi_dsub+0x596>
 8001352:	4660      	mov	r0, ip
 8001354:	4318      	orrs	r0, r3
 8001356:	d100      	bne.n	800135a <__aeabi_dsub+0x39a>
 8001358:	e15e      	b.n	8001618 <__aeabi_dsub+0x658>
 800135a:	0008      	movs	r0, r1
 800135c:	4338      	orrs	r0, r7
 800135e:	d000      	beq.n	8001362 <__aeabi_dsub+0x3a2>
 8001360:	e15f      	b.n	8001622 <__aeabi_dsub+0x662>
 8001362:	4661      	mov	r1, ip
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	0749      	lsls	r1, r1, #29
 8001368:	430b      	orrs	r3, r1
 800136a:	4661      	mov	r1, ip
 800136c:	08cc      	lsrs	r4, r1, #3
 800136e:	e7a2      	b.n	80012b6 <__aeabi_dsub+0x2f6>
 8001370:	4dc8      	ldr	r5, [pc, #800]	; (8001694 <__aeabi_dsub+0x6d4>)
 8001372:	42a8      	cmp	r0, r5
 8001374:	d100      	bne.n	8001378 <__aeabi_dsub+0x3b8>
 8001376:	e0cf      	b.n	8001518 <__aeabi_dsub+0x558>
 8001378:	2580      	movs	r5, #128	; 0x80
 800137a:	4664      	mov	r4, ip
 800137c:	042d      	lsls	r5, r5, #16
 800137e:	432c      	orrs	r4, r5
 8001380:	46a4      	mov	ip, r4
 8001382:	2a38      	cmp	r2, #56	; 0x38
 8001384:	dc56      	bgt.n	8001434 <__aeabi_dsub+0x474>
 8001386:	2a1f      	cmp	r2, #31
 8001388:	dd00      	ble.n	800138c <__aeabi_dsub+0x3cc>
 800138a:	e0d1      	b.n	8001530 <__aeabi_dsub+0x570>
 800138c:	2520      	movs	r5, #32
 800138e:	001e      	movs	r6, r3
 8001390:	1aad      	subs	r5, r5, r2
 8001392:	4664      	mov	r4, ip
 8001394:	40ab      	lsls	r3, r5
 8001396:	40ac      	lsls	r4, r5
 8001398:	40d6      	lsrs	r6, r2
 800139a:	1e5d      	subs	r5, r3, #1
 800139c:	41ab      	sbcs	r3, r5
 800139e:	4334      	orrs	r4, r6
 80013a0:	4323      	orrs	r3, r4
 80013a2:	4664      	mov	r4, ip
 80013a4:	40d4      	lsrs	r4, r2
 80013a6:	1b09      	subs	r1, r1, r4
 80013a8:	e049      	b.n	800143e <__aeabi_dsub+0x47e>
 80013aa:	4660      	mov	r0, ip
 80013ac:	1bdc      	subs	r4, r3, r7
 80013ae:	1a46      	subs	r6, r0, r1
 80013b0:	42a3      	cmp	r3, r4
 80013b2:	4180      	sbcs	r0, r0
 80013b4:	4240      	negs	r0, r0
 80013b6:	4681      	mov	r9, r0
 80013b8:	0030      	movs	r0, r6
 80013ba:	464e      	mov	r6, r9
 80013bc:	1b80      	subs	r0, r0, r6
 80013be:	4681      	mov	r9, r0
 80013c0:	0200      	lsls	r0, r0, #8
 80013c2:	d476      	bmi.n	80014b2 <__aeabi_dsub+0x4f2>
 80013c4:	464b      	mov	r3, r9
 80013c6:	4323      	orrs	r3, r4
 80013c8:	d000      	beq.n	80013cc <__aeabi_dsub+0x40c>
 80013ca:	e652      	b.n	8001072 <__aeabi_dsub+0xb2>
 80013cc:	2400      	movs	r4, #0
 80013ce:	2500      	movs	r5, #0
 80013d0:	e771      	b.n	80012b6 <__aeabi_dsub+0x2f6>
 80013d2:	4339      	orrs	r1, r7
 80013d4:	000c      	movs	r4, r1
 80013d6:	1e62      	subs	r2, r4, #1
 80013d8:	4194      	sbcs	r4, r2
 80013da:	18e4      	adds	r4, r4, r3
 80013dc:	429c      	cmp	r4, r3
 80013de:	419b      	sbcs	r3, r3
 80013e0:	425b      	negs	r3, r3
 80013e2:	4463      	add	r3, ip
 80013e4:	4699      	mov	r9, r3
 80013e6:	464b      	mov	r3, r9
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	d400      	bmi.n	80013ee <__aeabi_dsub+0x42e>
 80013ec:	e756      	b.n	800129c <__aeabi_dsub+0x2dc>
 80013ee:	2301      	movs	r3, #1
 80013f0:	469c      	mov	ip, r3
 80013f2:	4ba8      	ldr	r3, [pc, #672]	; (8001694 <__aeabi_dsub+0x6d4>)
 80013f4:	44e0      	add	r8, ip
 80013f6:	4598      	cmp	r8, r3
 80013f8:	d038      	beq.n	800146c <__aeabi_dsub+0x4ac>
 80013fa:	464b      	mov	r3, r9
 80013fc:	48a6      	ldr	r0, [pc, #664]	; (8001698 <__aeabi_dsub+0x6d8>)
 80013fe:	2201      	movs	r2, #1
 8001400:	4003      	ands	r3, r0
 8001402:	0018      	movs	r0, r3
 8001404:	0863      	lsrs	r3, r4, #1
 8001406:	4014      	ands	r4, r2
 8001408:	431c      	orrs	r4, r3
 800140a:	07c3      	lsls	r3, r0, #31
 800140c:	431c      	orrs	r4, r3
 800140e:	0843      	lsrs	r3, r0, #1
 8001410:	4699      	mov	r9, r3
 8001412:	e657      	b.n	80010c4 <__aeabi_dsub+0x104>
 8001414:	0010      	movs	r0, r2
 8001416:	000e      	movs	r6, r1
 8001418:	3820      	subs	r0, #32
 800141a:	40c6      	lsrs	r6, r0
 800141c:	2a20      	cmp	r2, #32
 800141e:	d004      	beq.n	800142a <__aeabi_dsub+0x46a>
 8001420:	2040      	movs	r0, #64	; 0x40
 8001422:	1a82      	subs	r2, r0, r2
 8001424:	4091      	lsls	r1, r2
 8001426:	430f      	orrs	r7, r1
 8001428:	46b9      	mov	r9, r7
 800142a:	464f      	mov	r7, r9
 800142c:	1e7a      	subs	r2, r7, #1
 800142e:	4197      	sbcs	r7, r2
 8001430:	4337      	orrs	r7, r6
 8001432:	e60f      	b.n	8001054 <__aeabi_dsub+0x94>
 8001434:	4662      	mov	r2, ip
 8001436:	431a      	orrs	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	1e5a      	subs	r2, r3, #1
 800143c:	4193      	sbcs	r3, r2
 800143e:	1afc      	subs	r4, r7, r3
 8001440:	42a7      	cmp	r7, r4
 8001442:	41bf      	sbcs	r7, r7
 8001444:	427f      	negs	r7, r7
 8001446:	1bcb      	subs	r3, r1, r7
 8001448:	4699      	mov	r9, r3
 800144a:	465d      	mov	r5, fp
 800144c:	4680      	mov	r8, r0
 800144e:	e608      	b.n	8001062 <__aeabi_dsub+0xa2>
 8001450:	4666      	mov	r6, ip
 8001452:	431e      	orrs	r6, r3
 8001454:	d100      	bne.n	8001458 <__aeabi_dsub+0x498>
 8001456:	e0be      	b.n	80015d6 <__aeabi_dsub+0x616>
 8001458:	1e56      	subs	r6, r2, #1
 800145a:	2a01      	cmp	r2, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_dsub+0x4a0>
 800145e:	e109      	b.n	8001674 <__aeabi_dsub+0x6b4>
 8001460:	4c8c      	ldr	r4, [pc, #560]	; (8001694 <__aeabi_dsub+0x6d4>)
 8001462:	42a2      	cmp	r2, r4
 8001464:	d100      	bne.n	8001468 <__aeabi_dsub+0x4a8>
 8001466:	e119      	b.n	800169c <__aeabi_dsub+0x6dc>
 8001468:	0032      	movs	r2, r6
 800146a:	e6c1      	b.n	80011f0 <__aeabi_dsub+0x230>
 800146c:	4642      	mov	r2, r8
 800146e:	2400      	movs	r4, #0
 8001470:	2300      	movs	r3, #0
 8001472:	e648      	b.n	8001106 <__aeabi_dsub+0x146>
 8001474:	2020      	movs	r0, #32
 8001476:	000c      	movs	r4, r1
 8001478:	1a80      	subs	r0, r0, r2
 800147a:	003e      	movs	r6, r7
 800147c:	4087      	lsls	r7, r0
 800147e:	4084      	lsls	r4, r0
 8001480:	40d6      	lsrs	r6, r2
 8001482:	1e78      	subs	r0, r7, #1
 8001484:	4187      	sbcs	r7, r0
 8001486:	40d1      	lsrs	r1, r2
 8001488:	4334      	orrs	r4, r6
 800148a:	433c      	orrs	r4, r7
 800148c:	448c      	add	ip, r1
 800148e:	e7a4      	b.n	80013da <__aeabi_dsub+0x41a>
 8001490:	4a80      	ldr	r2, [pc, #512]	; (8001694 <__aeabi_dsub+0x6d4>)
 8001492:	4290      	cmp	r0, r2
 8001494:	d100      	bne.n	8001498 <__aeabi_dsub+0x4d8>
 8001496:	e0e9      	b.n	800166c <__aeabi_dsub+0x6ac>
 8001498:	19df      	adds	r7, r3, r7
 800149a:	429f      	cmp	r7, r3
 800149c:	419b      	sbcs	r3, r3
 800149e:	4461      	add	r1, ip
 80014a0:	425b      	negs	r3, r3
 80014a2:	18c9      	adds	r1, r1, r3
 80014a4:	07cc      	lsls	r4, r1, #31
 80014a6:	087f      	lsrs	r7, r7, #1
 80014a8:	084b      	lsrs	r3, r1, #1
 80014aa:	4699      	mov	r9, r3
 80014ac:	4680      	mov	r8, r0
 80014ae:	433c      	orrs	r4, r7
 80014b0:	e6f4      	b.n	800129c <__aeabi_dsub+0x2dc>
 80014b2:	1afc      	subs	r4, r7, r3
 80014b4:	42a7      	cmp	r7, r4
 80014b6:	41bf      	sbcs	r7, r7
 80014b8:	4663      	mov	r3, ip
 80014ba:	427f      	negs	r7, r7
 80014bc:	1ac9      	subs	r1, r1, r3
 80014be:	1bcb      	subs	r3, r1, r7
 80014c0:	4699      	mov	r9, r3
 80014c2:	465d      	mov	r5, fp
 80014c4:	e5d5      	b.n	8001072 <__aeabi_dsub+0xb2>
 80014c6:	08ff      	lsrs	r7, r7, #3
 80014c8:	074b      	lsls	r3, r1, #29
 80014ca:	465d      	mov	r5, fp
 80014cc:	433b      	orrs	r3, r7
 80014ce:	08cc      	lsrs	r4, r1, #3
 80014d0:	e6ee      	b.n	80012b0 <__aeabi_dsub+0x2f0>
 80014d2:	4662      	mov	r2, ip
 80014d4:	431a      	orrs	r2, r3
 80014d6:	d000      	beq.n	80014da <__aeabi_dsub+0x51a>
 80014d8:	e082      	b.n	80015e0 <__aeabi_dsub+0x620>
 80014da:	000b      	movs	r3, r1
 80014dc:	433b      	orrs	r3, r7
 80014de:	d11b      	bne.n	8001518 <__aeabi_dsub+0x558>
 80014e0:	2480      	movs	r4, #128	; 0x80
 80014e2:	2500      	movs	r5, #0
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	e6f9      	b.n	80012dc <__aeabi_dsub+0x31c>
 80014e8:	19dc      	adds	r4, r3, r7
 80014ea:	429c      	cmp	r4, r3
 80014ec:	419b      	sbcs	r3, r3
 80014ee:	4461      	add	r1, ip
 80014f0:	4689      	mov	r9, r1
 80014f2:	425b      	negs	r3, r3
 80014f4:	4499      	add	r9, r3
 80014f6:	464b      	mov	r3, r9
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	d444      	bmi.n	8001586 <__aeabi_dsub+0x5c6>
 80014fc:	2301      	movs	r3, #1
 80014fe:	4698      	mov	r8, r3
 8001500:	e6cc      	b.n	800129c <__aeabi_dsub+0x2dc>
 8001502:	1bdc      	subs	r4, r3, r7
 8001504:	4662      	mov	r2, ip
 8001506:	42a3      	cmp	r3, r4
 8001508:	419b      	sbcs	r3, r3
 800150a:	1a51      	subs	r1, r2, r1
 800150c:	425b      	negs	r3, r3
 800150e:	1acb      	subs	r3, r1, r3
 8001510:	4699      	mov	r9, r3
 8001512:	2301      	movs	r3, #1
 8001514:	4698      	mov	r8, r3
 8001516:	e5a4      	b.n	8001062 <__aeabi_dsub+0xa2>
 8001518:	08ff      	lsrs	r7, r7, #3
 800151a:	074b      	lsls	r3, r1, #29
 800151c:	465d      	mov	r5, fp
 800151e:	433b      	orrs	r3, r7
 8001520:	08cc      	lsrs	r4, r1, #3
 8001522:	e6d7      	b.n	80012d4 <__aeabi_dsub+0x314>
 8001524:	4662      	mov	r2, ip
 8001526:	431a      	orrs	r2, r3
 8001528:	0014      	movs	r4, r2
 800152a:	1e63      	subs	r3, r4, #1
 800152c:	419c      	sbcs	r4, r3
 800152e:	e679      	b.n	8001224 <__aeabi_dsub+0x264>
 8001530:	0015      	movs	r5, r2
 8001532:	4664      	mov	r4, ip
 8001534:	3d20      	subs	r5, #32
 8001536:	40ec      	lsrs	r4, r5
 8001538:	46a0      	mov	r8, r4
 800153a:	2a20      	cmp	r2, #32
 800153c:	d005      	beq.n	800154a <__aeabi_dsub+0x58a>
 800153e:	2540      	movs	r5, #64	; 0x40
 8001540:	4664      	mov	r4, ip
 8001542:	1aaa      	subs	r2, r5, r2
 8001544:	4094      	lsls	r4, r2
 8001546:	4323      	orrs	r3, r4
 8001548:	469a      	mov	sl, r3
 800154a:	4654      	mov	r4, sl
 800154c:	1e63      	subs	r3, r4, #1
 800154e:	419c      	sbcs	r4, r3
 8001550:	4643      	mov	r3, r8
 8001552:	4323      	orrs	r3, r4
 8001554:	e773      	b.n	800143e <__aeabi_dsub+0x47e>
 8001556:	4662      	mov	r2, ip
 8001558:	431a      	orrs	r2, r3
 800155a:	d023      	beq.n	80015a4 <__aeabi_dsub+0x5e4>
 800155c:	000a      	movs	r2, r1
 800155e:	433a      	orrs	r2, r7
 8001560:	d000      	beq.n	8001564 <__aeabi_dsub+0x5a4>
 8001562:	e0a0      	b.n	80016a6 <__aeabi_dsub+0x6e6>
 8001564:	4662      	mov	r2, ip
 8001566:	08db      	lsrs	r3, r3, #3
 8001568:	0752      	lsls	r2, r2, #29
 800156a:	4313      	orrs	r3, r2
 800156c:	4662      	mov	r2, ip
 800156e:	08d4      	lsrs	r4, r2, #3
 8001570:	e6b0      	b.n	80012d4 <__aeabi_dsub+0x314>
 8001572:	000b      	movs	r3, r1
 8001574:	433b      	orrs	r3, r7
 8001576:	d100      	bne.n	800157a <__aeabi_dsub+0x5ba>
 8001578:	e728      	b.n	80013cc <__aeabi_dsub+0x40c>
 800157a:	08ff      	lsrs	r7, r7, #3
 800157c:	074b      	lsls	r3, r1, #29
 800157e:	465d      	mov	r5, fp
 8001580:	433b      	orrs	r3, r7
 8001582:	08cc      	lsrs	r4, r1, #3
 8001584:	e697      	b.n	80012b6 <__aeabi_dsub+0x2f6>
 8001586:	2302      	movs	r3, #2
 8001588:	4698      	mov	r8, r3
 800158a:	e736      	b.n	80013fa <__aeabi_dsub+0x43a>
 800158c:	1afc      	subs	r4, r7, r3
 800158e:	42a7      	cmp	r7, r4
 8001590:	41bf      	sbcs	r7, r7
 8001592:	4663      	mov	r3, ip
 8001594:	427f      	negs	r7, r7
 8001596:	1ac9      	subs	r1, r1, r3
 8001598:	1bcb      	subs	r3, r1, r7
 800159a:	4699      	mov	r9, r3
 800159c:	2301      	movs	r3, #1
 800159e:	465d      	mov	r5, fp
 80015a0:	4698      	mov	r8, r3
 80015a2:	e55e      	b.n	8001062 <__aeabi_dsub+0xa2>
 80015a4:	074b      	lsls	r3, r1, #29
 80015a6:	08ff      	lsrs	r7, r7, #3
 80015a8:	433b      	orrs	r3, r7
 80015aa:	08cc      	lsrs	r4, r1, #3
 80015ac:	e692      	b.n	80012d4 <__aeabi_dsub+0x314>
 80015ae:	1bdc      	subs	r4, r3, r7
 80015b0:	4660      	mov	r0, ip
 80015b2:	42a3      	cmp	r3, r4
 80015b4:	41b6      	sbcs	r6, r6
 80015b6:	1a40      	subs	r0, r0, r1
 80015b8:	4276      	negs	r6, r6
 80015ba:	1b80      	subs	r0, r0, r6
 80015bc:	4681      	mov	r9, r0
 80015be:	0200      	lsls	r0, r0, #8
 80015c0:	d560      	bpl.n	8001684 <__aeabi_dsub+0x6c4>
 80015c2:	1afc      	subs	r4, r7, r3
 80015c4:	42a7      	cmp	r7, r4
 80015c6:	41bf      	sbcs	r7, r7
 80015c8:	4663      	mov	r3, ip
 80015ca:	427f      	negs	r7, r7
 80015cc:	1ac9      	subs	r1, r1, r3
 80015ce:	1bcb      	subs	r3, r1, r7
 80015d0:	4699      	mov	r9, r3
 80015d2:	465d      	mov	r5, fp
 80015d4:	e576      	b.n	80010c4 <__aeabi_dsub+0x104>
 80015d6:	08ff      	lsrs	r7, r7, #3
 80015d8:	074b      	lsls	r3, r1, #29
 80015da:	433b      	orrs	r3, r7
 80015dc:	08cc      	lsrs	r4, r1, #3
 80015de:	e667      	b.n	80012b0 <__aeabi_dsub+0x2f0>
 80015e0:	000a      	movs	r2, r1
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	433a      	orrs	r2, r7
 80015e6:	d100      	bne.n	80015ea <__aeabi_dsub+0x62a>
 80015e8:	e66f      	b.n	80012ca <__aeabi_dsub+0x30a>
 80015ea:	4662      	mov	r2, ip
 80015ec:	0752      	lsls	r2, r2, #29
 80015ee:	4313      	orrs	r3, r2
 80015f0:	4662      	mov	r2, ip
 80015f2:	08d4      	lsrs	r4, r2, #3
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	0312      	lsls	r2, r2, #12
 80015f8:	4214      	tst	r4, r2
 80015fa:	d007      	beq.n	800160c <__aeabi_dsub+0x64c>
 80015fc:	08c8      	lsrs	r0, r1, #3
 80015fe:	4210      	tst	r0, r2
 8001600:	d104      	bne.n	800160c <__aeabi_dsub+0x64c>
 8001602:	465d      	mov	r5, fp
 8001604:	0004      	movs	r4, r0
 8001606:	08fb      	lsrs	r3, r7, #3
 8001608:	0749      	lsls	r1, r1, #29
 800160a:	430b      	orrs	r3, r1
 800160c:	0f5a      	lsrs	r2, r3, #29
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	0752      	lsls	r2, r2, #29
 8001614:	4313      	orrs	r3, r2
 8001616:	e65d      	b.n	80012d4 <__aeabi_dsub+0x314>
 8001618:	074b      	lsls	r3, r1, #29
 800161a:	08ff      	lsrs	r7, r7, #3
 800161c:	433b      	orrs	r3, r7
 800161e:	08cc      	lsrs	r4, r1, #3
 8001620:	e649      	b.n	80012b6 <__aeabi_dsub+0x2f6>
 8001622:	19dc      	adds	r4, r3, r7
 8001624:	429c      	cmp	r4, r3
 8001626:	419b      	sbcs	r3, r3
 8001628:	4461      	add	r1, ip
 800162a:	4689      	mov	r9, r1
 800162c:	425b      	negs	r3, r3
 800162e:	4499      	add	r9, r3
 8001630:	464b      	mov	r3, r9
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	d400      	bmi.n	8001638 <__aeabi_dsub+0x678>
 8001636:	e631      	b.n	800129c <__aeabi_dsub+0x2dc>
 8001638:	464a      	mov	r2, r9
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <__aeabi_dsub+0x6d8>)
 800163c:	401a      	ands	r2, r3
 800163e:	2301      	movs	r3, #1
 8001640:	4691      	mov	r9, r2
 8001642:	4698      	mov	r8, r3
 8001644:	e62a      	b.n	800129c <__aeabi_dsub+0x2dc>
 8001646:	0016      	movs	r6, r2
 8001648:	4664      	mov	r4, ip
 800164a:	3e20      	subs	r6, #32
 800164c:	40f4      	lsrs	r4, r6
 800164e:	46a0      	mov	r8, r4
 8001650:	2a20      	cmp	r2, #32
 8001652:	d005      	beq.n	8001660 <__aeabi_dsub+0x6a0>
 8001654:	2640      	movs	r6, #64	; 0x40
 8001656:	4664      	mov	r4, ip
 8001658:	1ab2      	subs	r2, r6, r2
 800165a:	4094      	lsls	r4, r2
 800165c:	4323      	orrs	r3, r4
 800165e:	469a      	mov	sl, r3
 8001660:	4654      	mov	r4, sl
 8001662:	1e63      	subs	r3, r4, #1
 8001664:	419c      	sbcs	r4, r3
 8001666:	4643      	mov	r3, r8
 8001668:	431c      	orrs	r4, r3
 800166a:	e5db      	b.n	8001224 <__aeabi_dsub+0x264>
 800166c:	0002      	movs	r2, r0
 800166e:	2400      	movs	r4, #0
 8001670:	2300      	movs	r3, #0
 8001672:	e548      	b.n	8001106 <__aeabi_dsub+0x146>
 8001674:	19dc      	adds	r4, r3, r7
 8001676:	42bc      	cmp	r4, r7
 8001678:	41bf      	sbcs	r7, r7
 800167a:	4461      	add	r1, ip
 800167c:	4689      	mov	r9, r1
 800167e:	427f      	negs	r7, r7
 8001680:	44b9      	add	r9, r7
 8001682:	e738      	b.n	80014f6 <__aeabi_dsub+0x536>
 8001684:	464b      	mov	r3, r9
 8001686:	4323      	orrs	r3, r4
 8001688:	d100      	bne.n	800168c <__aeabi_dsub+0x6cc>
 800168a:	e69f      	b.n	80013cc <__aeabi_dsub+0x40c>
 800168c:	e606      	b.n	800129c <__aeabi_dsub+0x2dc>
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	000007fe 	.word	0x000007fe
 8001694:	000007ff 	.word	0x000007ff
 8001698:	ff7fffff 	.word	0xff7fffff
 800169c:	08ff      	lsrs	r7, r7, #3
 800169e:	074b      	lsls	r3, r1, #29
 80016a0:	433b      	orrs	r3, r7
 80016a2:	08cc      	lsrs	r4, r1, #3
 80016a4:	e616      	b.n	80012d4 <__aeabi_dsub+0x314>
 80016a6:	4662      	mov	r2, ip
 80016a8:	08db      	lsrs	r3, r3, #3
 80016aa:	0752      	lsls	r2, r2, #29
 80016ac:	4313      	orrs	r3, r2
 80016ae:	4662      	mov	r2, ip
 80016b0:	08d4      	lsrs	r4, r2, #3
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	0312      	lsls	r2, r2, #12
 80016b6:	4214      	tst	r4, r2
 80016b8:	d007      	beq.n	80016ca <__aeabi_dsub+0x70a>
 80016ba:	08c8      	lsrs	r0, r1, #3
 80016bc:	4210      	tst	r0, r2
 80016be:	d104      	bne.n	80016ca <__aeabi_dsub+0x70a>
 80016c0:	465d      	mov	r5, fp
 80016c2:	0004      	movs	r4, r0
 80016c4:	08fb      	lsrs	r3, r7, #3
 80016c6:	0749      	lsls	r1, r1, #29
 80016c8:	430b      	orrs	r3, r1
 80016ca:	0f5a      	lsrs	r2, r3, #29
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	0752      	lsls	r2, r2, #29
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	e5fe      	b.n	80012d4 <__aeabi_dsub+0x314>
 80016d6:	2300      	movs	r3, #0
 80016d8:	4a01      	ldr	r2, [pc, #4]	; (80016e0 <__aeabi_dsub+0x720>)
 80016da:	001c      	movs	r4, r3
 80016dc:	e513      	b.n	8001106 <__aeabi_dsub+0x146>
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	000007ff 	.word	0x000007ff

080016e4 <__aeabi_d2iz>:
 80016e4:	000a      	movs	r2, r1
 80016e6:	b530      	push	{r4, r5, lr}
 80016e8:	4c13      	ldr	r4, [pc, #76]	; (8001738 <__aeabi_d2iz+0x54>)
 80016ea:	0053      	lsls	r3, r2, #1
 80016ec:	0309      	lsls	r1, r1, #12
 80016ee:	0005      	movs	r5, r0
 80016f0:	0b09      	lsrs	r1, r1, #12
 80016f2:	2000      	movs	r0, #0
 80016f4:	0d5b      	lsrs	r3, r3, #21
 80016f6:	0fd2      	lsrs	r2, r2, #31
 80016f8:	42a3      	cmp	r3, r4
 80016fa:	dd04      	ble.n	8001706 <__aeabi_d2iz+0x22>
 80016fc:	480f      	ldr	r0, [pc, #60]	; (800173c <__aeabi_d2iz+0x58>)
 80016fe:	4283      	cmp	r3, r0
 8001700:	dd02      	ble.n	8001708 <__aeabi_d2iz+0x24>
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <__aeabi_d2iz+0x5c>)
 8001704:	18d0      	adds	r0, r2, r3
 8001706:	bd30      	pop	{r4, r5, pc}
 8001708:	2080      	movs	r0, #128	; 0x80
 800170a:	0340      	lsls	r0, r0, #13
 800170c:	4301      	orrs	r1, r0
 800170e:	480d      	ldr	r0, [pc, #52]	; (8001744 <__aeabi_d2iz+0x60>)
 8001710:	1ac0      	subs	r0, r0, r3
 8001712:	281f      	cmp	r0, #31
 8001714:	dd08      	ble.n	8001728 <__aeabi_d2iz+0x44>
 8001716:	480c      	ldr	r0, [pc, #48]	; (8001748 <__aeabi_d2iz+0x64>)
 8001718:	1ac3      	subs	r3, r0, r3
 800171a:	40d9      	lsrs	r1, r3
 800171c:	000b      	movs	r3, r1
 800171e:	4258      	negs	r0, r3
 8001720:	2a00      	cmp	r2, #0
 8001722:	d1f0      	bne.n	8001706 <__aeabi_d2iz+0x22>
 8001724:	0018      	movs	r0, r3
 8001726:	e7ee      	b.n	8001706 <__aeabi_d2iz+0x22>
 8001728:	4c08      	ldr	r4, [pc, #32]	; (800174c <__aeabi_d2iz+0x68>)
 800172a:	40c5      	lsrs	r5, r0
 800172c:	46a4      	mov	ip, r4
 800172e:	4463      	add	r3, ip
 8001730:	4099      	lsls	r1, r3
 8001732:	000b      	movs	r3, r1
 8001734:	432b      	orrs	r3, r5
 8001736:	e7f2      	b.n	800171e <__aeabi_d2iz+0x3a>
 8001738:	000003fe 	.word	0x000003fe
 800173c:	0000041d 	.word	0x0000041d
 8001740:	7fffffff 	.word	0x7fffffff
 8001744:	00000433 	.word	0x00000433
 8001748:	00000413 	.word	0x00000413
 800174c:	fffffbed 	.word	0xfffffbed

08001750 <__aeabi_ui2d>:
 8001750:	b510      	push	{r4, lr}
 8001752:	1e04      	subs	r4, r0, #0
 8001754:	d010      	beq.n	8001778 <__aeabi_ui2d+0x28>
 8001756:	f000 f821 	bl	800179c <__clzsi2>
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <__aeabi_ui2d+0x48>)
 800175c:	1a1b      	subs	r3, r3, r0
 800175e:	280a      	cmp	r0, #10
 8001760:	dc11      	bgt.n	8001786 <__aeabi_ui2d+0x36>
 8001762:	220b      	movs	r2, #11
 8001764:	0021      	movs	r1, r4
 8001766:	1a12      	subs	r2, r2, r0
 8001768:	40d1      	lsrs	r1, r2
 800176a:	3015      	adds	r0, #21
 800176c:	030a      	lsls	r2, r1, #12
 800176e:	055b      	lsls	r3, r3, #21
 8001770:	4084      	lsls	r4, r0
 8001772:	0b12      	lsrs	r2, r2, #12
 8001774:	0d5b      	lsrs	r3, r3, #21
 8001776:	e001      	b.n	800177c <__aeabi_ui2d+0x2c>
 8001778:	2300      	movs	r3, #0
 800177a:	2200      	movs	r2, #0
 800177c:	051b      	lsls	r3, r3, #20
 800177e:	4313      	orrs	r3, r2
 8001780:	0020      	movs	r0, r4
 8001782:	0019      	movs	r1, r3
 8001784:	bd10      	pop	{r4, pc}
 8001786:	0022      	movs	r2, r4
 8001788:	380b      	subs	r0, #11
 800178a:	4082      	lsls	r2, r0
 800178c:	055b      	lsls	r3, r3, #21
 800178e:	0312      	lsls	r2, r2, #12
 8001790:	2400      	movs	r4, #0
 8001792:	0b12      	lsrs	r2, r2, #12
 8001794:	0d5b      	lsrs	r3, r3, #21
 8001796:	e7f1      	b.n	800177c <__aeabi_ui2d+0x2c>
 8001798:	0000041e 	.word	0x0000041e

0800179c <__clzsi2>:
 800179c:	211c      	movs	r1, #28
 800179e:	2301      	movs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	4298      	cmp	r0, r3
 80017a4:	d301      	bcc.n	80017aa <__clzsi2+0xe>
 80017a6:	0c00      	lsrs	r0, r0, #16
 80017a8:	3910      	subs	r1, #16
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	4298      	cmp	r0, r3
 80017ae:	d301      	bcc.n	80017b4 <__clzsi2+0x18>
 80017b0:	0a00      	lsrs	r0, r0, #8
 80017b2:	3908      	subs	r1, #8
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	4298      	cmp	r0, r3
 80017b8:	d301      	bcc.n	80017be <__clzsi2+0x22>
 80017ba:	0900      	lsrs	r0, r0, #4
 80017bc:	3904      	subs	r1, #4
 80017be:	a202      	add	r2, pc, #8	; (adr r2, 80017c8 <__clzsi2+0x2c>)
 80017c0:	5c10      	ldrb	r0, [r2, r0]
 80017c2:	1840      	adds	r0, r0, r1
 80017c4:	4770      	bx	lr
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	02020304 	.word	0x02020304
 80017cc:	01010101 	.word	0x01010101
	...

080017d8 <i2c1MasterInit>:
		i2c->data_rx[i] = '\0';
	for (int i = 0; i < I2C_TX_BUFFER_SIZE; i++)
		i2c->data_tx[i] = '\0';
}

void i2c1MasterInit() {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	i2c1GpioInit();
 80017dc:	f000 f83c 	bl	8001858 <i2c1GpioInit>
	/* clock enable */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <i2c1MasterInit+0x6c>)
 80017e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <i2c1MasterInit+0x6c>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0389      	lsls	r1, r1, #14
 80017ea:	430a      	orrs	r2, r1
 80017ec:	63da      	str	r2, [r3, #60]	; 0x3c
	/* peripherial disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <i2c1MasterInit+0x70>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <i2c1MasterInit+0x70>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	438a      	bics	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
	/* set timing */
	I2C1->TIMINGR = 0x00303D5B;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <i2c1MasterInit+0x70>)
 80017fc:	4a13      	ldr	r2, [pc, #76]	; (800184c <i2c1MasterInit+0x74>)
 80017fe:	611a      	str	r2, [r3, #16]
	/* */
	CLEAR_BIT(I2C2->OAR1, I2C_OAR1_OA1EN);
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <i2c1MasterInit+0x78>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <i2c1MasterInit+0x78>)
 8001806:	4913      	ldr	r1, [pc, #76]	; (8001854 <i2c1MasterInit+0x7c>)
 8001808:	400a      	ands	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(I2C2->OAR2, I2C_OAR2_OA2EN);
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <i2c1MasterInit+0x78>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <i2c1MasterInit+0x78>)
 8001812:	4910      	ldr	r1, [pc, #64]	; (8001854 <i2c1MasterInit+0x7c>)
 8001814:	400a      	ands	r2, r1
 8001816:	60da      	str	r2, [r3, #12]

	/*tx and rx interrupt enable */
	SET_BIT(I2C2->CR1, I2C_CR1_RXIE);
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <i2c1MasterInit+0x78>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <i2c1MasterInit+0x78>)
 800181e:	2104      	movs	r1, #4
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C2->CR1, I2C_CR1_TXIE);
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <i2c1MasterInit+0x78>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <i2c1MasterInit+0x78>)
 800182a:	2102      	movs	r1, #2
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

	/* peripherial enable */
	SET_BIT(I2C2->CR1, I2C_CR1_PE);
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <i2c1MasterInit+0x78>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <i2c1MasterInit+0x78>)
 8001836:	2101      	movs	r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	40021000 	.word	0x40021000
 8001848:	40005400 	.word	0x40005400
 800184c:	00303d5b 	.word	0x00303d5b
 8001850:	40005800 	.word	0x40005800
 8001854:	ffff7fff 	.word	0xffff7fff

08001858 <i2c1GpioInit>:

void i2c1GpioInit() {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <i2c1GpioInit+0xb4>)
 800185e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <i2c1GpioInit+0xb4>)
 8001862:	2102      	movs	r1, #2
 8001864:	430a      	orrs	r2, r1
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
	/* SCL PB6  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <i2c1GpioInit+0xb8>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <i2c1GpioInit+0xb8>)
 800186e:	4929      	ldr	r1, [pc, #164]	; (8001914 <i2c1GpioInit+0xbc>)
 8001870:	400a      	ands	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <i2c1GpioInit+0xb8>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <i2c1GpioInit+0xb8>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0189      	lsls	r1, r1, #6
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
	/* SDA PB7 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <i2c1GpioInit+0xb8>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <i2c1GpioInit+0xb8>)
 8001888:	4923      	ldr	r1, [pc, #140]	; (8001918 <i2c1GpioInit+0xc0>)
 800188a:	400a      	ands	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <i2c1GpioInit+0xb8>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <i2c1GpioInit+0xb8>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0209      	lsls	r1, r1, #8
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
	/* SCL PB6 High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED6_0);
	/* SDC PB7  High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_1 |GPIO_OSPEEDR_OSPEED7_0);

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6);
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <i2c1GpioInit+0xb8>)
 800189e:	6a1a      	ldr	r2, [r3, #32]
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <i2c1GpioInit+0xb8>)
 80018a2:	491e      	ldr	r1, [pc, #120]	; (800191c <i2c1GpioInit+0xc4>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6 << 1);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <i2c1GpioInit+0xb8>)
 80018aa:	6a1a      	ldr	r2, [r3, #32]
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <i2c1GpioInit+0xb8>)
 80018ae:	21f0      	movs	r1, #240	; 0xf0
 80018b0:	0549      	lsls	r1, r1, #21
 80018b2:	430a      	orrs	r2, r1
 80018b4:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<2);
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <i2c1GpioInit+0xb8>)
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <i2c1GpioInit+0xb8>)
 80018bc:	21f0      	movs	r1, #240	; 0xf0
 80018be:	0589      	lsls	r1, r1, #22
 80018c0:	430a      	orrs	r2, r1
 80018c2:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<3);
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <i2c1GpioInit+0xb8>)
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <i2c1GpioInit+0xb8>)
 80018ca:	4915      	ldr	r1, [pc, #84]	; (8001920 <i2c1GpioInit+0xc8>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <i2c1GpioInit+0xb8>)
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <i2c1GpioInit+0xb8>)
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	0912      	lsrs	r2, r2, #4
 80018da:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<1);
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <i2c1GpioInit+0xb8>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <i2c1GpioInit+0xb8>)
 80018e2:	21e0      	movs	r1, #224	; 0xe0
 80018e4:	0609      	lsls	r1, r1, #24
 80018e6:	430a      	orrs	r2, r1
 80018e8:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<2);
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <i2c1GpioInit+0xb8>)
 80018ec:	6a1a      	ldr	r2, [r3, #32]
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <i2c1GpioInit+0xb8>)
 80018f0:	21c0      	movs	r1, #192	; 0xc0
 80018f2:	0609      	lsls	r1, r1, #24
 80018f4:	430a      	orrs	r2, r1
 80018f6:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<3);
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <i2c1GpioInit+0xb8>)
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <i2c1GpioInit+0xb8>)
 80018fe:	0052      	lsls	r2, r2, #1
 8001900:	0852      	lsrs	r2, r2, #1
 8001902:	621a      	str	r2, [r3, #32]
}
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	40021000 	.word	0x40021000
 8001910:	50000400 	.word	0x50000400
 8001914:	ffffefff 	.word	0xffffefff
 8001918:	ffffbfff 	.word	0xffffbfff
 800191c:	f0ffffff 	.word	0xf0ffffff
 8001920:	87ffffff 	.word	0x87ffffff

08001924 <i2c1MasterFrameRx>:
	SET_BIT(I2C2->ICR, I2C_ICR_STOPCF);

	return data;
}

void i2c1MasterFrameRx(char saddr, uint8_t *rcv, uint8_t N) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6039      	str	r1, [r7, #0]
 800192c:	0011      	movs	r1, r2
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	1c02      	adds	r2, r0, #0
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	1dbb      	adds	r3, r7, #6
 8001936:	1c0a      	adds	r2, r1, #0
 8001938:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 800193a:	f002 f971 	bl	8003c20 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	613b      	str	r3, [r7, #16]
	bool timeout = false;
 8001942:	230f      	movs	r3, #15
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, READ, N);
 800194a:	1dbb      	adds	r3, r7, #6
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2101      	movs	r1, #1
 8001954:	0018      	movs	r0, r3
 8001956:	f000 f841 	bl	80019dc <i2c1MasterStartTransfer>

	for (int i = 0; i < N; i++) {
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e027      	b.n	80019b0 <i2c1MasterFrameRx+0x8c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 8001960:	f002 f95e 	bl	8003c20 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b14      	cmp	r3, #20
 800196c:	d906      	bls.n	800197c <i2c1MasterFrameRx+0x58>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <i2c1MasterFrameRx+0xb4>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <i2c1MasterFrameRx+0xb4>)
 8001974:	2101      	movs	r1, #1
 8001976:	438a      	bics	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
				return;
 800197a:	e02a      	b.n	80019d2 <i2c1MasterFrameRx+0xae>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <i2c1MasterFrameRx+0xb4>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2204      	movs	r2, #4
 8001982:	4013      	ands	r3, r2
 8001984:	425a      	negs	r2, r3
 8001986:	4153      	adcs	r3, r2
 8001988:	b2db      	uxtb	r3, r3
 800198a:	0019      	movs	r1, r3
 800198c:	230f      	movs	r3, #15
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	4053      	eors	r3, r2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	400b      	ands	r3, r1
 800199a:	d1e1      	bne.n	8001960 <i2c1MasterFrameRx+0x3c>
			}
		}
		rcv[i] = READ_REG(I2C1->RXDR);
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <i2c1MasterFrameRx+0xb4>)
 800199e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	18d3      	adds	r3, r2, r3
 80019a6:	b2ca      	uxtb	r2, r1
 80019a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	1dbb      	adds	r3, r7, #6
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dbe0      	blt.n	800197c <i2c1MasterFrameRx+0x58>

	}
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <i2c1MasterFrameRx+0xb4>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2220      	movs	r2, #32
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0fa      	beq.n	80019bc <i2c1MasterFrameRx+0x98>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <i2c1MasterFrameRx+0xb4>)
 80019c8:	69da      	ldr	r2, [r3, #28]
 80019ca:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <i2c1MasterFrameRx+0xb4>)
 80019cc:	2120      	movs	r1, #32
 80019ce:	430a      	orrs	r2, r1
 80019d0:	61da      	str	r2, [r3, #28]
}
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b006      	add	sp, #24
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40005400 	.word	0x40005400

080019dc <i2c1MasterStartTransfer>:

void i2c1MasterStartTransfer(char saddr, uint8_t transfer_request, uint8_t N) {
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	0004      	movs	r4, r0
 80019e4:	0008      	movs	r0, r1
 80019e6:	0011      	movs	r1, r2
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	1c22      	adds	r2, r4, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	1dbb      	adds	r3, r7, #6
 80019f0:	1c02      	adds	r2, r0, #0
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	1d7b      	adds	r3, r7, #5
 80019f6:	1c0a      	adds	r2, r1, #0
 80019f8:	701a      	strb	r2, [r3, #0]
	/* peripherial disable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
	/* set slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	0a9b      	lsrs	r3, r3, #10
 8001a0c:	0299      	lsls	r1, r3, #10
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a14:	430a      	orrs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]
	/* read N byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <i2c1MasterStartTransfer+0xa8>)
 8001a1e:	401a      	ands	r2, r3
 8001a20:	1d7b      	adds	r3, r7, #5
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	0019      	movs	r1, r3
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0489      	lsls	r1, r1, #18
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */
	if (transfer_request == 1) {
 8001a3c:	1dbb      	adds	r3, r7, #6
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <i2c1MasterStartTransfer+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	00c9      	lsls	r1, r1, #3
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	e009      	b.n	8001a68 <i2c1MasterStartTransfer+0x8c>
	} else if (transfer_request == 0) {
 8001a54:	1dbb      	adds	r3, r7, #6
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <i2c1MasterStartTransfer+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a62:	4909      	ldr	r1, [pc, #36]	; (8001a88 <i2c1MasterStartTransfer+0xac>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <i2c1MasterStartTransfer+0xa4>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	0189      	lsls	r1, r1, #6
 8001a72:	430a      	orrs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]

}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b003      	add	sp, #12
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40005400 	.word	0x40005400
 8001a84:	ff00ffff 	.word	0xff00ffff
 8001a88:	fffffbff 	.word	0xfffffbff

08001a8c <i2c1MasterByteTx>:
		}
	}

}

void i2c1MasterByteTx(uint8_t saddr, uint8_t *data, uint8_t N) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6039      	str	r1, [r7, #0]
 8001a94:	0011      	movs	r1, r2
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	1c02      	adds	r2, r0, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	1dbb      	adds	r3, r7, #6
 8001a9e:	1c0a      	adds	r2, r1, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, WRITE, N);
 8001aa2:	1dbb      	adds	r3, r7, #6
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2100      	movs	r1, #0
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff ff95 	bl	80019dc <i2c1MasterStartTransfer>
	uint32_t counter = HAL_GetTick();
 8001ab2:	f002 f8b5 	bl	8003c20 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e022      	b.n	8001b06 <i2c1MasterByteTx+0x7a>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {

			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 8001ac0:	f002 f8ae 	bl	8003c20 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b14      	cmp	r3, #20
 8001acc:	d906      	bls.n	8001adc <i2c1MasterByteTx+0x50>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <i2c1MasterByteTx+0xa4>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <i2c1MasterByteTx+0xa4>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	438a      	bics	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
				return;
 8001ada:	e025      	b.n	8001b28 <i2c1MasterByteTx+0x9c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <i2c1MasterByteTx+0xa4>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d0ec      	beq.n	8001ac0 <i2c1MasterByteTx+0x34>
			}
		}
		MODIFY_REG(I2C1->TXDR, I2C_TXDR_TXDATA, data[i]);
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <i2c1MasterByteTx+0xa4>)
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	22ff      	movs	r2, #255	; 0xff
 8001aec:	4393      	bics	r3, r2
 8001aee:	001a      	movs	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	18cb      	adds	r3, r1, r3
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	0019      	movs	r1, r3
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <i2c1MasterByteTx+0xa4>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3301      	adds	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	1dbb      	adds	r3, r7, #6
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbe5      	blt.n	8001adc <i2c1MasterByteTx+0x50>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <i2c1MasterByteTx+0xa4>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2220      	movs	r2, #32
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d0fa      	beq.n	8001b12 <i2c1MasterByteTx+0x86>
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <i2c1MasterByteTx+0xa4>)
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <i2c1MasterByteTx+0xa4>)
 8001b22:	2120      	movs	r1, #32
 8001b24:	430a      	orrs	r2, r1
 8001b26:	619a      	str	r2, [r3, #24]

}
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40005400 	.word	0x40005400

08001b34 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8001b3c:	23a0      	movs	r3, #160	; 0xa0
 8001b3e:	05db      	lsls	r3, r3, #23
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	23a0      	movs	r3, #160	; 0xa0
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	01c9      	lsls	r1, r1, #7
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 8001b4e:	23a0      	movs	r3, #160	; 0xa0
 8001b50:	05db      	lsls	r3, r3, #23
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	23a0      	movs	r3, #160	; 0xa0
 8001b56:	05db      	lsls	r3, r3, #23
 8001b58:	4911      	ldr	r1, [pc, #68]	; (8001ba0 <ledInit+0x6c>)
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <ledInit+0x70>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <ledInit+0x70>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <ledInit+0x70>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <ledInit+0x70>)
 8001b70:	2102      	movs	r1, #2
 8001b72:	438a      	bics	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <ledInit+0x70>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <ledInit+0x70>)
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <ledInit+0x70>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <ledInit+0x70>)
 8001b88:	2108      	movs	r1, #8
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
	led_reset(led);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 f839 	bl	8001c08 <led_reset>
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	ffff7fff 	.word	0xffff7fff
 8001ba4:	50000400 	.word	0x50000400

08001ba8 <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->kaCounter > LED_KA_STATE_TIMEOUT)
 8001bb0:	f002 f836 	bl	8003c20 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	1ad2      	subs	r2, r2, r3
 8001bbc:	23fa      	movs	r3, #250	; 0xfa
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d905      	bls.n	8001bd0 <led_enable_kalive+0x28>
		l->kaCounter = HAL_GetTick();
 8001bc4:	f002 f82c 	bl	8003c20 <HAL_GetTick>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
			SYS_RP_LED_OFF();
		else
			SYS_RP_LED_ON();
	}
}
 8001bce:	e014      	b.n	8001bfa <led_enable_kalive+0x52>
		if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
 8001bd0:	f002 f826 	bl	8003c20 <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b32      	cmp	r3, #50	; 0x32
 8001bde:	d906      	bls.n	8001bee <led_enable_kalive+0x46>
			SYS_RP_LED_OFF();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <led_enable_kalive+0x5c>)
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <led_enable_kalive+0x5c>)
 8001be6:	2102      	movs	r1, #2
 8001be8:	438a      	bics	r2, r1
 8001bea:	615a      	str	r2, [r3, #20]
}
 8001bec:	e005      	b.n	8001bfa <led_enable_kalive+0x52>
			SYS_RP_LED_ON();
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <led_enable_kalive+0x5c>)
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <led_enable_kalive+0x5c>)
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	615a      	str	r2, [r3, #20]
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	50000400 	.word	0x50000400

08001c08 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8001c22:	f001 fffd 	bl	8003c20 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <m24c64ReadNBytes>:

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
	i2c1MasterFrameRx(CHIP_ADDR, data, 32);
}

void m24c64ReadNBytes(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	0004      	movs	r4, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	0010      	movs	r0, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	1c22      	adds	r2, r4, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	1dbb      	adds	r3, r7, #6
 8001c5e:	1c02      	adds	r2, r0, #0
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	1d7b      	adds	r3, r7, #5
 8001c64:	1c0a      	adds	r2, r1, #0
 8001c66:	701a      	strb	r2, [r3, #0]
	uint8_t buff[1] = { 0 };
 8001c68:	210c      	movs	r1, #12
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <m24c64ReadNBytes+0x74>)
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	1dbb      	adds	r3, r7, #6
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	200e      	movs	r0, #14
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	801a      	strh	r2, [r3, #0]

	//buff[0] = MemAddress >> 8;
	buff[0] = MemAddress & 0xff;
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	701a      	strb	r2, [r3, #0]

	i2c1MasterByteTx(CHIP_ADDR, buff, 1);
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	2201      	movs	r2, #1
 8001c98:	0019      	movs	r1, r3
 8001c9a:	20a0      	movs	r0, #160	; 0xa0
 8001c9c:	f7ff fef6 	bl	8001a8c <i2c1MasterByteTx>
	HAL_Delay(5);
 8001ca0:	2005      	movs	r0, #5
 8001ca2:	f001 ffc7 	bl	8003c34 <HAL_Delay>
	i2c1MasterFrameRx(CHIP_ADDR, data, size);
 8001ca6:	1d7b      	adds	r3, r7, #5
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	0019      	movs	r1, r3
 8001cae:	20a0      	movs	r0, #160	; 0xa0
 8001cb0:	f7ff fe38 	bl	8001924 <i2c1MasterFrameRx>
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b005      	add	sp, #20
 8001cba:	bd90      	pop	{r4, r7, pc}
 8001cbc:	08005cfc 	.word	0x08005cfc

08001cc0 <m24c64WriteNBytes>:

void m24c64WriteNBytes(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b097      	sub	sp, #92	; 0x5c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cc8:	0011      	movs	r1, r2
 8001cca:	001e      	movs	r6, r3
 8001ccc:	233f      	movs	r3, #63	; 0x3f
 8001cce:	18fa      	adds	r2, r7, r3
 8001cd0:	1c03      	adds	r3, r0, #0
 8001cd2:	7013      	strb	r3, [r2, #0]
 8001cd4:	233e      	movs	r3, #62	; 0x3e
 8001cd6:	18fa      	adds	r2, r7, r3
 8001cd8:	1c0b      	adds	r3, r1, #0
 8001cda:	7013      	strb	r3, [r2, #0]
 8001cdc:	233d      	movs	r3, #61	; 0x3d
 8001cde:	18fa      	adds	r2, r7, r3
 8001ce0:	1c33      	adds	r3, r6, #0
 8001ce2:	7013      	strb	r3, [r2, #0]
 8001ce4:	466b      	mov	r3, sp
 8001ce6:	001e      	movs	r6, r3
	uint8_t buff[size + 1];
 8001ce8:	233d      	movs	r3, #61	; 0x3d
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	1e53      	subs	r3, r2, #1
 8001cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69b8      	ldr	r0, [r7, #24]
 8001cfe:	69f9      	ldr	r1, [r7, #28]
 8001d00:	0003      	movs	r3, r0
 8001d02:	0f5b      	lsrs	r3, r3, #29
 8001d04:	469c      	mov	ip, r3
 8001d06:	000b      	movs	r3, r1
 8001d08:	00dd      	lsls	r5, r3, #3
 8001d0a:	4663      	mov	r3, ip
 8001d0c:	431d      	orrs	r5, r3
 8001d0e:	0003      	movs	r3, r0
 8001d10:	00dc      	lsls	r4, r3, #3
 8001d12:	0013      	movs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	6938      	ldr	r0, [r7, #16]
 8001d1c:	6979      	ldr	r1, [r7, #20]
 8001d1e:	0003      	movs	r3, r0
 8001d20:	0f5b      	lsrs	r3, r3, #29
 8001d22:	000c      	movs	r4, r1
 8001d24:	00e4      	lsls	r4, r4, #3
 8001d26:	637c      	str	r4, [r7, #52]	; 0x34
 8001d28:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001d2a:	431c      	orrs	r4, r3
 8001d2c:	637c      	str	r4, [r7, #52]	; 0x34
 8001d2e:	0003      	movs	r3, r0
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
 8001d34:	0013      	movs	r3, r2
 8001d36:	3307      	adds	r3, #7
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	466a      	mov	r2, sp
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	469d      	mov	sp, r3
 8001d42:	466b      	mov	r3, sp
 8001d44:	3300      	adds	r3, #0
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t read[size];
 8001d48:	233d      	movs	r3, #61	; 0x3d
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	001a      	movs	r2, r3
 8001d50:	3a01      	subs	r2, #1
 8001d52:	64ba      	str	r2, [r7, #72]	; 0x48
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	2200      	movs	r2, #0
 8001d58:	60fa      	str	r2, [r7, #12]
 8001d5a:	68b8      	ldr	r0, [r7, #8]
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	0002      	movs	r2, r0
 8001d60:	0f52      	lsrs	r2, r2, #29
 8001d62:	000c      	movs	r4, r1
 8001d64:	00e4      	lsls	r4, r4, #3
 8001d66:	62fc      	str	r4, [r7, #44]	; 0x2c
 8001d68:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001d6a:	4314      	orrs	r4, r2
 8001d6c:	62fc      	str	r4, [r7, #44]	; 0x2c
 8001d6e:	0002      	movs	r2, r0
 8001d70:	00d2      	lsls	r2, r2, #3
 8001d72:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	0002      	movs	r2, r0
 8001d80:	0f52      	lsrs	r2, r2, #29
 8001d82:	000c      	movs	r4, r1
 8001d84:	00e4      	lsls	r4, r4, #3
 8001d86:	627c      	str	r4, [r7, #36]	; 0x24
 8001d88:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001d8a:	4314      	orrs	r4, r2
 8001d8c:	627c      	str	r4, [r7, #36]	; 0x24
 8001d8e:	0002      	movs	r2, r0
 8001d90:	00d2      	lsls	r2, r2, #3
 8001d92:	623a      	str	r2, [r7, #32]
 8001d94:	3307      	adds	r3, #7
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	466a      	mov	r2, sp
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	469d      	mov	sp, r3
 8001da0:	466b      	mov	r3, sp
 8001da2:	3300      	adds	r3, #0
 8001da4:	647b      	str	r3, [r7, #68]	; 0x44

	m24c64ReadNBytes(page, read, offset, size);
 8001da6:	233d      	movs	r3, #61	; 0x3d
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781c      	ldrb	r4, [r3, #0]
 8001dac:	233e      	movs	r3, #62	; 0x3e
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001db4:	233f      	movs	r3, #63	; 0x3f
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	7818      	ldrb	r0, [r3, #0]
 8001dba:	0023      	movs	r3, r4
 8001dbc:	f7ff ff44 	bl	8001c48 <m24c64ReadNBytes>

	if (strncmp((const char*) data, (const char*) read, (size_t) size)) {
 8001dc0:	233d      	movs	r3, #61	; 0x3d
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f003 fb2e 	bl	800542c <strncmp>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d02b      	beq.n	8001e2c <m24c64WriteNBytes+0x16c>
		//buff[0] = (page << PADDRPOSITION | offset) >> 8;
		buff[0] = (page << PADDRPOSITION | offset) & 0xff;
 8001dd4:	233f      	movs	r3, #63	; 0x3f
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	b25a      	sxtb	r2, r3
 8001dde:	233e      	movs	r3, #62	; 0x3e
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	4313      	orrs	r3, r2
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dee:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < size; i++) {
 8001df0:	2300      	movs	r3, #0
 8001df2:	653b      	str	r3, [r7, #80]	; 0x50
 8001df4:	e00a      	b.n	8001e0c <m24c64WriteNBytes+0x14c>
			buff[i + 1] = data[i];
 8001df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dfa:	18d2      	adds	r2, r2, r3
 8001dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfe:	3301      	adds	r3, #1
 8001e00:	7811      	ldrb	r1, [r2, #0]
 8001e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e04:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < size; i++) {
 8001e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e08:	3301      	adds	r3, #1
 8001e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8001e0c:	233d      	movs	r3, #61	; 0x3d
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbee      	blt.n	8001df6 <m24c64WriteNBytes+0x136>
		}
		i2c1MasterByteTx(CHIP_ADDR, buff, size + 1);
 8001e18:	233d      	movs	r3, #61	; 0x3d
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e24:	0019      	movs	r1, r3
 8001e26:	20a0      	movs	r0, #160	; 0xa0
 8001e28:	f7ff fe30 	bl	8001a8c <i2c1MasterByteTx>
	}
	HAL_Delay(6);
 8001e2c:	2006      	movs	r0, #6
 8001e2e:	f001 ff01 	bl	8003c34 <HAL_Delay>
 8001e32:	46b5      	mov	sp, r6
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b017      	add	sp, #92	; 0x5c
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e3c <getULFromEeprom>:
	m24c64WriteNBytes(BASE_ADDR, buff, addr + 1, 2);
	buff[0] = addr;
	m24c64WriteNBytes(BASE_ADDR, buff, addr, 1);
}

unsigned long getULFromEeprom(uint8_t page) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	0002      	movs	r2, r0
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	701a      	strb	r2, [r3, #0]
	//uint8_t size = sizeof(unsigned long);
	uint8_t buffer[4] = {0};
 8001e48:	210c      	movs	r1, #12
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
	unsigned long readValue = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
	m24c64ReadNBytes(page, buffer, 0, 4);
 8001e54:	1879      	adds	r1, r7, r1
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	7818      	ldrb	r0, [r3, #0]
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f7ff fef3 	bl	8001c48 <m24c64ReadNBytes>
	for (int i = 0; i < 4; i++) {
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	e010      	b.n	8001e8a <getULFromEeprom+0x4e>
		readValue |= (buffer[i] << ((i) * 8));
 8001e68:	230c      	movs	r3, #12
 8001e6a:	18fa      	adds	r2, r7, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	18d3      	adds	r3, r2, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	001a      	movs	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 4; i++) {
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	3301      	adds	r3, #1
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	ddeb      	ble.n	8001e68 <getULFromEeprom+0x2c>
	}
	return readValue;
 8001e90:	697b      	ldr	r3, [r7, #20]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b006      	add	sp, #24
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <getFreqSum>:
MAX2871_t *ppl_ptr;
UART1_t *uart1_ptr;
Tone_uhf_t *uhf_ptr;
RS485_t *rs485_ptr;

unsigned long getFreqSum(unsigned long FreqBase) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	unsigned long suma_read;

	suma_read = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) ? 0 : FREQ_STEP;
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <getFreqSum+0x14c>)
 8001eaa:	2104      	movs	r1, #4
 8001eac:	0018      	movs	r0, r3
 8001eae:	f002 f9d1 	bl	8004254 <HAL_GPIO_ReadPin>
 8001eb2:	1e03      	subs	r3, r0, #0
 8001eb4:	d001      	beq.n	8001eba <getFreqSum+0x1e>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <getFreqSum+0x20>
 8001eba:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <getFreqSum+0x150>)
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	189b      	adds	r3, r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) ? 0 : FREQ_STEP * 2;
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	005a      	lsls	r2, r3, #1
 8001ec8:	23a0      	movs	r3, #160	; 0xa0
 8001eca:	05db      	lsls	r3, r3, #23
 8001ecc:	0011      	movs	r1, r2
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f002 f9c0 	bl	8004254 <HAL_GPIO_ReadPin>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <getFreqSum+0x40>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e000      	b.n	8001ede <getFreqSum+0x42>
 8001edc:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <getFreqSum+0x154>)
 8001ede:	001a      	movs	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	189b      	adds	r3, r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) ? 0 : FREQ_STEP * 4;
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <getFreqSum+0x158>)
 8001ee8:	2140      	movs	r1, #64	; 0x40
 8001eea:	0018      	movs	r0, r3
 8001eec:	f002 f9b2 	bl	8004254 <HAL_GPIO_ReadPin>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d001      	beq.n	8001ef8 <getFreqSum+0x5c>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <getFreqSum+0x5e>
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <getFreqSum+0x15c>)
 8001efa:	001a      	movs	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	189b      	adds	r3, r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) ? 0 : FREQ_STEP * 8;
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	011a      	lsls	r2, r3, #4
 8001f06:	23a0      	movs	r3, #160	; 0xa0
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f002 f9a1 	bl	8004254 <HAL_GPIO_ReadPin>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <getFreqSum+0x7e>
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <getFreqSum+0x80>
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <getFreqSum+0x160>)
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	189b      	adds	r3, r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_4_GPIO_Port, SW_4_Pin) ? 0 : FREQ_STEP * 16;
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	23a0      	movs	r3, #160	; 0xa0
 8001f2a:	05db      	lsls	r3, r3, #23
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f002 f990 	bl	8004254 <HAL_GPIO_ReadPin>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d001      	beq.n	8001f3c <getFreqSum+0xa0>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <getFreqSum+0xa2>
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <getFreqSum+0x164>)
 8001f3e:	001a      	movs	r2, r3
	suma_read +=
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	189b      	adds	r3, r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin) ? 0 : FREQ_STEP * 32;
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	021a      	lsls	r2, r3, #8
 8001f4a:	23a0      	movs	r3, #160	; 0xa0
 8001f4c:	05db      	lsls	r3, r3, #23
 8001f4e:	0011      	movs	r1, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	f002 f97f 	bl	8004254 <HAL_GPIO_ReadPin>
 8001f56:	1e03      	subs	r3, r0, #0
 8001f58:	d001      	beq.n	8001f5e <getFreqSum+0xc2>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <getFreqSum+0xc4>
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <getFreqSum+0x168>)
 8001f60:	001a      	movs	r2, r3
	suma_read +=
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	189b      	adds	r3, r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_6_GPIO_Port, SW_6_Pin) ? 0 : FREQ_STEP * 64;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <getFreqSum+0x14c>)
 8001f6a:	2108      	movs	r1, #8
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f002 f971 	bl	8004254 <HAL_GPIO_ReadPin>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d001      	beq.n	8001f7a <getFreqSum+0xde>
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <getFreqSum+0xe0>
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <getFreqSum+0x16c>)
 8001f7c:	001a      	movs	r2, r3
	suma_read +=
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	189b      	adds	r3, r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_7_GPIO_Port, SW_7_Pin) ? 0 : FREQ_STEP * 128;
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <getFreqSum+0x14c>)
 8001f86:	2110      	movs	r1, #16
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f002 f963 	bl	8004254 <HAL_GPIO_ReadPin>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d001      	beq.n	8001f96 <getFreqSum+0xfa>
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <getFreqSum+0xfc>
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <getFreqSum+0x170>)
 8001f98:	001a      	movs	r2, r3
	suma_read +=
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	189b      	adds	r3, r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_8_GPIO_Port, SW_8_Pin) ? 0 : FREQ_STEP * 256;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <getFreqSum+0x14c>)
 8001fa2:	2120      	movs	r1, #32
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f002 f955 	bl	8004254 <HAL_GPIO_ReadPin>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d001      	beq.n	8001fb2 <getFreqSum+0x116>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <getFreqSum+0x118>
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <getFreqSum+0x174>)
 8001fb4:	001a      	movs	r2, r3
	suma_read +=
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	189b      	adds	r3, r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_9_GPIO_Port, SW_9_Pin) ? 0 : FREQ_STEP * 512;
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <getFreqSum+0x14c>)
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	0010      	movs	r0, r2
 8001fc6:	f002 f945 	bl	8004254 <HAL_GPIO_ReadPin>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <getFreqSum+0x136>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <getFreqSum+0x138>
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <getFreqSum+0x178>)
 8001fd4:	001a      	movs	r2, r3
	suma_read +=
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	189b      	adds	r3, r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
	return suma_read;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	50000400 	.word	0x50000400
 8001fec:	000030d4 	.word	0x000030d4
 8001ff0:	000061a8 	.word	0x000061a8
 8001ff4:	50000800 	.word	0x50000800
 8001ff8:	0000c350 	.word	0x0000c350
 8001ffc:	000186a0 	.word	0x000186a0
 8002000:	00030d40 	.word	0x00030d40
 8002004:	00061a80 	.word	0x00061a80
 8002008:	000c3500 	.word	0x000c3500
 800200c:	00186a00 	.word	0x00186a00
 8002010:	0030d400 	.word	0x0030d400
 8002014:	0061a800 	.word	0x0061a800

08002018 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	uart1_read_to_frame(uart1_ptr);
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <USART1_IRQHandler+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0018      	movs	r0, r3
 8002022:	f001 fcc5 	bl	80039b0 <uart1_read_to_frame>
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000118 	.word	0x20000118

08002030 <freqOutCmdUpdate>:

void freqOutCmdUpdate(const UART1_t *uart1, MAX2871_t *ppl) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
	unsigned long receiveValue;
	receiveValue = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1->rxBuffer[4] << 24;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	791b      	ldrb	r3, [r3, #4]
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[5] << 16;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	795b      	ldrb	r3, [r3, #5]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	001a      	movs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[6] << 8;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	799b      	ldrb	r3, [r3, #6]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	001a      	movs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[7];
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	79db      	ldrb	r3, [r3, #7]
 8002066:	001a      	movs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
	if ((receiveValue > FREQ_OUT_MIN) && (receiveValue < FREQ_OUT_MAX)) {
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4a16      	ldr	r2, [pc, #88]	; (80020cc <freqOutCmdUpdate+0x9c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d917      	bls.n	80020a6 <freqOutCmdUpdate+0x76>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <freqOutCmdUpdate+0xa0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d813      	bhi.n	80020a6 <freqOutCmdUpdate+0x76>
		ppl->freqOut = receiveValue;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]
		sprintf(uart1->txBuffer, "New Frequency Out: %u\n", receiveValue);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3319      	adds	r3, #25
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4912      	ldr	r1, [pc, #72]	; (80020d4 <freqOutCmdUpdate+0xa4>)
 800208c:	0018      	movs	r0, r3
 800208e:	f003 f9ad 	bl	80053ec <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3319      	adds	r3, #25
 8002096:	2164      	movs	r1, #100	; 0x64
 8002098:	0018      	movs	r0, r3
 800209a:	f001 fcd1 	bl	8003a40 <uart1_send_frame>
		ppl->freqOutUpdate = true;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	761a      	strb	r2, [r3, #24]
 80020a4:	e00d      	b.n	80020c2 <freqOutCmdUpdate+0x92>
	} else {
		sprintf(uart1->txBuffer, "OUT OF RANGE \n");
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3319      	adds	r3, #25
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <freqOutCmdUpdate+0xa8>)
 80020ac:	0011      	movs	r1, r2
 80020ae:	0018      	movs	r0, r3
 80020b0:	f003 f99c 	bl	80053ec <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3319      	adds	r3, #25
 80020b8:	2164      	movs	r1, #100	; 0x64
 80020ba:	0018      	movs	r0, r3
 80020bc:	f001 fcc0 	bl	8003a40 <uart1_send_frame>
	}
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b004      	add	sp, #16
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	087e60a0 	.word	0x087e60a0
 80020d0:	099bb77f 	.word	0x099bb77f
 80020d4:	08005d00 	.word	0x08005d00
 80020d8:	08005d18 	.word	0x08005d18

080020dc <freqBaseCmdUpdate>:

void freqBaseCmdUpdate(const UART1_t *uart1, MAX2871_t *ppl) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	unsigned long receiveValue;
	receiveValue = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1->rxBuffer[4] << 24;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	791b      	ldrb	r3, [r3, #4]
 80020ee:	061b      	lsls	r3, r3, #24
 80020f0:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[5] << 16;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	795b      	ldrb	r3, [r3, #5]
 80020f6:	041b      	lsls	r3, r3, #16
 80020f8:	001a      	movs	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[6] << 8;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	799b      	ldrb	r3, [r3, #6]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	001a      	movs	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[7];
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	79db      	ldrb	r3, [r3, #7]
 8002112:	001a      	movs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
	if ((receiveValue > FREQ_BASE_MIN) && (receiveValue < FREQ_BASE_MAX)) {
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <freqBaseCmdUpdate+0xa8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d91e      	bls.n	8002160 <freqBaseCmdUpdate+0x84>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <freqBaseCmdUpdate+0xac>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d81a      	bhi.n	8002160 <freqBaseCmdUpdate+0x84>
		ppl->freqBase = receiveValue;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	611a      	str	r2, [r3, #16]
		ppl->freqOut = ppl->freqSumRead + ppl->freqBase;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	18d2      	adds	r2, r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	601a      	str	r2, [r3, #0]
		ppl->freqOutUpdate = true;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	761a      	strb	r2, [r3, #24]
		sprintf(uart1->txBuffer, "New Base Frequency: %u\n", receiveValue);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3319      	adds	r3, #25
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4910      	ldr	r1, [pc, #64]	; (800218c <freqBaseCmdUpdate+0xb0>)
 800214c:	0018      	movs	r0, r3
 800214e:	f003 f94d 	bl	80053ec <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3319      	adds	r3, #25
 8002156:	2164      	movs	r1, #100	; 0x64
 8002158:	0018      	movs	r0, r3
 800215a:	f001 fc71 	bl	8003a40 <uart1_send_frame>
 800215e:	e00d      	b.n	800217c <freqBaseCmdUpdate+0xa0>
	} else {
		sprintf(uart1->txBuffer, "OUT OF RANGE \n");
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3319      	adds	r3, #25
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <freqBaseCmdUpdate+0xb4>)
 8002166:	0011      	movs	r1, r2
 8002168:	0018      	movs	r0, r3
 800216a:	f003 f93f 	bl	80053ec <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3319      	adds	r3, #25
 8002172:	2164      	movs	r1, #100	; 0x64
 8002174:	0018      	movs	r0, r3
 8002176:	f001 fc63 	bl	8003a40 <uart1_send_frame>
	}
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}
 8002184:	087e60a0 	.word	0x087e60a0
 8002188:	08d89853 	.word	0x08d89853
 800218c:	08005d28 	.word	0x08005d28
 8002190:	08005d18 	.word	0x08005d18

08002194 <printParameters>:

void printParameters(const UART1_t *uart1, MAX2871_t *ppl) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
	if (ppl->register4.APWR == 0) {
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	22d0      	movs	r2, #208	; 0xd0
 80021a2:	589b      	ldr	r3, [r3, r2]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10f      	bne.n	80021c8 <printParameters+0x34>
		sprintf((char*) uart1->txBuffer,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3319      	adds	r3, #25
 80021ac:	0018      	movs	r0, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	4926      	ldr	r1, [pc, #152]	; (8002250 <printParameters+0xbc>)
 80021b8:	f003 f918 	bl	80053ec <siprintf>
				"Frequency: %lu\nBase Frequency: %lu\nPower out: -4 [dBm]\n",
				ppl->freqOut, ppl->freqBase);
		uart1_send_frame((uint8_t*) uart1->txBuffer, TX_BUFFLEN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3319      	adds	r3, #25
 80021c0:	2164      	movs	r1, #100	; 0x64
 80021c2:	0018      	movs	r0, r3
 80021c4:	f001 fc3c 	bl	8003a40 <uart1_send_frame>
	}
	if (ppl->register4.APWR == 1) {
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	22d0      	movs	r2, #208	; 0xd0
 80021cc:	589b      	ldr	r3, [r3, r2]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10f      	bne.n	80021f2 <printParameters+0x5e>
		sprintf((char*) uart1->txBuffer,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3319      	adds	r3, #25
 80021d6:	0018      	movs	r0, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	491c      	ldr	r1, [pc, #112]	; (8002254 <printParameters+0xc0>)
 80021e2:	f003 f903 	bl	80053ec <siprintf>
				"Frequency: %lu\nBase Frequency: %lu\nPower out: -1 [dBm]\n",
				ppl->freqOut, ppl->freqBase);
		uart1_send_frame((uint8_t*) uart1->txBuffer, TX_BUFFLEN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3319      	adds	r3, #25
 80021ea:	2164      	movs	r1, #100	; 0x64
 80021ec:	0018      	movs	r0, r3
 80021ee:	f001 fc27 	bl	8003a40 <uart1_send_frame>
	}
	if (ppl->register4.APWR == 2) {
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	22d0      	movs	r2, #208	; 0xd0
 80021f6:	589b      	ldr	r3, [r3, r2]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d10f      	bne.n	800221c <printParameters+0x88>
		sprintf((char*) uart1->txBuffer,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3319      	adds	r3, #25
 8002200:	0018      	movs	r0, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	4913      	ldr	r1, [pc, #76]	; (8002258 <printParameters+0xc4>)
 800220c:	f003 f8ee 	bl	80053ec <siprintf>
				"Frequency: %lu\nBase Frequency: %lu\nPower out: +2 [dBm]\n",
				ppl->freqOut, ppl->freqBase);
		uart1_send_frame((uint8_t*) uart1->txBuffer, TX_BUFFLEN);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3319      	adds	r3, #25
 8002214:	2164      	movs	r1, #100	; 0x64
 8002216:	0018      	movs	r0, r3
 8002218:	f001 fc12 	bl	8003a40 <uart1_send_frame>
	}
	if (ppl->register4.APWR == 3) {
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	22d0      	movs	r2, #208	; 0xd0
 8002220:	589b      	ldr	r3, [r3, r2]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d10f      	bne.n	8002246 <printParameters+0xb2>
		sprintf((char*) uart1->txBuffer,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3319      	adds	r3, #25
 800222a:	0018      	movs	r0, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	4909      	ldr	r1, [pc, #36]	; (800225c <printParameters+0xc8>)
 8002236:	f003 f8d9 	bl	80053ec <siprintf>
				"Frequency: %lu\nBase Frequency: %lu\nPower out: +5 [dBm]\n",
				ppl->freqOut, ppl->freqBase);
		uart1_send_frame((uint8_t*) uart1->txBuffer, TX_BUFFLEN);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3319      	adds	r3, #25
 800223e:	2164      	movs	r1, #100	; 0x64
 8002240:	0018      	movs	r0, r3
 8002242:	f001 fbfd 	bl	8003a40 <uart1_send_frame>
	}
}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	08005d40 	.word	0x08005d40
 8002254:	08005d78 	.word	0x08005d78
 8002258:	08005db0 	.word	0x08005db0
 800225c:	08005de8 	.word	0x08005de8

08002260 <ParametersCmd>:

void ParametersCmd(const UART1_t *uart1, MAX2871_t *ppl) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	unsigned long receiveValue;
	receiveValue = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1->rxBuffer[4] << 24;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[5] << 16;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	795b      	ldrb	r3, [r3, #5]
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	001a      	movs	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[6] << 8;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	799b      	ldrb	r3, [r3, #6]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	001a      	movs	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[7];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	79db      	ldrb	r3, [r3, #7]
 8002296:	001a      	movs	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
	if (receiveValue == 0) {
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <ParametersCmd+0x50>
		printParameters(uart1, ppl);
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	0011      	movs	r1, r2
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7ff ff72 	bl	8002194 <printParameters>
	}
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <powerOutCmdUpdate>:

void powerOutCmdUpdate(const UART1_t *uart1, MAX2871_t *ppl) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	unsigned long receiveValue;
	receiveValue = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1->rxBuffer[4] << 24;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	791b      	ldrb	r3, [r3, #4]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[5] << 16;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	795b      	ldrb	r3, [r3, #5]
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	001a      	movs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[6] << 8;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	799b      	ldrb	r3, [r3, #6]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	001a      	movs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[7];
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	79db      	ldrb	r3, [r3, #7]
 80022ee:	001a      	movs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
	if (receiveValue == 0) {
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d113      	bne.n	8002324 <powerOutCmdUpdate+0x6c>
		//Power out -4dBm
		ppl->register4.APWR = 0x0UL;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	22d0      	movs	r2, #208	; 0xd0
 8002300:	2100      	movs	r1, #0
 8002302:	5099      	str	r1, [r3, r2]
		ppl->freqOutUpdate = true;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	761a      	strb	r2, [r3, #24]
		sprintf(uart1->txBuffer, "PdBm out = -4[dBm] \n");
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3319      	adds	r3, #25
 800230e:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <powerOutCmdUpdate+0x100>)
 8002310:	0011      	movs	r1, r2
 8002312:	0018      	movs	r0, r3
 8002314:	f003 f86a 	bl	80053ec <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3319      	adds	r3, #25
 800231c:	2164      	movs	r1, #100	; 0x64
 800231e:	0018      	movs	r0, r3
 8002320:	f001 fb8e 	bl	8003a40 <uart1_send_frame>
	}
	if (receiveValue == 1) {
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d113      	bne.n	8002352 <powerOutCmdUpdate+0x9a>
		//Power out -1dBm
		ppl->register4.APWR = 0x1UL;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	22d0      	movs	r2, #208	; 0xd0
 800232e:	2101      	movs	r1, #1
 8002330:	5099      	str	r1, [r3, r2]
		ppl->freqOutUpdate = true;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	761a      	strb	r2, [r3, #24]
		sprintf(uart1->txBuffer, "PdBm out = -1[dBm] \n");
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3319      	adds	r3, #25
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <powerOutCmdUpdate+0x104>)
 800233e:	0011      	movs	r1, r2
 8002340:	0018      	movs	r0, r3
 8002342:	f003 f853 	bl	80053ec <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3319      	adds	r3, #25
 800234a:	2164      	movs	r1, #100	; 0x64
 800234c:	0018      	movs	r0, r3
 800234e:	f001 fb77 	bl	8003a40 <uart1_send_frame>
	}
	if (receiveValue == 2) {
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d113      	bne.n	8002380 <powerOutCmdUpdate+0xc8>
		//Power out +2dBm
		ppl->register4.APWR = 0x2UL;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	22d0      	movs	r2, #208	; 0xd0
 800235c:	2102      	movs	r1, #2
 800235e:	5099      	str	r1, [r3, r2]
		ppl->freqOutUpdate = true;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	761a      	strb	r2, [r3, #24]
		sprintf(uart1->txBuffer, "PdBm out = +2[dBm] \n");
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3319      	adds	r3, #25
 800236a:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <powerOutCmdUpdate+0x108>)
 800236c:	0011      	movs	r1, r2
 800236e:	0018      	movs	r0, r3
 8002370:	f003 f83c 	bl	80053ec <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3319      	adds	r3, #25
 8002378:	2164      	movs	r1, #100	; 0x64
 800237a:	0018      	movs	r0, r3
 800237c:	f001 fb60 	bl	8003a40 <uart1_send_frame>
	}
	if (receiveValue == 3) {
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d113      	bne.n	80023ae <powerOutCmdUpdate+0xf6>
		//Power out +5dBm
		ppl->register4.APWR = 0x3UL;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	22d0      	movs	r2, #208	; 0xd0
 800238a:	2103      	movs	r1, #3
 800238c:	5099      	str	r1, [r3, r2]
		ppl->freqOutUpdate = true;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	761a      	strb	r2, [r3, #24]
		sprintf(uart1->txBuffer, "PdBm out = +5[dBm] \n");
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3319      	adds	r3, #25
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <powerOutCmdUpdate+0x10c>)
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f003 f825 	bl	80053ec <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3319      	adds	r3, #25
 80023a6:	2164      	movs	r1, #100	; 0x64
 80023a8:	0018      	movs	r0, r3
 80023aa:	f001 fb49 	bl	8003a40 <uart1_send_frame>
	}
}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	08005e20 	.word	0x08005e20
 80023bc:	08005e38 	.word	0x08005e38
 80023c0:	08005e50 	.word	0x08005e50
 80023c4:	08005e68 	.word	0x08005e68

080023c8 <freqOutRs485Update>:

void freqOutRs485Update(const UART1_t *uart1, RS485_t *rs485, MAX2871_t *ppl) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	unsigned long receiveValue;
	switch (rs485->cmd) {
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b34      	cmp	r3, #52	; 0x34
 80023da:	d026      	beq.n	800242a <freqOutRs485Update+0x62>
 80023dc:	dc2f      	bgt.n	800243e <freqOutRs485Update+0x76>
 80023de:	2b33      	cmp	r3, #51	; 0x33
 80023e0:	d019      	beq.n	8002416 <freqOutRs485Update+0x4e>
 80023e2:	dc2c      	bgt.n	800243e <freqOutRs485Update+0x76>
 80023e4:	2b31      	cmp	r3, #49	; 0x31
 80023e6:	d002      	beq.n	80023ee <freqOutRs485Update+0x26>
 80023e8:	2b32      	cmp	r3, #50	; 0x32
 80023ea:	d00a      	beq.n	8002402 <freqOutRs485Update+0x3a>
 80023ec:	e027      	b.n	800243e <freqOutRs485Update+0x76>
	case QUERY_PARAMETER_FREQOUT: //cmd = 31
		freqOutCmdUpdate(uart1, ppl);
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	0011      	movs	r1, r2
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff fe1b 	bl	8002030 <freqOutCmdUpdate>
		rs485->cmd = NONE;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
		break;
 8002400:	e021      	b.n	8002446 <freqOutRs485Update+0x7e>
	case QUERY_PARAMETERS: //cmd = 32
		ParametersCmd(uart1, ppl);
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	0011      	movs	r1, r2
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff ff29 	bl	8002260 <ParametersCmd>
		rs485->cmd = NONE;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
		break;
 8002414:	e017      	b.n	8002446 <freqOutRs485Update+0x7e>
	case QUERY_PARAMETER_FREQBASE: //cmd = 33
		freqBaseCmdUpdate(uart1, ppl);
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0011      	movs	r1, r2
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff fe5d 	bl	80020dc <freqBaseCmdUpdate>
		rs485->cmd = NONE;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
		break;
 8002428:	e00d      	b.n	8002446 <freqOutRs485Update+0x7e>
	case QUERY_PARAMETER_PdBm: //cmd = 34
		powerOutCmdUpdate(uart1, ppl);
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	0011      	movs	r1, r2
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff ff41 	bl	80022b8 <powerOutCmdUpdate>
		rs485->cmd = NONE;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
		break;
 800243c:	e003      	b.n	8002446 <freqOutRs485Update+0x7e>
	default:
		rs485->cmd = NONE;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
		break;
 8002444:	46c0      	nop			; (mov r8, r8)
	}
}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b004      	add	sp, #16
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <freqOutSWUpdate>:

void freqOutSWUpdate(const UART1_t *uart1, MAX2871_t *ppl) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]

	ppl->freqSumRead = getFreqSum(ppl->freqBase);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	0018      	movs	r0, r3
 8002460:	f7ff fd1c 	bl	8001e9c <getFreqSum>
 8002464:	0002      	movs	r2, r0
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	609a      	str	r2, [r3, #8]
	if (ppl->freqSumRead != ppl->freqSumNew) {
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	429a      	cmp	r2, r3
 8002474:	d00e      	beq.n	8002494 <freqOutSWUpdate+0x44>
		ppl->lastFreqSumReadTick = HAL_GetTick();
 8002476:	f001 fbd3 	bl	8003c20 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	615a      	str	r2, [r3, #20]
		FREQ_CHANGING_ON_LED();
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <freqOutSWUpdate+0xb4>)
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <freqOutSWUpdate+0xb4>)
 8002486:	2101      	movs	r1, #1
 8002488:	430a      	orrs	r2, r1
 800248a:	615a      	str	r2, [r3, #20]
		ppl->freqSumNew = ppl->freqSumRead;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	60da      	str	r2, [r3, #12]
	}

	if ((HAL_GetTick() - ppl->lastFreqSumReadTick) > SW_DEBOUNCE) {
 8002494:	f001 fbc4 	bl	8003c20 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	1ad2      	subs	r2, r2, r3
 80024a0:	23fa      	movs	r3, #250	; 0xfa
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d928      	bls.n	80024fa <freqOutSWUpdate+0xaa>
		if (ppl->freqSumNew != ppl->freqSumCurrent) {
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d022      	beq.n	80024fa <freqOutSWUpdate+0xaa>
			ppl->freqOut = ppl->freqSumNew + ppl->freqBase;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	18d2      	adds	r2, r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	601a      	str	r2, [r3, #0]
			sprintf(uart1->txBuffer, "New Frequency Out: %u\n", ppl->freqOut);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3319      	adds	r3, #25
 80024c6:	0018      	movs	r0, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <freqOutSWUpdate+0xb8>)
 80024ce:	0019      	movs	r1, r3
 80024d0:	f002 ff8c 	bl	80053ec <siprintf>
			uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3319      	adds	r3, #25
 80024d8:	2164      	movs	r1, #100	; 0x64
 80024da:	0018      	movs	r0, r3
 80024dc:	f001 fab0 	bl	8003a40 <uart1_send_frame>
			ppl->freqOutUpdate = true;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	761a      	strb	r2, [r3, #24]
			FREQ_CHANGING_OFF_LED();
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <freqOutSWUpdate+0xb4>)
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <freqOutSWUpdate+0xb4>)
 80024ec:	2101      	movs	r1, #1
 80024ee:	438a      	bics	r2, r1
 80024f0:	615a      	str	r2, [r3, #20]
			ppl->freqSumCurrent = ppl->freqSumNew;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	605a      	str	r2, [r3, #4]
		}
	}
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	50000400 	.word	0x50000400
 8002508:	08005d00 	.word	0x08005d00

0800250c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800250c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250e:	b0ef      	sub	sp, #444	; 0x1bc
 8002510:	af00      	add	r7, sp, #0
	RS485_t rs485;
	MAX2871_t ppl;
	LED_t led;
	UART1_t uart1;
	Tone_uhf_t uhf;
	ppl_ptr = &ppl;
 8002512:	4b86      	ldr	r3, [pc, #536]	; (800272c <main+0x220>)
 8002514:	24b4      	movs	r4, #180	; 0xb4
 8002516:	193a      	adds	r2, r7, r4
 8002518:	601a      	str	r2, [r3, #0]
	uart1_ptr = &uart1;
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <main+0x224>)
 800251c:	2514      	movs	r5, #20
 800251e:	197a      	adds	r2, r7, r5
 8002520:	601a      	str	r2, [r3, #0]
	uhf_ptr = &uhf;
 8002522:	4b84      	ldr	r3, [pc, #528]	; (8002734 <main+0x228>)
 8002524:	1d3a      	adds	r2, r7, #4
 8002526:	601a      	str	r2, [r3, #0]
	rs485_ptr = &rs485;
 8002528:	4b83      	ldr	r3, [pc, #524]	; (8002738 <main+0x22c>)
 800252a:	26d6      	movs	r6, #214	; 0xd6
 800252c:	0076      	lsls	r6, r6, #1
 800252e:	19ba      	adds	r2, r7, r6
 8002530:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002532:	f001 faf9 	bl	8003b28 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002536:	f000 f90f 	bl	8002758 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800253a:	f000 f9bd 	bl	80028b8 <MX_GPIO_Init>
  //MX_I2C1_Init();
  MX_SPI2_Init();
 800253e:	f000 f97b 	bl	8002838 <MX_SPI2_Init>
  //MX_USART1_UART_Init();
  MX_CRC_Init();
 8002542:	f000 f955 	bl	80027f0 <MX_CRC_Init>
 // MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
	toneUhfInit(UHF_TONE, ID0, &uhf);
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	001a      	movs	r2, r3
 800254a:	2100      	movs	r1, #0
 800254c:	2007      	movs	r0, #7
 800254e:	f000 fe05 	bl	800315c <toneUhfInit>
	rs485Init(&rs485);
 8002552:	19bb      	adds	r3, r7, r6
 8002554:	0018      	movs	r0, r3
 8002556:	f000 fe85 	bl	8003264 <rs485Init>
	ledInit(&led);
 800255a:	2398      	movs	r3, #152	; 0x98
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	0018      	movs	r0, r3
 8002560:	f7ff fae8 	bl	8001b34 <ledInit>
	i2c1MasterInit();
 8002564:	f7ff f938 	bl	80017d8 <i2c1MasterInit>
	uart1Init(HS16_CLK, BAUD_RATE, &uart1);
 8002568:	197a      	adds	r2, r7, r5
 800256a:	23e1      	movs	r3, #225	; 0xe1
 800256c:	025b      	lsls	r3, r3, #9
 800256e:	4873      	ldr	r0, [pc, #460]	; (800273c <main+0x230>)
 8002570:	0019      	movs	r1, r3
 8002572:	f001 f969 	bl	8003848 <uart1Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	max2871Init(&ppl);
 8002576:	193b      	adds	r3, r7, r4
 8002578:	0018      	movs	r0, r3
 800257a:	f000 fc29 	bl	8002dd0 <max2871Init>
	max2871RegisterInit(&hspi2, &ppl); //
 800257e:	193a      	adds	r2, r7, r4
 8002580:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <main+0x234>)
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f000 fc84 	bl	8002e92 <max2871RegisterInit>
	ppl.freqOut = getULFromEeprom(FREQ_OUT_ADDR);
 800258a:	2003      	movs	r0, #3
 800258c:	f7ff fc56 	bl	8001e3c <getULFromEeprom>
 8002590:	0002      	movs	r2, r0
 8002592:	4b6c      	ldr	r3, [pc, #432]	; (8002744 <main+0x238>)
 8002594:	21dc      	movs	r1, #220	; 0xdc
 8002596:	0049      	lsls	r1, r1, #1
 8002598:	185b      	adds	r3, r3, r1
 800259a:	19db      	adds	r3, r3, r7
 800259c:	601a      	str	r2, [r3, #0]
	if ((ppl.freqOut < FREQ_OUT_MIN) || (ppl.freqOut > FREQ_OUT_MAX)) {
 800259e:	4b69      	ldr	r3, [pc, #420]	; (8002744 <main+0x238>)
 80025a0:	185b      	adds	r3, r3, r1
 80025a2:	19db      	adds	r3, r3, r7
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a68      	ldr	r2, [pc, #416]	; (8002748 <main+0x23c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d906      	bls.n	80025ba <main+0xae>
 80025ac:	4b65      	ldr	r3, [pc, #404]	; (8002744 <main+0x238>)
 80025ae:	185b      	adds	r3, r3, r1
 80025b0:	19db      	adds	r3, r3, r7
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a65      	ldr	r2, [pc, #404]	; (800274c <main+0x240>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d906      	bls.n	80025c8 <main+0xbc>
		ppl.freqOut = 0;
 80025ba:	4b62      	ldr	r3, [pc, #392]	; (8002744 <main+0x238>)
 80025bc:	22dc      	movs	r2, #220	; 0xdc
 80025be:	0052      	lsls	r2, r2, #1
 80025c0:	189b      	adds	r3, r3, r2
 80025c2:	19db      	adds	r3, r3, r7
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
	}
	ppl.freqBase = getULFromEeprom(FREQ_BASE_ADDR);
 80025c8:	2004      	movs	r0, #4
 80025ca:	f7ff fc37 	bl	8001e3c <getULFromEeprom>
 80025ce:	0002      	movs	r2, r0
 80025d0:	4b5c      	ldr	r3, [pc, #368]	; (8002744 <main+0x238>)
 80025d2:	21dc      	movs	r1, #220	; 0xdc
 80025d4:	0049      	lsls	r1, r1, #1
 80025d6:	185b      	adds	r3, r3, r1
 80025d8:	19db      	adds	r3, r3, r7
 80025da:	611a      	str	r2, [r3, #16]
	if ((ppl.freqBase < FREQ_BASE_MIN) || (ppl.freqBase > FREQ_BASE_MAX)) {
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <main+0x238>)
 80025de:	185b      	adds	r3, r3, r1
 80025e0:	19db      	adds	r3, r3, r7
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <main+0x23c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d906      	bls.n	80025f8 <main+0xec>
 80025ea:	4b56      	ldr	r3, [pc, #344]	; (8002744 <main+0x238>)
 80025ec:	185b      	adds	r3, r3, r1
 80025ee:	19db      	adds	r3, r3, r7
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4a57      	ldr	r2, [pc, #348]	; (8002750 <main+0x244>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d906      	bls.n	8002606 <main+0xfa>
		ppl.freqBase = FREQ_BASE_DEFAULT;
 80025f8:	4b52      	ldr	r3, [pc, #328]	; (8002744 <main+0x238>)
 80025fa:	22dc      	movs	r2, #220	; 0xdc
 80025fc:	0052      	lsls	r2, r2, #1
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	19db      	adds	r3, r3, r7
 8002602:	4a54      	ldr	r2, [pc, #336]	; (8002754 <main+0x248>)
 8002604:	611a      	str	r2, [r3, #16]
	}
	ppl.register4.APWR = getULFromEeprom(POUT_ADDR);
 8002606:	2005      	movs	r0, #5
 8002608:	f7ff fc18 	bl	8001e3c <getULFromEeprom>
 800260c:	0002      	movs	r2, r0
 800260e:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <main+0x238>)
 8002610:	20dc      	movs	r0, #220	; 0xdc
 8002612:	0040      	lsls	r0, r0, #1
 8002614:	181b      	adds	r3, r3, r0
 8002616:	19db      	adds	r3, r3, r7
 8002618:	21d0      	movs	r1, #208	; 0xd0
 800261a:	505a      	str	r2, [r3, r1]
	if ((ppl.register4.APWR < 0x0UL) || (ppl.register4.APWR > 0x3UL)) {
 800261c:	4b49      	ldr	r3, [pc, #292]	; (8002744 <main+0x238>)
 800261e:	0001      	movs	r1, r0
 8002620:	185b      	adds	r3, r3, r1
 8002622:	19db      	adds	r3, r3, r7
 8002624:	22d0      	movs	r2, #208	; 0xd0
 8002626:	589b      	ldr	r3, [r3, r2]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d905      	bls.n	8002638 <main+0x12c>
		ppl.register4.APWR = 0x1UL;
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <main+0x238>)
 800262e:	185b      	adds	r3, r3, r1
 8002630:	19db      	adds	r3, r3, r7
 8002632:	22d0      	movs	r2, #208	; 0xd0
 8002634:	2101      	movs	r1, #1
 8002636:	5099      	str	r1, [r3, r2]
	}
	ppl.freqSumNew = getFreqSum(ppl.freqBase);
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <main+0x238>)
 800263a:	24dc      	movs	r4, #220	; 0xdc
 800263c:	0064      	lsls	r4, r4, #1
 800263e:	191b      	adds	r3, r3, r4
 8002640:	19db      	adds	r3, r3, r7
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff fc29 	bl	8001e9c <getFreqSum>
 800264a:	0002      	movs	r2, r0
 800264c:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <main+0x238>)
 800264e:	0021      	movs	r1, r4
 8002650:	185b      	adds	r3, r3, r1
 8002652:	19db      	adds	r3, r3, r7
 8002654:	60da      	str	r2, [r3, #12]
	ppl.freqSumRead = ppl.freqSumNew;
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <main+0x238>)
 8002658:	185b      	adds	r3, r3, r1
 800265a:	19db      	adds	r3, r3, r7
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <main+0x238>)
 8002660:	185b      	adds	r3, r3, r1
 8002662:	19db      	adds	r3, r3, r7
 8002664:	609a      	str	r2, [r3, #8]
	ppl.freqSumCurrent = ppl.freqSumNew;
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <main+0x238>)
 8002668:	185b      	adds	r3, r3, r1
 800266a:	19db      	adds	r3, r3, r7
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	4b35      	ldr	r3, [pc, #212]	; (8002744 <main+0x238>)
 8002670:	185b      	adds	r3, r3, r1
 8002672:	19db      	adds	r3, r3, r7
 8002674:	605a      	str	r2, [r3, #4]

	max2871ProgramFreqOut(&hspi2, &ppl);
 8002676:	24b4      	movs	r4, #180	; 0xb4
 8002678:	193a      	adds	r2, r7, r4
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <main+0x234>)
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fcfe 	bl	8003080 <max2871ProgramFreqOut>
	HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 8002684:	23a0      	movs	r3, #160	; 0xa0
 8002686:	05db      	lsls	r3, r3, #23
 8002688:	2201      	movs	r2, #1
 800268a:	2120      	movs	r1, #32
 800268c:	0018      	movs	r0, r3
 800268e:	f001 fdfe 	bl	800428e <HAL_GPIO_WritePin>

	printParameters(&uart1, &ppl);
 8002692:	193a      	adds	r2, r7, r4
 8002694:	2314      	movs	r3, #20
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	0011      	movs	r1, r2
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff fd7a 	bl	8002194 <printParameters>

	while (1) {

		led_enable_kalive(&led);
 80026a0:	2398      	movs	r3, #152	; 0x98
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff fa7f 	bl	8001ba8 <led_enable_kalive>

		freqOutSWUpdate(&uart1, &ppl);
 80026aa:	24b4      	movs	r4, #180	; 0xb4
 80026ac:	193a      	adds	r2, r7, r4
 80026ae:	2514      	movs	r5, #20
 80026b0:	197b      	adds	r3, r7, r5
 80026b2:	0011      	movs	r1, r2
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff fecb 	bl	8002450 <freqOutSWUpdate>
		rs485Uart1Decode(&rs485, &uart1);
 80026ba:	197a      	adds	r2, r7, r5
 80026bc:	26d6      	movs	r6, #214	; 0xd6
 80026be:	0076      	lsls	r6, r6, #1
 80026c0:	19bb      	adds	r3, r7, r6
 80026c2:	0011      	movs	r1, r2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 fe5f 	bl	8003388 <rs485Uart1Decode>
		freqOutRs485Update(&uart1, &rs485, &ppl);
 80026ca:	193a      	adds	r2, r7, r4
 80026cc:	19b9      	adds	r1, r7, r6
 80026ce:	197b      	adds	r3, r7, r5
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7ff fe79 	bl	80023c8 <freqOutRs485Update>

		if (ppl.freqOutUpdate) {
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <main+0x238>)
 80026d8:	22dc      	movs	r2, #220	; 0xdc
 80026da:	0052      	lsls	r2, r2, #1
 80026dc:	189b      	adds	r3, r3, r2
 80026de:	19db      	adds	r3, r3, r7
 80026e0:	7e1b      	ldrb	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0dc      	beq.n	80026a0 <main+0x194>
			ppl.freqOutUpdate = false;
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <main+0x238>)
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	2200      	movs	r2, #0
 80026ee:	761a      	strb	r2, [r3, #24]

			max2871ProgramFreqOut(&hspi2, &ppl);
 80026f0:	193a      	adds	r2, r7, r4
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <main+0x234>)
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fcc2 	bl	8003080 <max2871ProgramFreqOut>
			m24c64WriteNBytes(FREQ_OUT_ADDR, (uint8_t*) (&ppl.freqOut), 0,
 80026fc:	1939      	adds	r1, r7, r4
 80026fe:	2304      	movs	r3, #4
 8002700:	2200      	movs	r2, #0
 8002702:	2003      	movs	r0, #3
 8002704:	f7ff fadc 	bl	8001cc0 <m24c64WriteNBytes>
			FREQ_OUT_SIZE);
			m24c64WriteNBytes(FREQ_BASE_ADDR, (uint8_t*) (&ppl.freqBase), 0,
 8002708:	193b      	adds	r3, r7, r4
 800270a:	3310      	adds	r3, #16
 800270c:	0019      	movs	r1, r3
 800270e:	2304      	movs	r3, #4
 8002710:	2200      	movs	r2, #0
 8002712:	2004      	movs	r0, #4
 8002714:	f7ff fad4 	bl	8001cc0 <m24c64WriteNBytes>
			FREQ_OUT_SIZE);
			m24c64WriteNBytes(POUT_ADDR, (uint8_t*) (&ppl.register4.APWR), 0,
 8002718:	193b      	adds	r3, r7, r4
 800271a:	33d0      	adds	r3, #208	; 0xd0
 800271c:	0019      	movs	r1, r3
 800271e:	2304      	movs	r3, #4
 8002720:	2200      	movs	r2, #0
 8002722:	2005      	movs	r0, #5
 8002724:	f7ff facc 	bl	8001cc0 <m24c64WriteNBytes>
		led_enable_kalive(&led);
 8002728:	e7ba      	b.n	80026a0 <main+0x194>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	20000114 	.word	0x20000114
 8002730:	20000118 	.word	0x20000118
 8002734:	2000011c 	.word	0x2000011c
 8002738:	20000120 	.word	0x20000120
 800273c:	00f42400 	.word	0x00f42400
 8002740:	200000b0 	.word	0x200000b0
 8002744:	fffffefc 	.word	0xfffffefc
 8002748:	087e609f 	.word	0x087e609f
 800274c:	099bb780 	.word	0x099bb780
 8002750:	08d89854 	.word	0x08d89854
 8002754:	08a48640 	.word	0x08a48640

08002758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b093      	sub	sp, #76	; 0x4c
 800275c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275e:	2414      	movs	r4, #20
 8002760:	193b      	adds	r3, r7, r4
 8002762:	0018      	movs	r0, r3
 8002764:	2334      	movs	r3, #52	; 0x34
 8002766:	001a      	movs	r2, r3
 8002768:	2100      	movs	r1, #0
 800276a:	f002 fe37 	bl	80053dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	0018      	movs	r0, r3
 8002772:	2310      	movs	r3, #16
 8002774:	001a      	movs	r2, r3
 8002776:	2100      	movs	r1, #0
 8002778:	f002 fe30 	bl	80053dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	0018      	movs	r0, r3
 8002782:	f001 fda1 	bl	80042c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002786:	193b      	adds	r3, r7, r4
 8002788:	220a      	movs	r2, #10
 800278a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800278c:	193b      	adds	r3, r7, r4
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	0052      	lsls	r2, r2, #1
 8002792:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002794:	0021      	movs	r1, r4
 8002796:	187b      	adds	r3, r7, r1
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2240      	movs	r2, #64	; 0x40
 80027a0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	2201      	movs	r2, #1
 80027a6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	0018      	movs	r0, r3
 80027b2:	f001 fdc9 	bl	8004348 <HAL_RCC_OscConfig>
 80027b6:	1e03      	subs	r3, r0, #0
 80027b8:	d001      	beq.n	80027be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027ba:	f000 f91f 	bl	80029fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	2200      	movs	r2, #0
 80027c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2100      	movs	r1, #0
 80027da:	0018      	movs	r0, r3
 80027dc:	f002 f8c4 	bl	8004968 <HAL_RCC_ClockConfig>
 80027e0:	1e03      	subs	r3, r0, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80027e4:	f000 f90a 	bl	80029fc <Error_Handler>
  }
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b013      	add	sp, #76	; 0x4c
 80027ee:	bd90      	pop	{r4, r7, pc}

080027f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_CRC_Init+0x40>)
 80027f6:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <MX_CRC_Init+0x44>)
 80027f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <MX_CRC_Init+0x40>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <MX_CRC_Init+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <MX_CRC_Init+0x40>)
 8002808:	2200      	movs	r2, #0
 800280a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <MX_CRC_Init+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <MX_CRC_Init+0x40>)
 8002814:	2201      	movs	r2, #1
 8002816:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <MX_CRC_Init+0x40>)
 800281a:	0018      	movs	r0, r3
 800281c:	f001 fae2 	bl	8003de4 <HAL_CRC_Init>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d001      	beq.n	8002828 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002824:	f000 f8ea 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	2000008c 	.word	0x2000008c
 8002834:	40023000 	.word	0x40023000

08002838 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <MX_SPI2_Init+0x78>)
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <MX_SPI2_Init+0x7c>)
 8002840:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002844:	2282      	movs	r2, #130	; 0x82
 8002846:	0052      	lsls	r2, r2, #1
 8002848:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MX_SPI2_Init+0x78>)
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	0212      	lsls	r2, r2, #8
 8002850:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002854:	22e0      	movs	r2, #224	; 0xe0
 8002856:	00d2      	lsls	r2, r2, #3
 8002858:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <MX_SPI2_Init+0x78>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	0092      	lsls	r2, r2, #2
 800286c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002870:	2200      	movs	r2, #0
 8002872:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <MX_SPI2_Init+0x78>)
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002882:	2200      	movs	r2, #0
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002888:	2207      	movs	r2, #7
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <MX_SPI2_Init+0x78>)
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <MX_SPI2_Init+0x78>)
 8002894:	2208      	movs	r2, #8
 8002896:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <MX_SPI2_Init+0x78>)
 800289a:	0018      	movs	r0, r3
 800289c:	f002 f9ee 	bl	8004c7c <HAL_SPI_Init>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d001      	beq.n	80028a8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80028a4:	f000 f8aa 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	200000b0 	.word	0x200000b0
 80028b4:	40003800 	.word	0x40003800

080028b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028be:	240c      	movs	r4, #12
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	0018      	movs	r0, r3
 80028c4:	2314      	movs	r3, #20
 80028c6:	001a      	movs	r2, r3
 80028c8:	2100      	movs	r1, #0
 80028ca:	f002 fd87 	bl	80053dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	4b45      	ldr	r3, [pc, #276]	; (80029e4 <MX_GPIO_Init+0x12c>)
 80028d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d2:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <MX_GPIO_Init+0x12c>)
 80028d4:	2102      	movs	r1, #2
 80028d6:	430a      	orrs	r2, r1
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34
 80028da:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <MX_GPIO_Init+0x12c>)
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e6:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <MX_GPIO_Init+0x12c>)
 80028e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ea:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <MX_GPIO_Init+0x12c>)
 80028ec:	2104      	movs	r1, #4
 80028ee:	430a      	orrs	r2, r1
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34
 80028f2:	4b3c      	ldr	r3, [pc, #240]	; (80029e4 <MX_GPIO_Init+0x12c>)
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	2204      	movs	r2, #4
 80028f8:	4013      	ands	r3, r2
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <MX_GPIO_Init+0x12c>)
 8002900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002902:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <MX_GPIO_Init+0x12c>)
 8002904:	2101      	movs	r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	635a      	str	r2, [r3, #52]	; 0x34
 800290a:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <MX_GPIO_Init+0x12c>)
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	2201      	movs	r2, #1
 8002910:	4013      	ands	r3, r2
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_CTRL_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8002916:	4934      	ldr	r1, [pc, #208]	; (80029e8 <MX_GPIO_Init+0x130>)
 8002918:	4b34      	ldr	r3, [pc, #208]	; (80029ec <MX_GPIO_Init+0x134>)
 800291a:	2200      	movs	r2, #0
 800291c:	0018      	movs	r0, r3
 800291e:	f001 fcb6 	bl	800428e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin|MAX_CE_Pin|MAX_MUX_Pin|MAX_RF_ENABLE_Pin
 8002922:	23a0      	movs	r3, #160	; 0xa0
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	2200      	movs	r2, #0
 8002928:	21ae      	movs	r1, #174	; 0xae
 800292a:	0018      	movs	r0, r3
 800292c:	f001 fcaf 	bl	800428e <HAL_GPIO_WritePin>
                          |LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS485_CTRL_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = RS485_CTRL_Pin|LED_2_Pin|LED_3_Pin;
 8002930:	193b      	adds	r3, r7, r4
 8002932:	4a2d      	ldr	r2, [pc, #180]	; (80029e8 <MX_GPIO_Init+0x130>)
 8002934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002936:	193b      	adds	r3, r7, r4
 8002938:	2201      	movs	r2, #1
 800293a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	193b      	adds	r3, r7, r4
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	193b      	adds	r3, r7, r4
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	193b      	adds	r3, r7, r4
 800294a:	4a28      	ldr	r2, [pc, #160]	; (80029ec <MX_GPIO_Init+0x134>)
 800294c:	0019      	movs	r1, r3
 800294e:	0010      	movs	r0, r2
 8002950:	f001 fb1c 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_INPUT_1_Pin TEST_INPUT_2_Pin SW_2_Pin */
  GPIO_InitStruct.Pin = TEST_INPUT_1_Pin|TEST_INPUT_2_Pin|SW_2_Pin;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <MX_GPIO_Init+0x138>)
 8002958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295a:	193b      	adds	r3, r7, r4
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	193b      	adds	r3, r7, r4
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002966:	193b      	adds	r3, r7, r4
 8002968:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <MX_GPIO_Init+0x13c>)
 800296a:	0019      	movs	r1, r3
 800296c:	0010      	movs	r0, r2
 800296e:	f001 fb0d 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_LE_Pin MAX_CE_Pin MAX_MUX_Pin MAX_RF_ENABLE_Pin
                           LED_1_Pin */
  GPIO_InitStruct.Pin = MAX_LE_Pin|MAX_CE_Pin|MAX_MUX_Pin|MAX_RF_ENABLE_Pin
 8002972:	193b      	adds	r3, r7, r4
 8002974:	22ae      	movs	r2, #174	; 0xae
 8002976:	601a      	str	r2, [r3, #0]
                          |LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	193b      	adds	r3, r7, r4
 800297a:	2201      	movs	r2, #1
 800297c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	193b      	adds	r3, r7, r4
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	193b      	adds	r3, r7, r4
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	193a      	adds	r2, r7, r4
 800298c:	23a0      	movs	r3, #160	; 0xa0
 800298e:	05db      	lsls	r3, r3, #23
 8002990:	0011      	movs	r1, r2
 8002992:	0018      	movs	r0, r3
 8002994:	f001 fafa 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_LOCK_DETECTOR_Pin SW_1_Pin SW_3_Pin SW_4_Pin
                           SW_5_Pin */
  GPIO_InitStruct.Pin = MAX_LOCK_DETECTOR_Pin|SW_1_Pin|SW_3_Pin|SW_4_Pin
 8002998:	193b      	adds	r3, r7, r4
 800299a:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <MX_GPIO_Init+0x140>)
 800299c:	601a      	str	r2, [r3, #0]
                          |SW_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	2200      	movs	r2, #0
 80029a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	193a      	adds	r2, r7, r4
 80029ac:	23a0      	movs	r3, #160	; 0xa0
 80029ae:	05db      	lsls	r3, r3, #23
 80029b0:	0011      	movs	r1, r2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f001 faea 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_0_Pin SW_6_Pin SW_7_Pin SW_8_Pin
                           SW_9_Pin */
  GPIO_InitStruct.Pin = SW_0_Pin|SW_6_Pin|SW_7_Pin|SW_8_Pin
 80029b8:	0021      	movs	r1, r4
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	229e      	movs	r2, #158	; 0x9e
 80029be:	0052      	lsls	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
                          |SW_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2200      	movs	r2, #0
 80029c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <MX_GPIO_Init+0x134>)
 80029d2:	0019      	movs	r1, r3
 80029d4:	0010      	movs	r0, r2
 80029d6:	f001 fad9 	bl	8003f8c <HAL_GPIO_Init>

}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b009      	add	sp, #36	; 0x24
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40021000 	.word	0x40021000
 80029e8:	00000203 	.word	0x00000203
 80029ec:	50000400 	.word	0x50000400
 80029f0:	0000c040 	.word	0x0000c040
 80029f4:	50000800 	.word	0x50000800
 80029f8:	00009940 	.word	0x00009940

080029fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a00:	b672      	cpsid	i
}
 8002a02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a04:	e7fe      	b.n	8002a04 <Error_Handler+0x8>

08002a06 <getRegister0InitValue>:
 *      Author: artur
 */

#include "max2871.h"

unsigned long getRegister0InitValue(MAX2871_t *ppl) {
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]

	ppl->register0.INT = 0x0UL;   // Enables fractional-N mode
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
	ppl->register0.NDIV = 0x0UL; // Sets integer part (N-divider) of the feedback divider factor
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	621a      	str	r2, [r3, #32]
	ppl->register0.FRAC = 0x0UL;  // Sets fractional value
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
	ppl->register0.ADDR0 = 0x0UL; // Register address bits
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28

	return ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	07da      	lsls	r2, r3, #31
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	03db      	lsls	r3, r3, #15
 8002a32:	431a      	orrs	r2, r3
			| ppl->register0.FRAC << 3 | ppl->register0.ADDR0;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	4313      	orrs	r3, r2
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b002      	add	sp, #8
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <getRegister1InitValue>:

unsigned long getRegister1InitValue(MAX2871_t *ppl) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]

	ppl->register1.CPL = 0x3UL;        // Charge pump linearity 30%
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2203      	movs	r2, #3
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c
	ppl->register1.CPT = 0x00UL;       // Charge pump test mode  normal mode
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
	ppl->register1.PHASE = 0x1UL;      // Phase Value (recommended)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34
	ppl->register1.MODULUS = 0xFA0UL;  // 4000 for max resolution
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	22fa      	movs	r2, #250	; 0xfa
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
	ppl->register1.ADDR1 = 0x1UL;      // Register address bits
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c

	return ppl->register1.CPL << 29 | ppl->register1.CPT << 27
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	075a      	lsls	r2, r3, #29
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	06db      	lsls	r3, r3, #27
 8002a7e:	431a      	orrs	r2, r3
			| ppl->register1.PHASE << 15 | ppl->register1.MODULUS << 3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	03db      	lsls	r3, r3, #15
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	431a      	orrs	r2, r3
			| ppl->register1.ADDR1;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	4313      	orrs	r3, r2
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <getRegister2InitValue>:

unsigned long getRegister2InitValue(MAX2871_t *ppl) {
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]

	ppl->register2.LDS = 0x1UL;    // 1 if fPFD > 32 MHz
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
	ppl->register2.SDN = 0x0UL;    // Noise mode  Low-noise mode
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
	ppl->register2.MUX = 0x6UL;    // MUX pin configuration  Digital lock detect
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2206      	movs	r2, #6
 8002ab6:	649a      	str	r2, [r3, #72]	; 0x48
	ppl->register2.DBR = 0x0UL;    // Reference doubler is disabled
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	64da      	str	r2, [r3, #76]	; 0x4c
	ppl->register2.RDIV2 = 0x0UL;  // Reference divide-by-2 is disabled
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	651a      	str	r2, [r3, #80]	; 0x50
	ppl->register2.RCNT = 0x0UL;   // Reference divide Value is unused
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
	ppl->register2.REG4DB = 0x0UL; // Double buffer mode disabled
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	659a      	str	r2, [r3, #88]	; 0x58
	ppl->register2.CP = 0x00UL; // Charge pump current  0.32 mA (1.36/RSET * (1 + CP[3:0]) RSET  5k1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	65da      	str	r2, [r3, #92]	; 0x5c
	ppl->register2.LDF = 0x0UL;    // Lock detect function  Frac-N lock detect
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	; 0x60
	ppl->register2.LDP = 0x0UL;    // Lock detect precision  10ns
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	665a      	str	r2, [r3, #100]	; 0x64
	ppl->register2.PDP = 0x1UL;    // Phase detector polarity set positive
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	669a      	str	r2, [r3, #104]	; 0x68
	ppl->register2.SHDN = 0x0UL;   // Sets power-down mode.
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	66da      	str	r2, [r3, #108]	; 0x6c
	ppl->register2.TRI = 0x0UL;    // Sets charge-pump three-state mode
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	671a      	str	r2, [r3, #112]	; 0x70
	ppl->register2.RST = 0x0UL;    // Sets counter reset mode
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	675a      	str	r2, [r3, #116]	; 0x74
	ppl->register2.ADDR2 = 0x2UL;  // Register address bits
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	679a      	str	r2, [r3, #120]	; 0x78

	return ppl->register2.LDS << 31 | ppl->register2.SDN << 29
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	07da      	lsls	r2, r3, #31
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	075b      	lsls	r3, r3, #29
 8002b0c:	431a      	orrs	r2, r3
			| ppl->register2.MUX << 26 | ppl->register2.DBR << 25
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b12:	069b      	lsls	r3, r3, #26
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	065b      	lsls	r3, r3, #25
 8002b1c:	431a      	orrs	r2, r3
			| ppl->register2.RDIV2 << 24 | ppl->register2.RCNT << 14
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	061b      	lsls	r3, r3, #24
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	039b      	lsls	r3, r3, #14
 8002b2c:	431a      	orrs	r2, r3
			| ppl->register2.REG4DB << 13 | ppl->register2.CP << 9
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	035b      	lsls	r3, r3, #13
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	025b      	lsls	r3, r3, #9
 8002b3c:	431a      	orrs	r2, r3
			| ppl->register2.LDF << 8 | ppl->register2.LDP << 7
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b4a:	01db      	lsls	r3, r3, #7
 8002b4c:	431a      	orrs	r2, r3
			| ppl->register2.PDP << 6 | ppl->register2.SHDN << 5
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b52:	019b      	lsls	r3, r3, #6
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5a:	015b      	lsls	r3, r3, #5
 8002b5c:	431a      	orrs	r2, r3
			| ppl->register2.TRI << 4 | ppl->register2.RST << 3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	431a      	orrs	r2, r3
			| ppl->register2.ADDR2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b72:	4313      	orrs	r3, r2
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <getRegister3InitValue>:

unsigned long getRegister3InitValue(MAX2871_t *ppl) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

	ppl->register3.VCO_MS = 0x0UL;   // VCO manual selection: unused
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	67da      	str	r2, [r3, #124]	; 0x7c
	ppl->register3.VAS_SHDN = 0x0UL; // VAS enabled
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5099      	str	r1, [r3, r2]
	ppl->register3.RETUNE = 0x1UL;   // VAS temperature compensation enabled
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2284      	movs	r2, #132	; 0x84
 8002b96:	2101      	movs	r1, #1
 8002b98:	5099      	str	r1, [r3, r2]
	ppl->register3.CSM = 0x0UL;      // Cycle slip mode disabled
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2288      	movs	r2, #136	; 0x88
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5099      	str	r1, [r3, r2]
	ppl->register3.MUTEDEL = 0x0UL;  // Mute delay mode disabled
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	228c      	movs	r2, #140	; 0x8c
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5099      	str	r1, [r3, r2]
	ppl->register3.CDM = 0x1UL;      // Fast-lock mode enabled
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2290      	movs	r2, #144	; 0x90
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5099      	str	r1, [r3, r2]
	ppl->register3.CDIV = 0x0UL;     // Clock divider value unused
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2294      	movs	r2, #148	; 0x94
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5099      	str	r1, [r3, r2]
	ppl->register3.ADDR3 = 0x3UL;    // Register address bits
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2298      	movs	r2, #152	; 0x98
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	5099      	str	r1, [r3, r2]

	return ppl->register3.VCO_MS << 26 | ppl->register3.VAS_SHDN << 25
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bc6:	069a      	lsls	r2, r3, #26
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	585b      	ldr	r3, [r3, r1]
 8002bce:	065b      	lsls	r3, r3, #25
 8002bd0:	431a      	orrs	r2, r3
			| ppl->register3.RETUNE << 24 | ppl->register3.CSM << 18
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2184      	movs	r1, #132	; 0x84
 8002bd6:	585b      	ldr	r3, [r3, r1]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2188      	movs	r1, #136	; 0x88
 8002be0:	585b      	ldr	r3, [r3, r1]
 8002be2:	049b      	lsls	r3, r3, #18
 8002be4:	431a      	orrs	r2, r3
			| ppl->register3.MUTEDEL << 17 | ppl->register3.CDM << 15
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	218c      	movs	r1, #140	; 0x8c
 8002bea:	585b      	ldr	r3, [r3, r1]
 8002bec:	045b      	lsls	r3, r3, #17
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2190      	movs	r1, #144	; 0x90
 8002bf4:	585b      	ldr	r3, [r3, r1]
 8002bf6:	03db      	lsls	r3, r3, #15
 8002bf8:	431a      	orrs	r2, r3
			| ppl->register3.CDIV << 3 | ppl->register3.ADDR3;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2194      	movs	r1, #148	; 0x94
 8002bfe:	585b      	ldr	r3, [r3, r1]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2198      	movs	r1, #152	; 0x98
 8002c08:	585b      	ldr	r3, [r3, r1]
 8002c0a:	4313      	orrs	r3, r2
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <getRegister4InitValue>:

unsigned long getRegister4InitValue(MAX2871_t *ppl) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

	ppl->register4.RES = 0x3UL;    // Reserved
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	229c      	movs	r2, #156	; 0x9c
 8002c20:	2103      	movs	r1, #3
 8002c22:	5099      	str	r1, [r3, r2]
	ppl->register4.SDLDO = 0x0UL;  // LDO enabled
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	22a0      	movs	r2, #160	; 0xa0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5099      	str	r1, [r3, r2]
	ppl->register4.SDDIV = 0x0UL;  // VCO Divider enabled
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	22a4      	movs	r2, #164	; 0xa4
 8002c30:	2100      	movs	r1, #0
 8002c32:	5099      	str	r1, [r3, r2]
	ppl->register4.SDREF = 0x0UL;  // Reference input enabled
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	22a8      	movs	r2, #168	; 0xa8
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5099      	str	r1, [r3, r2]
	ppl->register4.FB = 0x1UL;     // VCO to N counter mode is NOT divided
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	22ac      	movs	r2, #172	; 0xac
 8002c40:	2101      	movs	r1, #1
 8002c42:	5099      	str	r1, [r3, r2]
	ppl->register4.BS = 0x30FFUL; // Should be chosen so that fPFD/BS  50kH or less
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	22b4      	movs	r2, #180	; 0xb4
 8002c48:	4939      	ldr	r1, [pc, #228]	; (8002d30 <getRegister4InitValue+0x11c>)
 8002c4a:	5099      	str	r1, [r3, r2]
	ppl->register4.SDVCO = 0x0UL;  // VCO enabled
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	22b8      	movs	r2, #184	; 0xb8
 8002c50:	2100      	movs	r1, #0
 8002c52:	5099      	str	r1, [r3, r2]
	ppl->register4.MTLD = 0x0UL;   // RFOUT Mute until Lock detect mode disabled
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	22bc      	movs	r2, #188	; 0xbc
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5099      	str	r1, [r3, r2]
	ppl->register4.BDIV = 0x0UL; // RFOUTB is divided (so it's the same as RFOUTA)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	22c0      	movs	r2, #192	; 0xc0
 8002c60:	2100      	movs	r1, #0
 8002c62:	5099      	str	r1, [r3, r2]
	ppl->register4.RFB_EN = 0x0UL; // RFOUTB disabled
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	22c4      	movs	r2, #196	; 0xc4
 8002c68:	2100      	movs	r1, #0
 8002c6a:	5099      	str	r1, [r3, r2]
	ppl->register4.BPWR = 0x3UL;   // RFOUTB  5 dBm
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	22c8      	movs	r2, #200	; 0xc8
 8002c70:	2103      	movs	r1, #3
 8002c72:	5099      	str	r1, [r3, r2]
	ppl->register4.RFA_EN = 0x1UL; // RFOUTA enabled
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	22cc      	movs	r2, #204	; 0xcc
 8002c78:	2101      	movs	r1, #1
 8002c7a:	5099      	str	r1, [r3, r2]
	ppl->register4.APWR = 0x1UL; // Sets RFOUTA single-ended output power   (00 = -4dBm)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	22d0      	movs	r2, #208	; 0xd0
 8002c80:	2101      	movs	r1, #1
 8002c82:	5099      	str	r1, [r3, r2]
								 //(01 = -1dBm)
								 //(10 = +2dBm)
								 //(11 = +5dBm)
	ppl->register4.DIVA = 0x0UL;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	22b0      	movs	r2, #176	; 0xb0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	5099      	str	r1, [r3, r2]
	ppl->register4.ADDR4 = 0x4UL;  // Register address bits
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	22d4      	movs	r2, #212	; 0xd4
 8002c90:	2104      	movs	r1, #4
 8002c92:	5099      	str	r1, [r3, r2]

	return ppl->register4.RES << 29 | ppl->register4.SDLDO << 28
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	229c      	movs	r2, #156	; 0x9c
 8002c98:	589b      	ldr	r3, [r3, r2]
 8002c9a:	075a      	lsls	r2, r3, #29
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	21a0      	movs	r1, #160	; 0xa0
 8002ca0:	585b      	ldr	r3, [r3, r1]
 8002ca2:	071b      	lsls	r3, r3, #28
 8002ca4:	431a      	orrs	r2, r3
			| ppl->register4.SDDIV << 27 | ppl->register4.SDREF << 26
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	21a4      	movs	r1, #164	; 0xa4
 8002caa:	585b      	ldr	r3, [r3, r1]
 8002cac:	06db      	lsls	r3, r3, #27
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	21a8      	movs	r1, #168	; 0xa8
 8002cb4:	585b      	ldr	r3, [r3, r1]
 8002cb6:	069b      	lsls	r3, r3, #26
 8002cb8:	431a      	orrs	r2, r3
			| ppl->register4.FB << 23 | ppl->register4.DIVA << 20
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	21ac      	movs	r1, #172	; 0xac
 8002cbe:	585b      	ldr	r3, [r3, r1]
 8002cc0:	05db      	lsls	r3, r3, #23
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	21b0      	movs	r1, #176	; 0xb0
 8002cc8:	585b      	ldr	r3, [r3, r1]
 8002cca:	051b      	lsls	r3, r3, #20
 8002ccc:	431a      	orrs	r2, r3
			| ppl->register4.BS << 12 | ppl->register4.SDVCO << 11
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	21b4      	movs	r1, #180	; 0xb4
 8002cd2:	585b      	ldr	r3, [r3, r1]
 8002cd4:	031b      	lsls	r3, r3, #12
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	21b8      	movs	r1, #184	; 0xb8
 8002cdc:	585b      	ldr	r3, [r3, r1]
 8002cde:	02db      	lsls	r3, r3, #11
 8002ce0:	431a      	orrs	r2, r3
			| ppl->register4.MTLD << 10 | ppl->register4.BDIV << 9
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	21bc      	movs	r1, #188	; 0xbc
 8002ce6:	585b      	ldr	r3, [r3, r1]
 8002ce8:	029b      	lsls	r3, r3, #10
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	21c0      	movs	r1, #192	; 0xc0
 8002cf0:	585b      	ldr	r3, [r3, r1]
 8002cf2:	025b      	lsls	r3, r3, #9
 8002cf4:	431a      	orrs	r2, r3
			| ppl->register4.RFB_EN << 8 | ppl->register4.BPWR << 6
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	21c4      	movs	r1, #196	; 0xc4
 8002cfa:	585b      	ldr	r3, [r3, r1]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	21c8      	movs	r1, #200	; 0xc8
 8002d04:	585b      	ldr	r3, [r3, r1]
 8002d06:	019b      	lsls	r3, r3, #6
 8002d08:	431a      	orrs	r2, r3
			| ppl->register4.RFA_EN << 5 | ppl->register4.APWR << 3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	21cc      	movs	r1, #204	; 0xcc
 8002d0e:	585b      	ldr	r3, [r3, r1]
 8002d10:	015b      	lsls	r3, r3, #5
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	21d0      	movs	r1, #208	; 0xd0
 8002d18:	585b      	ldr	r3, [r3, r1]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	431a      	orrs	r2, r3
			| ppl->register4.ADDR4;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	21d4      	movs	r1, #212	; 0xd4
 8002d22:	585b      	ldr	r3, [r3, r1]
 8002d24:	4313      	orrs	r3, r2
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	000030ff 	.word	0x000030ff

08002d34 <getRegister5InitValue>:

unsigned long getRegister5InitValue(MAX2871_t *ppl) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

	ppl->register5.VAS_DLY = 0x3UL;  // 0x0 if VAS_TEMP  0, 0x3 if VAS_TEMP  1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	22d8      	movs	r2, #216	; 0xd8
 8002d40:	2103      	movs	r1, #3
 8002d42:	5099      	str	r1, [r3, r2]
	ppl->register5.SDPLL = 0x0UL;    // PLL enabled
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	22dc      	movs	r2, #220	; 0xdc
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5099      	str	r1, [r3, r2]
	ppl->register5.F01 = 0x1UL;      // If F  0 then int
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	22e0      	movs	r2, #224	; 0xe0
 8002d50:	2101      	movs	r1, #1
 8002d52:	5099      	str	r1, [r3, r2]
	ppl->register5.LD = 0x1UL;       // Lock-Detect pin function  HIGH
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	22e4      	movs	r2, #228	; 0xe4
 8002d58:	2101      	movs	r1, #1
 8002d5a:	5099      	str	r1, [r3, r2]
	ppl->register5.MUX_MSB = 0x0UL;  // MSB of MUX
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	22e8      	movs	r2, #232	; 0xe8
 8002d60:	2100      	movs	r1, #0
 8002d62:	5099      	str	r1, [r3, r2]
	ppl->register5.ADCS = 0x0UL;     // ADC normal operation (ADC isn't used)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	22ec      	movs	r2, #236	; 0xec
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5099      	str	r1, [r3, r2]
	ppl->register5.ADCM = 0x0UL;     // ADC disabled
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	22f0      	movs	r2, #240	; 0xf0
 8002d70:	2100      	movs	r1, #0
 8002d72:	5099      	str	r1, [r3, r2]
	ppl->register5.ADDR5 = 0x5UL;    // Register address bits
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	22f4      	movs	r2, #244	; 0xf4
 8002d78:	2105      	movs	r1, #5
 8002d7a:	5099      	str	r1, [r3, r2]

	return ppl->register5.VAS_DLY << 29 | ppl->register5.SDPLL << 25
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	22d8      	movs	r2, #216	; 0xd8
 8002d80:	589b      	ldr	r3, [r3, r2]
 8002d82:	075a      	lsls	r2, r3, #29
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	21dc      	movs	r1, #220	; 0xdc
 8002d88:	585b      	ldr	r3, [r3, r1]
 8002d8a:	065b      	lsls	r3, r3, #25
 8002d8c:	431a      	orrs	r2, r3
			| ppl->register5.F01 << 24 | ppl->register5.LD << 22
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	21e0      	movs	r1, #224	; 0xe0
 8002d92:	585b      	ldr	r3, [r3, r1]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	21e4      	movs	r1, #228	; 0xe4
 8002d9c:	585b      	ldr	r3, [r3, r1]
 8002d9e:	059b      	lsls	r3, r3, #22
 8002da0:	431a      	orrs	r2, r3
			| ppl->register5.MUX_MSB << 18 | ppl->register5.ADCS << 6
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	21e8      	movs	r1, #232	; 0xe8
 8002da6:	585b      	ldr	r3, [r3, r1]
 8002da8:	049b      	lsls	r3, r3, #18
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	21ec      	movs	r1, #236	; 0xec
 8002db0:	585b      	ldr	r3, [r3, r1]
 8002db2:	019b      	lsls	r3, r3, #6
 8002db4:	431a      	orrs	r2, r3
			| ppl->register5.ADCM << 3 | ppl->register5.ADDR5;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	21f0      	movs	r1, #240	; 0xf0
 8002dba:	585b      	ldr	r3, [r3, r1]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	21f4      	movs	r1, #244	; 0xf4
 8002dc4:	585b      	ldr	r3, [r3, r1]
 8002dc6:	4313      	orrs	r3, r2
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <max2871Init>:

void max2871Init(MAX2871_t *ppl) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	// Composition of MAX2971 Registers
	ppl->freqSumRead = 0x0UL;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
	ppl->freqBase = 0x0UL;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	611a      	str	r2, [r3, #16]
	ppl->freqOutUpdate = false;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	761a      	strb	r2, [r3, #24]
	ppl->lastFreqSumReadTick = HAL_GetTick();
 8002dea:	f000 ff19 	bl	8003c20 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	615a      	str	r2, [r3, #20]
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <max2871Write>:

void max2871Write(SPI_HandleTypeDef *hspi2, unsigned long data)
// Writes 32 Bit value to register of MAX2871
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4] = { 0 };
 8002e06:	240c      	movs	r4, #12
 8002e08:	193b      	adds	r3, r7, r4
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

	buffer[0] = (data & 0xFF000000) >> 24;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	0e1b      	lsrs	r3, r3, #24
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	701a      	strb	r2, [r3, #0]
	buffer[1] = (data & 0x00FF0000) >> 16;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	705a      	strb	r2, [r3, #1]
	buffer[2] = (data & 0x0000FF00) >> 8;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	193b      	adds	r3, r7, r4
 8002e2a:	709a      	strb	r2, [r3, #2]
	buffer[3] = (data & 0x000000FF);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	193b      	adds	r3, r7, r4
 8002e32:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_RESET);
 8002e34:	23a0      	movs	r3, #160	; 0xa0
 8002e36:	05db      	lsls	r3, r3, #23
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f001 fa26 	bl	800428e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_RESET);
 8002e42:	23a0      	movs	r3, #160	; 0xa0
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	2200      	movs	r2, #0
 8002e48:	2102      	movs	r1, #2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f001 fa1f 	bl	800428e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f000 feef 	bl	8003c34 <HAL_Delay>
	HAL_SPI_Transmit(hspi2, buffer, 4, 100);
 8002e56:	1939      	adds	r1, r7, r4
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	2364      	movs	r3, #100	; 0x64
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	f001 ffc5 	bl	8004dec <HAL_SPI_Transmit>
	HAL_Delay(1);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f000 fee6 	bl	8003c34 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_SET);
 8002e68:	23a0      	movs	r3, #160	; 0xa0
 8002e6a:	05db      	lsls	r3, r3, #23
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2104      	movs	r1, #4
 8002e70:	0018      	movs	r0, r3
 8002e72:	f001 fa0c 	bl	800428e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_SET);
 8002e76:	23a0      	movs	r3, #160	; 0xa0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f001 fa05 	bl	800428e <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002e84:	2032      	movs	r0, #50	; 0x32
 8002e86:	f000 fed5 	bl	8003c34 <HAL_Delay>
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b005      	add	sp, #20
 8002e90:	bd90      	pop	{r4, r7, pc}

08002e92 <max2871RegisterInit>:
		rest = ppl->freqOut * 128 % FreqRef;
		ppl->register0.FRAC = rest / FreqRef * Resol;
	}
}

void max2871RegisterInit(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) {
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < 2; i++) {
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	e041      	b.n	8002f26 <max2871RegisterInit+0x94>
		max2871Write(hspi2, getRegister5InitValue(ppl));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7ff ff45 	bl	8002d34 <getRegister5InitValue>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0011      	movs	r1, r2
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff ffa3 	bl	8002dfc <max2871Write>
		HAL_Delay(20);
 8002eb6:	2014      	movs	r0, #20
 8002eb8:	f000 febc 	bl	8003c34 <HAL_Delay>
		max2871Write(hspi2, getRegister4InitValue(ppl));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7ff fea8 	bl	8002c14 <getRegister4InitValue>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7ff ff96 	bl	8002dfc <max2871Write>
		max2871Write(hspi2, getRegister3InitValue(ppl));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff fe52 	bl	8002b7c <getRegister3InitValue>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0011      	movs	r1, r2
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7ff ff8c 	bl	8002dfc <max2871Write>
		max2871Write(hspi2, getRegister2InitValue(ppl));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f7ff fdd9 	bl	8002a9e <getRegister2InitValue>
 8002eec:	0002      	movs	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff ff82 	bl	8002dfc <max2871Write>
		max2871Write(hspi2, getRegister1InitValue(ppl));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff fda5 	bl	8002a4a <getRegister1InitValue>
 8002f00:	0002      	movs	r2, r0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	0011      	movs	r1, r2
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff ff78 	bl	8002dfc <max2871Write>
		max2871Write(hspi2, getRegister0InitValue(ppl));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff fd79 	bl	8002a06 <getRegister0InitValue>
 8002f14:	0002      	movs	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0011      	movs	r1, r2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff ff6e 	bl	8002dfc <max2871Write>
	for (int i = 0; i < 2; i++) {
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3301      	adds	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	ddba      	ble.n	8002ea2 <max2871RegisterInit+0x10>
	}
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <waitForLock>:

void waitForLock() {
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
	GPIO_PinState lock = GPIO_PIN_SET;
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
	unsigned long t_ini = HAL_GetTick();
 8002f44:	f000 fe6c 	bl	8003c20 <HAL_GetTick>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	607b      	str	r3, [r7, #4]
	unsigned long test = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
	while (lock == GPIO_PIN_SET && (test < 2000)) {
 8002f50:	e00f      	b.n	8002f72 <waitForLock+0x3c>
		test = HAL_GetTick() - t_ini;
 8002f52:	f000 fe65 	bl	8003c20 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	60bb      	str	r3, [r7, #8]
		lock = HAL_GPIO_ReadPin(MAX_LOCK_DETECTOR_GPIO_Port,
 8002f5e:	230f      	movs	r3, #15
 8002f60:	18fc      	adds	r4, r7, r3
 8002f62:	23a0      	movs	r3, #160	; 0xa0
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f001 f973 	bl	8004254 <HAL_GPIO_ReadPin>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	7023      	strb	r3, [r4, #0]
	while (lock == GPIO_PIN_SET && (test < 2000)) {
 8002f72:	230f      	movs	r3, #15
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d104      	bne.n	8002f86 <waitForLock+0x50>
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	23fa      	movs	r3, #250	; 0xfa
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d3e5      	bcc.n	8002f52 <waitForLock+0x1c>
		MAX_LOCK_DETECTOR_Pin);
	}
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b005      	add	sp, #20
 8002f8c:	bd90      	pop	{r4, r7, pc}

08002f8e <writeRegister0>:

void writeRegister0(MAX2871_t *ppl, SPI_HandleTypeDef *hspi2) {
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	6039      	str	r1, [r7, #0]
	unsigned long registerValue;
	registerValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	07da      	lsls	r2, r3, #31
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	03db      	lsls	r3, r3, #15
 8002fa4:	431a      	orrs	r2, r3
			| ppl->register0.FRAC << 3 | ppl->register0.ADDR0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	registerValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
	max2871Write(hspi2, registerValue);
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	0011      	movs	r1, r2
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff ff1d 	bl	8002dfc <max2871Write>
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <writeRegister4>:

void writeRegister4(MAX2871_t *ppl, SPI_HandleTypeDef *hspi2) {
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
	unsigned long registerValue = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
	registerValue = ppl->register4.RES << 29 | ppl->register4.SDLDO << 28
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	229c      	movs	r2, #156	; 0x9c
 8002fdc:	589b      	ldr	r3, [r3, r2]
 8002fde:	075a      	lsls	r2, r3, #29
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	21a0      	movs	r1, #160	; 0xa0
 8002fe4:	585b      	ldr	r3, [r3, r1]
 8002fe6:	071b      	lsls	r3, r3, #28
 8002fe8:	431a      	orrs	r2, r3
			| ppl->register4.SDDIV << 27 | ppl->register4.SDREF << 26
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	21a4      	movs	r1, #164	; 0xa4
 8002fee:	585b      	ldr	r3, [r3, r1]
 8002ff0:	06db      	lsls	r3, r3, #27
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	21a8      	movs	r1, #168	; 0xa8
 8002ff8:	585b      	ldr	r3, [r3, r1]
 8002ffa:	069b      	lsls	r3, r3, #26
 8002ffc:	431a      	orrs	r2, r3
			| ppl->register4.FB << 23 | ppl->register4.DIVA << 20
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	21ac      	movs	r1, #172	; 0xac
 8003002:	585b      	ldr	r3, [r3, r1]
 8003004:	05db      	lsls	r3, r3, #23
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	21b0      	movs	r1, #176	; 0xb0
 800300c:	585b      	ldr	r3, [r3, r1]
 800300e:	051b      	lsls	r3, r3, #20
 8003010:	431a      	orrs	r2, r3
			| ppl->register4.BS << 12 | ppl->register4.SDVCO << 11
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	21b4      	movs	r1, #180	; 0xb4
 8003016:	585b      	ldr	r3, [r3, r1]
 8003018:	031b      	lsls	r3, r3, #12
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	21b8      	movs	r1, #184	; 0xb8
 8003020:	585b      	ldr	r3, [r3, r1]
 8003022:	02db      	lsls	r3, r3, #11
 8003024:	431a      	orrs	r2, r3
			| ppl->register4.MTLD << 10 | ppl->register4.BDIV << 9
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	21bc      	movs	r1, #188	; 0xbc
 800302a:	585b      	ldr	r3, [r3, r1]
 800302c:	029b      	lsls	r3, r3, #10
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	21c0      	movs	r1, #192	; 0xc0
 8003034:	585b      	ldr	r3, [r3, r1]
 8003036:	025b      	lsls	r3, r3, #9
 8003038:	431a      	orrs	r2, r3
			| ppl->register4.RFB_EN << 8 | ppl->register4.BPWR << 6
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	21c4      	movs	r1, #196	; 0xc4
 800303e:	585b      	ldr	r3, [r3, r1]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	21c8      	movs	r1, #200	; 0xc8
 8003048:	585b      	ldr	r3, [r3, r1]
 800304a:	019b      	lsls	r3, r3, #6
 800304c:	431a      	orrs	r2, r3
			| ppl->register4.RFA_EN << 5 | ppl->register4.APWR << 3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	21cc      	movs	r1, #204	; 0xcc
 8003052:	585b      	ldr	r3, [r3, r1]
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	21d0      	movs	r1, #208	; 0xd0
 800305c:	585b      	ldr	r3, [r3, r1]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	431a      	orrs	r2, r3
			| ppl->register4.ADDR4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	21d4      	movs	r1, #212	; 0xd4
 8003066:	585b      	ldr	r3, [r3, r1]
	registerValue = ppl->register4.RES << 29 | ppl->register4.SDLDO << 28
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
	max2871Write(hspi2, registerValue);
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff fec2 	bl	8002dfc <max2871Write>
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b004      	add	sp, #16
 800307e:	bd80      	pop	{r7, pc}

08003080 <max2871ProgramFreqOut>:

void max2871ProgramFreqOut(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) // Compose register value of register 0 and 4
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	double rest;
	HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_RESET);
 800308a:	23a0      	movs	r3, #160	; 0xa0
 800308c:	05db      	lsls	r3, r3, #23
 800308e:	2200      	movs	r2, #0
 8003090:	2120      	movs	r1, #32
 8003092:	0018      	movs	r0, r3
 8003094:	f001 f8fb 	bl	800428e <HAL_GPIO_WritePin>
	ppl->register4.RFA_EN = 0x0UL; // Disabled
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	22cc      	movs	r2, #204	; 0xcc
 800309c:	2100      	movs	r1, #0
 800309e:	5099      	str	r1, [r3, r2]
	writeRegister4(ppl, hspi2);
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	0011      	movs	r1, r2
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7ff ff8f 	bl	8002fca <writeRegister4>
	ppl->register0.NDIV = ppl->freqOut * 32 / (unsigned long) FREQ_REF;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	015b      	lsls	r3, r3, #5
 80030b2:	4927      	ldr	r1, [pc, #156]	; (8003150 <max2871ProgramFreqOut+0xd0>)
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7fd f82d 	bl	8000114 <__udivsi3>
 80030ba:	0003      	movs	r3, r0
 80030bc:	001a      	movs	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	621a      	str	r2, [r3, #32]
	rest = ppl->freqOut * 32 % (unsigned long) FREQ_REF;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	015b      	lsls	r3, r3, #5
 80030c8:	4921      	ldr	r1, [pc, #132]	; (8003150 <max2871ProgramFreqOut+0xd0>)
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7fd f8a8 	bl	8000220 <__aeabi_uidivmod>
 80030d0:	000b      	movs	r3, r1
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7fe fb3c 	bl	8001750 <__aeabi_ui2d>
 80030d8:	0002      	movs	r2, r0
 80030da:	000b      	movs	r3, r1
 80030dc:	60ba      	str	r2, [r7, #8]
 80030de:	60fb      	str	r3, [r7, #12]
	ppl->register0.FRAC = rest / (unsigned long) FREQ_REF * RESOLUTION;
 80030e0:	2200      	movs	r2, #0
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <max2871ProgramFreqOut+0xd4>)
 80030e4:	68b8      	ldr	r0, [r7, #8]
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	f7fd f8fc 	bl	80002e4 <__aeabi_ddiv>
 80030ec:	0002      	movs	r2, r0
 80030ee:	000b      	movs	r3, r1
 80030f0:	0010      	movs	r0, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	2200      	movs	r2, #0
 80030f6:	4b18      	ldr	r3, [pc, #96]	; (8003158 <max2871ProgramFreqOut+0xd8>)
 80030f8:	f7fd fcf6 	bl	8000ae8 <__aeabi_dmul>
 80030fc:	0002      	movs	r2, r0
 80030fe:	000b      	movs	r3, r1
 8003100:	0010      	movs	r0, r2
 8003102:	0019      	movs	r1, r3
 8003104:	f7fd f8d0 	bl	80002a8 <__aeabi_d2uiz>
 8003108:	0002      	movs	r2, r0
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
	writeRegister0(ppl, hspi2);
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	0011      	movs	r1, r2
 8003114:	0018      	movs	r0, r3
 8003116:	f7ff ff3a 	bl	8002f8e <writeRegister0>
	waitForLock();
 800311a:	f7ff ff0c 	bl	8002f36 <waitForLock>
	ppl->register4.DIVA = 5;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	22b0      	movs	r2, #176	; 0xb0
 8003122:	2105      	movs	r1, #5
 8003124:	5099      	str	r1, [r3, r2]
	ppl->register4.RFA_EN = 0X1UL; // Enabled
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	22cc      	movs	r2, #204	; 0xcc
 800312a:	2101      	movs	r1, #1
 800312c:	5099      	str	r1, [r3, r2]
	writeRegister4(ppl, hspi2);
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	0011      	movs	r1, r2
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff ff48 	bl	8002fca <writeRegister4>
	HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 800313a:	23a0      	movs	r3, #160	; 0xa0
 800313c:	05db      	lsls	r3, r3, #23
 800313e:	2201      	movs	r2, #1
 8003140:	2120      	movs	r1, #32
 8003142:	0018      	movs	r0, r3
 8003144:	f001 f8a3 	bl	800428e <HAL_GPIO_WritePin>
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}
 8003150:	02faf080 	.word	0x02faf080
 8003154:	4187d784 	.word	0x4187d784
 8003158:	40af4000 	.word	0x40af4000

0800315c <toneUhfInit>:
	/* PA3  PA_HAB as output - ENABLE - DISABLE PA */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE3_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE3_1);
}

void toneUhfInit(Function_t funcion, Id_t id, Tone_uhf_t *uhf) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	603a      	str	r2, [r7, #0]
 8003164:	1dfb      	adds	r3, r7, #7
 8003166:	1c02      	adds	r2, r0, #0
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	1dbb      	adds	r3, r7, #6
 800316c:	1c0a      	adds	r2, r1, #0
 800316e:	701a      	strb	r2, [r3, #0]
	uhf->ON_OFF = 0;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
	uhf->FreqBase = 0;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
	uhf->FreqOut = 0;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
	uhf->PdBm = 0;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2200      	movs	r2, #0
 8003186:	731a      	strb	r2, [r3, #12]
	uhf->function = funcion;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	1dfa      	adds	r2, r7, #7
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	739a      	strb	r2, [r3, #14]
	uhf->id = id;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	1dba      	adds	r2, r7, #6
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	735a      	strb	r2, [r3, #13]
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	000a      	movs	r2, r1
 80031aa:	1cfb      	adds	r3, r7, #3
 80031ac:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 80031ae:	230a      	movs	r3, #10
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <crc_get+0xc0>)
 80031b4:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 80031b6:	230c      	movs	r3, #12
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	2200      	movs	r2, #0
 80031bc:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 80031be:	230f      	movs	r3, #15
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e03d      	b.n	8003244 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 80031c8:	230f      	movs	r3, #15
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	18d3      	adds	r3, r2, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	b299      	uxth	r1, r3
 80031da:	220c      	movs	r2, #12
 80031dc:	18bb      	adds	r3, r7, r2
 80031de:	18ba      	adds	r2, r7, r2
 80031e0:	8812      	ldrh	r2, [r2, #0]
 80031e2:	404a      	eors	r2, r1
 80031e4:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 80031e6:	230e      	movs	r3, #14
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e01e      	b.n	800322e <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 80031f0:	210c      	movs	r1, #12
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	2200      	movs	r2, #0
 80031f6:	5e9b      	ldrsh	r3, [r3, r2]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	da0c      	bge.n	8003216 <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	b21a      	sxth	r2, r3
 8003204:	230a      	movs	r3, #10
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2000      	movs	r0, #0
 800320a:	5e1b      	ldrsh	r3, [r3, r0]
 800320c:	4053      	eors	r3, r2
 800320e:	b21a      	sxth	r2, r3
 8003210:	187b      	adds	r3, r7, r1
 8003212:	801a      	strh	r2, [r3, #0]
 8003214:	e005      	b.n	8003222 <crc_get+0x82>
			else
				crc <<= 1;
 8003216:	230c      	movs	r3, #12
 8003218:	18fa      	adds	r2, r7, r3
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	18db      	adds	r3, r3, r3
 8003220:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 8003222:	210e      	movs	r1, #14
 8003224:	187b      	adds	r3, r7, r1
 8003226:	781a      	ldrb	r2, [r3, #0]
 8003228:	187b      	adds	r3, r7, r1
 800322a:	3201      	adds	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	230e      	movs	r3, #14
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b07      	cmp	r3, #7
 8003236:	d9db      	bls.n	80031f0 <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8003238:	210f      	movs	r1, #15
 800323a:	187b      	adds	r3, r7, r1
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	187b      	adds	r3, r7, r1
 8003240:	3201      	adds	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	230f      	movs	r3, #15
 8003246:	18fa      	adds	r2, r7, r3
 8003248:	1cfb      	adds	r3, r7, #3
 800324a:	7812      	ldrb	r2, [r2, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d3ba      	bcc.n	80031c8 <crc_get+0x28>
		}
	}
	return crc;
 8003252:	230c      	movs	r3, #12
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	881b      	ldrh	r3, [r3, #0]
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b004      	add	sp, #16
 800325e:	bd80      	pop	{r7, pc}
 8003260:	00001021 	.word	0x00001021

08003264 <rs485Init>:

void rs485Init(RS485_t *r) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	r->len = 0;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2207      	movs	r2, #7
 8003276:	721a      	strb	r2, [r3, #8]
	r->cmd = NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
	/* PB9 DE485 as output  */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <rs485Init+0x3c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <rs485Init+0x3c>)
 8003284:	2180      	movs	r1, #128	; 0x80
 8003286:	02c9      	lsls	r1, r1, #11
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <rs485Init+0x3c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <rs485Init+0x3c>)
 8003292:	4904      	ldr	r1, [pc, #16]	; (80032a4 <rs485Init+0x40>)
 8003294:	400a      	ands	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	50000400 	.word	0x50000400
 80032a4:	fff7ffff 	.word	0xfff7ffff

080032a8 <rs485_check_frame>:
Rs485_status_t rs485_check_frame(RS485_t *r, UART1_t *u) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]

	if (u->rxCount > (MINIMUN_FRAME_LEN)) {
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	227d      	movs	r2, #125	; 0x7d
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	2b06      	cmp	r3, #6
 80032ba:	d913      	bls.n	80032e4 <rs485_check_frame+0x3c>
		if (u->rxBuffer[0] == LTEL_START_MARK) {
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	227e      	movs	r2, #126	; 0x7e
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <rs485_check_frame+0x38>
			if (u->rxBuffer[u->rxCount - 1] == LTEL_END_MARK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	227d      	movs	r2, #125	; 0x7d
 80032ca:	5c9b      	ldrb	r3, [r3, r2]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	227f      	movs	r2, #127	; 0x7f
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <rs485_check_frame+0x34>
				return VALID_FRAME;
 80032d8:	2302      	movs	r3, #2
 80032da:	e004      	b.n	80032e6 <rs485_check_frame+0x3e>
			else
				return START_READING;
 80032dc:	2301      	movs	r3, #1
 80032de:	e002      	b.n	80032e6 <rs485_check_frame+0x3e>
		} else
			return NOT_VALID_FRAME;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e000      	b.n	80032e6 <rs485_check_frame+0x3e>
	} else

		return WAITING;
 80032e4:	2308      	movs	r3, #8
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b002      	add	sp, #8
 80032ec:	bd80      	pop	{r7, pc}

080032ee <rs485_check_CRC_module>:

Rs485_status_t rs485_check_CRC_module(UART1_t *uart1) {
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = uart1->rxBuffer[8] << 8;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7a1b      	ldrb	r3, [r3, #8]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	60fb      	str	r3, [r7, #12]
	crc_save |= uart1->rxBuffer[9];
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7a5b      	ldrb	r3, [r3, #9]
 8003302:	001a      	movs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(uart1->rxBuffer[1]), 7);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3301      	adds	r3, #1
 800330e:	2107      	movs	r1, #7
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff ff45 	bl	80031a0 <crc_get>
 8003316:	0003      	movs	r3, r0
 8003318:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	429a      	cmp	r2, r3
 8003320:	d101      	bne.n	8003326 <rs485_check_CRC_module+0x38>
		return DATA_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <rs485_check_CRC_module+0x3a>
	return CRC_ERROR;
 8003326:	2306      	movs	r3, #6
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b004      	add	sp, #16
 800332e:	bd80      	pop	{r7, pc}

08003330 <rs485_check_valid_module>:

Rs485_status_t rs485_check_valid_module(UART1_t *uart1) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	if (uart1->rxBuffer[1] == UHF_TONE) {
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2b07      	cmp	r3, #7
 800333e:	d11c      	bne.n	800337a <rs485_check_valid_module+0x4a>
		if (uart1->rxBuffer[2] == ID0) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	789b      	ldrb	r3, [r3, #2]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d116      	bne.n	8003376 <rs485_check_valid_module+0x46>
			for (int i = 3; i < uart1->rxCount; i++)
 8003348:	2303      	movs	r3, #3
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e00b      	b.n	8003366 <rs485_check_valid_module+0x36>
				if (uart1->rxBuffer[i] == LTEL_END_MARK)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	18d3      	adds	r3, r2, r3
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	227f      	movs	r2, #127	; 0x7f
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <rs485_check_valid_module+0x30>
					return VALID_MODULE;
 800335c:	2309      	movs	r3, #9
 800335e:	e00f      	b.n	8003380 <rs485_check_valid_module+0x50>
			for (int i = 3; i < uart1->rxCount; i++)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3301      	adds	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	227d      	movs	r2, #125	; 0x7d
 800336a:	5c9b      	ldrb	r3, [r3, r2]
 800336c:	001a      	movs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4293      	cmp	r3, r2
 8003372:	dbec      	blt.n	800334e <rs485_check_valid_module+0x1e>
 8003374:	e003      	b.n	800337e <rs485_check_valid_module+0x4e>
		} else
			return WRONG_MODULE_ID;
 8003376:	2305      	movs	r3, #5
 8003378:	e002      	b.n	8003380 <rs485_check_valid_module+0x50>
	} else
		return WRONG_MODULE_FUNCTION;
 800337a:	2304      	movs	r3, #4
 800337c:	e000      	b.n	8003380 <rs485_check_valid_module+0x50>
	return WRONG_MODULE_FUNCTION;
 800337e:	2304      	movs	r3, #4
}
 8003380:	0018      	movs	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	b004      	add	sp, #16
 8003386:	bd80      	pop	{r7, pc}

08003388 <rs485Uart1Decode>:

void rs485Uart1Decode(RS485_t *rs485, UART1_t *uart1) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	switch (rs485->status) {
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7a1b      	ldrb	r3, [r3, #8]
 8003396:	2b09      	cmp	r3, #9
 8003398:	d900      	bls.n	800339c <rs485Uart1Decode+0x14>
 800339a:	e081      	b.n	80034a0 <rs485Uart1Decode+0x118>
 800339c:	009a      	lsls	r2, r3, #2
 800339e:	4b47      	ldr	r3, [pc, #284]	; (80034bc <rs485Uart1Decode+0x134>)
 80033a0:	18d3      	adds	r3, r2, r3
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	469f      	mov	pc, r3
	case VALID_MODULE:
		rs485->status = rs485_check_CRC_module(uart1);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff ffa0 	bl	80032ee <rs485_check_CRC_module>
 80033ae:	0003      	movs	r3, r0
 80033b0:	001a      	movs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	721a      	strb	r2, [r3, #8]
		break;
 80033b6:	e07c      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	case DATA_OK:
		rs485->cmd = uart1->rxBuffer[3];
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	78da      	ldrb	r2, [r3, #3]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	701a      	strb	r2, [r3, #0]
		uart1_send_str("DATA OK\r\n");
 80033c0:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <rs485Uart1Decode+0x138>)
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 fb18 	bl	80039f8 <uart1_send_str>
		rs485->status = DONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2207      	movs	r2, #7
 80033cc:	721a      	strb	r2, [r3, #8]
		break;
 80033ce:	e070      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	case START_READING:
		rs485->status = WAITING;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2208      	movs	r2, #8
 80033d4:	721a      	strb	r2, [r3, #8]
		if (uart1_clean_by_timeout(uart1, "START_READING"))
 80033d6:	4a3b      	ldr	r2, [pc, #236]	; (80034c4 <rs485Uart1Decode+0x13c>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 f991 	bl	8003704 <uart1_clean_by_timeout>
 80033e2:	1e03      	subs	r3, r0, #0
 80033e4:	d064      	beq.n	80034b0 <rs485Uart1Decode+0x128>
			rs485->status = DONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2207      	movs	r2, #7
 80033ea:	721a      	strb	r2, [r3, #8]
		break;
 80033ec:	e060      	b.n	80034b0 <rs485Uart1Decode+0x128>
	case VALID_FRAME:
		rs485->status = rs485_check_valid_module(uart1);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff ff9d 	bl	8003330 <rs485_check_valid_module>
 80033f6:	0003      	movs	r3, r0
 80033f8:	001a      	movs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	721a      	strb	r2, [r3, #8]
		break;
 80033fe:	e058      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	case NOT_VALID_FRAME:
		HAL_Delay(50);
 8003400:	2032      	movs	r0, #50	; 0x32
 8003402:	f000 fc17 	bl	8003c34 <HAL_Delay>
	    uart1_send_str("NOT VALID FRAME\r\n");
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <rs485Uart1Decode+0x140>)
 8003408:	0018      	movs	r0, r3
 800340a:	f000 faf5 	bl	80039f8 <uart1_send_str>
		uart1_clean_buffer(uart1);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 fb3b 	bl	8003a8c <uart1_clean_buffer>
		rs485->status = DONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2207      	movs	r2, #7
 800341a:	721a      	strb	r2, [r3, #8]
		break;
 800341c:	e049      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	case WRONG_MODULE_ID:
		uart1_send_str("WRONG MODULE ID\r\n");
 800341e:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <rs485Uart1Decode+0x144>)
 8003420:	0018      	movs	r0, r3
 8003422:	f000 fae9 	bl	80039f8 <uart1_send_str>
		uart1_clean_buffer(uart1);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fb2f 	bl	8003a8c <uart1_clean_buffer>
		rs485->status = DONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2207      	movs	r2, #7
 8003432:	721a      	strb	r2, [r3, #8]
		break;
 8003434:	e03d      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	case WRONG_MODULE_FUNCTION:
		uart1_send_str("WRONG MODULE FUNCTION\r\n");
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <rs485Uart1Decode+0x148>)
 8003438:	0018      	movs	r0, r3
 800343a:	f000 fadd 	bl	80039f8 <uart1_send_str>
		uart1_clean_buffer(uart1);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fb23 	bl	8003a8c <uart1_clean_buffer>
		rs485->status = DONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2207      	movs	r2, #7
 800344a:	721a      	strb	r2, [r3, #8]
		break;
 800344c:	e031      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	case CRC_ERROR:
		uart1_send_str("CRC ERROR\r\n");
 800344e:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <rs485Uart1Decode+0x14c>)
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fad1 	bl	80039f8 <uart1_send_str>
		uart1_clean_buffer(uart1);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fb17 	bl	8003a8c <uart1_clean_buffer>
		rs485->status = DONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2207      	movs	r2, #7
 8003462:	721a      	strb	r2, [r3, #8]
		break;
 8003464:	e025      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	case WAITING:
		rs485->status = rs485_check_frame(rs485, uart1);
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff ff1b 	bl	80032a8 <rs485_check_frame>
 8003472:	0003      	movs	r3, r0
 8003474:	001a      	movs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	721a      	strb	r2, [r3, #8]
		uart1_clean_by_timeout(uart1, "WAITING");
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <rs485Uart1Decode+0x150>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	0011      	movs	r1, r2
 8003480:	0018      	movs	r0, r3
 8003482:	f000 f93f 	bl	8003704 <uart1_clean_by_timeout>
		break;
 8003486:	e014      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	case DONE:
		uart1_send_str("DONE\r\n");
 8003488:	4b14      	ldr	r3, [pc, #80]	; (80034dc <rs485Uart1Decode+0x154>)
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fab4 	bl	80039f8 <uart1_send_str>
		uart1_clean_buffer(uart1);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fafa 	bl	8003a8c <uart1_clean_buffer>
		rs485->status = WAITING;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2208      	movs	r2, #8
 800349c:	721a      	strb	r2, [r3, #8]
		break;
 800349e:	e008      	b.n	80034b2 <rs485Uart1Decode+0x12a>
	default:
		rs485->status = DONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2207      	movs	r2, #7
 80034a4:	721a      	strb	r2, [r3, #8]
		uart1_clean_buffer(uart1);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 faef 	bl	8003a8c <uart1_clean_buffer>
		break;
 80034ae:	e000      	b.n	80034b2 <rs485Uart1Decode+0x12a>
		break;
 80034b0:	46c0      	nop			; (mov r8, r8)
	}
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b002      	add	sp, #8
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	08005f84 	.word	0x08005f84
 80034c0:	08005e80 	.word	0x08005e80
 80034c4:	08005e8c 	.word	0x08005e8c
 80034c8:	08005e9c 	.word	0x08005e9c
 80034cc:	08005eb0 	.word	0x08005eb0
 80034d0:	08005ec4 	.word	0x08005ec4
 80034d4:	08005edc 	.word	0x08005edc
 80034d8:	08005ee8 	.word	0x08005ee8
 80034dc:	08005ef0 	.word	0x08005ef0

080034e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <HAL_MspInit+0x44>)
 80034e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ea:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_MspInit+0x44>)
 80034ec:	2101      	movs	r1, #1
 80034ee:	430a      	orrs	r2, r1
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <HAL_MspInit+0x44>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2201      	movs	r2, #1
 80034f8:	4013      	ands	r3, r2
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_MspInit+0x44>)
 8003500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_MspInit+0x44>)
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	0549      	lsls	r1, r1, #21
 8003508:	430a      	orrs	r2, r1
 800350a:	63da      	str	r2, [r3, #60]	; 0x3c
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_MspInit+0x44>)
 800350e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	055b      	lsls	r3, r3, #21
 8003514:	4013      	ands	r3, r2
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	40021000 	.word	0x40021000

08003528 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_CRC_MspInit+0x38>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10d      	bne.n	8003556 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_CRC_MspInit+0x3c>)
 800353c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_CRC_MspInit+0x3c>)
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	0149      	lsls	r1, r1, #5
 8003544:	430a      	orrs	r2, r1
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_CRC_MspInit+0x3c>)
 800354a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	015b      	lsls	r3, r3, #5
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	40023000 	.word	0x40023000
 8003564:	40021000 	.word	0x40021000

08003568 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b08b      	sub	sp, #44	; 0x2c
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	2414      	movs	r4, #20
 8003572:	193b      	adds	r3, r7, r4
 8003574:	0018      	movs	r0, r3
 8003576:	2314      	movs	r3, #20
 8003578:	001a      	movs	r2, r3
 800357a:	2100      	movs	r1, #0
 800357c:	f001 ff2e 	bl	80053dc <memset>
  if(hspi->Instance==SPI2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <HAL_SPI_MspInit+0xb8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d146      	bne.n	8003618 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800358a:	4b26      	ldr	r3, [pc, #152]	; (8003624 <HAL_SPI_MspInit+0xbc>)
 800358c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358e:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_SPI_MspInit+0xbc>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	01c9      	lsls	r1, r1, #7
 8003594:	430a      	orrs	r2, r1
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
 8003598:	4b22      	ldr	r3, [pc, #136]	; (8003624 <HAL_SPI_MspInit+0xbc>)
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	01db      	lsls	r3, r3, #7
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a6:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <HAL_SPI_MspInit+0xbc>)
 80035a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_SPI_MspInit+0xbc>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
 80035b2:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <HAL_SPI_MspInit+0xbc>)
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	2201      	movs	r2, #1
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MAX_SCK_Pin;
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	2202      	movs	r2, #2
 80035c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_SCK_GPIO_Port, &GPIO_InitStruct);
 80035dc:	193a      	adds	r2, r7, r4
 80035de:	23a0      	movs	r3, #160	; 0xa0
 80035e0:	05db      	lsls	r3, r3, #23
 80035e2:	0011      	movs	r1, r2
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 fcd1 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAX_DATA_Pin;
 80035ea:	0021      	movs	r1, r4
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	2210      	movs	r2, #16
 80035f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	2202      	movs	r2, #2
 80035f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2200      	movs	r2, #0
 8003602:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2201      	movs	r2, #1
 8003608:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_DATA_GPIO_Port, &GPIO_InitStruct);
 800360a:	187a      	adds	r2, r7, r1
 800360c:	23a0      	movs	r3, #160	; 0xa0
 800360e:	05db      	lsls	r3, r3, #23
 8003610:	0011      	movs	r1, r2
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fcba 	bl	8003f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b00b      	add	sp, #44	; 0x2c
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	40003800 	.word	0x40003800
 8003624:	40021000 	.word	0x40021000

08003628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800362c:	e7fe      	b.n	800362c <NMI_Handler+0x4>

0800362e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003632:	e7fe      	b.n	8003632 <HardFault_Handler+0x4>

08003634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800364c:	f000 fad6 	bl	8003bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <_sbrk+0x5c>)
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <_sbrk+0x60>)
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <_sbrk+0x64>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <_sbrk+0x64>)
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <_sbrk+0x68>)
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <_sbrk+0x64>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	429a      	cmp	r2, r3
 8003686:	d207      	bcs.n	8003698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003688:	f001 fe7e 	bl	8005388 <__errno>
 800368c:	0003      	movs	r3, r0
 800368e:	220c      	movs	r2, #12
 8003690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003692:	2301      	movs	r3, #1
 8003694:	425b      	negs	r3, r3
 8003696:	e009      	b.n	80036ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <_sbrk+0x64>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	18d2      	adds	r2, r2, r3
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <_sbrk+0x64>)
 80036a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b006      	add	sp, #24
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20002000 	.word	0x20002000
 80036b8:	00000400 	.word	0x00000400
 80036bc:	20000124 	.word	0x20000124
 80036c0:	20000140 	.word	0x20000140

080036c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	0002      	movs	r2, r0
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b7f      	cmp	r3, #127	; 0x7f
 80036e2:	d809      	bhi.n	80036f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e4:	1dfb      	adds	r3, r7, #7
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	001a      	movs	r2, r3
 80036ea:	231f      	movs	r3, #31
 80036ec:	401a      	ands	r2, r3
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <__NVIC_EnableIRQ+0x30>)
 80036f0:	2101      	movs	r1, #1
 80036f2:	4091      	lsls	r1, r2
 80036f4:	000a      	movs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	e000e100 	.word	0xe000e100

08003704 <uart1_clean_by_timeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  uart1_clean_by_timeout(UART1_t* uart1,const char* str){
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 800370e:	f000 fa87 	bl	8003c20 <HAL_GetTick>
 8003712:	0002      	movs	r2, r0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	585b      	ldr	r3, [r3, r1]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	4a0f      	ldr	r2, [pc, #60]	; (800375c <uart1_clean_by_timeout+0x58>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d917      	bls.n	8003752 <uart1_clean_by_timeout+0x4e>
			uart1_send_str((char*)str);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f967 	bl	80039f8 <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <uart1_clean_by_timeout+0x5c>)
 800372c:	0018      	movs	r0, r3
 800372e:	f000 f963 	bl	80039f8 <uart1_send_str>
			if(strlen(str)>0)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <uart1_clean_by_timeout+0x3e>
				uart1_clean_buffer(uart1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f9a5 	bl	8003a8c <uart1_clean_buffer>
			uart1->timeout = HAL_GetTick();
 8003742:	f000 fa6d 	bl	8003c20 <HAL_GetTick>
 8003746:	0002      	movs	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	505a      	str	r2, [r3, r1]
			return 1;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <uart1_clean_by_timeout+0x50>
		}
		return 0;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}
 800375c:	00001388 	.word	0x00001388
 8003760:	08005ef8 	.word	0x08005ef8

08003764 <uart1_gpio_init>:

void uart1_gpio_init() {
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10    ------> USART1_RX **/

	/* PA10 alternate mode */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 8003768:	23a0      	movs	r3, #160	; 0xa0
 800376a:	05db      	lsls	r3, r3, #23
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	23a0      	movs	r3, #160	; 0xa0
 8003770:	05db      	lsls	r3, r3, #23
 8003772:	4930      	ldr	r1, [pc, #192]	; (8003834 <uart1_gpio_init+0xd0>)
 8003774:	400a      	ands	r2, r1
 8003776:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8003778:	23a0      	movs	r3, #160	; 0xa0
 800377a:	05db      	lsls	r3, r3, #23
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	23a0      	movs	r3, #160	; 0xa0
 8003780:	05db      	lsls	r3, r3, #23
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	0389      	lsls	r1, r1, #14
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 800378a:	23a0      	movs	r3, #160	; 0xa0
 800378c:	05db      	lsls	r3, r3, #23
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	23a0      	movs	r3, #160	; 0xa0
 8003792:	05db      	lsls	r3, r3, #23
 8003794:	4928      	ldr	r1, [pc, #160]	; (8003838 <uart1_gpio_init+0xd4>)
 8003796:	400a      	ands	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 800379a:	23a0      	movs	r3, #160	; 0xa0
 800379c:	05db      	lsls	r3, r3, #23
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	23a0      	movs	r3, #160	; 0xa0
 80037a2:	05db      	lsls	r3, r3, #23
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	0309      	lsls	r1, r1, #12
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 80037ac:	23a0      	movs	r3, #160	; 0xa0
 80037ae:	05db      	lsls	r3, r3, #23
 80037b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b2:	23a0      	movs	r3, #160	; 0xa0
 80037b4:	05db      	lsls	r3, r3, #23
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	0049      	lsls	r1, r1, #1
 80037ba:	430a      	orrs	r2, r1
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 80037be:	23a0      	movs	r3, #160	; 0xa0
 80037c0:	05db      	lsls	r3, r3, #23
 80037c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c4:	23a0      	movs	r3, #160	; 0xa0
 80037c6:	05db      	lsls	r3, r3, #23
 80037c8:	491c      	ldr	r1, [pc, #112]	; (800383c <uart1_gpio_init+0xd8>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 80037ce:	23a0      	movs	r3, #160	; 0xa0
 80037d0:	05db      	lsls	r3, r3, #23
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	23a0      	movs	r3, #160	; 0xa0
 80037d6:	05db      	lsls	r3, r3, #23
 80037d8:	4919      	ldr	r1, [pc, #100]	; (8003840 <uart1_gpio_init+0xdc>)
 80037da:	400a      	ands	r2, r1
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 80037de:	23a0      	movs	r3, #160	; 0xa0
 80037e0:	05db      	lsls	r3, r3, #23
 80037e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e4:	23a0      	movs	r3, #160	; 0xa0
 80037e6:	05db      	lsls	r3, r3, #23
 80037e8:	4916      	ldr	r1, [pc, #88]	; (8003844 <uart1_gpio_init+0xe0>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 80037ee:	23a0      	movs	r3, #160	; 0xa0
 80037f0:	05db      	lsls	r3, r3, #23
 80037f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f4:	23a0      	movs	r3, #160	; 0xa0
 80037f6:	05db      	lsls	r3, r3, #23
 80037f8:	2110      	movs	r1, #16
 80037fa:	430a      	orrs	r2, r1
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 80037fe:	23a0      	movs	r3, #160	; 0xa0
 8003800:	05db      	lsls	r3, r3, #23
 8003802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003804:	23a0      	movs	r3, #160	; 0xa0
 8003806:	05db      	lsls	r3, r3, #23
 8003808:	2120      	movs	r1, #32
 800380a:	438a      	bics	r2, r1
 800380c:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 800380e:	23a0      	movs	r3, #160	; 0xa0
 8003810:	05db      	lsls	r3, r3, #23
 8003812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003814:	23a0      	movs	r3, #160	; 0xa0
 8003816:	05db      	lsls	r3, r3, #23
 8003818:	2140      	movs	r1, #64	; 0x40
 800381a:	438a      	bics	r2, r1
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 800381e:	23a0      	movs	r3, #160	; 0xa0
 8003820:	05db      	lsls	r3, r3, #23
 8003822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003824:	23a0      	movs	r3, #160	; 0xa0
 8003826:	05db      	lsls	r3, r3, #23
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	438a      	bics	r2, r1
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	ffefffff 	.word	0xffefffff
 8003838:	fffbffff 	.word	0xfffbffff
 800383c:	fffffdff 	.word	0xfffffdff
 8003840:	fffffbff 	.word	0xfffffbff
 8003844:	fffff7ff 	.word	0xfffff7ff

08003848 <uart1Init>:

void uart1Init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8003858:	f7ff ff84 	bl	8003764 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 800385c:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <uart1Init+0x94>)
 800385e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <uart1Init+0x94>)
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	01c9      	lsls	r1, r1, #7
 8003866:	430a      	orrs	r2, r1
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <uart1Init+0x98>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10b      	bne.n	800388a <uart1Init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <uart1Init+0x94>)
 8003874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003876:	4b19      	ldr	r3, [pc, #100]	; (80038dc <uart1Init+0x94>)
 8003878:	2101      	movs	r1, #1
 800387a:	438a      	bics	r2, r1
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <uart1Init+0x94>)
 8003880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003882:	4b16      	ldr	r3, [pc, #88]	; (80038dc <uart1Init+0x94>)
 8003884:	2102      	movs	r1, #2
 8003886:	430a      	orrs	r2, r1
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7fc fc41 	bl	8000114 <__udivsi3>
 8003892:	0003      	movs	r3, r0
 8003894:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	b29a      	uxth	r2, r3
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <uart1Init+0x9c>)
 800389c:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <uart1Init+0x9c>)
 80038a0:	220c      	movs	r2, #12
 80038a2:	601a      	str	r2, [r3, #0]
	u->rxCount = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	227d      	movs	r2, #125	; 0x7d
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

	uart1_clean_buffer(u);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 f8ec 	bl	8003a8c <uart1_clean_buffer>

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <uart1Init+0x9c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <uart1Init+0x9c>)
 80038ba:	2120      	movs	r1, #32
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 80038c0:	201b      	movs	r0, #27
 80038c2:	f7ff ff05 	bl	80036d0 <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <uart1Init+0x9c>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <uart1Init+0x9c>)
 80038cc:	2101      	movs	r1, #1
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b006      	add	sp, #24
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	40021000 	.word	0x40021000
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	40013800 	.word	0x40013800

080038e8 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	0002      	movs	r2, r0
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <uart1_write+0x50>)
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <uart1_write+0x50>)
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	0089      	lsls	r1, r1, #2
 80038fe:	430a      	orrs	r2, r1
 8003900:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	4b0d      	ldr	r3, [pc, #52]	; (800393c <uart1_write+0x54>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	4013      	ands	r3, r2
 800390c:	d0fa      	beq.n	8003904 <uart1_write+0x1c>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <uart1_write+0x54>)
 8003910:	1dfa      	adds	r2, r7, #7
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <uart1_write+0x54>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2240      	movs	r2, #64	; 0x40
 800391e:	4013      	ands	r3, r2
 8003920:	d0fa      	beq.n	8003918 <uart1_write+0x30>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <uart1_write+0x50>)
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <uart1_write+0x50>)
 8003928:	4905      	ldr	r1, [pc, #20]	; (8003940 <uart1_write+0x58>)
 800392a:	400a      	ands	r2, r1
 800392c:	615a      	str	r2, [r3, #20]
}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	b002      	add	sp, #8
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	50000400 	.word	0x50000400
 800393c:	40013800 	.word	0x40013800
 8003940:	fffffdff 	.word	0xfffffdff

08003944 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <uart1_1byte_read+0x68>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	2208      	movs	r2, #8
 8003950:	401a      	ands	r2, r3
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	1e51      	subs	r1, r2, #1
 8003956:	418a      	sbcs	r2, r1
 8003958:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <uart1_1byte_read+0x68>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2220      	movs	r2, #32
 8003960:	401a      	ands	r2, r3
 8003962:	1dbb      	adds	r3, r7, #6
 8003964:	1e51      	subs	r1, r2, #1
 8003966:	418a      	sbcs	r2, r1
 8003968:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 800396a:	1dbb      	adds	r3, r7, #6
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <uart1_1byte_read+0x36>
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <uart1_1byte_read+0x5c>
		if (override)
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <uart1_1byte_read+0x68>)
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <uart1_1byte_read+0x68>)
 8003988:	2108      	movs	r1, #8
 800398a:	430a      	orrs	r2, r1
 800398c:	621a      	str	r2, [r3, #32]
		data = USART1->RDR;
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <uart1_1byte_read+0x68>)
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2da      	uxtb	r2, r3
 8003994:	1d7b      	adds	r3, r7, #5
 8003996:	701a      	strb	r2, [r3, #0]
		return data;
 8003998:	1d7b      	adds	r3, r7, #5
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e000      	b.n	80039a2 <uart1_1byte_read+0x5e>
	} else
		return '\0';
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	40013800 	.word	0x40013800

080039b0 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	if (u->rxCount >= RX_BUFFLEN) {
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	227d      	movs	r2, #125	; 0x7d
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	2b18      	cmp	r3, #24
 80039c0:	d907      	bls.n	80039d2 <uart1_read_to_frame+0x22>
		uart1_clean_buffer(u);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f000 f861 	bl	8003a8c <uart1_clean_buffer>
		u->rxCount = 0;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	227d      	movs	r2, #125	; 0x7d
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]
	}
	u->rxBuffer[u->rxCount++] = uart1_1byte_read();
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	227d      	movs	r2, #125	; 0x7d
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	b2d0      	uxtb	r0, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	217d      	movs	r1, #125	; 0x7d
 80039e0:	5450      	strb	r0, [r2, r1]
 80039e2:	001c      	movs	r4, r3
 80039e4:	f7ff ffae 	bl	8003944 <uart1_1byte_read>
 80039e8:	0003      	movs	r3, r0
 80039ea:	001a      	movs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	551a      	strb	r2, [r3, r4]
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b003      	add	sp, #12
 80039f6:	bd90      	pop	{r4, r7, pc}

080039f8 <uart1_send_str>:

void uart1_send_str(char *str) {
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8003a00:	230f      	movs	r3, #15
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e00d      	b.n	8003a26 <uart1_send_str+0x2e>
		uart1_write(str[i]);
 8003a0a:	240f      	movs	r4, #15
 8003a0c:	193b      	adds	r3, r7, r4
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	18d3      	adds	r3, r2, r3
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7ff ff66 	bl	80038e8 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	193b      	adds	r3, r7, r4
 8003a22:	3201      	adds	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	230f      	movs	r3, #15
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	18d3      	adds	r3, r2, r3
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e9      	bne.n	8003a0a <uart1_send_str+0x12>
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b005      	add	sp, #20
 8003a3e:	bd90      	pop	{r4, r7, pc}

08003a40 <uart1_send_frame>:

void uart1_send_frame(uint8_t str[], uint8_t len) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	000a      	movs	r2, r1
 8003a4a:	1cfb      	adds	r3, r7, #3
 8003a4c:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 8003a4e:	1cfb      	adds	r3, r7, #3
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <uart1_send_frame+0x44>
		for (int i = 0; i < len; i++){
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e00e      	b.n	8003a7a <uart1_send_frame+0x3a>
			uart1_write(str[i]);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	18d3      	adds	r3, r2, r3
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7ff ff3f 	bl	80038e8 <uart1_write>
			str[i] = (char) '\0';
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	18d3      	adds	r3, r2, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	1cfb      	adds	r3, r7, #3
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	dbeb      	blt.n	8003a5c <uart1_send_frame+0x1c>
		}
	}
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	u->rxCount = 0;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	227d      	movs	r2, #125	; 0x7d
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5499      	strb	r1, [r3, r2]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e010      	b.n	8003ac4 <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b18      	cmp	r3, #24
 8003aa6:	dc04      	bgt.n	8003ab2 <uart1_clean_buffer+0x26>
				u->rxBuffer[i] = 0x00;
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	18d3      	adds	r3, r2, r3
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
			u->txBuffer[i] = 0x00;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	3319      	adds	r3, #25
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b63      	cmp	r3, #99	; 0x63
 8003ac8:	ddeb      	ble.n	8003aa2 <uart1_clean_buffer+0x16>
			if (i < TX_BUFFLEN)
				u->txBuffer[i] = 0x00;
			u->rxBuffer[i] = 0x00;
		}
	}
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b004      	add	sp, #16
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ad4:	480d      	ldr	r0, [pc, #52]	; (8003b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ad6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ad8:	f7ff fdf4 	bl	80036c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ade:	490d      	ldr	r1, [pc, #52]	; (8003b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ae0:	4a0d      	ldr	r2, [pc, #52]	; (8003b18 <LoopForever+0xe>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae4:	e002      	b.n	8003aec <LoopCopyDataInit>

08003ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aea:	3304      	adds	r3, #4

08003aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003af0:	d3f9      	bcc.n	8003ae6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af4:	4c0a      	ldr	r4, [pc, #40]	; (8003b20 <LoopForever+0x16>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af8:	e001      	b.n	8003afe <LoopFillZerobss>

08003afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003afc:	3204      	adds	r2, #4

08003afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b00:	d3fb      	bcc.n	8003afa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b02:	f001 fc47 	bl	8005394 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003b06:	f7fe fd01 	bl	800250c <main>

08003b0a <LoopForever>:

LoopForever:
  b LoopForever
 8003b0a:	e7fe      	b.n	8003b0a <LoopForever>
  ldr   r0, =_estack
 8003b0c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003b18:	08006028 	.word	0x08006028
  ldr r2, =_sbss
 8003b1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003b20:	2000013c 	.word	0x2000013c

08003b24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b24:	e7fe      	b.n	8003b24 <ADC1_IRQHandler>
	...

08003b28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b2e:	1dfb      	adds	r3, r7, #7
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_Init+0x3c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <HAL_Init+0x3c>)
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	0049      	lsls	r1, r1, #1
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b42:	2003      	movs	r0, #3
 8003b44:	f000 f810 	bl	8003b68 <HAL_InitTick>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003b4c:	1dfb      	adds	r3, r7, #7
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e001      	b.n	8003b58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003b54:	f7ff fcc4 	bl	80034e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	781b      	ldrb	r3, [r3, #0]
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40022000 	.word	0x40022000

08003b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b70:	230f      	movs	r3, #15
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_InitTick+0x88>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d02b      	beq.n	8003bd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003b80:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_InitTick+0x8c>)
 8003b82:	681c      	ldr	r4, [r3, #0]
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_InitTick+0x88>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	0019      	movs	r1, r3
 8003b8a:	23fa      	movs	r3, #250	; 0xfa
 8003b8c:	0098      	lsls	r0, r3, #2
 8003b8e:	f7fc fac1 	bl	8000114 <__udivsi3>
 8003b92:	0003      	movs	r3, r0
 8003b94:	0019      	movs	r1, r3
 8003b96:	0020      	movs	r0, r4
 8003b98:	f7fc fabc 	bl	8000114 <__udivsi3>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 f913 	bl	8003dca <HAL_SYSTICK_Config>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d112      	bne.n	8003bce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d80a      	bhi.n	8003bc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	425b      	negs	r3, r3
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 f8f2 	bl	8003da0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <HAL_InitTick+0x90>)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00d      	b.n	8003be0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003bc4:	230f      	movs	r3, #15
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e008      	b.n	8003be0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bce:	230f      	movs	r3, #15
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e003      	b.n	8003be0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bd8:	230f      	movs	r3, #15
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003be0:	230f      	movs	r3, #15
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	781b      	ldrb	r3, [r3, #0]
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b005      	add	sp, #20
 8003bec:	bd90      	pop	{r4, r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	20000008 	.word	0x20000008
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	20000004 	.word	0x20000004

08003bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_IncTick+0x1c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	001a      	movs	r2, r3
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_IncTick+0x20>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	18d2      	adds	r2, r2, r3
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_IncTick+0x20>)
 8003c0e:	601a      	str	r2, [r3, #0]
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	20000008 	.word	0x20000008
 8003c1c:	20000128 	.word	0x20000128

08003c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  return uwTick;
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <HAL_GetTick+0x10>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000128 	.word	0x20000128

08003c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c3c:	f7ff fff0 	bl	8003c20 <HAL_GetTick>
 8003c40:	0003      	movs	r3, r0
 8003c42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	d005      	beq.n	8003c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_Delay+0x44>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	001a      	movs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	f7ff ffe0 	bl	8003c20 <HAL_GetTick>
 8003c60:	0002      	movs	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d8f7      	bhi.n	8003c5c <HAL_Delay+0x28>
  {
  }
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	20000008 	.word	0x20000008

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	0002      	movs	r2, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	1dfb      	adds	r3, r7, #7
 8003c88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	1dfb      	adds	r3, r7, #7
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c90:	d828      	bhi.n	8003ce4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c92:	4a2f      	ldr	r2, [pc, #188]	; (8003d50 <__NVIC_SetPriority+0xd4>)
 8003c94:	1dfb      	adds	r3, r7, #7
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	33c0      	adds	r3, #192	; 0xc0
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	589b      	ldr	r3, [r3, r2]
 8003ca2:	1dfa      	adds	r2, r7, #7
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	2203      	movs	r2, #3
 8003caa:	400a      	ands	r2, r1
 8003cac:	00d2      	lsls	r2, r2, #3
 8003cae:	21ff      	movs	r1, #255	; 0xff
 8003cb0:	4091      	lsls	r1, r2
 8003cb2:	000a      	movs	r2, r1
 8003cb4:	43d2      	mvns	r2, r2
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	22ff      	movs	r2, #255	; 0xff
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	2303      	movs	r3, #3
 8003cca:	4003      	ands	r3, r0
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd0:	481f      	ldr	r0, [pc, #124]	; (8003d50 <__NVIC_SetPriority+0xd4>)
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b25b      	sxtb	r3, r3
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	33c0      	adds	r3, #192	; 0xc0
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ce2:	e031      	b.n	8003d48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <__NVIC_SetPriority+0xd8>)
 8003ce6:	1dfb      	adds	r3, r7, #7
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	0019      	movs	r1, r3
 8003cec:	230f      	movs	r3, #15
 8003cee:	400b      	ands	r3, r1
 8003cf0:	3b08      	subs	r3, #8
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3306      	adds	r3, #6
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	18d3      	adds	r3, r2, r3
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1dfa      	adds	r2, r7, #7
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	0011      	movs	r1, r2
 8003d04:	2203      	movs	r2, #3
 8003d06:	400a      	ands	r2, r1
 8003d08:	00d2      	lsls	r2, r2, #3
 8003d0a:	21ff      	movs	r1, #255	; 0xff
 8003d0c:	4091      	lsls	r1, r2
 8003d0e:	000a      	movs	r2, r1
 8003d10:	43d2      	mvns	r2, r2
 8003d12:	401a      	ands	r2, r3
 8003d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	22ff      	movs	r2, #255	; 0xff
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	1dfb      	adds	r3, r7, #7
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	0018      	movs	r0, r3
 8003d24:	2303      	movs	r3, #3
 8003d26:	4003      	ands	r3, r0
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d2c:	4809      	ldr	r0, [pc, #36]	; (8003d54 <__NVIC_SetPriority+0xd8>)
 8003d2e:	1dfb      	adds	r3, r7, #7
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	001c      	movs	r4, r3
 8003d34:	230f      	movs	r3, #15
 8003d36:	4023      	ands	r3, r4
 8003d38:	3b08      	subs	r3, #8
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	3306      	adds	r3, #6
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	18c3      	adds	r3, r0, r3
 8003d44:	3304      	adds	r3, #4
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b003      	add	sp, #12
 8003d4e:	bd90      	pop	{r4, r7, pc}
 8003d50:	e000e100 	.word	0xe000e100
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1e5a      	subs	r2, r3, #1
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	045b      	lsls	r3, r3, #17
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d301      	bcc.n	8003d70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e010      	b.n	8003d92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <SysTick_Config+0x44>)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	3a01      	subs	r2, #1
 8003d76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d78:	2301      	movs	r3, #1
 8003d7a:	425b      	negs	r3, r3
 8003d7c:	2103      	movs	r1, #3
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7ff ff7c 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <SysTick_Config+0x44>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <SysTick_Config+0x44>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b002      	add	sp, #8
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	210f      	movs	r1, #15
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	1c02      	adds	r2, r0, #0
 8003db0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	b25b      	sxtb	r3, r3
 8003dba:	0011      	movs	r1, r2
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff ff5d 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b004      	add	sp, #16
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff ffbf 	bl	8003d58 <SysTick_Config>
 8003dda:	0003      	movs	r3, r0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e056      	b.n	8003ea4 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7f5b      	ldrb	r3, [r3, #29]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7ff fb8d 	bl	8003528 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	791b      	ldrb	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10c      	bne.n	8003e36 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_CRC_Init+0xc8>)
 8003e22:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2118      	movs	r1, #24
 8003e30:	438a      	bics	r2, r1
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	e00b      	b.n	8003e4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 f835 	bl	8003eb0 <HAL_CRCEx_Polynomial_Set>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e02a      	b.n	8003ea4 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	795b      	ldrb	r3, [r3, #5]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4252      	negs	r2, r2
 8003e5e:	611a      	str	r2, [r3, #16]
 8003e60:	e004      	b.n	8003e6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6912      	ldr	r2, [r2, #16]
 8003e6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2260      	movs	r2, #96	; 0x60
 8003e74:	4393      	bics	r3, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	4393      	bics	r3, r2
 8003e8e:	0019      	movs	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	04c11db7 	.word	0x04c11db7

08003eb0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2317      	movs	r3, #23
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003ec4:	231f      	movs	r3, #31
 8003ec6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	613a      	str	r2, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_CRCEx_Polynomial_Set+0x36>
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	221f      	movs	r2, #31
 8003ed8:	4013      	ands	r3, r2
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	40da      	lsrs	r2, r3
 8003ede:	0013      	movs	r3, r2
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d0f1      	beq.n	8003eca <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b18      	cmp	r3, #24
 8003eea:	d00f      	beq.n	8003f0c <HAL_CRCEx_Polynomial_Set+0x5c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b18      	cmp	r3, #24
 8003ef0:	d824      	bhi.n	8003f3c <HAL_CRCEx_Polynomial_Set+0x8c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d011      	beq.n	8003f1c <HAL_CRCEx_Polynomial_Set+0x6c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d81e      	bhi.n	8003f3c <HAL_CRCEx_Polynomial_Set+0x8c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_CRCEx_Polynomial_Set+0x96>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d010      	beq.n	8003f2c <HAL_CRCEx_Polynomial_Set+0x7c>
 8003f0a:	e017      	b.n	8003f3c <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b06      	cmp	r3, #6
 8003f10:	d91b      	bls.n	8003f4a <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8003f12:	2317      	movs	r3, #23
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003f1a:	e016      	b.n	8003f4a <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b07      	cmp	r3, #7
 8003f20:	d915      	bls.n	8003f4e <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8003f22:	2317      	movs	r3, #23
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003f2a:	e010      	b.n	8003f4e <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	d90f      	bls.n	8003f52 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8003f32:	2317      	movs	r3, #23
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003f3a:	e00a      	b.n	8003f52 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003f3c:	2317      	movs	r3, #23
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
      break;
 8003f44:	e006      	b.n	8003f54 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	e004      	b.n	8003f54 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	e002      	b.n	8003f54 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	e000      	b.n	8003f54 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003f52:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8003f54:	2317      	movs	r3, #23
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10e      	bne.n	8003f7c <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2218      	movs	r2, #24
 8003f6e:	4393      	bics	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003f7c:	2317      	movs	r3, #23
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	781b      	ldrb	r3, [r3, #0]
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b006      	add	sp, #24
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9a:	e147      	b.n	800422c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4091      	lsls	r1, r2
 8003fa6:	000a      	movs	r2, r1
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d100      	bne.n	8003fb4 <HAL_GPIO_Init+0x28>
 8003fb2:	e138      	b.n	8004226 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d005      	beq.n	8003fcc <HAL_GPIO_Init+0x40>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d130      	bne.n	800402e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	0013      	movs	r3, r2
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	409a      	lsls	r2, r3
 8003fee:	0013      	movs	r3, r2
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004002:	2201      	movs	r2, #1
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	409a      	lsls	r2, r3
 8004008:	0013      	movs	r3, r2
 800400a:	43da      	mvns	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	2201      	movs	r2, #1
 800401a:	401a      	ands	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	409a      	lsls	r2, r3
 8004020:	0013      	movs	r3, r2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2203      	movs	r2, #3
 8004034:	4013      	ands	r3, r2
 8004036:	2b03      	cmp	r3, #3
 8004038:	d017      	beq.n	800406a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	409a      	lsls	r2, r3
 8004048:	0013      	movs	r3, r2
 800404a:	43da      	mvns	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	0013      	movs	r3, r2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2203      	movs	r2, #3
 8004070:	4013      	ands	r3, r2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d123      	bne.n	80040be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	08da      	lsrs	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3208      	adds	r2, #8
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	58d3      	ldr	r3, [r2, r3]
 8004082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2207      	movs	r2, #7
 8004088:	4013      	ands	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	220f      	movs	r2, #15
 800408e:	409a      	lsls	r2, r3
 8004090:	0013      	movs	r3, r2
 8004092:	43da      	mvns	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2107      	movs	r1, #7
 80040a2:	400b      	ands	r3, r1
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	409a      	lsls	r2, r3
 80040a8:	0013      	movs	r3, r2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	08da      	lsrs	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3208      	adds	r2, #8
 80040b8:	0092      	lsls	r2, r2, #2
 80040ba:	6939      	ldr	r1, [r7, #16]
 80040bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	2203      	movs	r2, #3
 80040ca:	409a      	lsls	r2, r3
 80040cc:	0013      	movs	r3, r2
 80040ce:	43da      	mvns	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2203      	movs	r2, #3
 80040dc:	401a      	ands	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	409a      	lsls	r2, r3
 80040e4:	0013      	movs	r3, r2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	23c0      	movs	r3, #192	; 0xc0
 80040f8:	029b      	lsls	r3, r3, #10
 80040fa:	4013      	ands	r3, r2
 80040fc:	d100      	bne.n	8004100 <HAL_GPIO_Init+0x174>
 80040fe:	e092      	b.n	8004226 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004100:	4a50      	ldr	r2, [pc, #320]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	089b      	lsrs	r3, r3, #2
 8004106:	3318      	adds	r3, #24
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	589b      	ldr	r3, [r3, r2]
 800410c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2203      	movs	r2, #3
 8004112:	4013      	ands	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	220f      	movs	r2, #15
 8004118:	409a      	lsls	r2, r3
 800411a:	0013      	movs	r3, r2
 800411c:	43da      	mvns	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	23a0      	movs	r3, #160	; 0xa0
 8004128:	05db      	lsls	r3, r3, #23
 800412a:	429a      	cmp	r2, r3
 800412c:	d013      	beq.n	8004156 <HAL_GPIO_Init+0x1ca>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a45      	ldr	r2, [pc, #276]	; (8004248 <HAL_GPIO_Init+0x2bc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00d      	beq.n	8004152 <HAL_GPIO_Init+0x1c6>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a44      	ldr	r2, [pc, #272]	; (800424c <HAL_GPIO_Init+0x2c0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <HAL_GPIO_Init+0x1c2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a43      	ldr	r2, [pc, #268]	; (8004250 <HAL_GPIO_Init+0x2c4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <HAL_GPIO_Init+0x1be>
 8004146:	2303      	movs	r3, #3
 8004148:	e006      	b.n	8004158 <HAL_GPIO_Init+0x1cc>
 800414a:	2305      	movs	r3, #5
 800414c:	e004      	b.n	8004158 <HAL_GPIO_Init+0x1cc>
 800414e:	2302      	movs	r3, #2
 8004150:	e002      	b.n	8004158 <HAL_GPIO_Init+0x1cc>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_GPIO_Init+0x1cc>
 8004156:	2300      	movs	r3, #0
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	2103      	movs	r1, #3
 800415c:	400a      	ands	r2, r1
 800415e:	00d2      	lsls	r2, r2, #3
 8004160:	4093      	lsls	r3, r2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004168:	4936      	ldr	r1, [pc, #216]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	3318      	adds	r3, #24
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004176:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43da      	mvns	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	035b      	lsls	r3, r3, #13
 800418e:	4013      	ands	r3, r2
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800419a:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80041a0:	4b28      	ldr	r3, [pc, #160]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43da      	mvns	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	039b      	lsls	r3, r3, #14
 80041b8:	4013      	ands	r3, r2
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041c4:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041ca:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 80041cc:	2384      	movs	r3, #132	; 0x84
 80041ce:	58d3      	ldr	r3, [r2, r3]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43da      	mvns	r2, r3
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4013      	ands	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	029b      	lsls	r3, r3, #10
 80041e4:	4013      	ands	r3, r2
 80041e6:	d003      	beq.n	80041f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041f0:	4914      	ldr	r1, [pc, #80]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 80041f2:	2284      	movs	r2, #132	; 0x84
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	58d3      	ldr	r3, [r2, r3]
 80041fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	43da      	mvns	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	025b      	lsls	r3, r3, #9
 8004212:	4013      	ands	r3, r2
 8004214:	d003      	beq.n	800421e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800421e:	4909      	ldr	r1, [pc, #36]	; (8004244 <HAL_GPIO_Init+0x2b8>)
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3301      	adds	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	40da      	lsrs	r2, r3
 8004234:	1e13      	subs	r3, r2, #0
 8004236:	d000      	beq.n	800423a <HAL_GPIO_Init+0x2ae>
 8004238:	e6b0      	b.n	8003f9c <HAL_GPIO_Init+0x10>
  }
}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b006      	add	sp, #24
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021800 	.word	0x40021800
 8004248:	50000400 	.word	0x50000400
 800424c:	50000800 	.word	0x50000800
 8004250:	50000c00 	.word	0x50000c00

08004254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	000a      	movs	r2, r1
 800425e:	1cbb      	adds	r3, r7, #2
 8004260:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	1cba      	adds	r2, r7, #2
 8004268:	8812      	ldrh	r2, [r2, #0]
 800426a:	4013      	ands	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800426e:	230f      	movs	r3, #15
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e003      	b.n	8004280 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004278:	230f      	movs	r3, #15
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004280:	230f      	movs	r3, #15
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	781b      	ldrb	r3, [r3, #0]
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b004      	add	sp, #16
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	0008      	movs	r0, r1
 8004298:	0011      	movs	r1, r2
 800429a:	1cbb      	adds	r3, r7, #2
 800429c:	1c02      	adds	r2, r0, #0
 800429e:	801a      	strh	r2, [r3, #0]
 80042a0:	1c7b      	adds	r3, r7, #1
 80042a2:	1c0a      	adds	r2, r1, #0
 80042a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042a6:	1c7b      	adds	r3, r7, #1
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042ae:	1cbb      	adds	r3, r7, #2
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042b6:	e003      	b.n	80042c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042b8:	1cbb      	adds	r3, r7, #2
 80042ba:	881a      	ldrh	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80042d0:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	430a      	orrs	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d11f      	bne.n	800432c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	0013      	movs	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	189b      	adds	r3, r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4912      	ldr	r1, [pc, #72]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7fb ff0a 	bl	8000114 <__udivsi3>
 8004300:	0003      	movs	r3, r0
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004306:	e008      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3b01      	subs	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	e001      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e009      	b.n	800432e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	401a      	ands	r2, r3
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	429a      	cmp	r2, r3
 800432a:	d0ed      	beq.n	8004308 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	0018      	movs	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	b004      	add	sp, #16
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	40007000 	.word	0x40007000
 800433c:	fffff9ff 	.word	0xfffff9ff
 8004340:	20000000 	.word	0x20000000
 8004344:	000f4240 	.word	0x000f4240

08004348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e2f3      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2201      	movs	r2, #1
 8004360:	4013      	ands	r3, r2
 8004362:	d100      	bne.n	8004366 <HAL_RCC_OscConfig+0x1e>
 8004364:	e07c      	b.n	8004460 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4bc3      	ldr	r3, [pc, #780]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2238      	movs	r2, #56	; 0x38
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4bc0      	ldr	r3, [pc, #768]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2203      	movs	r2, #3
 8004376:	4013      	ands	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b10      	cmp	r3, #16
 800437e:	d102      	bne.n	8004386 <HAL_RCC_OscConfig+0x3e>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d002      	beq.n	800438c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d10b      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	4bb9      	ldr	r3, [pc, #740]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	4013      	ands	r3, r2
 8004396:	d062      	beq.n	800445e <HAL_RCC_OscConfig+0x116>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d15e      	bne.n	800445e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e2ce      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	025b      	lsls	r3, r3, #9
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d107      	bne.n	80043c0 <HAL_RCC_OscConfig+0x78>
 80043b0:	4bb0      	ldr	r3, [pc, #704]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4baf      	ldr	r3, [pc, #700]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	0249      	lsls	r1, r1, #9
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e020      	b.n	8004402 <HAL_RCC_OscConfig+0xba>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	23a0      	movs	r3, #160	; 0xa0
 80043c6:	02db      	lsls	r3, r3, #11
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d10e      	bne.n	80043ea <HAL_RCC_OscConfig+0xa2>
 80043cc:	4ba9      	ldr	r3, [pc, #676]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4ba8      	ldr	r3, [pc, #672]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043d2:	2180      	movs	r1, #128	; 0x80
 80043d4:	02c9      	lsls	r1, r1, #11
 80043d6:	430a      	orrs	r2, r1
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	4ba6      	ldr	r3, [pc, #664]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4ba5      	ldr	r3, [pc, #660]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043e0:	2180      	movs	r1, #128	; 0x80
 80043e2:	0249      	lsls	r1, r1, #9
 80043e4:	430a      	orrs	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e00b      	b.n	8004402 <HAL_RCC_OscConfig+0xba>
 80043ea:	4ba2      	ldr	r3, [pc, #648]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4ba1      	ldr	r3, [pc, #644]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043f0:	49a1      	ldr	r1, [pc, #644]	; (8004678 <HAL_RCC_OscConfig+0x330>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	4b9f      	ldr	r3, [pc, #636]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b9e      	ldr	r3, [pc, #632]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80043fc:	499f      	ldr	r1, [pc, #636]	; (800467c <HAL_RCC_OscConfig+0x334>)
 80043fe:	400a      	ands	r2, r1
 8004400:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d014      	beq.n	8004434 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7ff fc09 	bl	8003c20 <HAL_GetTick>
 800440e:	0003      	movs	r3, r0
 8004410:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7ff fc04 	bl	8003c20 <HAL_GetTick>
 8004418:	0002      	movs	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e28d      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004426:	4b93      	ldr	r3, [pc, #588]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	029b      	lsls	r3, r3, #10
 800442e:	4013      	ands	r3, r2
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0xcc>
 8004432:	e015      	b.n	8004460 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7ff fbf4 	bl	8003c20 <HAL_GetTick>
 8004438:	0003      	movs	r3, r0
 800443a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443e:	f7ff fbef 	bl	8003c20 <HAL_GetTick>
 8004442:	0002      	movs	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b64      	cmp	r3, #100	; 0x64
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e278      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004450:	4b88      	ldr	r3, [pc, #544]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	029b      	lsls	r3, r3, #10
 8004458:	4013      	ands	r3, r2
 800445a:	d1f0      	bne.n	800443e <HAL_RCC_OscConfig+0xf6>
 800445c:	e000      	b.n	8004460 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2202      	movs	r2, #2
 8004466:	4013      	ands	r3, r2
 8004468:	d100      	bne.n	800446c <HAL_RCC_OscConfig+0x124>
 800446a:	e099      	b.n	80045a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446c:	4b81      	ldr	r3, [pc, #516]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2238      	movs	r2, #56	; 0x38
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004476:	4b7f      	ldr	r3, [pc, #508]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2203      	movs	r2, #3
 800447c:	4013      	ands	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b10      	cmp	r3, #16
 8004484:	d102      	bne.n	800448c <HAL_RCC_OscConfig+0x144>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d002      	beq.n	8004492 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d135      	bne.n	80044fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004492:	4b78      	ldr	r3, [pc, #480]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4013      	ands	r3, r2
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x162>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e24b      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044aa:	4b72      	ldr	r3, [pc, #456]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a74      	ldr	r2, [pc, #464]	; (8004680 <HAL_RCC_OscConfig+0x338>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	4b6e      	ldr	r3, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d112      	bne.n	80044ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80044c6:	4b6b      	ldr	r3, [pc, #428]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6e      	ldr	r2, [pc, #440]	; (8004684 <HAL_RCC_OscConfig+0x33c>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	4b67      	ldr	r3, [pc, #412]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80044da:	4b66      	ldr	r3, [pc, #408]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	0adb      	lsrs	r3, r3, #11
 80044e0:	2207      	movs	r2, #7
 80044e2:	4013      	ands	r3, r2
 80044e4:	4a68      	ldr	r2, [pc, #416]	; (8004688 <HAL_RCC_OscConfig+0x340>)
 80044e6:	40da      	lsrs	r2, r3
 80044e8:	4b68      	ldr	r3, [pc, #416]	; (800468c <HAL_RCC_OscConfig+0x344>)
 80044ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044ec:	4b68      	ldr	r3, [pc, #416]	; (8004690 <HAL_RCC_OscConfig+0x348>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f7ff fb39 	bl	8003b68 <HAL_InitTick>
 80044f6:	1e03      	subs	r3, r0, #0
 80044f8:	d051      	beq.n	800459e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e221      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d030      	beq.n	8004568 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004506:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a5e      	ldr	r2, [pc, #376]	; (8004684 <HAL_RCC_OscConfig+0x33c>)
 800450c:	4013      	ands	r3, r2
 800450e:	0019      	movs	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	4b57      	ldr	r3, [pc, #348]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004516:	430a      	orrs	r2, r1
 8004518:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800451a:	4b56      	ldr	r3, [pc, #344]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b55      	ldr	r3, [pc, #340]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	0049      	lsls	r1, r1, #1
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7ff fb7a 	bl	8003c20 <HAL_GetTick>
 800452c:	0003      	movs	r3, r0
 800452e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004532:	f7ff fb75 	bl	8003c20 <HAL_GetTick>
 8004536:	0002      	movs	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e1fe      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004544:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4013      	ands	r3, r2
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	4b48      	ldr	r3, [pc, #288]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a4a      	ldr	r2, [pc, #296]	; (8004680 <HAL_RCC_OscConfig+0x338>)
 8004556:	4013      	ands	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	4b44      	ldr	r3, [pc, #272]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	e01b      	b.n	80045a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 800456e:	4949      	ldr	r1, [pc, #292]	; (8004694 <HAL_RCC_OscConfig+0x34c>)
 8004570:	400a      	ands	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7ff fb54 	bl	8003c20 <HAL_GetTick>
 8004578:	0003      	movs	r3, r0
 800457a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457e:	f7ff fb4f 	bl	8003c20 <HAL_GetTick>
 8004582:	0002      	movs	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e1d8      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004590:	4b38      	ldr	r3, [pc, #224]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4013      	ands	r3, r2
 800459a:	d1f0      	bne.n	800457e <HAL_RCC_OscConfig+0x236>
 800459c:	e000      	b.n	80045a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800459e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2208      	movs	r2, #8
 80045a6:	4013      	ands	r3, r2
 80045a8:	d047      	beq.n	800463a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045aa:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2238      	movs	r2, #56	; 0x38
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b18      	cmp	r3, #24
 80045b4:	d10a      	bne.n	80045cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80045b6:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80045b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ba:	2202      	movs	r2, #2
 80045bc:	4013      	ands	r3, r2
 80045be:	d03c      	beq.n	800463a <HAL_RCC_OscConfig+0x2f2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d138      	bne.n	800463a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e1ba      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d019      	beq.n	8004608 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80045d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045d8:	4b26      	ldr	r3, [pc, #152]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80045da:	2101      	movs	r1, #1
 80045dc:	430a      	orrs	r2, r1
 80045de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7ff fb1e 	bl	8003c20 <HAL_GetTick>
 80045e4:	0003      	movs	r3, r0
 80045e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ea:	f7ff fb19 	bl	8003c20 <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1a2      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 80045fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004600:	2202      	movs	r2, #2
 8004602:	4013      	ands	r3, r2
 8004604:	d0f1      	beq.n	80045ea <HAL_RCC_OscConfig+0x2a2>
 8004606:	e018      	b.n	800463a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004608:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 800460a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 800460e:	2101      	movs	r1, #1
 8004610:	438a      	bics	r2, r1
 8004612:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7ff fb04 	bl	8003c20 <HAL_GetTick>
 8004618:	0003      	movs	r3, r0
 800461a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800461e:	f7ff faff 	bl	8003c20 <HAL_GetTick>
 8004622:	0002      	movs	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e188      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004634:	2202      	movs	r2, #2
 8004636:	4013      	ands	r3, r2
 8004638:	d1f1      	bne.n	800461e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2204      	movs	r2, #4
 8004640:	4013      	ands	r3, r2
 8004642:	d100      	bne.n	8004646 <HAL_RCC_OscConfig+0x2fe>
 8004644:	e0c6      	b.n	80047d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	231f      	movs	r3, #31
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2238      	movs	r2, #56	; 0x38
 8004654:	4013      	ands	r3, r2
 8004656:	2b20      	cmp	r3, #32
 8004658:	d11e      	bne.n	8004698 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_OscConfig+0x32c>)
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2202      	movs	r2, #2
 8004660:	4013      	ands	r3, r2
 8004662:	d100      	bne.n	8004666 <HAL_RCC_OscConfig+0x31e>
 8004664:	e0b6      	b.n	80047d4 <HAL_RCC_OscConfig+0x48c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d000      	beq.n	8004670 <HAL_RCC_OscConfig+0x328>
 800466e:	e0b1      	b.n	80047d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e166      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
 8004674:	40021000 	.word	0x40021000
 8004678:	fffeffff 	.word	0xfffeffff
 800467c:	fffbffff 	.word	0xfffbffff
 8004680:	ffff80ff 	.word	0xffff80ff
 8004684:	ffffc7ff 	.word	0xffffc7ff
 8004688:	00f42400 	.word	0x00f42400
 800468c:	20000000 	.word	0x20000000
 8004690:	20000004 	.word	0x20000004
 8004694:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004698:	4bac      	ldr	r3, [pc, #688]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800469a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	055b      	lsls	r3, r3, #21
 80046a0:	4013      	ands	r3, r2
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_OscConfig+0x360>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x362>
 80046a8:	2300      	movs	r3, #0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	4ba7      	ldr	r3, [pc, #668]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80046b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b2:	4ba6      	ldr	r3, [pc, #664]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80046b4:	2180      	movs	r1, #128	; 0x80
 80046b6:	0549      	lsls	r1, r1, #21
 80046b8:	430a      	orrs	r2, r1
 80046ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80046bc:	4ba3      	ldr	r3, [pc, #652]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80046be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	055b      	lsls	r3, r3, #21
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80046ca:	231f      	movs	r3, #31
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d2:	4b9f      	ldr	r3, [pc, #636]	; (8004950 <HAL_RCC_OscConfig+0x608>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4013      	ands	r3, r2
 80046dc:	d11a      	bne.n	8004714 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046de:	4b9c      	ldr	r3, [pc, #624]	; (8004950 <HAL_RCC_OscConfig+0x608>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b9b      	ldr	r3, [pc, #620]	; (8004950 <HAL_RCC_OscConfig+0x608>)
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	0049      	lsls	r1, r1, #1
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80046ec:	f7ff fa98 	bl	8003c20 <HAL_GetTick>
 80046f0:	0003      	movs	r3, r0
 80046f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f6:	f7ff fa93 	bl	8003c20 <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e11c      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004708:	4b91      	ldr	r3, [pc, #580]	; (8004950 <HAL_RCC_OscConfig+0x608>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4013      	ands	r3, r2
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x3e2>
 800471c:	4b8b      	ldr	r3, [pc, #556]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800471e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004720:	4b8a      	ldr	r3, [pc, #552]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004722:	2101      	movs	r1, #1
 8004724:	430a      	orrs	r2, r1
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c
 8004728:	e01c      	b.n	8004764 <HAL_RCC_OscConfig+0x41c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b05      	cmp	r3, #5
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x404>
 8004732:	4b86      	ldr	r3, [pc, #536]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004736:	4b85      	ldr	r3, [pc, #532]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004738:	2104      	movs	r1, #4
 800473a:	430a      	orrs	r2, r1
 800473c:	65da      	str	r2, [r3, #92]	; 0x5c
 800473e:	4b83      	ldr	r3, [pc, #524]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004740:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004742:	4b82      	ldr	r3, [pc, #520]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004744:	2101      	movs	r1, #1
 8004746:	430a      	orrs	r2, r1
 8004748:	65da      	str	r2, [r3, #92]	; 0x5c
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0x41c>
 800474c:	4b7f      	ldr	r3, [pc, #508]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800474e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004750:	4b7e      	ldr	r3, [pc, #504]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004752:	2101      	movs	r1, #1
 8004754:	438a      	bics	r2, r1
 8004756:	65da      	str	r2, [r3, #92]	; 0x5c
 8004758:	4b7c      	ldr	r3, [pc, #496]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800475a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800475c:	4b7b      	ldr	r3, [pc, #492]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800475e:	2104      	movs	r1, #4
 8004760:	438a      	bics	r2, r1
 8004762:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d014      	beq.n	8004796 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7ff fa58 	bl	8003c20 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004774:	e009      	b.n	800478a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f7ff fa53 	bl	8003c20 <HAL_GetTick>
 800477a:	0002      	movs	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	4a74      	ldr	r2, [pc, #464]	; (8004954 <HAL_RCC_OscConfig+0x60c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e0db      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478a:	4b70      	ldr	r3, [pc, #448]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800478c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478e:	2202      	movs	r2, #2
 8004790:	4013      	ands	r3, r2
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x42e>
 8004794:	e013      	b.n	80047be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004796:	f7ff fa43 	bl	8003c20 <HAL_GetTick>
 800479a:	0003      	movs	r3, r0
 800479c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800479e:	e009      	b.n	80047b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a0:	f7ff fa3e 	bl	8003c20 <HAL_GetTick>
 80047a4:	0002      	movs	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	4a6a      	ldr	r2, [pc, #424]	; (8004954 <HAL_RCC_OscConfig+0x60c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e0c6      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b4:	4b65      	ldr	r3, [pc, #404]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80047b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b8:	2202      	movs	r2, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80047be:	231f      	movs	r3, #31
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80047c8:	4b60      	ldr	r3, [pc, #384]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80047ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047cc:	4b5f      	ldr	r3, [pc, #380]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80047ce:	4962      	ldr	r1, [pc, #392]	; (8004958 <HAL_RCC_OscConfig+0x610>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d100      	bne.n	80047de <HAL_RCC_OscConfig+0x496>
 80047dc:	e0b0      	b.n	8004940 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047de:	4b5b      	ldr	r3, [pc, #364]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2238      	movs	r2, #56	; 0x38
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d100      	bne.n	80047ec <HAL_RCC_OscConfig+0x4a4>
 80047ea:	e078      	b.n	80048de <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d153      	bne.n	800489c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f4:	4b55      	ldr	r3, [pc, #340]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b54      	ldr	r3, [pc, #336]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80047fa:	4958      	ldr	r1, [pc, #352]	; (800495c <HAL_RCC_OscConfig+0x614>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7ff fa0e 	bl	8003c20 <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480a:	f7ff fa09 	bl	8003c20 <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e092      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481c:	4b4b      	ldr	r3, [pc, #300]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	049b      	lsls	r3, r3, #18
 8004824:	4013      	ands	r3, r2
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004828:	4b48      	ldr	r3, [pc, #288]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a4c      	ldr	r2, [pc, #304]	; (8004960 <HAL_RCC_OscConfig+0x618>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1a      	ldr	r2, [r3, #32]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	431a      	orrs	r2, r3
 8004850:	4b3e      	ldr	r3, [pc, #248]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004852:	430a      	orrs	r2, r1
 8004854:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004856:	4b3d      	ldr	r3, [pc, #244]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b3c      	ldr	r3, [pc, #240]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	0449      	lsls	r1, r1, #17
 8004860:	430a      	orrs	r2, r1
 8004862:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004864:	4b39      	ldr	r3, [pc, #228]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	4b38      	ldr	r3, [pc, #224]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	0549      	lsls	r1, r1, #21
 800486e:	430a      	orrs	r2, r1
 8004870:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7ff f9d5 	bl	8003c20 <HAL_GetTick>
 8004876:	0003      	movs	r3, r0
 8004878:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487c:	f7ff f9d0 	bl	8003c20 <HAL_GetTick>
 8004880:	0002      	movs	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e059      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488e:	4b2f      	ldr	r3, [pc, #188]	; (800494c <HAL_RCC_OscConfig+0x604>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	049b      	lsls	r3, r3, #18
 8004896:	4013      	ands	r3, r2
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x534>
 800489a:	e051      	b.n	8004940 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489c:	4b2b      	ldr	r3, [pc, #172]	; (800494c <HAL_RCC_OscConfig+0x604>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b2a      	ldr	r3, [pc, #168]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80048a2:	492e      	ldr	r1, [pc, #184]	; (800495c <HAL_RCC_OscConfig+0x614>)
 80048a4:	400a      	ands	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7ff f9ba 	bl	8003c20 <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b2:	f7ff f9b5 	bl	8003c20 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e03e      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	049b      	lsls	r3, r3, #18
 80048cc:	4013      	ands	r3, r2
 80048ce:	d1f0      	bne.n	80048b2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80048d0:	4b1e      	ldr	r3, [pc, #120]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	4b1d      	ldr	r3, [pc, #116]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80048d6:	4923      	ldr	r1, [pc, #140]	; (8004964 <HAL_RCC_OscConfig+0x61c>)
 80048d8:	400a      	ands	r2, r1
 80048da:	60da      	str	r2, [r3, #12]
 80048dc:	e030      	b.n	8004940 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e02b      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80048ea:	4b18      	ldr	r3, [pc, #96]	; (800494c <HAL_RCC_OscConfig+0x604>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2203      	movs	r2, #3
 80048f4:	401a      	ands	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d11e      	bne.n	800493c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2270      	movs	r2, #112	; 0x70
 8004902:	401a      	ands	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d117      	bne.n	800493c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	23fe      	movs	r3, #254	; 0xfe
 8004910:	01db      	lsls	r3, r3, #7
 8004912:	401a      	ands	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800491a:	429a      	cmp	r2, r3
 800491c:	d10e      	bne.n	800493c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	23f8      	movs	r3, #248	; 0xf8
 8004922:	039b      	lsls	r3, r3, #14
 8004924:	401a      	ands	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	0f5b      	lsrs	r3, r3, #29
 8004932:	075a      	lsls	r2, r3, #29
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b008      	add	sp, #32
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	40021000 	.word	0x40021000
 8004950:	40007000 	.word	0x40007000
 8004954:	00001388 	.word	0x00001388
 8004958:	efffffff 	.word	0xefffffff
 800495c:	feffffff 	.word	0xfeffffff
 8004960:	1fc1808c 	.word	0x1fc1808c
 8004964:	effefffc 	.word	0xeffefffc

08004968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0e9      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800497c:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCC_ClockConfig+0x1f0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2207      	movs	r2, #7
 8004982:	4013      	ands	r3, r2
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d91e      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b73      	ldr	r3, [pc, #460]	; (8004b58 <HAL_RCC_ClockConfig+0x1f0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2207      	movs	r2, #7
 8004990:	4393      	bics	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	4b70      	ldr	r3, [pc, #448]	; (8004b58 <HAL_RCC_ClockConfig+0x1f0>)
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800499c:	f7ff f940 	bl	8003c20 <HAL_GetTick>
 80049a0:	0003      	movs	r3, r0
 80049a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049a4:	e009      	b.n	80049ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a6:	f7ff f93b 	bl	8003c20 <HAL_GetTick>
 80049aa:	0002      	movs	r2, r0
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	4a6a      	ldr	r2, [pc, #424]	; (8004b5c <HAL_RCC_ClockConfig+0x1f4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0ca      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049ba:	4b67      	ldr	r3, [pc, #412]	; (8004b58 <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2207      	movs	r2, #7
 80049c0:	4013      	ands	r3, r2
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1ee      	bne.n	80049a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2202      	movs	r2, #2
 80049ce:	4013      	ands	r3, r2
 80049d0:	d015      	beq.n	80049fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2204      	movs	r2, #4
 80049d8:	4013      	ands	r3, r2
 80049da:	d006      	beq.n	80049ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049dc:	4b60      	ldr	r3, [pc, #384]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	4b5f      	ldr	r3, [pc, #380]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 80049e2:	21e0      	movs	r1, #224	; 0xe0
 80049e4:	01c9      	lsls	r1, r1, #7
 80049e6:	430a      	orrs	r2, r1
 80049e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ea:	4b5d      	ldr	r3, [pc, #372]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4a5d      	ldr	r2, [pc, #372]	; (8004b64 <HAL_RCC_ClockConfig+0x1fc>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	4b59      	ldr	r3, [pc, #356]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	4013      	ands	r3, r2
 8004a06:	d057      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a10:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	029b      	lsls	r3, r3, #10
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d12b      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e097      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a28:	4b4d      	ldr	r3, [pc, #308]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	049b      	lsls	r3, r3, #18
 8004a30:	4013      	ands	r3, r2
 8004a32:	d11f      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e08b      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a40:	4b47      	ldr	r3, [pc, #284]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d113      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e07f      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a58:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d108      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e074      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a66:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e06d      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a74:	4b3a      	ldr	r3, [pc, #232]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2207      	movs	r2, #7
 8004a7a:	4393      	bics	r3, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7ff f8ca 	bl	8003c20 <HAL_GetTick>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a90:	e009      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a92:	f7ff f8c5 	bl	8003c20 <HAL_GetTick>
 8004a96:	0002      	movs	r2, r0
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <HAL_RCC_ClockConfig+0x1f4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e054      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2238      	movs	r2, #56	; 0x38
 8004aac:	401a      	ands	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1ec      	bne.n	8004a92 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <HAL_RCC_ClockConfig+0x1f0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2207      	movs	r2, #7
 8004abe:	4013      	ands	r3, r2
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d21e      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2207      	movs	r2, #7
 8004acc:	4393      	bics	r3, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ad8:	f7ff f8a2 	bl	8003c20 <HAL_GetTick>
 8004adc:	0003      	movs	r3, r0
 8004ade:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ae0:	e009      	b.n	8004af6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae2:	f7ff f89d 	bl	8003c20 <HAL_GetTick>
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_RCC_ClockConfig+0x1f4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e02c      	b.n	8004b50 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <HAL_RCC_ClockConfig+0x1f0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2207      	movs	r2, #7
 8004afc:	4013      	ands	r3, r2
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d1ee      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0e:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <HAL_RCC_ClockConfig+0x200>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004b22:	f000 f829 	bl	8004b78 <HAL_RCC_GetSysClockFreq>
 8004b26:	0001      	movs	r1, r0
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <HAL_RCC_ClockConfig+0x1f8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	0a1b      	lsrs	r3, r3, #8
 8004b2e:	220f      	movs	r2, #15
 8004b30:	401a      	ands	r2, r3
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <HAL_RCC_ClockConfig+0x204>)
 8004b34:	0092      	lsls	r2, r2, #2
 8004b36:	58d3      	ldr	r3, [r2, r3]
 8004b38:	221f      	movs	r2, #31
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	000a      	movs	r2, r1
 8004b3e:	40da      	lsrs	r2, r3
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_ClockConfig+0x208>)
 8004b42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_ClockConfig+0x20c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff f80d 	bl	8003b68 <HAL_InitTick>
 8004b4e:	0003      	movs	r3, r0
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b004      	add	sp, #16
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40022000 	.word	0x40022000
 8004b5c:	00001388 	.word	0x00001388
 8004b60:	40021000 	.word	0x40021000
 8004b64:	fffff0ff 	.word	0xfffff0ff
 8004b68:	ffff8fff 	.word	0xffff8fff
 8004b6c:	08005fac 	.word	0x08005fac
 8004b70:	20000000 	.word	0x20000000
 8004b74:	20000004 	.word	0x20000004

08004b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b7e:	4b3c      	ldr	r3, [pc, #240]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2238      	movs	r2, #56	; 0x38
 8004b84:	4013      	ands	r3, r2
 8004b86:	d10f      	bne.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b88:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	0adb      	lsrs	r3, r3, #11
 8004b8e:	2207      	movs	r2, #7
 8004b90:	4013      	ands	r3, r2
 8004b92:	2201      	movs	r2, #1
 8004b94:	409a      	lsls	r2, r3
 8004b96:	0013      	movs	r3, r2
 8004b98:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	4835      	ldr	r0, [pc, #212]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b9e:	f7fb fab9 	bl	8000114 <__udivsi3>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	e05d      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba8:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2238      	movs	r2, #56	; 0x38
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d102      	bne.n	8004bba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bb4:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x100>)
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	e054      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2238      	movs	r2, #56	; 0x38
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d138      	bne.n	8004c38 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004bc6:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bd0:	4b27      	ldr	r3, [pc, #156]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	2207      	movs	r2, #7
 8004bd8:	4013      	ands	r3, r2
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4824      	ldr	r0, [pc, #144]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x100>)
 8004be8:	f7fb fa94 	bl	8000114 <__udivsi3>
 8004bec:	0003      	movs	r3, r0
 8004bee:	0019      	movs	r1, r3
 8004bf0:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	227f      	movs	r2, #127	; 0x7f
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	434b      	muls	r3, r1
 8004bfc:	617b      	str	r3, [r7, #20]
        break;
 8004bfe:	e00d      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	481c      	ldr	r0, [pc, #112]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c04:	f7fb fa86 	bl	8000114 <__udivsi3>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	227f      	movs	r2, #127	; 0x7f
 8004c14:	4013      	ands	r3, r2
 8004c16:	434b      	muls	r3, r1
 8004c18:	617b      	str	r3, [r7, #20]
        break;
 8004c1a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	0f5b      	lsrs	r3, r3, #29
 8004c22:	2207      	movs	r2, #7
 8004c24:	4013      	ands	r3, r2
 8004c26:	3301      	adds	r3, #1
 8004c28:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	6978      	ldr	r0, [r7, #20]
 8004c2e:	f7fb fa71 	bl	8000114 <__udivsi3>
 8004c32:	0003      	movs	r3, r0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e015      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c38:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2238      	movs	r2, #56	; 0x38
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d103      	bne.n	8004c4c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	e00b      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c4c:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2238      	movs	r2, #56	; 0x38
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b18      	cmp	r3, #24
 8004c56:	d103      	bne.n	8004c60 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c58:	23fa      	movs	r3, #250	; 0xfa
 8004c5a:	01db      	lsls	r3, r3, #7
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e001      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c64:	693b      	ldr	r3, [r7, #16]
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b006      	add	sp, #24
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	40021000 	.word	0x40021000
 8004c74:	00f42400 	.word	0x00f42400
 8004c78:	007a1200 	.word	0x007a1200

08004c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0a8      	b.n	8004de0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	2382      	movs	r3, #130	; 0x82
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d009      	beq.n	8004cb6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	61da      	str	r2, [r3, #28]
 8004ca8:	e005      	b.n	8004cb6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	225d      	movs	r2, #93	; 0x5d
 8004cc0:	5c9b      	ldrb	r3, [r3, r2]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	225c      	movs	r2, #92	; 0x5c
 8004ccc:	2100      	movs	r1, #0
 8004cce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7fe fc48 	bl	8003568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	225d      	movs	r2, #93	; 0x5d
 8004cdc:	2102      	movs	r1, #2
 8004cde:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2140      	movs	r1, #64	; 0x40
 8004cec:	438a      	bics	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	23e0      	movs	r3, #224	; 0xe0
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d902      	bls.n	8004d02 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e002      	b.n	8004d08 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	015b      	lsls	r3, r3, #5
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	23f0      	movs	r3, #240	; 0xf0
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d008      	beq.n	8004d26 <HAL_SPI_Init+0xaa>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	23e0      	movs	r3, #224	; 0xe0
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	2382      	movs	r3, #130	; 0x82
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	401a      	ands	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6899      	ldr	r1, [r3, #8]
 8004d34:	2384      	movs	r3, #132	; 0x84
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	400b      	ands	r3, r1
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2102      	movs	r1, #2
 8004d42:	400b      	ands	r3, r1
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6999      	ldr	r1, [r3, #24]
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	400b      	ands	r3, r1
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2138      	movs	r1, #56	; 0x38
 8004d62:	400b      	ands	r3, r1
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	2180      	movs	r1, #128	; 0x80
 8004d6c:	400b      	ands	r3, r1
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	0011      	movs	r1, r2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	019b      	lsls	r3, r3, #6
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	2110      	movs	r1, #16
 8004d94:	400b      	ands	r3, r1
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	2108      	movs	r1, #8
 8004d9e:	400b      	ands	r3, r1
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68d9      	ldr	r1, [r3, #12]
 8004da6:	23f0      	movs	r3, #240	; 0xf0
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	400b      	ands	r3, r1
 8004dac:	431a      	orrs	r2, r3
 8004dae:	0011      	movs	r1, r2
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	015b      	lsls	r3, r3, #5
 8004db6:	401a      	ands	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4907      	ldr	r1, [pc, #28]	; (8004de8 <HAL_SPI_Init+0x16c>)
 8004dcc:	400a      	ands	r2, r1
 8004dce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	225d      	movs	r2, #93	; 0x5d
 8004dda:	2101      	movs	r1, #1
 8004ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b004      	add	sp, #16
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	fffff7ff 	.word	0xfffff7ff

08004dec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	1dbb      	adds	r3, r7, #6
 8004dfa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dfc:	231f      	movs	r3, #31
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	225c      	movs	r2, #92	; 0x5c
 8004e08:	5c9b      	ldrb	r3, [r3, r2]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_Transmit+0x26>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e140      	b.n	8005094 <HAL_SPI_Transmit+0x2a8>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	225c      	movs	r2, #92	; 0x5c
 8004e16:	2101      	movs	r1, #1
 8004e18:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e1a:	f7fe ff01 	bl	8003c20 <HAL_GetTick>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e22:	2316      	movs	r3, #22
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	1dba      	adds	r2, r7, #6
 8004e28:	8812      	ldrh	r2, [r2, #0]
 8004e2a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	225d      	movs	r2, #93	; 0x5d
 8004e30:	5c9b      	ldrb	r3, [r3, r2]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d004      	beq.n	8004e42 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004e38:	231f      	movs	r3, #31
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e40:	e11d      	b.n	800507e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_SPI_Transmit+0x64>
 8004e48:	1dbb      	adds	r3, r7, #6
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004e50:	231f      	movs	r3, #31
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e58:	e111      	b.n	800507e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	225d      	movs	r2, #93	; 0x5d
 8004e5e:	2103      	movs	r1, #3
 8004e60:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1dba      	adds	r2, r7, #6
 8004e72:	8812      	ldrh	r2, [r2, #0]
 8004e74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1dba      	adds	r2, r7, #6
 8004e7a:	8812      	ldrh	r2, [r2, #0]
 8004e7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2244      	movs	r2, #68	; 0x44
 8004e88:	2100      	movs	r1, #0
 8004e8a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2246      	movs	r2, #70	; 0x46
 8004e90:	2100      	movs	r1, #0
 8004e92:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d110      	bne.n	8004ece <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2140      	movs	r1, #64	; 0x40
 8004eb8:	438a      	bics	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	01c9      	lsls	r1, r1, #7
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2240      	movs	r2, #64	; 0x40
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d007      	beq.n	8004eec <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2140      	movs	r1, #64	; 0x40
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	23e0      	movs	r3, #224	; 0xe0
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d94e      	bls.n	8004f96 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_SPI_Transmit+0x11e>
 8004f00:	2316      	movs	r3, #22
 8004f02:	18fb      	adds	r3, r7, r3
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d13f      	bne.n	8004f8a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	881a      	ldrh	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f2e:	e02c      	b.n	8004f8a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2202      	movs	r2, #2
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d112      	bne.n	8004f64 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f62:	e012      	b.n	8004f8a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f64:	f7fe fe5c 	bl	8003c20 <HAL_GetTick>
 8004f68:	0002      	movs	r2, r0
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d802      	bhi.n	8004f7a <HAL_SPI_Transmit+0x18e>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	d102      	bne.n	8004f80 <HAL_SPI_Transmit+0x194>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004f80:	231f      	movs	r3, #31
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2203      	movs	r2, #3
 8004f86:	701a      	strb	r2, [r3, #0]
          goto error;
 8004f88:	e079      	b.n	800507e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1cd      	bne.n	8004f30 <HAL_SPI_Transmit+0x144>
 8004f94:	e04f      	b.n	8005036 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_SPI_Transmit+0x1bc>
 8004f9e:	2316      	movs	r3, #22
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d141      	bne.n	800502c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004fce:	e02d      	b.n	800502c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d113      	bne.n	8005006 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	7812      	ldrb	r2, [r2, #0]
 8004fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005004:	e012      	b.n	800502c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005006:	f7fe fe0b 	bl	8003c20 <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d802      	bhi.n	800501c <HAL_SPI_Transmit+0x230>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	d102      	bne.n	8005022 <HAL_SPI_Transmit+0x236>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005022:	231f      	movs	r3, #31
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	2203      	movs	r2, #3
 8005028:	701a      	strb	r2, [r3, #0]
          goto error;
 800502a:	e028      	b.n	800507e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1cc      	bne.n	8004fd0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 f95d 	bl	80052fc <SPI_EndRxTxTransaction>
 8005042:	1e03      	subs	r3, r0, #0
 8005044:	d002      	beq.n	800504c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005072:	231f      	movs	r3, #31
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	e000      	b.n	800507e <HAL_SPI_Transmit+0x292>
  }

error:
 800507c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	225d      	movs	r2, #93	; 0x5d
 8005082:	2101      	movs	r1, #1
 8005084:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	225c      	movs	r2, #92	; 0x5c
 800508a:	2100      	movs	r1, #0
 800508c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800508e:	231f      	movs	r3, #31
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	781b      	ldrb	r3, [r3, #0]
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b008      	add	sp, #32
 800509a:	bd80      	pop	{r7, pc}

0800509c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	1dfb      	adds	r3, r7, #7
 80050aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050ac:	f7fe fdb8 	bl	8003c20 <HAL_GetTick>
 80050b0:	0002      	movs	r2, r0
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	18d3      	adds	r3, r2, r3
 80050ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050bc:	f7fe fdb0 	bl	8003c20 <HAL_GetTick>
 80050c0:	0003      	movs	r3, r0
 80050c2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050c4:	4b3a      	ldr	r3, [pc, #232]	; (80051b0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	015b      	lsls	r3, r3, #5
 80050ca:	0d1b      	lsrs	r3, r3, #20
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	4353      	muls	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050d2:	e058      	b.n	8005186 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	3301      	adds	r3, #1
 80050d8:	d055      	beq.n	8005186 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050da:	f7fe fda1 	bl	8003c20 <HAL_GetTick>
 80050de:	0002      	movs	r2, r0
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d902      	bls.n	80050f0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d142      	bne.n	8005176 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	21e0      	movs	r1, #224	; 0xe0
 80050fc:	438a      	bics	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	2382      	movs	r3, #130	; 0x82
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	429a      	cmp	r2, r3
 800510a:	d113      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x98>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	429a      	cmp	r2, r3
 8005116:	d005      	beq.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	429a      	cmp	r2, r3
 8005122:	d107      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2140      	movs	r1, #64	; 0x40
 8005130:	438a      	bics	r2, r1
 8005132:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	019b      	lsls	r3, r3, #6
 800513c:	429a      	cmp	r2, r3
 800513e:	d110      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	491a      	ldr	r1, [pc, #104]	; (80051b4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800514c:	400a      	ands	r2, r1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	0189      	lsls	r1, r1, #6
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	225d      	movs	r2, #93	; 0x5d
 8005166:	2101      	movs	r1, #1
 8005168:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	225c      	movs	r2, #92	; 0x5c
 800516e:	2100      	movs	r1, #0
 8005170:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e017      	b.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3b01      	subs	r3, #1
 8005184:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	425a      	negs	r2, r3
 8005196:	4153      	adcs	r3, r2
 8005198:	b2db      	uxtb	r3, r3
 800519a:	001a      	movs	r2, r3
 800519c:	1dfb      	adds	r3, r7, #7
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d197      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b008      	add	sp, #32
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	20000000 	.word	0x20000000
 80051b4:	ffffdfff 	.word	0xffffdfff

080051b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051c6:	2317      	movs	r3, #23
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	2200      	movs	r2, #0
 80051cc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051ce:	f7fe fd27 	bl	8003c20 <HAL_GetTick>
 80051d2:	0002      	movs	r2, r0
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	18d3      	adds	r3, r2, r3
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80051de:	f7fe fd1f 	bl	8003c20 <HAL_GetTick>
 80051e2:	0003      	movs	r3, r0
 80051e4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	0013      	movs	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	00da      	lsls	r2, r3, #3
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	0d1b      	lsrs	r3, r3, #20
 80051fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005200:	4353      	muls	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005204:	e068      	b.n	80052d8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	23c0      	movs	r3, #192	; 0xc0
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	429a      	cmp	r2, r3
 800520e:	d10a      	bne.n	8005226 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d107      	bne.n	8005226 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	2117      	movs	r1, #23
 800521e:	187b      	adds	r3, r7, r1
 8005220:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005222:	187b      	adds	r3, r7, r1
 8005224:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	3301      	adds	r3, #1
 800522a:	d055      	beq.n	80052d8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800522c:	f7fe fcf8 	bl	8003c20 <HAL_GetTick>
 8005230:	0002      	movs	r2, r0
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	429a      	cmp	r2, r3
 800523a:	d902      	bls.n	8005242 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d142      	bne.n	80052c8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	21e0      	movs	r1, #224	; 0xe0
 800524e:	438a      	bics	r2, r1
 8005250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	2382      	movs	r3, #130	; 0x82
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	429a      	cmp	r2, r3
 800525c:	d113      	bne.n	8005286 <SPI_WaitFifoStateUntilTimeout+0xce>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	429a      	cmp	r2, r3
 8005268:	d005      	beq.n	8005276 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	429a      	cmp	r2, r3
 8005274:	d107      	bne.n	8005286 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2140      	movs	r1, #64	; 0x40
 8005282:	438a      	bics	r2, r1
 8005284:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	429a      	cmp	r2, r3
 8005290:	d110      	bne.n	80052b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4916      	ldr	r1, [pc, #88]	; (80052f8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800529e:	400a      	ands	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	0189      	lsls	r1, r1, #6
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	225d      	movs	r2, #93	; 0x5d
 80052b8:	2101      	movs	r1, #1
 80052ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	225c      	movs	r2, #92	; 0x5c
 80052c0:	2100      	movs	r1, #0
 80052c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e010      	b.n	80052ea <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d18e      	bne.n	8005206 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b00a      	add	sp, #40	; 0x28
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	20000000 	.word	0x20000000
 80052f8:	ffffdfff 	.word	0xffffdfff

080052fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	23c0      	movs	r3, #192	; 0xc0
 800530c:	0159      	lsls	r1, r3, #5
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	0013      	movs	r3, r2
 8005316:	2200      	movs	r2, #0
 8005318:	f7ff ff4e 	bl	80051b8 <SPI_WaitFifoStateUntilTimeout>
 800531c:	1e03      	subs	r3, r0, #0
 800531e:	d007      	beq.n	8005330 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005324:	2220      	movs	r2, #32
 8005326:	431a      	orrs	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e027      	b.n	8005380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	0013      	movs	r3, r2
 800533a:	2200      	movs	r2, #0
 800533c:	2180      	movs	r1, #128	; 0x80
 800533e:	f7ff fead 	bl	800509c <SPI_WaitFlagStateUntilTimeout>
 8005342:	1e03      	subs	r3, r0, #0
 8005344:	d007      	beq.n	8005356 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534a:	2220      	movs	r2, #32
 800534c:	431a      	orrs	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e014      	b.n	8005380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	23c0      	movs	r3, #192	; 0xc0
 800535a:	00d9      	lsls	r1, r3, #3
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	0013      	movs	r3, r2
 8005364:	2200      	movs	r2, #0
 8005366:	f7ff ff27 	bl	80051b8 <SPI_WaitFifoStateUntilTimeout>
 800536a:	1e03      	subs	r3, r0, #0
 800536c:	d007      	beq.n	800537e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005372:	2220      	movs	r2, #32
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e000      	b.n	8005380 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b004      	add	sp, #16
 8005386:	bd80      	pop	{r7, pc}

08005388 <__errno>:
 8005388:	4b01      	ldr	r3, [pc, #4]	; (8005390 <__errno+0x8>)
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	4770      	bx	lr
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	2000000c 	.word	0x2000000c

08005394 <__libc_init_array>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	2600      	movs	r6, #0
 8005398:	4d0c      	ldr	r5, [pc, #48]	; (80053cc <__libc_init_array+0x38>)
 800539a:	4c0d      	ldr	r4, [pc, #52]	; (80053d0 <__libc_init_array+0x3c>)
 800539c:	1b64      	subs	r4, r4, r5
 800539e:	10a4      	asrs	r4, r4, #2
 80053a0:	42a6      	cmp	r6, r4
 80053a2:	d109      	bne.n	80053b8 <__libc_init_array+0x24>
 80053a4:	2600      	movs	r6, #0
 80053a6:	f000 fc9d 	bl	8005ce4 <_init>
 80053aa:	4d0a      	ldr	r5, [pc, #40]	; (80053d4 <__libc_init_array+0x40>)
 80053ac:	4c0a      	ldr	r4, [pc, #40]	; (80053d8 <__libc_init_array+0x44>)
 80053ae:	1b64      	subs	r4, r4, r5
 80053b0:	10a4      	asrs	r4, r4, #2
 80053b2:	42a6      	cmp	r6, r4
 80053b4:	d105      	bne.n	80053c2 <__libc_init_array+0x2e>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	00b3      	lsls	r3, r6, #2
 80053ba:	58eb      	ldr	r3, [r5, r3]
 80053bc:	4798      	blx	r3
 80053be:	3601      	adds	r6, #1
 80053c0:	e7ee      	b.n	80053a0 <__libc_init_array+0xc>
 80053c2:	00b3      	lsls	r3, r6, #2
 80053c4:	58eb      	ldr	r3, [r5, r3]
 80053c6:	4798      	blx	r3
 80053c8:	3601      	adds	r6, #1
 80053ca:	e7f2      	b.n	80053b2 <__libc_init_array+0x1e>
 80053cc:	08006020 	.word	0x08006020
 80053d0:	08006020 	.word	0x08006020
 80053d4:	08006020 	.word	0x08006020
 80053d8:	08006024 	.word	0x08006024

080053dc <memset>:
 80053dc:	0003      	movs	r3, r0
 80053de:	1882      	adds	r2, r0, r2
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d100      	bne.n	80053e6 <memset+0xa>
 80053e4:	4770      	bx	lr
 80053e6:	7019      	strb	r1, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	e7f9      	b.n	80053e0 <memset+0x4>

080053ec <siprintf>:
 80053ec:	b40e      	push	{r1, r2, r3}
 80053ee:	b500      	push	{lr}
 80053f0:	490b      	ldr	r1, [pc, #44]	; (8005420 <siprintf+0x34>)
 80053f2:	b09c      	sub	sp, #112	; 0x70
 80053f4:	ab1d      	add	r3, sp, #116	; 0x74
 80053f6:	9002      	str	r0, [sp, #8]
 80053f8:	9006      	str	r0, [sp, #24]
 80053fa:	9107      	str	r1, [sp, #28]
 80053fc:	9104      	str	r1, [sp, #16]
 80053fe:	4809      	ldr	r0, [pc, #36]	; (8005424 <siprintf+0x38>)
 8005400:	4909      	ldr	r1, [pc, #36]	; (8005428 <siprintf+0x3c>)
 8005402:	cb04      	ldmia	r3!, {r2}
 8005404:	9105      	str	r1, [sp, #20]
 8005406:	6800      	ldr	r0, [r0, #0]
 8005408:	a902      	add	r1, sp, #8
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	f000 f882 	bl	8005514 <_svfiprintf_r>
 8005410:	2300      	movs	r3, #0
 8005412:	9a02      	ldr	r2, [sp, #8]
 8005414:	7013      	strb	r3, [r2, #0]
 8005416:	b01c      	add	sp, #112	; 0x70
 8005418:	bc08      	pop	{r3}
 800541a:	b003      	add	sp, #12
 800541c:	4718      	bx	r3
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	7fffffff 	.word	0x7fffffff
 8005424:	2000000c 	.word	0x2000000c
 8005428:	ffff0208 	.word	0xffff0208

0800542c <strncmp>:
 800542c:	b530      	push	{r4, r5, lr}
 800542e:	0005      	movs	r5, r0
 8005430:	1e10      	subs	r0, r2, #0
 8005432:	d008      	beq.n	8005446 <strncmp+0x1a>
 8005434:	2400      	movs	r4, #0
 8005436:	3a01      	subs	r2, #1
 8005438:	5d2b      	ldrb	r3, [r5, r4]
 800543a:	5d08      	ldrb	r0, [r1, r4]
 800543c:	4283      	cmp	r3, r0
 800543e:	d101      	bne.n	8005444 <strncmp+0x18>
 8005440:	4294      	cmp	r4, r2
 8005442:	d101      	bne.n	8005448 <strncmp+0x1c>
 8005444:	1a18      	subs	r0, r3, r0
 8005446:	bd30      	pop	{r4, r5, pc}
 8005448:	3401      	adds	r4, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f4      	bne.n	8005438 <strncmp+0xc>
 800544e:	e7f9      	b.n	8005444 <strncmp+0x18>

08005450 <__ssputs_r>:
 8005450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005452:	688e      	ldr	r6, [r1, #8]
 8005454:	b085      	sub	sp, #20
 8005456:	0007      	movs	r7, r0
 8005458:	000c      	movs	r4, r1
 800545a:	9203      	str	r2, [sp, #12]
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	429e      	cmp	r6, r3
 8005460:	d83c      	bhi.n	80054dc <__ssputs_r+0x8c>
 8005462:	2390      	movs	r3, #144	; 0x90
 8005464:	898a      	ldrh	r2, [r1, #12]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	421a      	tst	r2, r3
 800546a:	d034      	beq.n	80054d6 <__ssputs_r+0x86>
 800546c:	6909      	ldr	r1, [r1, #16]
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	6960      	ldr	r0, [r4, #20]
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	9302      	str	r3, [sp, #8]
 8005476:	2303      	movs	r3, #3
 8005478:	4343      	muls	r3, r0
 800547a:	0fdd      	lsrs	r5, r3, #31
 800547c:	18ed      	adds	r5, r5, r3
 800547e:	9b01      	ldr	r3, [sp, #4]
 8005480:	9802      	ldr	r0, [sp, #8]
 8005482:	3301      	adds	r3, #1
 8005484:	181b      	adds	r3, r3, r0
 8005486:	106d      	asrs	r5, r5, #1
 8005488:	42ab      	cmp	r3, r5
 800548a:	d900      	bls.n	800548e <__ssputs_r+0x3e>
 800548c:	001d      	movs	r5, r3
 800548e:	0553      	lsls	r3, r2, #21
 8005490:	d532      	bpl.n	80054f8 <__ssputs_r+0xa8>
 8005492:	0029      	movs	r1, r5
 8005494:	0038      	movs	r0, r7
 8005496:	f000 fb53 	bl	8005b40 <_malloc_r>
 800549a:	1e06      	subs	r6, r0, #0
 800549c:	d109      	bne.n	80054b2 <__ssputs_r+0x62>
 800549e:	230c      	movs	r3, #12
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	2340      	movs	r3, #64	; 0x40
 80054a4:	2001      	movs	r0, #1
 80054a6:	89a2      	ldrh	r2, [r4, #12]
 80054a8:	4240      	negs	r0, r0
 80054aa:	4313      	orrs	r3, r2
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	b005      	add	sp, #20
 80054b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b2:	9a02      	ldr	r2, [sp, #8]
 80054b4:	6921      	ldr	r1, [r4, #16]
 80054b6:	f000 faba 	bl	8005a2e <memcpy>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	4a14      	ldr	r2, [pc, #80]	; (8005510 <__ssputs_r+0xc0>)
 80054be:	401a      	ands	r2, r3
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	4313      	orrs	r3, r2
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	9b02      	ldr	r3, [sp, #8]
 80054c8:	6126      	str	r6, [r4, #16]
 80054ca:	18f6      	adds	r6, r6, r3
 80054cc:	6026      	str	r6, [r4, #0]
 80054ce:	6165      	str	r5, [r4, #20]
 80054d0:	9e01      	ldr	r6, [sp, #4]
 80054d2:	1aed      	subs	r5, r5, r3
 80054d4:	60a5      	str	r5, [r4, #8]
 80054d6:	9b01      	ldr	r3, [sp, #4]
 80054d8:	429e      	cmp	r6, r3
 80054da:	d900      	bls.n	80054de <__ssputs_r+0x8e>
 80054dc:	9e01      	ldr	r6, [sp, #4]
 80054de:	0032      	movs	r2, r6
 80054e0:	9903      	ldr	r1, [sp, #12]
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	f000 faac 	bl	8005a40 <memmove>
 80054e8:	68a3      	ldr	r3, [r4, #8]
 80054ea:	2000      	movs	r0, #0
 80054ec:	1b9b      	subs	r3, r3, r6
 80054ee:	60a3      	str	r3, [r4, #8]
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	199e      	adds	r6, r3, r6
 80054f4:	6026      	str	r6, [r4, #0]
 80054f6:	e7da      	b.n	80054ae <__ssputs_r+0x5e>
 80054f8:	002a      	movs	r2, r5
 80054fa:	0038      	movs	r0, r7
 80054fc:	f000 fb96 	bl	8005c2c <_realloc_r>
 8005500:	1e06      	subs	r6, r0, #0
 8005502:	d1e0      	bne.n	80054c6 <__ssputs_r+0x76>
 8005504:	0038      	movs	r0, r7
 8005506:	6921      	ldr	r1, [r4, #16]
 8005508:	f000 faae 	bl	8005a68 <_free_r>
 800550c:	e7c7      	b.n	800549e <__ssputs_r+0x4e>
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	fffffb7f 	.word	0xfffffb7f

08005514 <_svfiprintf_r>:
 8005514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005516:	b0a1      	sub	sp, #132	; 0x84
 8005518:	9003      	str	r0, [sp, #12]
 800551a:	001d      	movs	r5, r3
 800551c:	898b      	ldrh	r3, [r1, #12]
 800551e:	000f      	movs	r7, r1
 8005520:	0016      	movs	r6, r2
 8005522:	061b      	lsls	r3, r3, #24
 8005524:	d511      	bpl.n	800554a <_svfiprintf_r+0x36>
 8005526:	690b      	ldr	r3, [r1, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10e      	bne.n	800554a <_svfiprintf_r+0x36>
 800552c:	2140      	movs	r1, #64	; 0x40
 800552e:	f000 fb07 	bl	8005b40 <_malloc_r>
 8005532:	6038      	str	r0, [r7, #0]
 8005534:	6138      	str	r0, [r7, #16]
 8005536:	2800      	cmp	r0, #0
 8005538:	d105      	bne.n	8005546 <_svfiprintf_r+0x32>
 800553a:	230c      	movs	r3, #12
 800553c:	9a03      	ldr	r2, [sp, #12]
 800553e:	3801      	subs	r0, #1
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	b021      	add	sp, #132	; 0x84
 8005544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	2300      	movs	r3, #0
 800554c:	ac08      	add	r4, sp, #32
 800554e:	6163      	str	r3, [r4, #20]
 8005550:	3320      	adds	r3, #32
 8005552:	7663      	strb	r3, [r4, #25]
 8005554:	3310      	adds	r3, #16
 8005556:	76a3      	strb	r3, [r4, #26]
 8005558:	9507      	str	r5, [sp, #28]
 800555a:	0035      	movs	r5, r6
 800555c:	782b      	ldrb	r3, [r5, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <_svfiprintf_r+0x52>
 8005562:	2b25      	cmp	r3, #37	; 0x25
 8005564:	d147      	bne.n	80055f6 <_svfiprintf_r+0xe2>
 8005566:	1bab      	subs	r3, r5, r6
 8005568:	9305      	str	r3, [sp, #20]
 800556a:	42b5      	cmp	r5, r6
 800556c:	d00c      	beq.n	8005588 <_svfiprintf_r+0x74>
 800556e:	0032      	movs	r2, r6
 8005570:	0039      	movs	r1, r7
 8005572:	9803      	ldr	r0, [sp, #12]
 8005574:	f7ff ff6c 	bl	8005450 <__ssputs_r>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d100      	bne.n	800557e <_svfiprintf_r+0x6a>
 800557c:	e0ae      	b.n	80056dc <_svfiprintf_r+0x1c8>
 800557e:	6962      	ldr	r2, [r4, #20]
 8005580:	9b05      	ldr	r3, [sp, #20]
 8005582:	4694      	mov	ip, r2
 8005584:	4463      	add	r3, ip
 8005586:	6163      	str	r3, [r4, #20]
 8005588:	782b      	ldrb	r3, [r5, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d100      	bne.n	8005590 <_svfiprintf_r+0x7c>
 800558e:	e0a5      	b.n	80056dc <_svfiprintf_r+0x1c8>
 8005590:	2201      	movs	r2, #1
 8005592:	2300      	movs	r3, #0
 8005594:	4252      	negs	r2, r2
 8005596:	6062      	str	r2, [r4, #4]
 8005598:	a904      	add	r1, sp, #16
 800559a:	3254      	adds	r2, #84	; 0x54
 800559c:	1852      	adds	r2, r2, r1
 800559e:	1c6e      	adds	r6, r5, #1
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	60e3      	str	r3, [r4, #12]
 80055a4:	60a3      	str	r3, [r4, #8]
 80055a6:	7013      	strb	r3, [r2, #0]
 80055a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80055aa:	2205      	movs	r2, #5
 80055ac:	7831      	ldrb	r1, [r6, #0]
 80055ae:	4854      	ldr	r0, [pc, #336]	; (8005700 <_svfiprintf_r+0x1ec>)
 80055b0:	f000 fa32 	bl	8005a18 <memchr>
 80055b4:	1c75      	adds	r5, r6, #1
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d11f      	bne.n	80055fa <_svfiprintf_r+0xe6>
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	06d3      	lsls	r3, r2, #27
 80055be:	d504      	bpl.n	80055ca <_svfiprintf_r+0xb6>
 80055c0:	2353      	movs	r3, #83	; 0x53
 80055c2:	a904      	add	r1, sp, #16
 80055c4:	185b      	adds	r3, r3, r1
 80055c6:	2120      	movs	r1, #32
 80055c8:	7019      	strb	r1, [r3, #0]
 80055ca:	0713      	lsls	r3, r2, #28
 80055cc:	d504      	bpl.n	80055d8 <_svfiprintf_r+0xc4>
 80055ce:	2353      	movs	r3, #83	; 0x53
 80055d0:	a904      	add	r1, sp, #16
 80055d2:	185b      	adds	r3, r3, r1
 80055d4:	212b      	movs	r1, #43	; 0x2b
 80055d6:	7019      	strb	r1, [r3, #0]
 80055d8:	7833      	ldrb	r3, [r6, #0]
 80055da:	2b2a      	cmp	r3, #42	; 0x2a
 80055dc:	d016      	beq.n	800560c <_svfiprintf_r+0xf8>
 80055de:	0035      	movs	r5, r6
 80055e0:	2100      	movs	r1, #0
 80055e2:	200a      	movs	r0, #10
 80055e4:	68e3      	ldr	r3, [r4, #12]
 80055e6:	782a      	ldrb	r2, [r5, #0]
 80055e8:	1c6e      	adds	r6, r5, #1
 80055ea:	3a30      	subs	r2, #48	; 0x30
 80055ec:	2a09      	cmp	r2, #9
 80055ee:	d94e      	bls.n	800568e <_svfiprintf_r+0x17a>
 80055f0:	2900      	cmp	r1, #0
 80055f2:	d111      	bne.n	8005618 <_svfiprintf_r+0x104>
 80055f4:	e017      	b.n	8005626 <_svfiprintf_r+0x112>
 80055f6:	3501      	adds	r5, #1
 80055f8:	e7b0      	b.n	800555c <_svfiprintf_r+0x48>
 80055fa:	4b41      	ldr	r3, [pc, #260]	; (8005700 <_svfiprintf_r+0x1ec>)
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	1ac0      	subs	r0, r0, r3
 8005600:	2301      	movs	r3, #1
 8005602:	4083      	lsls	r3, r0
 8005604:	4313      	orrs	r3, r2
 8005606:	002e      	movs	r6, r5
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	e7ce      	b.n	80055aa <_svfiprintf_r+0x96>
 800560c:	9b07      	ldr	r3, [sp, #28]
 800560e:	1d19      	adds	r1, r3, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	9107      	str	r1, [sp, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	db01      	blt.n	800561c <_svfiprintf_r+0x108>
 8005618:	930b      	str	r3, [sp, #44]	; 0x2c
 800561a:	e004      	b.n	8005626 <_svfiprintf_r+0x112>
 800561c:	425b      	negs	r3, r3
 800561e:	60e3      	str	r3, [r4, #12]
 8005620:	2302      	movs	r3, #2
 8005622:	4313      	orrs	r3, r2
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	782b      	ldrb	r3, [r5, #0]
 8005628:	2b2e      	cmp	r3, #46	; 0x2e
 800562a:	d10a      	bne.n	8005642 <_svfiprintf_r+0x12e>
 800562c:	786b      	ldrb	r3, [r5, #1]
 800562e:	2b2a      	cmp	r3, #42	; 0x2a
 8005630:	d135      	bne.n	800569e <_svfiprintf_r+0x18a>
 8005632:	9b07      	ldr	r3, [sp, #28]
 8005634:	3502      	adds	r5, #2
 8005636:	1d1a      	adds	r2, r3, #4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	9207      	str	r2, [sp, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	db2b      	blt.n	8005698 <_svfiprintf_r+0x184>
 8005640:	9309      	str	r3, [sp, #36]	; 0x24
 8005642:	4e30      	ldr	r6, [pc, #192]	; (8005704 <_svfiprintf_r+0x1f0>)
 8005644:	2203      	movs	r2, #3
 8005646:	0030      	movs	r0, r6
 8005648:	7829      	ldrb	r1, [r5, #0]
 800564a:	f000 f9e5 	bl	8005a18 <memchr>
 800564e:	2800      	cmp	r0, #0
 8005650:	d006      	beq.n	8005660 <_svfiprintf_r+0x14c>
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	1b80      	subs	r0, r0, r6
 8005656:	4083      	lsls	r3, r0
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	3501      	adds	r5, #1
 800565c:	4313      	orrs	r3, r2
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	7829      	ldrb	r1, [r5, #0]
 8005662:	2206      	movs	r2, #6
 8005664:	4828      	ldr	r0, [pc, #160]	; (8005708 <_svfiprintf_r+0x1f4>)
 8005666:	1c6e      	adds	r6, r5, #1
 8005668:	7621      	strb	r1, [r4, #24]
 800566a:	f000 f9d5 	bl	8005a18 <memchr>
 800566e:	2800      	cmp	r0, #0
 8005670:	d03c      	beq.n	80056ec <_svfiprintf_r+0x1d8>
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <_svfiprintf_r+0x1f8>)
 8005674:	2b00      	cmp	r3, #0
 8005676:	d125      	bne.n	80056c4 <_svfiprintf_r+0x1b0>
 8005678:	2207      	movs	r2, #7
 800567a:	9b07      	ldr	r3, [sp, #28]
 800567c:	3307      	adds	r3, #7
 800567e:	4393      	bics	r3, r2
 8005680:	3308      	adds	r3, #8
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	6963      	ldr	r3, [r4, #20]
 8005686:	9a04      	ldr	r2, [sp, #16]
 8005688:	189b      	adds	r3, r3, r2
 800568a:	6163      	str	r3, [r4, #20]
 800568c:	e765      	b.n	800555a <_svfiprintf_r+0x46>
 800568e:	4343      	muls	r3, r0
 8005690:	0035      	movs	r5, r6
 8005692:	2101      	movs	r1, #1
 8005694:	189b      	adds	r3, r3, r2
 8005696:	e7a6      	b.n	80055e6 <_svfiprintf_r+0xd2>
 8005698:	2301      	movs	r3, #1
 800569a:	425b      	negs	r3, r3
 800569c:	e7d0      	b.n	8005640 <_svfiprintf_r+0x12c>
 800569e:	2300      	movs	r3, #0
 80056a0:	200a      	movs	r0, #10
 80056a2:	001a      	movs	r2, r3
 80056a4:	3501      	adds	r5, #1
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	7829      	ldrb	r1, [r5, #0]
 80056aa:	1c6e      	adds	r6, r5, #1
 80056ac:	3930      	subs	r1, #48	; 0x30
 80056ae:	2909      	cmp	r1, #9
 80056b0:	d903      	bls.n	80056ba <_svfiprintf_r+0x1a6>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0c5      	beq.n	8005642 <_svfiprintf_r+0x12e>
 80056b6:	9209      	str	r2, [sp, #36]	; 0x24
 80056b8:	e7c3      	b.n	8005642 <_svfiprintf_r+0x12e>
 80056ba:	4342      	muls	r2, r0
 80056bc:	0035      	movs	r5, r6
 80056be:	2301      	movs	r3, #1
 80056c0:	1852      	adds	r2, r2, r1
 80056c2:	e7f1      	b.n	80056a8 <_svfiprintf_r+0x194>
 80056c4:	ab07      	add	r3, sp, #28
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	003a      	movs	r2, r7
 80056ca:	0021      	movs	r1, r4
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <_svfiprintf_r+0x1fc>)
 80056ce:	9803      	ldr	r0, [sp, #12]
 80056d0:	e000      	b.n	80056d4 <_svfiprintf_r+0x1c0>
 80056d2:	bf00      	nop
 80056d4:	9004      	str	r0, [sp, #16]
 80056d6:	9b04      	ldr	r3, [sp, #16]
 80056d8:	3301      	adds	r3, #1
 80056da:	d1d3      	bne.n	8005684 <_svfiprintf_r+0x170>
 80056dc:	89bb      	ldrh	r3, [r7, #12]
 80056de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80056e0:	065b      	lsls	r3, r3, #25
 80056e2:	d400      	bmi.n	80056e6 <_svfiprintf_r+0x1d2>
 80056e4:	e72d      	b.n	8005542 <_svfiprintf_r+0x2e>
 80056e6:	2001      	movs	r0, #1
 80056e8:	4240      	negs	r0, r0
 80056ea:	e72a      	b.n	8005542 <_svfiprintf_r+0x2e>
 80056ec:	ab07      	add	r3, sp, #28
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	003a      	movs	r2, r7
 80056f2:	0021      	movs	r1, r4
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <_svfiprintf_r+0x1fc>)
 80056f6:	9803      	ldr	r0, [sp, #12]
 80056f8:	f000 f87c 	bl	80057f4 <_printf_i>
 80056fc:	e7ea      	b.n	80056d4 <_svfiprintf_r+0x1c0>
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	08005fec 	.word	0x08005fec
 8005704:	08005ff2 	.word	0x08005ff2
 8005708:	08005ff6 	.word	0x08005ff6
 800570c:	00000000 	.word	0x00000000
 8005710:	08005451 	.word	0x08005451

08005714 <_printf_common>:
 8005714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005716:	0015      	movs	r5, r2
 8005718:	9301      	str	r3, [sp, #4]
 800571a:	688a      	ldr	r2, [r1, #8]
 800571c:	690b      	ldr	r3, [r1, #16]
 800571e:	000c      	movs	r4, r1
 8005720:	9000      	str	r0, [sp, #0]
 8005722:	4293      	cmp	r3, r2
 8005724:	da00      	bge.n	8005728 <_printf_common+0x14>
 8005726:	0013      	movs	r3, r2
 8005728:	0022      	movs	r2, r4
 800572a:	602b      	str	r3, [r5, #0]
 800572c:	3243      	adds	r2, #67	; 0x43
 800572e:	7812      	ldrb	r2, [r2, #0]
 8005730:	2a00      	cmp	r2, #0
 8005732:	d001      	beq.n	8005738 <_printf_common+0x24>
 8005734:	3301      	adds	r3, #1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	069b      	lsls	r3, r3, #26
 800573c:	d502      	bpl.n	8005744 <_printf_common+0x30>
 800573e:	682b      	ldr	r3, [r5, #0]
 8005740:	3302      	adds	r3, #2
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	2306      	movs	r3, #6
 8005748:	0017      	movs	r7, r2
 800574a:	401f      	ands	r7, r3
 800574c:	421a      	tst	r2, r3
 800574e:	d027      	beq.n	80057a0 <_printf_common+0x8c>
 8005750:	0023      	movs	r3, r4
 8005752:	3343      	adds	r3, #67	; 0x43
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	4193      	sbcs	r3, r2
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	0692      	lsls	r2, r2, #26
 800575e:	d430      	bmi.n	80057c2 <_printf_common+0xae>
 8005760:	0022      	movs	r2, r4
 8005762:	9901      	ldr	r1, [sp, #4]
 8005764:	9800      	ldr	r0, [sp, #0]
 8005766:	9e08      	ldr	r6, [sp, #32]
 8005768:	3243      	adds	r2, #67	; 0x43
 800576a:	47b0      	blx	r6
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d025      	beq.n	80057bc <_printf_common+0xa8>
 8005770:	2306      	movs	r3, #6
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	682a      	ldr	r2, [r5, #0]
 8005776:	68e1      	ldr	r1, [r4, #12]
 8005778:	2500      	movs	r5, #0
 800577a:	4003      	ands	r3, r0
 800577c:	2b04      	cmp	r3, #4
 800577e:	d103      	bne.n	8005788 <_printf_common+0x74>
 8005780:	1a8d      	subs	r5, r1, r2
 8005782:	43eb      	mvns	r3, r5
 8005784:	17db      	asrs	r3, r3, #31
 8005786:	401d      	ands	r5, r3
 8005788:	68a3      	ldr	r3, [r4, #8]
 800578a:	6922      	ldr	r2, [r4, #16]
 800578c:	4293      	cmp	r3, r2
 800578e:	dd01      	ble.n	8005794 <_printf_common+0x80>
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	18ed      	adds	r5, r5, r3
 8005794:	2700      	movs	r7, #0
 8005796:	42bd      	cmp	r5, r7
 8005798:	d120      	bne.n	80057dc <_printf_common+0xc8>
 800579a:	2000      	movs	r0, #0
 800579c:	e010      	b.n	80057c0 <_printf_common+0xac>
 800579e:	3701      	adds	r7, #1
 80057a0:	68e3      	ldr	r3, [r4, #12]
 80057a2:	682a      	ldr	r2, [r5, #0]
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	42bb      	cmp	r3, r7
 80057a8:	ddd2      	ble.n	8005750 <_printf_common+0x3c>
 80057aa:	0022      	movs	r2, r4
 80057ac:	2301      	movs	r3, #1
 80057ae:	9901      	ldr	r1, [sp, #4]
 80057b0:	9800      	ldr	r0, [sp, #0]
 80057b2:	9e08      	ldr	r6, [sp, #32]
 80057b4:	3219      	adds	r2, #25
 80057b6:	47b0      	blx	r6
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d1f0      	bne.n	800579e <_printf_common+0x8a>
 80057bc:	2001      	movs	r0, #1
 80057be:	4240      	negs	r0, r0
 80057c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057c2:	2030      	movs	r0, #48	; 0x30
 80057c4:	18e1      	adds	r1, r4, r3
 80057c6:	3143      	adds	r1, #67	; 0x43
 80057c8:	7008      	strb	r0, [r1, #0]
 80057ca:	0021      	movs	r1, r4
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	3145      	adds	r1, #69	; 0x45
 80057d0:	7809      	ldrb	r1, [r1, #0]
 80057d2:	18a2      	adds	r2, r4, r2
 80057d4:	3243      	adds	r2, #67	; 0x43
 80057d6:	3302      	adds	r3, #2
 80057d8:	7011      	strb	r1, [r2, #0]
 80057da:	e7c1      	b.n	8005760 <_printf_common+0x4c>
 80057dc:	0022      	movs	r2, r4
 80057de:	2301      	movs	r3, #1
 80057e0:	9901      	ldr	r1, [sp, #4]
 80057e2:	9800      	ldr	r0, [sp, #0]
 80057e4:	9e08      	ldr	r6, [sp, #32]
 80057e6:	321a      	adds	r2, #26
 80057e8:	47b0      	blx	r6
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	d0e6      	beq.n	80057bc <_printf_common+0xa8>
 80057ee:	3701      	adds	r7, #1
 80057f0:	e7d1      	b.n	8005796 <_printf_common+0x82>
	...

080057f4 <_printf_i>:
 80057f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f6:	b08b      	sub	sp, #44	; 0x2c
 80057f8:	9206      	str	r2, [sp, #24]
 80057fa:	000a      	movs	r2, r1
 80057fc:	3243      	adds	r2, #67	; 0x43
 80057fe:	9307      	str	r3, [sp, #28]
 8005800:	9005      	str	r0, [sp, #20]
 8005802:	9204      	str	r2, [sp, #16]
 8005804:	7e0a      	ldrb	r2, [r1, #24]
 8005806:	000c      	movs	r4, r1
 8005808:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800580a:	2a78      	cmp	r2, #120	; 0x78
 800580c:	d807      	bhi.n	800581e <_printf_i+0x2a>
 800580e:	2a62      	cmp	r2, #98	; 0x62
 8005810:	d809      	bhi.n	8005826 <_printf_i+0x32>
 8005812:	2a00      	cmp	r2, #0
 8005814:	d100      	bne.n	8005818 <_printf_i+0x24>
 8005816:	e0c1      	b.n	800599c <_printf_i+0x1a8>
 8005818:	2a58      	cmp	r2, #88	; 0x58
 800581a:	d100      	bne.n	800581e <_printf_i+0x2a>
 800581c:	e08c      	b.n	8005938 <_printf_i+0x144>
 800581e:	0026      	movs	r6, r4
 8005820:	3642      	adds	r6, #66	; 0x42
 8005822:	7032      	strb	r2, [r6, #0]
 8005824:	e022      	b.n	800586c <_printf_i+0x78>
 8005826:	0010      	movs	r0, r2
 8005828:	3863      	subs	r0, #99	; 0x63
 800582a:	2815      	cmp	r0, #21
 800582c:	d8f7      	bhi.n	800581e <_printf_i+0x2a>
 800582e:	f7fa fc67 	bl	8000100 <__gnu_thumb1_case_shi>
 8005832:	0016      	.short	0x0016
 8005834:	fff6001f 	.word	0xfff6001f
 8005838:	fff6fff6 	.word	0xfff6fff6
 800583c:	001ffff6 	.word	0x001ffff6
 8005840:	fff6fff6 	.word	0xfff6fff6
 8005844:	fff6fff6 	.word	0xfff6fff6
 8005848:	003600a8 	.word	0x003600a8
 800584c:	fff6009a 	.word	0xfff6009a
 8005850:	00b9fff6 	.word	0x00b9fff6
 8005854:	0036fff6 	.word	0x0036fff6
 8005858:	fff6fff6 	.word	0xfff6fff6
 800585c:	009e      	.short	0x009e
 800585e:	0026      	movs	r6, r4
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	3642      	adds	r6, #66	; 0x42
 8005864:	1d11      	adds	r1, r2, #4
 8005866:	6019      	str	r1, [r3, #0]
 8005868:	6813      	ldr	r3, [r2, #0]
 800586a:	7033      	strb	r3, [r6, #0]
 800586c:	2301      	movs	r3, #1
 800586e:	e0a7      	b.n	80059c0 <_printf_i+0x1cc>
 8005870:	6808      	ldr	r0, [r1, #0]
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	1d0a      	adds	r2, r1, #4
 8005876:	0605      	lsls	r5, r0, #24
 8005878:	d50b      	bpl.n	8005892 <_printf_i+0x9e>
 800587a:	680d      	ldr	r5, [r1, #0]
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	2d00      	cmp	r5, #0
 8005880:	da03      	bge.n	800588a <_printf_i+0x96>
 8005882:	232d      	movs	r3, #45	; 0x2d
 8005884:	9a04      	ldr	r2, [sp, #16]
 8005886:	426d      	negs	r5, r5
 8005888:	7013      	strb	r3, [r2, #0]
 800588a:	4b61      	ldr	r3, [pc, #388]	; (8005a10 <_printf_i+0x21c>)
 800588c:	270a      	movs	r7, #10
 800588e:	9303      	str	r3, [sp, #12]
 8005890:	e01b      	b.n	80058ca <_printf_i+0xd6>
 8005892:	680d      	ldr	r5, [r1, #0]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	0641      	lsls	r1, r0, #25
 8005898:	d5f1      	bpl.n	800587e <_printf_i+0x8a>
 800589a:	b22d      	sxth	r5, r5
 800589c:	e7ef      	b.n	800587e <_printf_i+0x8a>
 800589e:	680d      	ldr	r5, [r1, #0]
 80058a0:	6819      	ldr	r1, [r3, #0]
 80058a2:	1d08      	adds	r0, r1, #4
 80058a4:	6018      	str	r0, [r3, #0]
 80058a6:	062e      	lsls	r6, r5, #24
 80058a8:	d501      	bpl.n	80058ae <_printf_i+0xba>
 80058aa:	680d      	ldr	r5, [r1, #0]
 80058ac:	e003      	b.n	80058b6 <_printf_i+0xc2>
 80058ae:	066d      	lsls	r5, r5, #25
 80058b0:	d5fb      	bpl.n	80058aa <_printf_i+0xb6>
 80058b2:	680d      	ldr	r5, [r1, #0]
 80058b4:	b2ad      	uxth	r5, r5
 80058b6:	4b56      	ldr	r3, [pc, #344]	; (8005a10 <_printf_i+0x21c>)
 80058b8:	2708      	movs	r7, #8
 80058ba:	9303      	str	r3, [sp, #12]
 80058bc:	2a6f      	cmp	r2, #111	; 0x6f
 80058be:	d000      	beq.n	80058c2 <_printf_i+0xce>
 80058c0:	3702      	adds	r7, #2
 80058c2:	0023      	movs	r3, r4
 80058c4:	2200      	movs	r2, #0
 80058c6:	3343      	adds	r3, #67	; 0x43
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	6863      	ldr	r3, [r4, #4]
 80058cc:	60a3      	str	r3, [r4, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	db03      	blt.n	80058da <_printf_i+0xe6>
 80058d2:	2204      	movs	r2, #4
 80058d4:	6821      	ldr	r1, [r4, #0]
 80058d6:	4391      	bics	r1, r2
 80058d8:	6021      	str	r1, [r4, #0]
 80058da:	2d00      	cmp	r5, #0
 80058dc:	d102      	bne.n	80058e4 <_printf_i+0xf0>
 80058de:	9e04      	ldr	r6, [sp, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00c      	beq.n	80058fe <_printf_i+0x10a>
 80058e4:	9e04      	ldr	r6, [sp, #16]
 80058e6:	0028      	movs	r0, r5
 80058e8:	0039      	movs	r1, r7
 80058ea:	f7fa fc99 	bl	8000220 <__aeabi_uidivmod>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	3e01      	subs	r6, #1
 80058f2:	5c5b      	ldrb	r3, [r3, r1]
 80058f4:	7033      	strb	r3, [r6, #0]
 80058f6:	002b      	movs	r3, r5
 80058f8:	0005      	movs	r5, r0
 80058fa:	429f      	cmp	r7, r3
 80058fc:	d9f3      	bls.n	80058e6 <_printf_i+0xf2>
 80058fe:	2f08      	cmp	r7, #8
 8005900:	d109      	bne.n	8005916 <_printf_i+0x122>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	07db      	lsls	r3, r3, #31
 8005906:	d506      	bpl.n	8005916 <_printf_i+0x122>
 8005908:	6863      	ldr	r3, [r4, #4]
 800590a:	6922      	ldr	r2, [r4, #16]
 800590c:	4293      	cmp	r3, r2
 800590e:	dc02      	bgt.n	8005916 <_printf_i+0x122>
 8005910:	2330      	movs	r3, #48	; 0x30
 8005912:	3e01      	subs	r6, #1
 8005914:	7033      	strb	r3, [r6, #0]
 8005916:	9b04      	ldr	r3, [sp, #16]
 8005918:	1b9b      	subs	r3, r3, r6
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	9b07      	ldr	r3, [sp, #28]
 800591e:	0021      	movs	r1, r4
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	9805      	ldr	r0, [sp, #20]
 8005924:	9b06      	ldr	r3, [sp, #24]
 8005926:	aa09      	add	r2, sp, #36	; 0x24
 8005928:	f7ff fef4 	bl	8005714 <_printf_common>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d14c      	bne.n	80059ca <_printf_i+0x1d6>
 8005930:	2001      	movs	r0, #1
 8005932:	4240      	negs	r0, r0
 8005934:	b00b      	add	sp, #44	; 0x2c
 8005936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005938:	3145      	adds	r1, #69	; 0x45
 800593a:	700a      	strb	r2, [r1, #0]
 800593c:	4a34      	ldr	r2, [pc, #208]	; (8005a10 <_printf_i+0x21c>)
 800593e:	9203      	str	r2, [sp, #12]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	6821      	ldr	r1, [r4, #0]
 8005944:	ca20      	ldmia	r2!, {r5}
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	0608      	lsls	r0, r1, #24
 800594a:	d516      	bpl.n	800597a <_printf_i+0x186>
 800594c:	07cb      	lsls	r3, r1, #31
 800594e:	d502      	bpl.n	8005956 <_printf_i+0x162>
 8005950:	2320      	movs	r3, #32
 8005952:	4319      	orrs	r1, r3
 8005954:	6021      	str	r1, [r4, #0]
 8005956:	2710      	movs	r7, #16
 8005958:	2d00      	cmp	r5, #0
 800595a:	d1b2      	bne.n	80058c2 <_printf_i+0xce>
 800595c:	2320      	movs	r3, #32
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	439a      	bics	r2, r3
 8005962:	6022      	str	r2, [r4, #0]
 8005964:	e7ad      	b.n	80058c2 <_printf_i+0xce>
 8005966:	2220      	movs	r2, #32
 8005968:	6809      	ldr	r1, [r1, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	6022      	str	r2, [r4, #0]
 800596e:	0022      	movs	r2, r4
 8005970:	2178      	movs	r1, #120	; 0x78
 8005972:	3245      	adds	r2, #69	; 0x45
 8005974:	7011      	strb	r1, [r2, #0]
 8005976:	4a27      	ldr	r2, [pc, #156]	; (8005a14 <_printf_i+0x220>)
 8005978:	e7e1      	b.n	800593e <_printf_i+0x14a>
 800597a:	0648      	lsls	r0, r1, #25
 800597c:	d5e6      	bpl.n	800594c <_printf_i+0x158>
 800597e:	b2ad      	uxth	r5, r5
 8005980:	e7e4      	b.n	800594c <_printf_i+0x158>
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	680d      	ldr	r5, [r1, #0]
 8005986:	1d10      	adds	r0, r2, #4
 8005988:	6949      	ldr	r1, [r1, #20]
 800598a:	6018      	str	r0, [r3, #0]
 800598c:	6813      	ldr	r3, [r2, #0]
 800598e:	062e      	lsls	r6, r5, #24
 8005990:	d501      	bpl.n	8005996 <_printf_i+0x1a2>
 8005992:	6019      	str	r1, [r3, #0]
 8005994:	e002      	b.n	800599c <_printf_i+0x1a8>
 8005996:	066d      	lsls	r5, r5, #25
 8005998:	d5fb      	bpl.n	8005992 <_printf_i+0x19e>
 800599a:	8019      	strh	r1, [r3, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	9e04      	ldr	r6, [sp, #16]
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	e7bb      	b.n	800591c <_printf_i+0x128>
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	1d11      	adds	r1, r2, #4
 80059a8:	6019      	str	r1, [r3, #0]
 80059aa:	6816      	ldr	r6, [r2, #0]
 80059ac:	2100      	movs	r1, #0
 80059ae:	0030      	movs	r0, r6
 80059b0:	6862      	ldr	r2, [r4, #4]
 80059b2:	f000 f831 	bl	8005a18 <memchr>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d001      	beq.n	80059be <_printf_i+0x1ca>
 80059ba:	1b80      	subs	r0, r0, r6
 80059bc:	6060      	str	r0, [r4, #4]
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	6123      	str	r3, [r4, #16]
 80059c2:	2300      	movs	r3, #0
 80059c4:	9a04      	ldr	r2, [sp, #16]
 80059c6:	7013      	strb	r3, [r2, #0]
 80059c8:	e7a8      	b.n	800591c <_printf_i+0x128>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	0032      	movs	r2, r6
 80059ce:	9906      	ldr	r1, [sp, #24]
 80059d0:	9805      	ldr	r0, [sp, #20]
 80059d2:	9d07      	ldr	r5, [sp, #28]
 80059d4:	47a8      	blx	r5
 80059d6:	1c43      	adds	r3, r0, #1
 80059d8:	d0aa      	beq.n	8005930 <_printf_i+0x13c>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	079b      	lsls	r3, r3, #30
 80059de:	d415      	bmi.n	8005a0c <_printf_i+0x218>
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	68e0      	ldr	r0, [r4, #12]
 80059e4:	4298      	cmp	r0, r3
 80059e6:	daa5      	bge.n	8005934 <_printf_i+0x140>
 80059e8:	0018      	movs	r0, r3
 80059ea:	e7a3      	b.n	8005934 <_printf_i+0x140>
 80059ec:	0022      	movs	r2, r4
 80059ee:	2301      	movs	r3, #1
 80059f0:	9906      	ldr	r1, [sp, #24]
 80059f2:	9805      	ldr	r0, [sp, #20]
 80059f4:	9e07      	ldr	r6, [sp, #28]
 80059f6:	3219      	adds	r2, #25
 80059f8:	47b0      	blx	r6
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d098      	beq.n	8005930 <_printf_i+0x13c>
 80059fe:	3501      	adds	r5, #1
 8005a00:	68e3      	ldr	r3, [r4, #12]
 8005a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	42ab      	cmp	r3, r5
 8005a08:	dcf0      	bgt.n	80059ec <_printf_i+0x1f8>
 8005a0a:	e7e9      	b.n	80059e0 <_printf_i+0x1ec>
 8005a0c:	2500      	movs	r5, #0
 8005a0e:	e7f7      	b.n	8005a00 <_printf_i+0x20c>
 8005a10:	08005ffd 	.word	0x08005ffd
 8005a14:	0800600e 	.word	0x0800600e

08005a18 <memchr>:
 8005a18:	b2c9      	uxtb	r1, r1
 8005a1a:	1882      	adds	r2, r0, r2
 8005a1c:	4290      	cmp	r0, r2
 8005a1e:	d101      	bne.n	8005a24 <memchr+0xc>
 8005a20:	2000      	movs	r0, #0
 8005a22:	4770      	bx	lr
 8005a24:	7803      	ldrb	r3, [r0, #0]
 8005a26:	428b      	cmp	r3, r1
 8005a28:	d0fb      	beq.n	8005a22 <memchr+0xa>
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	e7f6      	b.n	8005a1c <memchr+0x4>

08005a2e <memcpy>:
 8005a2e:	2300      	movs	r3, #0
 8005a30:	b510      	push	{r4, lr}
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d100      	bne.n	8005a38 <memcpy+0xa>
 8005a36:	bd10      	pop	{r4, pc}
 8005a38:	5ccc      	ldrb	r4, [r1, r3]
 8005a3a:	54c4      	strb	r4, [r0, r3]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	e7f8      	b.n	8005a32 <memcpy+0x4>

08005a40 <memmove>:
 8005a40:	b510      	push	{r4, lr}
 8005a42:	4288      	cmp	r0, r1
 8005a44:	d902      	bls.n	8005a4c <memmove+0xc>
 8005a46:	188b      	adds	r3, r1, r2
 8005a48:	4298      	cmp	r0, r3
 8005a4a:	d303      	bcc.n	8005a54 <memmove+0x14>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e007      	b.n	8005a60 <memmove+0x20>
 8005a50:	5c8b      	ldrb	r3, [r1, r2]
 8005a52:	5483      	strb	r3, [r0, r2]
 8005a54:	3a01      	subs	r2, #1
 8005a56:	d2fb      	bcs.n	8005a50 <memmove+0x10>
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	5ccc      	ldrb	r4, [r1, r3]
 8005a5c:	54c4      	strb	r4, [r0, r3]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d1fa      	bne.n	8005a5a <memmove+0x1a>
 8005a64:	e7f8      	b.n	8005a58 <memmove+0x18>
	...

08005a68 <_free_r>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	0005      	movs	r5, r0
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	d010      	beq.n	8005a92 <_free_r+0x2a>
 8005a70:	1f0c      	subs	r4, r1, #4
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	da00      	bge.n	8005a7a <_free_r+0x12>
 8005a78:	18e4      	adds	r4, r4, r3
 8005a7a:	0028      	movs	r0, r5
 8005a7c:	f000 f918 	bl	8005cb0 <__malloc_lock>
 8005a80:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <_free_r+0x90>)
 8005a82:	6813      	ldr	r3, [r2, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <_free_r+0x2c>
 8005a88:	6063      	str	r3, [r4, #4]
 8005a8a:	6014      	str	r4, [r2, #0]
 8005a8c:	0028      	movs	r0, r5
 8005a8e:	f000 f917 	bl	8005cc0 <__malloc_unlock>
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	d908      	bls.n	8005aaa <_free_r+0x42>
 8005a98:	6821      	ldr	r1, [r4, #0]
 8005a9a:	1860      	adds	r0, r4, r1
 8005a9c:	4283      	cmp	r3, r0
 8005a9e:	d1f3      	bne.n	8005a88 <_free_r+0x20>
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	1841      	adds	r1, r0, r1
 8005aa6:	6021      	str	r1, [r4, #0]
 8005aa8:	e7ee      	b.n	8005a88 <_free_r+0x20>
 8005aaa:	001a      	movs	r2, r3
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <_free_r+0x4e>
 8005ab2:	42a3      	cmp	r3, r4
 8005ab4:	d9f9      	bls.n	8005aaa <_free_r+0x42>
 8005ab6:	6811      	ldr	r1, [r2, #0]
 8005ab8:	1850      	adds	r0, r2, r1
 8005aba:	42a0      	cmp	r0, r4
 8005abc:	d10b      	bne.n	8005ad6 <_free_r+0x6e>
 8005abe:	6820      	ldr	r0, [r4, #0]
 8005ac0:	1809      	adds	r1, r1, r0
 8005ac2:	1850      	adds	r0, r2, r1
 8005ac4:	6011      	str	r1, [r2, #0]
 8005ac6:	4283      	cmp	r3, r0
 8005ac8:	d1e0      	bne.n	8005a8c <_free_r+0x24>
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	1841      	adds	r1, r0, r1
 8005ad0:	6011      	str	r1, [r2, #0]
 8005ad2:	6053      	str	r3, [r2, #4]
 8005ad4:	e7da      	b.n	8005a8c <_free_r+0x24>
 8005ad6:	42a0      	cmp	r0, r4
 8005ad8:	d902      	bls.n	8005ae0 <_free_r+0x78>
 8005ada:	230c      	movs	r3, #12
 8005adc:	602b      	str	r3, [r5, #0]
 8005ade:	e7d5      	b.n	8005a8c <_free_r+0x24>
 8005ae0:	6821      	ldr	r1, [r4, #0]
 8005ae2:	1860      	adds	r0, r4, r1
 8005ae4:	4283      	cmp	r3, r0
 8005ae6:	d103      	bne.n	8005af0 <_free_r+0x88>
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	1841      	adds	r1, r0, r1
 8005aee:	6021      	str	r1, [r4, #0]
 8005af0:	6063      	str	r3, [r4, #4]
 8005af2:	6054      	str	r4, [r2, #4]
 8005af4:	e7ca      	b.n	8005a8c <_free_r+0x24>
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	2000012c 	.word	0x2000012c

08005afc <sbrk_aligned>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4e0f      	ldr	r6, [pc, #60]	; (8005b3c <sbrk_aligned+0x40>)
 8005b00:	000d      	movs	r5, r1
 8005b02:	6831      	ldr	r1, [r6, #0]
 8005b04:	0004      	movs	r4, r0
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d102      	bne.n	8005b10 <sbrk_aligned+0x14>
 8005b0a:	f000 f8bf 	bl	8005c8c <_sbrk_r>
 8005b0e:	6030      	str	r0, [r6, #0]
 8005b10:	0029      	movs	r1, r5
 8005b12:	0020      	movs	r0, r4
 8005b14:	f000 f8ba 	bl	8005c8c <_sbrk_r>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d00a      	beq.n	8005b32 <sbrk_aligned+0x36>
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	1cc5      	adds	r5, r0, #3
 8005b20:	439d      	bics	r5, r3
 8005b22:	42a8      	cmp	r0, r5
 8005b24:	d007      	beq.n	8005b36 <sbrk_aligned+0x3a>
 8005b26:	1a29      	subs	r1, r5, r0
 8005b28:	0020      	movs	r0, r4
 8005b2a:	f000 f8af 	bl	8005c8c <_sbrk_r>
 8005b2e:	1c43      	adds	r3, r0, #1
 8005b30:	d101      	bne.n	8005b36 <sbrk_aligned+0x3a>
 8005b32:	2501      	movs	r5, #1
 8005b34:	426d      	negs	r5, r5
 8005b36:	0028      	movs	r0, r5
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	20000130 	.word	0x20000130

08005b40 <_malloc_r>:
 8005b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b42:	2203      	movs	r2, #3
 8005b44:	1ccb      	adds	r3, r1, #3
 8005b46:	4393      	bics	r3, r2
 8005b48:	3308      	adds	r3, #8
 8005b4a:	0006      	movs	r6, r0
 8005b4c:	001f      	movs	r7, r3
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	d232      	bcs.n	8005bb8 <_malloc_r+0x78>
 8005b52:	270c      	movs	r7, #12
 8005b54:	42b9      	cmp	r1, r7
 8005b56:	d831      	bhi.n	8005bbc <_malloc_r+0x7c>
 8005b58:	0030      	movs	r0, r6
 8005b5a:	f000 f8a9 	bl	8005cb0 <__malloc_lock>
 8005b5e:	4d32      	ldr	r5, [pc, #200]	; (8005c28 <_malloc_r+0xe8>)
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	001c      	movs	r4, r3
 8005b64:	2c00      	cmp	r4, #0
 8005b66:	d12e      	bne.n	8005bc6 <_malloc_r+0x86>
 8005b68:	0039      	movs	r1, r7
 8005b6a:	0030      	movs	r0, r6
 8005b6c:	f7ff ffc6 	bl	8005afc <sbrk_aligned>
 8005b70:	0004      	movs	r4, r0
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	d11e      	bne.n	8005bb4 <_malloc_r+0x74>
 8005b76:	682c      	ldr	r4, [r5, #0]
 8005b78:	0025      	movs	r5, r4
 8005b7a:	2d00      	cmp	r5, #0
 8005b7c:	d14a      	bne.n	8005c14 <_malloc_r+0xd4>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	0029      	movs	r1, r5
 8005b82:	18e3      	adds	r3, r4, r3
 8005b84:	0030      	movs	r0, r6
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	f000 f880 	bl	8005c8c <_sbrk_r>
 8005b8c:	9b01      	ldr	r3, [sp, #4]
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d143      	bne.n	8005c1a <_malloc_r+0xda>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	3703      	adds	r7, #3
 8005b96:	1aff      	subs	r7, r7, r3
 8005b98:	2303      	movs	r3, #3
 8005b9a:	439f      	bics	r7, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	2f0c      	cmp	r7, #12
 8005ba0:	d200      	bcs.n	8005ba4 <_malloc_r+0x64>
 8005ba2:	270c      	movs	r7, #12
 8005ba4:	0039      	movs	r1, r7
 8005ba6:	0030      	movs	r0, r6
 8005ba8:	f7ff ffa8 	bl	8005afc <sbrk_aligned>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d034      	beq.n	8005c1a <_malloc_r+0xda>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	19df      	adds	r7, r3, r7
 8005bb4:	6027      	str	r7, [r4, #0]
 8005bb6:	e013      	b.n	8005be0 <_malloc_r+0xa0>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dacb      	bge.n	8005b54 <_malloc_r+0x14>
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	6033      	str	r3, [r6, #0]
 8005bc2:	0028      	movs	r0, r5
 8005bc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	1bd1      	subs	r1, r2, r7
 8005bca:	d420      	bmi.n	8005c0e <_malloc_r+0xce>
 8005bcc:	290b      	cmp	r1, #11
 8005bce:	d917      	bls.n	8005c00 <_malloc_r+0xc0>
 8005bd0:	19e2      	adds	r2, r4, r7
 8005bd2:	6027      	str	r7, [r4, #0]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	d111      	bne.n	8005bfc <_malloc_r+0xbc>
 8005bd8:	602a      	str	r2, [r5, #0]
 8005bda:	6863      	ldr	r3, [r4, #4]
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	6053      	str	r3, [r2, #4]
 8005be0:	0030      	movs	r0, r6
 8005be2:	0025      	movs	r5, r4
 8005be4:	f000 f86c 	bl	8005cc0 <__malloc_unlock>
 8005be8:	2207      	movs	r2, #7
 8005bea:	350b      	adds	r5, #11
 8005bec:	1d23      	adds	r3, r4, #4
 8005bee:	4395      	bics	r5, r2
 8005bf0:	1aea      	subs	r2, r5, r3
 8005bf2:	429d      	cmp	r5, r3
 8005bf4:	d0e5      	beq.n	8005bc2 <_malloc_r+0x82>
 8005bf6:	1b5b      	subs	r3, r3, r5
 8005bf8:	50a3      	str	r3, [r4, r2]
 8005bfa:	e7e2      	b.n	8005bc2 <_malloc_r+0x82>
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	e7ec      	b.n	8005bda <_malloc_r+0x9a>
 8005c00:	6862      	ldr	r2, [r4, #4]
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	d101      	bne.n	8005c0a <_malloc_r+0xca>
 8005c06:	602a      	str	r2, [r5, #0]
 8005c08:	e7ea      	b.n	8005be0 <_malloc_r+0xa0>
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	e7e8      	b.n	8005be0 <_malloc_r+0xa0>
 8005c0e:	0023      	movs	r3, r4
 8005c10:	6864      	ldr	r4, [r4, #4]
 8005c12:	e7a7      	b.n	8005b64 <_malloc_r+0x24>
 8005c14:	002c      	movs	r4, r5
 8005c16:	686d      	ldr	r5, [r5, #4]
 8005c18:	e7af      	b.n	8005b7a <_malloc_r+0x3a>
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	0030      	movs	r0, r6
 8005c1e:	6033      	str	r3, [r6, #0]
 8005c20:	f000 f84e 	bl	8005cc0 <__malloc_unlock>
 8005c24:	e7cd      	b.n	8005bc2 <_malloc_r+0x82>
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	2000012c 	.word	0x2000012c

08005c2c <_realloc_r>:
 8005c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c2e:	0007      	movs	r7, r0
 8005c30:	000e      	movs	r6, r1
 8005c32:	0014      	movs	r4, r2
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d105      	bne.n	8005c44 <_realloc_r+0x18>
 8005c38:	0011      	movs	r1, r2
 8005c3a:	f7ff ff81 	bl	8005b40 <_malloc_r>
 8005c3e:	0005      	movs	r5, r0
 8005c40:	0028      	movs	r0, r5
 8005c42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c44:	2a00      	cmp	r2, #0
 8005c46:	d103      	bne.n	8005c50 <_realloc_r+0x24>
 8005c48:	f7ff ff0e 	bl	8005a68 <_free_r>
 8005c4c:	0025      	movs	r5, r4
 8005c4e:	e7f7      	b.n	8005c40 <_realloc_r+0x14>
 8005c50:	f000 f83e 	bl	8005cd0 <_malloc_usable_size_r>
 8005c54:	9001      	str	r0, [sp, #4]
 8005c56:	4284      	cmp	r4, r0
 8005c58:	d803      	bhi.n	8005c62 <_realloc_r+0x36>
 8005c5a:	0035      	movs	r5, r6
 8005c5c:	0843      	lsrs	r3, r0, #1
 8005c5e:	42a3      	cmp	r3, r4
 8005c60:	d3ee      	bcc.n	8005c40 <_realloc_r+0x14>
 8005c62:	0021      	movs	r1, r4
 8005c64:	0038      	movs	r0, r7
 8005c66:	f7ff ff6b 	bl	8005b40 <_malloc_r>
 8005c6a:	1e05      	subs	r5, r0, #0
 8005c6c:	d0e8      	beq.n	8005c40 <_realloc_r+0x14>
 8005c6e:	9b01      	ldr	r3, [sp, #4]
 8005c70:	0022      	movs	r2, r4
 8005c72:	429c      	cmp	r4, r3
 8005c74:	d900      	bls.n	8005c78 <_realloc_r+0x4c>
 8005c76:	001a      	movs	r2, r3
 8005c78:	0031      	movs	r1, r6
 8005c7a:	0028      	movs	r0, r5
 8005c7c:	f7ff fed7 	bl	8005a2e <memcpy>
 8005c80:	0031      	movs	r1, r6
 8005c82:	0038      	movs	r0, r7
 8005c84:	f7ff fef0 	bl	8005a68 <_free_r>
 8005c88:	e7da      	b.n	8005c40 <_realloc_r+0x14>
	...

08005c8c <_sbrk_r>:
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	b570      	push	{r4, r5, r6, lr}
 8005c90:	4d06      	ldr	r5, [pc, #24]	; (8005cac <_sbrk_r+0x20>)
 8005c92:	0004      	movs	r4, r0
 8005c94:	0008      	movs	r0, r1
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	f7fd fcde 	bl	8003658 <_sbrk>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d103      	bne.n	8005ca8 <_sbrk_r+0x1c>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d000      	beq.n	8005ca8 <_sbrk_r+0x1c>
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	20000134 	.word	0x20000134

08005cb0 <__malloc_lock>:
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	4802      	ldr	r0, [pc, #8]	; (8005cbc <__malloc_lock+0xc>)
 8005cb4:	f000 f814 	bl	8005ce0 <__retarget_lock_acquire_recursive>
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	20000138 	.word	0x20000138

08005cc0 <__malloc_unlock>:
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	4802      	ldr	r0, [pc, #8]	; (8005ccc <__malloc_unlock+0xc>)
 8005cc4:	f000 f80d 	bl	8005ce2 <__retarget_lock_release_recursive>
 8005cc8:	bd10      	pop	{r4, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	20000138 	.word	0x20000138

08005cd0 <_malloc_usable_size_r>:
 8005cd0:	1f0b      	subs	r3, r1, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	1f18      	subs	r0, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da01      	bge.n	8005cde <_malloc_usable_size_r+0xe>
 8005cda:	580b      	ldr	r3, [r1, r0]
 8005cdc:	18c0      	adds	r0, r0, r3
 8005cde:	4770      	bx	lr

08005ce0 <__retarget_lock_acquire_recursive>:
 8005ce0:	4770      	bx	lr

08005ce2 <__retarget_lock_release_recursive>:
 8005ce2:	4770      	bx	lr

08005ce4 <_init>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr

08005cf0 <_fini>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr
