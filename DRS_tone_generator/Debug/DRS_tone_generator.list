
DRS_tone_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e68  08006e68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e70  08006e70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000070  08006ee8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08006ee8  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b786  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002426  00000000  00000000  0002b81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001695c  00000000  00000000  0002edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d377  00000000  00000000  0004574c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c61  00000000  00000000  00052ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002540  00000000  00000000  000d8774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006c58 	.word	0x08006c58

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006c58 	.word	0x08006c58

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cdrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0010      	movs	r0, r2
 8000230:	4662      	mov	r2, ip
 8000232:	468c      	mov	ip, r1
 8000234:	0019      	movs	r1, r3
 8000236:	4663      	mov	r3, ip
 8000238:	e000      	b.n	800023c <__aeabi_cdcmpeq>
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_cdcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f001 f82d 	bl	800129c <__ledf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cdcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_dcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 ff7d 	bl	800114c <__eqdf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_dcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f001 f81f 	bl	800129c <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_dcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_dcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f001 f815 	bl	800129c <__ledf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_dcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_dcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 ffa5 	bl	80011d0 <__gedf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_dcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_dcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 ff9b 	bl	80011d0 <__gedf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_dcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	0008      	movs	r0, r1
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff5d 	.word	0xffffff5d
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f83a 	bl	8000350 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_d2uiz>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	2200      	movs	r2, #0
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <__aeabi_d2uiz+0x38>)
 80002ee:	0004      	movs	r4, r0
 80002f0:	000d      	movs	r5, r1
 80002f2:	f7ff ffcf 	bl	8000294 <__aeabi_dcmpge>
 80002f6:	2800      	cmp	r0, #0
 80002f8:	d104      	bne.n	8000304 <__aeabi_d2uiz+0x1c>
 80002fa:	0020      	movs	r0, r4
 80002fc:	0029      	movs	r1, r5
 80002fe:	f001 fe2f 	bl	8001f60 <__aeabi_d2iz>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <__aeabi_d2uiz+0x38>)
 8000306:	2200      	movs	r2, #0
 8000308:	0020      	movs	r0, r4
 800030a:	0029      	movs	r1, r5
 800030c:	f001 fa96 	bl	800183c <__aeabi_dsub>
 8000310:	f001 fe26 	bl	8001f60 <__aeabi_d2iz>
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	061b      	lsls	r3, r3, #24
 8000318:	469c      	mov	ip, r3
 800031a:	4460      	add	r0, ip
 800031c:	e7f1      	b.n	8000302 <__aeabi_d2uiz+0x1a>
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	41e00000 	.word	0x41e00000

08000324 <__aeabi_ul2d>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	0006      	movs	r6, r0
 8000328:	0008      	movs	r0, r1
 800032a:	f001 fe4f 	bl	8001fcc <__aeabi_ui2d>
 800032e:	2200      	movs	r2, #0
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <__aeabi_ul2d+0x28>)
 8000332:	f001 f817 	bl	8001364 <__aeabi_dmul>
 8000336:	000d      	movs	r5, r1
 8000338:	0004      	movs	r4, r0
 800033a:	0030      	movs	r0, r6
 800033c:	f001 fe46 	bl	8001fcc <__aeabi_ui2d>
 8000340:	002b      	movs	r3, r5
 8000342:	0022      	movs	r2, r4
 8000344:	f000 f8d0 	bl	80004e8 <__aeabi_dadd>
 8000348:	bd70      	pop	{r4, r5, r6, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	41f00000 	.word	0x41f00000

08000350 <__udivmoddi4>:
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	4657      	mov	r7, sl
 8000354:	464e      	mov	r6, r9
 8000356:	4645      	mov	r5, r8
 8000358:	46de      	mov	lr, fp
 800035a:	b5e0      	push	{r5, r6, r7, lr}
 800035c:	0004      	movs	r4, r0
 800035e:	000d      	movs	r5, r1
 8000360:	4692      	mov	sl, r2
 8000362:	4699      	mov	r9, r3
 8000364:	b083      	sub	sp, #12
 8000366:	428b      	cmp	r3, r1
 8000368:	d830      	bhi.n	80003cc <__udivmoddi4+0x7c>
 800036a:	d02d      	beq.n	80003c8 <__udivmoddi4+0x78>
 800036c:	4649      	mov	r1, r9
 800036e:	4650      	mov	r0, sl
 8000370:	f001 fe70 	bl	8002054 <__clzdi2>
 8000374:	0029      	movs	r1, r5
 8000376:	0006      	movs	r6, r0
 8000378:	0020      	movs	r0, r4
 800037a:	f001 fe6b 	bl	8002054 <__clzdi2>
 800037e:	1a33      	subs	r3, r6, r0
 8000380:	4698      	mov	r8, r3
 8000382:	3b20      	subs	r3, #32
 8000384:	469b      	mov	fp, r3
 8000386:	d433      	bmi.n	80003f0 <__udivmoddi4+0xa0>
 8000388:	465a      	mov	r2, fp
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	4642      	mov	r2, r8
 8000390:	001f      	movs	r7, r3
 8000392:	4653      	mov	r3, sl
 8000394:	4093      	lsls	r3, r2
 8000396:	001e      	movs	r6, r3
 8000398:	42af      	cmp	r7, r5
 800039a:	d83a      	bhi.n	8000412 <__udivmoddi4+0xc2>
 800039c:	42af      	cmp	r7, r5
 800039e:	d100      	bne.n	80003a2 <__udivmoddi4+0x52>
 80003a0:	e078      	b.n	8000494 <__udivmoddi4+0x144>
 80003a2:	465b      	mov	r3, fp
 80003a4:	1ba4      	subs	r4, r4, r6
 80003a6:	41bd      	sbcs	r5, r7
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	da00      	bge.n	80003ae <__udivmoddi4+0x5e>
 80003ac:	e075      	b.n	800049a <__udivmoddi4+0x14a>
 80003ae:	2200      	movs	r2, #0
 80003b0:	2300      	movs	r3, #0
 80003b2:	9200      	str	r2, [sp, #0]
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	2301      	movs	r3, #1
 80003b8:	465a      	mov	r2, fp
 80003ba:	4093      	lsls	r3, r2
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	2301      	movs	r3, #1
 80003c0:	4642      	mov	r2, r8
 80003c2:	4093      	lsls	r3, r2
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	e028      	b.n	800041a <__udivmoddi4+0xca>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	d9cf      	bls.n	800036c <__udivmoddi4+0x1c>
 80003cc:	2200      	movs	r2, #0
 80003ce:	2300      	movs	r3, #0
 80003d0:	9200      	str	r2, [sp, #0]
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <__udivmoddi4+0x8e>
 80003da:	601c      	str	r4, [r3, #0]
 80003dc:	605d      	str	r5, [r3, #4]
 80003de:	9800      	ldr	r0, [sp, #0]
 80003e0:	9901      	ldr	r1, [sp, #4]
 80003e2:	b003      	add	sp, #12
 80003e4:	bcf0      	pop	{r4, r5, r6, r7}
 80003e6:	46bb      	mov	fp, r7
 80003e8:	46b2      	mov	sl, r6
 80003ea:	46a9      	mov	r9, r5
 80003ec:	46a0      	mov	r8, r4
 80003ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f0:	4642      	mov	r2, r8
 80003f2:	2320      	movs	r3, #32
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	4652      	mov	r2, sl
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	4641      	mov	r1, r8
 80003fc:	0013      	movs	r3, r2
 80003fe:	464a      	mov	r2, r9
 8000400:	408a      	lsls	r2, r1
 8000402:	0017      	movs	r7, r2
 8000404:	4642      	mov	r2, r8
 8000406:	431f      	orrs	r7, r3
 8000408:	4653      	mov	r3, sl
 800040a:	4093      	lsls	r3, r2
 800040c:	001e      	movs	r6, r3
 800040e:	42af      	cmp	r7, r5
 8000410:	d9c4      	bls.n	800039c <__udivmoddi4+0x4c>
 8000412:	2200      	movs	r2, #0
 8000414:	2300      	movs	r3, #0
 8000416:	9200      	str	r2, [sp, #0]
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	4643      	mov	r3, r8
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0d9      	beq.n	80003d4 <__udivmoddi4+0x84>
 8000420:	07fb      	lsls	r3, r7, #31
 8000422:	0872      	lsrs	r2, r6, #1
 8000424:	431a      	orrs	r2, r3
 8000426:	4646      	mov	r6, r8
 8000428:	087b      	lsrs	r3, r7, #1
 800042a:	e00e      	b.n	800044a <__udivmoddi4+0xfa>
 800042c:	42ab      	cmp	r3, r5
 800042e:	d101      	bne.n	8000434 <__udivmoddi4+0xe4>
 8000430:	42a2      	cmp	r2, r4
 8000432:	d80c      	bhi.n	800044e <__udivmoddi4+0xfe>
 8000434:	1aa4      	subs	r4, r4, r2
 8000436:	419d      	sbcs	r5, r3
 8000438:	2001      	movs	r0, #1
 800043a:	1924      	adds	r4, r4, r4
 800043c:	416d      	adcs	r5, r5
 800043e:	2100      	movs	r1, #0
 8000440:	3e01      	subs	r6, #1
 8000442:	1824      	adds	r4, r4, r0
 8000444:	414d      	adcs	r5, r1
 8000446:	2e00      	cmp	r6, #0
 8000448:	d006      	beq.n	8000458 <__udivmoddi4+0x108>
 800044a:	42ab      	cmp	r3, r5
 800044c:	d9ee      	bls.n	800042c <__udivmoddi4+0xdc>
 800044e:	3e01      	subs	r6, #1
 8000450:	1924      	adds	r4, r4, r4
 8000452:	416d      	adcs	r5, r5
 8000454:	2e00      	cmp	r6, #0
 8000456:	d1f8      	bne.n	800044a <__udivmoddi4+0xfa>
 8000458:	9800      	ldr	r0, [sp, #0]
 800045a:	9901      	ldr	r1, [sp, #4]
 800045c:	465b      	mov	r3, fp
 800045e:	1900      	adds	r0, r0, r4
 8000460:	4169      	adcs	r1, r5
 8000462:	2b00      	cmp	r3, #0
 8000464:	db24      	blt.n	80004b0 <__udivmoddi4+0x160>
 8000466:	002b      	movs	r3, r5
 8000468:	465a      	mov	r2, fp
 800046a:	4644      	mov	r4, r8
 800046c:	40d3      	lsrs	r3, r2
 800046e:	002a      	movs	r2, r5
 8000470:	40e2      	lsrs	r2, r4
 8000472:	001c      	movs	r4, r3
 8000474:	465b      	mov	r3, fp
 8000476:	0015      	movs	r5, r2
 8000478:	2b00      	cmp	r3, #0
 800047a:	db2a      	blt.n	80004d2 <__udivmoddi4+0x182>
 800047c:	0026      	movs	r6, r4
 800047e:	409e      	lsls	r6, r3
 8000480:	0033      	movs	r3, r6
 8000482:	0026      	movs	r6, r4
 8000484:	4647      	mov	r7, r8
 8000486:	40be      	lsls	r6, r7
 8000488:	0032      	movs	r2, r6
 800048a:	1a80      	subs	r0, r0, r2
 800048c:	4199      	sbcs	r1, r3
 800048e:	9000      	str	r0, [sp, #0]
 8000490:	9101      	str	r1, [sp, #4]
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x84>
 8000494:	42a3      	cmp	r3, r4
 8000496:	d8bc      	bhi.n	8000412 <__udivmoddi4+0xc2>
 8000498:	e783      	b.n	80003a2 <__udivmoddi4+0x52>
 800049a:	4642      	mov	r2, r8
 800049c:	2320      	movs	r3, #32
 800049e:	2100      	movs	r1, #0
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	2200      	movs	r2, #0
 80004a4:	9100      	str	r1, [sp, #0]
 80004a6:	9201      	str	r2, [sp, #4]
 80004a8:	2201      	movs	r2, #1
 80004aa:	40da      	lsrs	r2, r3
 80004ac:	9201      	str	r2, [sp, #4]
 80004ae:	e786      	b.n	80003be <__udivmoddi4+0x6e>
 80004b0:	4642      	mov	r2, r8
 80004b2:	2320      	movs	r3, #32
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	002a      	movs	r2, r5
 80004b8:	4646      	mov	r6, r8
 80004ba:	409a      	lsls	r2, r3
 80004bc:	0023      	movs	r3, r4
 80004be:	40f3      	lsrs	r3, r6
 80004c0:	4644      	mov	r4, r8
 80004c2:	4313      	orrs	r3, r2
 80004c4:	002a      	movs	r2, r5
 80004c6:	40e2      	lsrs	r2, r4
 80004c8:	001c      	movs	r4, r3
 80004ca:	465b      	mov	r3, fp
 80004cc:	0015      	movs	r5, r2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	dad4      	bge.n	800047c <__udivmoddi4+0x12c>
 80004d2:	4642      	mov	r2, r8
 80004d4:	002f      	movs	r7, r5
 80004d6:	2320      	movs	r3, #32
 80004d8:	0026      	movs	r6, r4
 80004da:	4097      	lsls	r7, r2
 80004dc:	1a9b      	subs	r3, r3, r2
 80004de:	40de      	lsrs	r6, r3
 80004e0:	003b      	movs	r3, r7
 80004e2:	4333      	orrs	r3, r6
 80004e4:	e7cd      	b.n	8000482 <__udivmoddi4+0x132>
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_dadd>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	464f      	mov	r7, r9
 80004ec:	4646      	mov	r6, r8
 80004ee:	46d6      	mov	lr, sl
 80004f0:	000d      	movs	r5, r1
 80004f2:	0004      	movs	r4, r0
 80004f4:	b5c0      	push	{r6, r7, lr}
 80004f6:	001f      	movs	r7, r3
 80004f8:	0011      	movs	r1, r2
 80004fa:	0328      	lsls	r0, r5, #12
 80004fc:	0f62      	lsrs	r2, r4, #29
 80004fe:	0a40      	lsrs	r0, r0, #9
 8000500:	4310      	orrs	r0, r2
 8000502:	007a      	lsls	r2, r7, #1
 8000504:	0d52      	lsrs	r2, r2, #21
 8000506:	00e3      	lsls	r3, r4, #3
 8000508:	033c      	lsls	r4, r7, #12
 800050a:	4691      	mov	r9, r2
 800050c:	0a64      	lsrs	r4, r4, #9
 800050e:	0ffa      	lsrs	r2, r7, #31
 8000510:	0f4f      	lsrs	r7, r1, #29
 8000512:	006e      	lsls	r6, r5, #1
 8000514:	4327      	orrs	r7, r4
 8000516:	4692      	mov	sl, r2
 8000518:	46b8      	mov	r8, r7
 800051a:	0d76      	lsrs	r6, r6, #21
 800051c:	0fed      	lsrs	r5, r5, #31
 800051e:	00c9      	lsls	r1, r1, #3
 8000520:	4295      	cmp	r5, r2
 8000522:	d100      	bne.n	8000526 <__aeabi_dadd+0x3e>
 8000524:	e099      	b.n	800065a <__aeabi_dadd+0x172>
 8000526:	464c      	mov	r4, r9
 8000528:	1b34      	subs	r4, r6, r4
 800052a:	46a4      	mov	ip, r4
 800052c:	2c00      	cmp	r4, #0
 800052e:	dc00      	bgt.n	8000532 <__aeabi_dadd+0x4a>
 8000530:	e07c      	b.n	800062c <__aeabi_dadd+0x144>
 8000532:	464a      	mov	r2, r9
 8000534:	2a00      	cmp	r2, #0
 8000536:	d100      	bne.n	800053a <__aeabi_dadd+0x52>
 8000538:	e0b8      	b.n	80006ac <__aeabi_dadd+0x1c4>
 800053a:	4ac5      	ldr	r2, [pc, #788]	; (8000850 <__aeabi_dadd+0x368>)
 800053c:	4296      	cmp	r6, r2
 800053e:	d100      	bne.n	8000542 <__aeabi_dadd+0x5a>
 8000540:	e11c      	b.n	800077c <__aeabi_dadd+0x294>
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	003c      	movs	r4, r7
 8000546:	0412      	lsls	r2, r2, #16
 8000548:	4314      	orrs	r4, r2
 800054a:	46a0      	mov	r8, r4
 800054c:	4662      	mov	r2, ip
 800054e:	2a38      	cmp	r2, #56	; 0x38
 8000550:	dd00      	ble.n	8000554 <__aeabi_dadd+0x6c>
 8000552:	e161      	b.n	8000818 <__aeabi_dadd+0x330>
 8000554:	2a1f      	cmp	r2, #31
 8000556:	dd00      	ble.n	800055a <__aeabi_dadd+0x72>
 8000558:	e1cc      	b.n	80008f4 <__aeabi_dadd+0x40c>
 800055a:	4664      	mov	r4, ip
 800055c:	2220      	movs	r2, #32
 800055e:	1b12      	subs	r2, r2, r4
 8000560:	4644      	mov	r4, r8
 8000562:	4094      	lsls	r4, r2
 8000564:	000f      	movs	r7, r1
 8000566:	46a1      	mov	r9, r4
 8000568:	4664      	mov	r4, ip
 800056a:	4091      	lsls	r1, r2
 800056c:	40e7      	lsrs	r7, r4
 800056e:	464c      	mov	r4, r9
 8000570:	1e4a      	subs	r2, r1, #1
 8000572:	4191      	sbcs	r1, r2
 8000574:	433c      	orrs	r4, r7
 8000576:	4642      	mov	r2, r8
 8000578:	4321      	orrs	r1, r4
 800057a:	4664      	mov	r4, ip
 800057c:	40e2      	lsrs	r2, r4
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	1a5c      	subs	r4, r3, r1
 8000582:	42a3      	cmp	r3, r4
 8000584:	419b      	sbcs	r3, r3
 8000586:	425f      	negs	r7, r3
 8000588:	1bc7      	subs	r7, r0, r7
 800058a:	023b      	lsls	r3, r7, #8
 800058c:	d400      	bmi.n	8000590 <__aeabi_dadd+0xa8>
 800058e:	e0d0      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000590:	027f      	lsls	r7, r7, #9
 8000592:	0a7f      	lsrs	r7, r7, #9
 8000594:	2f00      	cmp	r7, #0
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0xb2>
 8000598:	e0ff      	b.n	800079a <__aeabi_dadd+0x2b2>
 800059a:	0038      	movs	r0, r7
 800059c:	f001 fd3c 	bl	8002018 <__clzsi2>
 80005a0:	0001      	movs	r1, r0
 80005a2:	3908      	subs	r1, #8
 80005a4:	2320      	movs	r3, #32
 80005a6:	0022      	movs	r2, r4
 80005a8:	1a5b      	subs	r3, r3, r1
 80005aa:	408f      	lsls	r7, r1
 80005ac:	40da      	lsrs	r2, r3
 80005ae:	408c      	lsls	r4, r1
 80005b0:	4317      	orrs	r7, r2
 80005b2:	42b1      	cmp	r1, r6
 80005b4:	da00      	bge.n	80005b8 <__aeabi_dadd+0xd0>
 80005b6:	e0ff      	b.n	80007b8 <__aeabi_dadd+0x2d0>
 80005b8:	1b89      	subs	r1, r1, r6
 80005ba:	1c4b      	adds	r3, r1, #1
 80005bc:	2b1f      	cmp	r3, #31
 80005be:	dd00      	ble.n	80005c2 <__aeabi_dadd+0xda>
 80005c0:	e0a8      	b.n	8000714 <__aeabi_dadd+0x22c>
 80005c2:	2220      	movs	r2, #32
 80005c4:	0039      	movs	r1, r7
 80005c6:	1ad2      	subs	r2, r2, r3
 80005c8:	0020      	movs	r0, r4
 80005ca:	4094      	lsls	r4, r2
 80005cc:	4091      	lsls	r1, r2
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	1e62      	subs	r2, r4, #1
 80005d2:	4194      	sbcs	r4, r2
 80005d4:	40df      	lsrs	r7, r3
 80005d6:	2600      	movs	r6, #0
 80005d8:	4301      	orrs	r1, r0
 80005da:	430c      	orrs	r4, r1
 80005dc:	0763      	lsls	r3, r4, #29
 80005de:	d009      	beq.n	80005f4 <__aeabi_dadd+0x10c>
 80005e0:	230f      	movs	r3, #15
 80005e2:	4023      	ands	r3, r4
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d005      	beq.n	80005f4 <__aeabi_dadd+0x10c>
 80005e8:	1d23      	adds	r3, r4, #4
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	41a4      	sbcs	r4, r4
 80005ee:	4264      	negs	r4, r4
 80005f0:	193f      	adds	r7, r7, r4
 80005f2:	001c      	movs	r4, r3
 80005f4:	023b      	lsls	r3, r7, #8
 80005f6:	d400      	bmi.n	80005fa <__aeabi_dadd+0x112>
 80005f8:	e09e      	b.n	8000738 <__aeabi_dadd+0x250>
 80005fa:	4b95      	ldr	r3, [pc, #596]	; (8000850 <__aeabi_dadd+0x368>)
 80005fc:	3601      	adds	r6, #1
 80005fe:	429e      	cmp	r6, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x11c>
 8000602:	e0b7      	b.n	8000774 <__aeabi_dadd+0x28c>
 8000604:	4a93      	ldr	r2, [pc, #588]	; (8000854 <__aeabi_dadd+0x36c>)
 8000606:	08e4      	lsrs	r4, r4, #3
 8000608:	4017      	ands	r7, r2
 800060a:	077b      	lsls	r3, r7, #29
 800060c:	0571      	lsls	r1, r6, #21
 800060e:	027f      	lsls	r7, r7, #9
 8000610:	4323      	orrs	r3, r4
 8000612:	0b3f      	lsrs	r7, r7, #12
 8000614:	0d4a      	lsrs	r2, r1, #21
 8000616:	0512      	lsls	r2, r2, #20
 8000618:	433a      	orrs	r2, r7
 800061a:	07ed      	lsls	r5, r5, #31
 800061c:	432a      	orrs	r2, r5
 800061e:	0018      	movs	r0, r3
 8000620:	0011      	movs	r1, r2
 8000622:	bce0      	pop	{r5, r6, r7}
 8000624:	46ba      	mov	sl, r7
 8000626:	46b1      	mov	r9, r6
 8000628:	46a8      	mov	r8, r5
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	2c00      	cmp	r4, #0
 800062e:	d04b      	beq.n	80006c8 <__aeabi_dadd+0x1e0>
 8000630:	464c      	mov	r4, r9
 8000632:	1ba4      	subs	r4, r4, r6
 8000634:	46a4      	mov	ip, r4
 8000636:	2e00      	cmp	r6, #0
 8000638:	d000      	beq.n	800063c <__aeabi_dadd+0x154>
 800063a:	e123      	b.n	8000884 <__aeabi_dadd+0x39c>
 800063c:	0004      	movs	r4, r0
 800063e:	431c      	orrs	r4, r3
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x15c>
 8000642:	e1af      	b.n	80009a4 <__aeabi_dadd+0x4bc>
 8000644:	4662      	mov	r2, ip
 8000646:	1e54      	subs	r4, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x166>
 800064c:	e215      	b.n	8000a7a <__aeabi_dadd+0x592>
 800064e:	4d80      	ldr	r5, [pc, #512]	; (8000850 <__aeabi_dadd+0x368>)
 8000650:	45ac      	cmp	ip, r5
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x16e>
 8000654:	e1c8      	b.n	80009e8 <__aeabi_dadd+0x500>
 8000656:	46a4      	mov	ip, r4
 8000658:	e11b      	b.n	8000892 <__aeabi_dadd+0x3aa>
 800065a:	464a      	mov	r2, r9
 800065c:	1ab2      	subs	r2, r6, r2
 800065e:	4694      	mov	ip, r2
 8000660:	2a00      	cmp	r2, #0
 8000662:	dc00      	bgt.n	8000666 <__aeabi_dadd+0x17e>
 8000664:	e0ac      	b.n	80007c0 <__aeabi_dadd+0x2d8>
 8000666:	464a      	mov	r2, r9
 8000668:	2a00      	cmp	r2, #0
 800066a:	d043      	beq.n	80006f4 <__aeabi_dadd+0x20c>
 800066c:	4a78      	ldr	r2, [pc, #480]	; (8000850 <__aeabi_dadd+0x368>)
 800066e:	4296      	cmp	r6, r2
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x18c>
 8000672:	e1af      	b.n	80009d4 <__aeabi_dadd+0x4ec>
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	003c      	movs	r4, r7
 8000678:	0412      	lsls	r2, r2, #16
 800067a:	4314      	orrs	r4, r2
 800067c:	46a0      	mov	r8, r4
 800067e:	4662      	mov	r2, ip
 8000680:	2a38      	cmp	r2, #56	; 0x38
 8000682:	dc67      	bgt.n	8000754 <__aeabi_dadd+0x26c>
 8000684:	2a1f      	cmp	r2, #31
 8000686:	dc00      	bgt.n	800068a <__aeabi_dadd+0x1a2>
 8000688:	e15f      	b.n	800094a <__aeabi_dadd+0x462>
 800068a:	4647      	mov	r7, r8
 800068c:	3a20      	subs	r2, #32
 800068e:	40d7      	lsrs	r7, r2
 8000690:	4662      	mov	r2, ip
 8000692:	2a20      	cmp	r2, #32
 8000694:	d005      	beq.n	80006a2 <__aeabi_dadd+0x1ba>
 8000696:	4664      	mov	r4, ip
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	1b12      	subs	r2, r2, r4
 800069c:	4644      	mov	r4, r8
 800069e:	4094      	lsls	r4, r2
 80006a0:	4321      	orrs	r1, r4
 80006a2:	1e4a      	subs	r2, r1, #1
 80006a4:	4191      	sbcs	r1, r2
 80006a6:	000c      	movs	r4, r1
 80006a8:	433c      	orrs	r4, r7
 80006aa:	e057      	b.n	800075c <__aeabi_dadd+0x274>
 80006ac:	003a      	movs	r2, r7
 80006ae:	430a      	orrs	r2, r1
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x1cc>
 80006b2:	e105      	b.n	80008c0 <__aeabi_dadd+0x3d8>
 80006b4:	0022      	movs	r2, r4
 80006b6:	3a01      	subs	r2, #1
 80006b8:	2c01      	cmp	r4, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x1d6>
 80006bc:	e182      	b.n	80009c4 <__aeabi_dadd+0x4dc>
 80006be:	4c64      	ldr	r4, [pc, #400]	; (8000850 <__aeabi_dadd+0x368>)
 80006c0:	45a4      	cmp	ip, r4
 80006c2:	d05b      	beq.n	800077c <__aeabi_dadd+0x294>
 80006c4:	4694      	mov	ip, r2
 80006c6:	e741      	b.n	800054c <__aeabi_dadd+0x64>
 80006c8:	4c63      	ldr	r4, [pc, #396]	; (8000858 <__aeabi_dadd+0x370>)
 80006ca:	1c77      	adds	r7, r6, #1
 80006cc:	4227      	tst	r7, r4
 80006ce:	d000      	beq.n	80006d2 <__aeabi_dadd+0x1ea>
 80006d0:	e0c4      	b.n	800085c <__aeabi_dadd+0x374>
 80006d2:	0004      	movs	r4, r0
 80006d4:	431c      	orrs	r4, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x1f4>
 80006da:	e169      	b.n	80009b0 <__aeabi_dadd+0x4c8>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x1fa>
 80006e0:	e1bf      	b.n	8000a62 <__aeabi_dadd+0x57a>
 80006e2:	4644      	mov	r4, r8
 80006e4:	430c      	orrs	r4, r1
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x202>
 80006e8:	e1d0      	b.n	8000a8c <__aeabi_dadd+0x5a4>
 80006ea:	0742      	lsls	r2, r0, #29
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	08c0      	lsrs	r0, r0, #3
 80006f2:	e029      	b.n	8000748 <__aeabi_dadd+0x260>
 80006f4:	003a      	movs	r2, r7
 80006f6:	430a      	orrs	r2, r1
 80006f8:	d100      	bne.n	80006fc <__aeabi_dadd+0x214>
 80006fa:	e170      	b.n	80009de <__aeabi_dadd+0x4f6>
 80006fc:	4662      	mov	r2, ip
 80006fe:	4664      	mov	r4, ip
 8000700:	3a01      	subs	r2, #1
 8000702:	2c01      	cmp	r4, #1
 8000704:	d100      	bne.n	8000708 <__aeabi_dadd+0x220>
 8000706:	e0e0      	b.n	80008ca <__aeabi_dadd+0x3e2>
 8000708:	4c51      	ldr	r4, [pc, #324]	; (8000850 <__aeabi_dadd+0x368>)
 800070a:	45a4      	cmp	ip, r4
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x228>
 800070e:	e161      	b.n	80009d4 <__aeabi_dadd+0x4ec>
 8000710:	4694      	mov	ip, r2
 8000712:	e7b4      	b.n	800067e <__aeabi_dadd+0x196>
 8000714:	003a      	movs	r2, r7
 8000716:	391f      	subs	r1, #31
 8000718:	40ca      	lsrs	r2, r1
 800071a:	0011      	movs	r1, r2
 800071c:	2b20      	cmp	r3, #32
 800071e:	d003      	beq.n	8000728 <__aeabi_dadd+0x240>
 8000720:	2240      	movs	r2, #64	; 0x40
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	409f      	lsls	r7, r3
 8000726:	433c      	orrs	r4, r7
 8000728:	1e63      	subs	r3, r4, #1
 800072a:	419c      	sbcs	r4, r3
 800072c:	2700      	movs	r7, #0
 800072e:	2600      	movs	r6, #0
 8000730:	430c      	orrs	r4, r1
 8000732:	0763      	lsls	r3, r4, #29
 8000734:	d000      	beq.n	8000738 <__aeabi_dadd+0x250>
 8000736:	e753      	b.n	80005e0 <__aeabi_dadd+0xf8>
 8000738:	46b4      	mov	ip, r6
 800073a:	08e4      	lsrs	r4, r4, #3
 800073c:	077b      	lsls	r3, r7, #29
 800073e:	4323      	orrs	r3, r4
 8000740:	08f8      	lsrs	r0, r7, #3
 8000742:	4a43      	ldr	r2, [pc, #268]	; (8000850 <__aeabi_dadd+0x368>)
 8000744:	4594      	cmp	ip, r2
 8000746:	d01d      	beq.n	8000784 <__aeabi_dadd+0x29c>
 8000748:	4662      	mov	r2, ip
 800074a:	0307      	lsls	r7, r0, #12
 800074c:	0552      	lsls	r2, r2, #21
 800074e:	0b3f      	lsrs	r7, r7, #12
 8000750:	0d52      	lsrs	r2, r2, #21
 8000752:	e760      	b.n	8000616 <__aeabi_dadd+0x12e>
 8000754:	4644      	mov	r4, r8
 8000756:	430c      	orrs	r4, r1
 8000758:	1e62      	subs	r2, r4, #1
 800075a:	4194      	sbcs	r4, r2
 800075c:	18e4      	adds	r4, r4, r3
 800075e:	429c      	cmp	r4, r3
 8000760:	419b      	sbcs	r3, r3
 8000762:	425f      	negs	r7, r3
 8000764:	183f      	adds	r7, r7, r0
 8000766:	023b      	lsls	r3, r7, #8
 8000768:	d5e3      	bpl.n	8000732 <__aeabi_dadd+0x24a>
 800076a:	4b39      	ldr	r3, [pc, #228]	; (8000850 <__aeabi_dadd+0x368>)
 800076c:	3601      	adds	r6, #1
 800076e:	429e      	cmp	r6, r3
 8000770:	d000      	beq.n	8000774 <__aeabi_dadd+0x28c>
 8000772:	e0b5      	b.n	80008e0 <__aeabi_dadd+0x3f8>
 8000774:	0032      	movs	r2, r6
 8000776:	2700      	movs	r7, #0
 8000778:	2300      	movs	r3, #0
 800077a:	e74c      	b.n	8000616 <__aeabi_dadd+0x12e>
 800077c:	0742      	lsls	r2, r0, #29
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	4313      	orrs	r3, r2
 8000782:	08c0      	lsrs	r0, r0, #3
 8000784:	001a      	movs	r2, r3
 8000786:	4302      	orrs	r2, r0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x2a4>
 800078a:	e1e1      	b.n	8000b50 <__aeabi_dadd+0x668>
 800078c:	2780      	movs	r7, #128	; 0x80
 800078e:	033f      	lsls	r7, r7, #12
 8000790:	4307      	orrs	r7, r0
 8000792:	033f      	lsls	r7, r7, #12
 8000794:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <__aeabi_dadd+0x368>)
 8000796:	0b3f      	lsrs	r7, r7, #12
 8000798:	e73d      	b.n	8000616 <__aeabi_dadd+0x12e>
 800079a:	0020      	movs	r0, r4
 800079c:	f001 fc3c 	bl	8002018 <__clzsi2>
 80007a0:	0001      	movs	r1, r0
 80007a2:	3118      	adds	r1, #24
 80007a4:	291f      	cmp	r1, #31
 80007a6:	dc00      	bgt.n	80007aa <__aeabi_dadd+0x2c2>
 80007a8:	e6fc      	b.n	80005a4 <__aeabi_dadd+0xbc>
 80007aa:	3808      	subs	r0, #8
 80007ac:	4084      	lsls	r4, r0
 80007ae:	0027      	movs	r7, r4
 80007b0:	2400      	movs	r4, #0
 80007b2:	42b1      	cmp	r1, r6
 80007b4:	db00      	blt.n	80007b8 <__aeabi_dadd+0x2d0>
 80007b6:	e6ff      	b.n	80005b8 <__aeabi_dadd+0xd0>
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <__aeabi_dadd+0x36c>)
 80007ba:	1a76      	subs	r6, r6, r1
 80007bc:	4017      	ands	r7, r2
 80007be:	e70d      	b.n	80005dc <__aeabi_dadd+0xf4>
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d02f      	beq.n	8000824 <__aeabi_dadd+0x33c>
 80007c4:	464a      	mov	r2, r9
 80007c6:	1b92      	subs	r2, r2, r6
 80007c8:	4694      	mov	ip, r2
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x2e8>
 80007ce:	e0ad      	b.n	800092c <__aeabi_dadd+0x444>
 80007d0:	4a1f      	ldr	r2, [pc, #124]	; (8000850 <__aeabi_dadd+0x368>)
 80007d2:	4591      	cmp	r9, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x2f0>
 80007d6:	e10f      	b.n	80009f8 <__aeabi_dadd+0x510>
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	0412      	lsls	r2, r2, #16
 80007dc:	4310      	orrs	r0, r2
 80007de:	4662      	mov	r2, ip
 80007e0:	2a38      	cmp	r2, #56	; 0x38
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_dadd+0x2fe>
 80007e4:	e10f      	b.n	8000a06 <__aeabi_dadd+0x51e>
 80007e6:	2a1f      	cmp	r2, #31
 80007e8:	dd00      	ble.n	80007ec <__aeabi_dadd+0x304>
 80007ea:	e180      	b.n	8000aee <__aeabi_dadd+0x606>
 80007ec:	4664      	mov	r4, ip
 80007ee:	2220      	movs	r2, #32
 80007f0:	001e      	movs	r6, r3
 80007f2:	1b12      	subs	r2, r2, r4
 80007f4:	4667      	mov	r7, ip
 80007f6:	0004      	movs	r4, r0
 80007f8:	4093      	lsls	r3, r2
 80007fa:	4094      	lsls	r4, r2
 80007fc:	40fe      	lsrs	r6, r7
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	4193      	sbcs	r3, r2
 8000802:	40f8      	lsrs	r0, r7
 8000804:	4334      	orrs	r4, r6
 8000806:	431c      	orrs	r4, r3
 8000808:	4480      	add	r8, r0
 800080a:	1864      	adds	r4, r4, r1
 800080c:	428c      	cmp	r4, r1
 800080e:	41bf      	sbcs	r7, r7
 8000810:	427f      	negs	r7, r7
 8000812:	464e      	mov	r6, r9
 8000814:	4447      	add	r7, r8
 8000816:	e7a6      	b.n	8000766 <__aeabi_dadd+0x27e>
 8000818:	4642      	mov	r2, r8
 800081a:	430a      	orrs	r2, r1
 800081c:	0011      	movs	r1, r2
 800081e:	1e4a      	subs	r2, r1, #1
 8000820:	4191      	sbcs	r1, r2
 8000822:	e6ad      	b.n	8000580 <__aeabi_dadd+0x98>
 8000824:	4c0c      	ldr	r4, [pc, #48]	; (8000858 <__aeabi_dadd+0x370>)
 8000826:	1c72      	adds	r2, r6, #1
 8000828:	4222      	tst	r2, r4
 800082a:	d000      	beq.n	800082e <__aeabi_dadd+0x346>
 800082c:	e0a1      	b.n	8000972 <__aeabi_dadd+0x48a>
 800082e:	0002      	movs	r2, r0
 8000830:	431a      	orrs	r2, r3
 8000832:	2e00      	cmp	r6, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_dadd+0x350>
 8000836:	e0fa      	b.n	8000a2e <__aeabi_dadd+0x546>
 8000838:	2a00      	cmp	r2, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x356>
 800083c:	e145      	b.n	8000aca <__aeabi_dadd+0x5e2>
 800083e:	003a      	movs	r2, r7
 8000840:	430a      	orrs	r2, r1
 8000842:	d000      	beq.n	8000846 <__aeabi_dadd+0x35e>
 8000844:	e146      	b.n	8000ad4 <__aeabi_dadd+0x5ec>
 8000846:	0742      	lsls	r2, r0, #29
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	4313      	orrs	r3, r2
 800084c:	08c0      	lsrs	r0, r0, #3
 800084e:	e77b      	b.n	8000748 <__aeabi_dadd+0x260>
 8000850:	000007ff 	.word	0x000007ff
 8000854:	ff7fffff 	.word	0xff7fffff
 8000858:	000007fe 	.word	0x000007fe
 800085c:	4647      	mov	r7, r8
 800085e:	1a5c      	subs	r4, r3, r1
 8000860:	1bc2      	subs	r2, r0, r7
 8000862:	42a3      	cmp	r3, r4
 8000864:	41bf      	sbcs	r7, r7
 8000866:	427f      	negs	r7, r7
 8000868:	46b9      	mov	r9, r7
 800086a:	0017      	movs	r7, r2
 800086c:	464a      	mov	r2, r9
 800086e:	1abf      	subs	r7, r7, r2
 8000870:	023a      	lsls	r2, r7, #8
 8000872:	d500      	bpl.n	8000876 <__aeabi_dadd+0x38e>
 8000874:	e08d      	b.n	8000992 <__aeabi_dadd+0x4aa>
 8000876:	0023      	movs	r3, r4
 8000878:	433b      	orrs	r3, r7
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x396>
 800087c:	e68a      	b.n	8000594 <__aeabi_dadd+0xac>
 800087e:	2000      	movs	r0, #0
 8000880:	2500      	movs	r5, #0
 8000882:	e761      	b.n	8000748 <__aeabi_dadd+0x260>
 8000884:	4cb4      	ldr	r4, [pc, #720]	; (8000b58 <__aeabi_dadd+0x670>)
 8000886:	45a1      	cmp	r9, r4
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x3a4>
 800088a:	e0ad      	b.n	80009e8 <__aeabi_dadd+0x500>
 800088c:	2480      	movs	r4, #128	; 0x80
 800088e:	0424      	lsls	r4, r4, #16
 8000890:	4320      	orrs	r0, r4
 8000892:	4664      	mov	r4, ip
 8000894:	2c38      	cmp	r4, #56	; 0x38
 8000896:	dc3d      	bgt.n	8000914 <__aeabi_dadd+0x42c>
 8000898:	4662      	mov	r2, ip
 800089a:	2c1f      	cmp	r4, #31
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dadd+0x3b8>
 800089e:	e0b7      	b.n	8000a10 <__aeabi_dadd+0x528>
 80008a0:	2520      	movs	r5, #32
 80008a2:	001e      	movs	r6, r3
 80008a4:	1b2d      	subs	r5, r5, r4
 80008a6:	0004      	movs	r4, r0
 80008a8:	40ab      	lsls	r3, r5
 80008aa:	40ac      	lsls	r4, r5
 80008ac:	40d6      	lsrs	r6, r2
 80008ae:	40d0      	lsrs	r0, r2
 80008b0:	4642      	mov	r2, r8
 80008b2:	1e5d      	subs	r5, r3, #1
 80008b4:	41ab      	sbcs	r3, r5
 80008b6:	4334      	orrs	r4, r6
 80008b8:	1a12      	subs	r2, r2, r0
 80008ba:	4690      	mov	r8, r2
 80008bc:	4323      	orrs	r3, r4
 80008be:	e02c      	b.n	800091a <__aeabi_dadd+0x432>
 80008c0:	0742      	lsls	r2, r0, #29
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	08c0      	lsrs	r0, r0, #3
 80008c8:	e73b      	b.n	8000742 <__aeabi_dadd+0x25a>
 80008ca:	185c      	adds	r4, r3, r1
 80008cc:	429c      	cmp	r4, r3
 80008ce:	419b      	sbcs	r3, r3
 80008d0:	4440      	add	r0, r8
 80008d2:	425b      	negs	r3, r3
 80008d4:	18c7      	adds	r7, r0, r3
 80008d6:	2601      	movs	r6, #1
 80008d8:	023b      	lsls	r3, r7, #8
 80008da:	d400      	bmi.n	80008de <__aeabi_dadd+0x3f6>
 80008dc:	e729      	b.n	8000732 <__aeabi_dadd+0x24a>
 80008de:	2602      	movs	r6, #2
 80008e0:	4a9e      	ldr	r2, [pc, #632]	; (8000b5c <__aeabi_dadd+0x674>)
 80008e2:	0863      	lsrs	r3, r4, #1
 80008e4:	4017      	ands	r7, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	4014      	ands	r4, r2
 80008ea:	431c      	orrs	r4, r3
 80008ec:	07fb      	lsls	r3, r7, #31
 80008ee:	431c      	orrs	r4, r3
 80008f0:	087f      	lsrs	r7, r7, #1
 80008f2:	e673      	b.n	80005dc <__aeabi_dadd+0xf4>
 80008f4:	4644      	mov	r4, r8
 80008f6:	3a20      	subs	r2, #32
 80008f8:	40d4      	lsrs	r4, r2
 80008fa:	4662      	mov	r2, ip
 80008fc:	2a20      	cmp	r2, #32
 80008fe:	d005      	beq.n	800090c <__aeabi_dadd+0x424>
 8000900:	4667      	mov	r7, ip
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	1bd2      	subs	r2, r2, r7
 8000906:	4647      	mov	r7, r8
 8000908:	4097      	lsls	r7, r2
 800090a:	4339      	orrs	r1, r7
 800090c:	1e4a      	subs	r2, r1, #1
 800090e:	4191      	sbcs	r1, r2
 8000910:	4321      	orrs	r1, r4
 8000912:	e635      	b.n	8000580 <__aeabi_dadd+0x98>
 8000914:	4303      	orrs	r3, r0
 8000916:	1e58      	subs	r0, r3, #1
 8000918:	4183      	sbcs	r3, r0
 800091a:	1acc      	subs	r4, r1, r3
 800091c:	42a1      	cmp	r1, r4
 800091e:	41bf      	sbcs	r7, r7
 8000920:	4643      	mov	r3, r8
 8000922:	427f      	negs	r7, r7
 8000924:	4655      	mov	r5, sl
 8000926:	464e      	mov	r6, r9
 8000928:	1bdf      	subs	r7, r3, r7
 800092a:	e62e      	b.n	800058a <__aeabi_dadd+0xa2>
 800092c:	0002      	movs	r2, r0
 800092e:	431a      	orrs	r2, r3
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x44c>
 8000932:	e0bd      	b.n	8000ab0 <__aeabi_dadd+0x5c8>
 8000934:	4662      	mov	r2, ip
 8000936:	4664      	mov	r4, ip
 8000938:	3a01      	subs	r2, #1
 800093a:	2c01      	cmp	r4, #1
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x458>
 800093e:	e0e5      	b.n	8000b0c <__aeabi_dadd+0x624>
 8000940:	4c85      	ldr	r4, [pc, #532]	; (8000b58 <__aeabi_dadd+0x670>)
 8000942:	45a4      	cmp	ip, r4
 8000944:	d058      	beq.n	80009f8 <__aeabi_dadd+0x510>
 8000946:	4694      	mov	ip, r2
 8000948:	e749      	b.n	80007de <__aeabi_dadd+0x2f6>
 800094a:	4664      	mov	r4, ip
 800094c:	2220      	movs	r2, #32
 800094e:	1b12      	subs	r2, r2, r4
 8000950:	4644      	mov	r4, r8
 8000952:	4094      	lsls	r4, r2
 8000954:	000f      	movs	r7, r1
 8000956:	46a1      	mov	r9, r4
 8000958:	4664      	mov	r4, ip
 800095a:	4091      	lsls	r1, r2
 800095c:	40e7      	lsrs	r7, r4
 800095e:	464c      	mov	r4, r9
 8000960:	1e4a      	subs	r2, r1, #1
 8000962:	4191      	sbcs	r1, r2
 8000964:	433c      	orrs	r4, r7
 8000966:	4642      	mov	r2, r8
 8000968:	430c      	orrs	r4, r1
 800096a:	4661      	mov	r1, ip
 800096c:	40ca      	lsrs	r2, r1
 800096e:	1880      	adds	r0, r0, r2
 8000970:	e6f4      	b.n	800075c <__aeabi_dadd+0x274>
 8000972:	4c79      	ldr	r4, [pc, #484]	; (8000b58 <__aeabi_dadd+0x670>)
 8000974:	42a2      	cmp	r2, r4
 8000976:	d100      	bne.n	800097a <__aeabi_dadd+0x492>
 8000978:	e6fd      	b.n	8000776 <__aeabi_dadd+0x28e>
 800097a:	1859      	adds	r1, r3, r1
 800097c:	4299      	cmp	r1, r3
 800097e:	419b      	sbcs	r3, r3
 8000980:	4440      	add	r0, r8
 8000982:	425f      	negs	r7, r3
 8000984:	19c7      	adds	r7, r0, r7
 8000986:	07fc      	lsls	r4, r7, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	0016      	movs	r6, r2
 800098c:	430c      	orrs	r4, r1
 800098e:	087f      	lsrs	r7, r7, #1
 8000990:	e6cf      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000992:	1acc      	subs	r4, r1, r3
 8000994:	42a1      	cmp	r1, r4
 8000996:	41bf      	sbcs	r7, r7
 8000998:	4643      	mov	r3, r8
 800099a:	427f      	negs	r7, r7
 800099c:	1a18      	subs	r0, r3, r0
 800099e:	4655      	mov	r5, sl
 80009a0:	1bc7      	subs	r7, r0, r7
 80009a2:	e5f7      	b.n	8000594 <__aeabi_dadd+0xac>
 80009a4:	08c9      	lsrs	r1, r1, #3
 80009a6:	077b      	lsls	r3, r7, #29
 80009a8:	4655      	mov	r5, sl
 80009aa:	430b      	orrs	r3, r1
 80009ac:	08f8      	lsrs	r0, r7, #3
 80009ae:	e6c8      	b.n	8000742 <__aeabi_dadd+0x25a>
 80009b0:	2c00      	cmp	r4, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_dadd+0x4ce>
 80009b4:	e081      	b.n	8000aba <__aeabi_dadd+0x5d2>
 80009b6:	4643      	mov	r3, r8
 80009b8:	430b      	orrs	r3, r1
 80009ba:	d115      	bne.n	80009e8 <__aeabi_dadd+0x500>
 80009bc:	2080      	movs	r0, #128	; 0x80
 80009be:	2500      	movs	r5, #0
 80009c0:	0300      	lsls	r0, r0, #12
 80009c2:	e6e3      	b.n	800078c <__aeabi_dadd+0x2a4>
 80009c4:	1a5c      	subs	r4, r3, r1
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	419b      	sbcs	r3, r3
 80009ca:	1bc7      	subs	r7, r0, r7
 80009cc:	425b      	negs	r3, r3
 80009ce:	2601      	movs	r6, #1
 80009d0:	1aff      	subs	r7, r7, r3
 80009d2:	e5da      	b.n	800058a <__aeabi_dadd+0xa2>
 80009d4:	0742      	lsls	r2, r0, #29
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	4313      	orrs	r3, r2
 80009da:	08c0      	lsrs	r0, r0, #3
 80009dc:	e6d2      	b.n	8000784 <__aeabi_dadd+0x29c>
 80009de:	0742      	lsls	r2, r0, #29
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	08c0      	lsrs	r0, r0, #3
 80009e6:	e6ac      	b.n	8000742 <__aeabi_dadd+0x25a>
 80009e8:	4643      	mov	r3, r8
 80009ea:	4642      	mov	r2, r8
 80009ec:	08c9      	lsrs	r1, r1, #3
 80009ee:	075b      	lsls	r3, r3, #29
 80009f0:	4655      	mov	r5, sl
 80009f2:	430b      	orrs	r3, r1
 80009f4:	08d0      	lsrs	r0, r2, #3
 80009f6:	e6c5      	b.n	8000784 <__aeabi_dadd+0x29c>
 80009f8:	4643      	mov	r3, r8
 80009fa:	4642      	mov	r2, r8
 80009fc:	075b      	lsls	r3, r3, #29
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	430b      	orrs	r3, r1
 8000a02:	08d0      	lsrs	r0, r2, #3
 8000a04:	e6be      	b.n	8000784 <__aeabi_dadd+0x29c>
 8000a06:	4303      	orrs	r3, r0
 8000a08:	001c      	movs	r4, r3
 8000a0a:	1e63      	subs	r3, r4, #1
 8000a0c:	419c      	sbcs	r4, r3
 8000a0e:	e6fc      	b.n	800080a <__aeabi_dadd+0x322>
 8000a10:	0002      	movs	r2, r0
 8000a12:	3c20      	subs	r4, #32
 8000a14:	40e2      	lsrs	r2, r4
 8000a16:	0014      	movs	r4, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	2a20      	cmp	r2, #32
 8000a1c:	d003      	beq.n	8000a26 <__aeabi_dadd+0x53e>
 8000a1e:	2540      	movs	r5, #64	; 0x40
 8000a20:	1aad      	subs	r5, r5, r2
 8000a22:	40a8      	lsls	r0, r5
 8000a24:	4303      	orrs	r3, r0
 8000a26:	1e58      	subs	r0, r3, #1
 8000a28:	4183      	sbcs	r3, r0
 8000a2a:	4323      	orrs	r3, r4
 8000a2c:	e775      	b.n	800091a <__aeabi_dadd+0x432>
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	d0e2      	beq.n	80009f8 <__aeabi_dadd+0x510>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d0cd      	beq.n	80009d4 <__aeabi_dadd+0x4ec>
 8000a38:	0742      	lsls	r2, r0, #29
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	0312      	lsls	r2, r2, #12
 8000a44:	4210      	tst	r0, r2
 8000a46:	d006      	beq.n	8000a56 <__aeabi_dadd+0x56e>
 8000a48:	08fc      	lsrs	r4, r7, #3
 8000a4a:	4214      	tst	r4, r2
 8000a4c:	d103      	bne.n	8000a56 <__aeabi_dadd+0x56e>
 8000a4e:	0020      	movs	r0, r4
 8000a50:	08cb      	lsrs	r3, r1, #3
 8000a52:	077a      	lsls	r2, r7, #29
 8000a54:	4313      	orrs	r3, r2
 8000a56:	0f5a      	lsrs	r2, r3, #29
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	0752      	lsls	r2, r2, #29
 8000a5c:	08db      	lsrs	r3, r3, #3
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	e690      	b.n	8000784 <__aeabi_dadd+0x29c>
 8000a62:	4643      	mov	r3, r8
 8000a64:	430b      	orrs	r3, r1
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x582>
 8000a68:	e709      	b.n	800087e <__aeabi_dadd+0x396>
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	08c9      	lsrs	r1, r1, #3
 8000a70:	075b      	lsls	r3, r3, #29
 8000a72:	4655      	mov	r5, sl
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08d0      	lsrs	r0, r2, #3
 8000a78:	e666      	b.n	8000748 <__aeabi_dadd+0x260>
 8000a7a:	1acc      	subs	r4, r1, r3
 8000a7c:	42a1      	cmp	r1, r4
 8000a7e:	4189      	sbcs	r1, r1
 8000a80:	1a3f      	subs	r7, r7, r0
 8000a82:	4249      	negs	r1, r1
 8000a84:	4655      	mov	r5, sl
 8000a86:	2601      	movs	r6, #1
 8000a88:	1a7f      	subs	r7, r7, r1
 8000a8a:	e57e      	b.n	800058a <__aeabi_dadd+0xa2>
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	1a5c      	subs	r4, r3, r1
 8000a90:	1a87      	subs	r7, r0, r2
 8000a92:	42a3      	cmp	r3, r4
 8000a94:	4192      	sbcs	r2, r2
 8000a96:	4252      	negs	r2, r2
 8000a98:	1abf      	subs	r7, r7, r2
 8000a9a:	023a      	lsls	r2, r7, #8
 8000a9c:	d53d      	bpl.n	8000b1a <__aeabi_dadd+0x632>
 8000a9e:	1acc      	subs	r4, r1, r3
 8000aa0:	42a1      	cmp	r1, r4
 8000aa2:	4189      	sbcs	r1, r1
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	1a1f      	subs	r7, r3, r0
 8000aaa:	4655      	mov	r5, sl
 8000aac:	1a7f      	subs	r7, r7, r1
 8000aae:	e595      	b.n	80005dc <__aeabi_dadd+0xf4>
 8000ab0:	077b      	lsls	r3, r7, #29
 8000ab2:	08c9      	lsrs	r1, r1, #3
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	08f8      	lsrs	r0, r7, #3
 8000ab8:	e643      	b.n	8000742 <__aeabi_dadd+0x25a>
 8000aba:	4644      	mov	r4, r8
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	430c      	orrs	r4, r1
 8000ac0:	d130      	bne.n	8000b24 <__aeabi_dadd+0x63c>
 8000ac2:	0742      	lsls	r2, r0, #29
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	08c0      	lsrs	r0, r0, #3
 8000ac8:	e65c      	b.n	8000784 <__aeabi_dadd+0x29c>
 8000aca:	077b      	lsls	r3, r7, #29
 8000acc:	08c9      	lsrs	r1, r1, #3
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	08f8      	lsrs	r0, r7, #3
 8000ad2:	e639      	b.n	8000748 <__aeabi_dadd+0x260>
 8000ad4:	185c      	adds	r4, r3, r1
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	419b      	sbcs	r3, r3
 8000ada:	4440      	add	r0, r8
 8000adc:	425b      	negs	r3, r3
 8000ade:	18c7      	adds	r7, r0, r3
 8000ae0:	023b      	lsls	r3, r7, #8
 8000ae2:	d400      	bmi.n	8000ae6 <__aeabi_dadd+0x5fe>
 8000ae4:	e625      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <__aeabi_dadd+0x674>)
 8000ae8:	2601      	movs	r6, #1
 8000aea:	401f      	ands	r7, r3
 8000aec:	e621      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000aee:	0004      	movs	r4, r0
 8000af0:	3a20      	subs	r2, #32
 8000af2:	40d4      	lsrs	r4, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	2a20      	cmp	r2, #32
 8000af8:	d004      	beq.n	8000b04 <__aeabi_dadd+0x61c>
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	4666      	mov	r6, ip
 8000afe:	1b92      	subs	r2, r2, r6
 8000b00:	4090      	lsls	r0, r2
 8000b02:	4303      	orrs	r3, r0
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	4193      	sbcs	r3, r2
 8000b08:	431c      	orrs	r4, r3
 8000b0a:	e67e      	b.n	800080a <__aeabi_dadd+0x322>
 8000b0c:	185c      	adds	r4, r3, r1
 8000b0e:	428c      	cmp	r4, r1
 8000b10:	4189      	sbcs	r1, r1
 8000b12:	4440      	add	r0, r8
 8000b14:	4249      	negs	r1, r1
 8000b16:	1847      	adds	r7, r0, r1
 8000b18:	e6dd      	b.n	80008d6 <__aeabi_dadd+0x3ee>
 8000b1a:	0023      	movs	r3, r4
 8000b1c:	433b      	orrs	r3, r7
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x63a>
 8000b20:	e6ad      	b.n	800087e <__aeabi_dadd+0x396>
 8000b22:	e606      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000b24:	0744      	lsls	r4, r0, #29
 8000b26:	4323      	orrs	r3, r4
 8000b28:	2480      	movs	r4, #128	; 0x80
 8000b2a:	08c0      	lsrs	r0, r0, #3
 8000b2c:	0324      	lsls	r4, r4, #12
 8000b2e:	4220      	tst	r0, r4
 8000b30:	d008      	beq.n	8000b44 <__aeabi_dadd+0x65c>
 8000b32:	4642      	mov	r2, r8
 8000b34:	08d6      	lsrs	r6, r2, #3
 8000b36:	4226      	tst	r6, r4
 8000b38:	d104      	bne.n	8000b44 <__aeabi_dadd+0x65c>
 8000b3a:	4655      	mov	r5, sl
 8000b3c:	0030      	movs	r0, r6
 8000b3e:	08cb      	lsrs	r3, r1, #3
 8000b40:	0751      	lsls	r1, r2, #29
 8000b42:	430b      	orrs	r3, r1
 8000b44:	0f5a      	lsrs	r2, r3, #29
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	0752      	lsls	r2, r2, #29
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	e619      	b.n	8000784 <__aeabi_dadd+0x29c>
 8000b50:	2300      	movs	r3, #0
 8000b52:	4a01      	ldr	r2, [pc, #4]	; (8000b58 <__aeabi_dadd+0x670>)
 8000b54:	001f      	movs	r7, r3
 8000b56:	e55e      	b.n	8000616 <__aeabi_dadd+0x12e>
 8000b58:	000007ff 	.word	0x000007ff
 8000b5c:	ff7fffff 	.word	0xff7fffff

08000b60 <__aeabi_ddiv>:
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	4657      	mov	r7, sl
 8000b64:	464e      	mov	r6, r9
 8000b66:	4645      	mov	r5, r8
 8000b68:	46de      	mov	lr, fp
 8000b6a:	b5e0      	push	{r5, r6, r7, lr}
 8000b6c:	4681      	mov	r9, r0
 8000b6e:	0005      	movs	r5, r0
 8000b70:	030c      	lsls	r4, r1, #12
 8000b72:	0048      	lsls	r0, r1, #1
 8000b74:	4692      	mov	sl, r2
 8000b76:	001f      	movs	r7, r3
 8000b78:	b085      	sub	sp, #20
 8000b7a:	0b24      	lsrs	r4, r4, #12
 8000b7c:	0d40      	lsrs	r0, r0, #21
 8000b7e:	0fce      	lsrs	r6, r1, #31
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_ddiv+0x26>
 8000b84:	e156      	b.n	8000e34 <__aeabi_ddiv+0x2d4>
 8000b86:	4bd4      	ldr	r3, [pc, #848]	; (8000ed8 <__aeabi_ddiv+0x378>)
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0x2e>
 8000b8c:	e172      	b.n	8000e74 <__aeabi_ddiv+0x314>
 8000b8e:	0f6b      	lsrs	r3, r5, #29
 8000b90:	00e4      	lsls	r4, r4, #3
 8000b92:	431c      	orrs	r4, r3
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	041b      	lsls	r3, r3, #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	4bcf      	ldr	r3, [pc, #828]	; (8000edc <__aeabi_ddiv+0x37c>)
 8000b9e:	00ed      	lsls	r5, r5, #3
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	4483      	add	fp, r0
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	033c      	lsls	r4, r7, #12
 8000bac:	007b      	lsls	r3, r7, #1
 8000bae:	4650      	mov	r0, sl
 8000bb0:	0b24      	lsrs	r4, r4, #12
 8000bb2:	0d5b      	lsrs	r3, r3, #21
 8000bb4:	0fff      	lsrs	r7, r7, #31
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_ddiv+0x5c>
 8000bba:	e11f      	b.n	8000dfc <__aeabi_ddiv+0x29c>
 8000bbc:	4ac6      	ldr	r2, [pc, #792]	; (8000ed8 <__aeabi_ddiv+0x378>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x64>
 8000bc2:	e162      	b.n	8000e8a <__aeabi_ddiv+0x32a>
 8000bc4:	49c5      	ldr	r1, [pc, #788]	; (8000edc <__aeabi_ddiv+0x37c>)
 8000bc6:	0f42      	lsrs	r2, r0, #29
 8000bc8:	468c      	mov	ip, r1
 8000bca:	00e4      	lsls	r4, r4, #3
 8000bcc:	4659      	mov	r1, fp
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	4463      	add	r3, ip
 8000bd4:	0412      	lsls	r2, r2, #16
 8000bd6:	1acb      	subs	r3, r1, r3
 8000bd8:	4314      	orrs	r4, r2
 8000bda:	469b      	mov	fp, r3
 8000bdc:	00c2      	lsls	r2, r0, #3
 8000bde:	2000      	movs	r0, #0
 8000be0:	0033      	movs	r3, r6
 8000be2:	407b      	eors	r3, r7
 8000be4:	469a      	mov	sl, r3
 8000be6:	464b      	mov	r3, r9
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d827      	bhi.n	8000c3c <__aeabi_ddiv+0xdc>
 8000bec:	49bc      	ldr	r1, [pc, #752]	; (8000ee0 <__aeabi_ddiv+0x380>)
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	58cb      	ldr	r3, [r1, r3]
 8000bf2:	469f      	mov	pc, r3
 8000bf4:	46b2      	mov	sl, r6
 8000bf6:	9b00      	ldr	r3, [sp, #0]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d016      	beq.n	8000c2a <__aeabi_ddiv+0xca>
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_ddiv+0xa2>
 8000c00:	e28e      	b.n	8001120 <__aeabi_ddiv+0x5c0>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d000      	beq.n	8000c08 <__aeabi_ddiv+0xa8>
 8000c06:	e0d9      	b.n	8000dbc <__aeabi_ddiv+0x25c>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2400      	movs	r4, #0
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	4652      	mov	r2, sl
 8000c10:	051b      	lsls	r3, r3, #20
 8000c12:	4323      	orrs	r3, r4
 8000c14:	07d2      	lsls	r2, r2, #31
 8000c16:	4313      	orrs	r3, r2
 8000c18:	0028      	movs	r0, r5
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	b005      	add	sp, #20
 8000c1e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c20:	46bb      	mov	fp, r7
 8000c22:	46b2      	mov	sl, r6
 8000c24:	46a9      	mov	r9, r5
 8000c26:	46a0      	mov	r8, r4
 8000c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	4baa      	ldr	r3, [pc, #680]	; (8000ed8 <__aeabi_ddiv+0x378>)
 8000c30:	e7ed      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000c32:	46ba      	mov	sl, r7
 8000c34:	46a0      	mov	r8, r4
 8000c36:	0015      	movs	r5, r2
 8000c38:	9000      	str	r0, [sp, #0]
 8000c3a:	e7dc      	b.n	8000bf6 <__aeabi_ddiv+0x96>
 8000c3c:	4544      	cmp	r4, r8
 8000c3e:	d200      	bcs.n	8000c42 <__aeabi_ddiv+0xe2>
 8000c40:	e1c7      	b.n	8000fd2 <__aeabi_ddiv+0x472>
 8000c42:	d100      	bne.n	8000c46 <__aeabi_ddiv+0xe6>
 8000c44:	e1c2      	b.n	8000fcc <__aeabi_ddiv+0x46c>
 8000c46:	2301      	movs	r3, #1
 8000c48:	425b      	negs	r3, r3
 8000c4a:	469c      	mov	ip, r3
 8000c4c:	002e      	movs	r6, r5
 8000c4e:	4640      	mov	r0, r8
 8000c50:	2500      	movs	r5, #0
 8000c52:	44e3      	add	fp, ip
 8000c54:	0223      	lsls	r3, r4, #8
 8000c56:	0e14      	lsrs	r4, r2, #24
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	0c1b      	lsrs	r3, r3, #16
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	0423      	lsls	r3, r4, #16
 8000c60:	0c1f      	lsrs	r7, r3, #16
 8000c62:	0212      	lsls	r2, r2, #8
 8000c64:	4649      	mov	r1, r9
 8000c66:	9200      	str	r2, [sp, #0]
 8000c68:	9701      	str	r7, [sp, #4]
 8000c6a:	f7ff fad9 	bl	8000220 <__aeabi_uidivmod>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	437a      	muls	r2, r7
 8000c72:	040b      	lsls	r3, r1, #16
 8000c74:	0c31      	lsrs	r1, r6, #16
 8000c76:	4680      	mov	r8, r0
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	d907      	bls.n	8000c8e <__aeabi_ddiv+0x12e>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	469c      	mov	ip, r3
 8000c84:	1909      	adds	r1, r1, r4
 8000c86:	44e0      	add	r8, ip
 8000c88:	428c      	cmp	r4, r1
 8000c8a:	d800      	bhi.n	8000c8e <__aeabi_ddiv+0x12e>
 8000c8c:	e207      	b.n	800109e <__aeabi_ddiv+0x53e>
 8000c8e:	1a88      	subs	r0, r1, r2
 8000c90:	4649      	mov	r1, r9
 8000c92:	f7ff fac5 	bl	8000220 <__aeabi_uidivmod>
 8000c96:	0409      	lsls	r1, r1, #16
 8000c98:	468c      	mov	ip, r1
 8000c9a:	0431      	lsls	r1, r6, #16
 8000c9c:	4666      	mov	r6, ip
 8000c9e:	9a01      	ldr	r2, [sp, #4]
 8000ca0:	0c09      	lsrs	r1, r1, #16
 8000ca2:	4342      	muls	r2, r0
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	4331      	orrs	r1, r6
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	d904      	bls.n	8000cb6 <__aeabi_ddiv+0x156>
 8000cac:	1909      	adds	r1, r1, r4
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	428c      	cmp	r4, r1
 8000cb2:	d800      	bhi.n	8000cb6 <__aeabi_ddiv+0x156>
 8000cb4:	e1ed      	b.n	8001092 <__aeabi_ddiv+0x532>
 8000cb6:	1a88      	subs	r0, r1, r2
 8000cb8:	4642      	mov	r2, r8
 8000cba:	0412      	lsls	r2, r2, #16
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	4641      	mov	r1, r8
 8000cc2:	9b00      	ldr	r3, [sp, #0]
 8000cc4:	040e      	lsls	r6, r1, #16
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	001f      	movs	r7, r3
 8000cca:	9302      	str	r3, [sp, #8]
 8000ccc:	9b00      	ldr	r3, [sp, #0]
 8000cce:	0c36      	lsrs	r6, r6, #16
 8000cd0:	041b      	lsls	r3, r3, #16
 8000cd2:	0c19      	lsrs	r1, r3, #16
 8000cd4:	000b      	movs	r3, r1
 8000cd6:	4373      	muls	r3, r6
 8000cd8:	0c12      	lsrs	r2, r2, #16
 8000cda:	437e      	muls	r6, r7
 8000cdc:	9103      	str	r1, [sp, #12]
 8000cde:	4351      	muls	r1, r2
 8000ce0:	437a      	muls	r2, r7
 8000ce2:	0c1f      	lsrs	r7, r3, #16
 8000ce4:	46bc      	mov	ip, r7
 8000ce6:	1876      	adds	r6, r6, r1
 8000ce8:	4466      	add	r6, ip
 8000cea:	42b1      	cmp	r1, r6
 8000cec:	d903      	bls.n	8000cf6 <__aeabi_ddiv+0x196>
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	468c      	mov	ip, r1
 8000cf4:	4462      	add	r2, ip
 8000cf6:	0c31      	lsrs	r1, r6, #16
 8000cf8:	188a      	adds	r2, r1, r2
 8000cfa:	0431      	lsls	r1, r6, #16
 8000cfc:	041e      	lsls	r6, r3, #16
 8000cfe:	0c36      	lsrs	r6, r6, #16
 8000d00:	198e      	adds	r6, r1, r6
 8000d02:	4290      	cmp	r0, r2
 8000d04:	d302      	bcc.n	8000d0c <__aeabi_ddiv+0x1ac>
 8000d06:	d112      	bne.n	8000d2e <__aeabi_ddiv+0x1ce>
 8000d08:	42b5      	cmp	r5, r6
 8000d0a:	d210      	bcs.n	8000d2e <__aeabi_ddiv+0x1ce>
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	1e59      	subs	r1, r3, #1
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	469c      	mov	ip, r3
 8000d14:	4465      	add	r5, ip
 8000d16:	001f      	movs	r7, r3
 8000d18:	429d      	cmp	r5, r3
 8000d1a:	419b      	sbcs	r3, r3
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	191b      	adds	r3, r3, r4
 8000d20:	18c0      	adds	r0, r0, r3
 8000d22:	4284      	cmp	r4, r0
 8000d24:	d200      	bcs.n	8000d28 <__aeabi_ddiv+0x1c8>
 8000d26:	e1a0      	b.n	800106a <__aeabi_ddiv+0x50a>
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x1cc>
 8000d2a:	e19b      	b.n	8001064 <__aeabi_ddiv+0x504>
 8000d2c:	4688      	mov	r8, r1
 8000d2e:	1bae      	subs	r6, r5, r6
 8000d30:	42b5      	cmp	r5, r6
 8000d32:	41ad      	sbcs	r5, r5
 8000d34:	1a80      	subs	r0, r0, r2
 8000d36:	426d      	negs	r5, r5
 8000d38:	1b40      	subs	r0, r0, r5
 8000d3a:	4284      	cmp	r4, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x1e0>
 8000d3e:	e1d5      	b.n	80010ec <__aeabi_ddiv+0x58c>
 8000d40:	4649      	mov	r1, r9
 8000d42:	f7ff fa6d 	bl	8000220 <__aeabi_uidivmod>
 8000d46:	9a01      	ldr	r2, [sp, #4]
 8000d48:	040b      	lsls	r3, r1, #16
 8000d4a:	4342      	muls	r2, r0
 8000d4c:	0c31      	lsrs	r1, r6, #16
 8000d4e:	0005      	movs	r5, r0
 8000d50:	4319      	orrs	r1, r3
 8000d52:	428a      	cmp	r2, r1
 8000d54:	d900      	bls.n	8000d58 <__aeabi_ddiv+0x1f8>
 8000d56:	e16c      	b.n	8001032 <__aeabi_ddiv+0x4d2>
 8000d58:	1a88      	subs	r0, r1, r2
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	f7ff fa60 	bl	8000220 <__aeabi_uidivmod>
 8000d60:	9a01      	ldr	r2, [sp, #4]
 8000d62:	0436      	lsls	r6, r6, #16
 8000d64:	4342      	muls	r2, r0
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	0c36      	lsrs	r6, r6, #16
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	430e      	orrs	r6, r1
 8000d6e:	42b2      	cmp	r2, r6
 8000d70:	d900      	bls.n	8000d74 <__aeabi_ddiv+0x214>
 8000d72:	e153      	b.n	800101c <__aeabi_ddiv+0x4bc>
 8000d74:	9803      	ldr	r0, [sp, #12]
 8000d76:	1ab6      	subs	r6, r6, r2
 8000d78:	0002      	movs	r2, r0
 8000d7a:	042d      	lsls	r5, r5, #16
 8000d7c:	431d      	orrs	r5, r3
 8000d7e:	9f02      	ldr	r7, [sp, #8]
 8000d80:	042b      	lsls	r3, r5, #16
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	435a      	muls	r2, r3
 8000d86:	437b      	muls	r3, r7
 8000d88:	469c      	mov	ip, r3
 8000d8a:	0c29      	lsrs	r1, r5, #16
 8000d8c:	4348      	muls	r0, r1
 8000d8e:	0c13      	lsrs	r3, r2, #16
 8000d90:	4484      	add	ip, r0
 8000d92:	4463      	add	r3, ip
 8000d94:	4379      	muls	r1, r7
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d903      	bls.n	8000da2 <__aeabi_ddiv+0x242>
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	0240      	lsls	r0, r0, #9
 8000d9e:	4684      	mov	ip, r0
 8000da0:	4461      	add	r1, ip
 8000da2:	0c18      	lsrs	r0, r3, #16
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c12      	lsrs	r2, r2, #16
 8000daa:	1841      	adds	r1, r0, r1
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	428e      	cmp	r6, r1
 8000db0:	d200      	bcs.n	8000db4 <__aeabi_ddiv+0x254>
 8000db2:	e0ff      	b.n	8000fb4 <__aeabi_ddiv+0x454>
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x258>
 8000db6:	e0fa      	b.n	8000fae <__aeabi_ddiv+0x44e>
 8000db8:	2301      	movs	r3, #1
 8000dba:	431d      	orrs	r5, r3
 8000dbc:	4a49      	ldr	r2, [pc, #292]	; (8000ee4 <__aeabi_ddiv+0x384>)
 8000dbe:	445a      	add	r2, fp
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_ddiv+0x266>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_ddiv+0x3bc>
 8000dc6:	076b      	lsls	r3, r5, #29
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_ddiv+0x26c>
 8000dca:	e13d      	b.n	8001048 <__aeabi_ddiv+0x4e8>
 8000dcc:	08ed      	lsrs	r5, r5, #3
 8000dce:	4643      	mov	r3, r8
 8000dd0:	01db      	lsls	r3, r3, #7
 8000dd2:	d506      	bpl.n	8000de2 <__aeabi_ddiv+0x282>
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <__aeabi_ddiv+0x388>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	4690      	mov	r8, r2
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	00d2      	lsls	r2, r2, #3
 8000de0:	445a      	add	r2, fp
 8000de2:	4b42      	ldr	r3, [pc, #264]	; (8000eec <__aeabi_ddiv+0x38c>)
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dd00      	ble.n	8000dea <__aeabi_ddiv+0x28a>
 8000de8:	e71f      	b.n	8000c2a <__aeabi_ddiv+0xca>
 8000dea:	4643      	mov	r3, r8
 8000dec:	075b      	lsls	r3, r3, #29
 8000dee:	431d      	orrs	r5, r3
 8000df0:	4643      	mov	r3, r8
 8000df2:	0552      	lsls	r2, r2, #21
 8000df4:	025c      	lsls	r4, r3, #9
 8000df6:	0b24      	lsrs	r4, r4, #12
 8000df8:	0d53      	lsrs	r3, r2, #21
 8000dfa:	e708      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000dfc:	4652      	mov	r2, sl
 8000dfe:	4322      	orrs	r2, r4
 8000e00:	d100      	bne.n	8000e04 <__aeabi_ddiv+0x2a4>
 8000e02:	e07b      	b.n	8000efc <__aeabi_ddiv+0x39c>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_ddiv+0x2aa>
 8000e08:	e0fa      	b.n	8001000 <__aeabi_ddiv+0x4a0>
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f001 f904 	bl	8002018 <__clzsi2>
 8000e10:	0002      	movs	r2, r0
 8000e12:	3a0b      	subs	r2, #11
 8000e14:	231d      	movs	r3, #29
 8000e16:	0001      	movs	r1, r0
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	4652      	mov	r2, sl
 8000e1c:	3908      	subs	r1, #8
 8000e1e:	40da      	lsrs	r2, r3
 8000e20:	408c      	lsls	r4, r1
 8000e22:	4314      	orrs	r4, r2
 8000e24:	4652      	mov	r2, sl
 8000e26:	408a      	lsls	r2, r1
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <__aeabi_ddiv+0x390>)
 8000e2a:	4458      	add	r0, fp
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	4483      	add	fp, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	e6d5      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d044      	beq.n	8000ec6 <__aeabi_ddiv+0x366>
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x2e2>
 8000e40:	e0ce      	b.n	8000fe0 <__aeabi_ddiv+0x480>
 8000e42:	0020      	movs	r0, r4
 8000e44:	f001 f8e8 	bl	8002018 <__clzsi2>
 8000e48:	0001      	movs	r1, r0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	390b      	subs	r1, #11
 8000e4e:	231d      	movs	r3, #29
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	4649      	mov	r1, r9
 8000e54:	0010      	movs	r0, r2
 8000e56:	40d9      	lsrs	r1, r3
 8000e58:	3808      	subs	r0, #8
 8000e5a:	4084      	lsls	r4, r0
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	464d      	mov	r5, r9
 8000e60:	4323      	orrs	r3, r4
 8000e62:	4698      	mov	r8, r3
 8000e64:	4085      	lsls	r5, r0
 8000e66:	4823      	ldr	r0, [pc, #140]	; (8000ef4 <__aeabi_ddiv+0x394>)
 8000e68:	1a83      	subs	r3, r0, r2
 8000e6a:	469b      	mov	fp, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	e69a      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000e74:	464b      	mov	r3, r9
 8000e76:	4323      	orrs	r3, r4
 8000e78:	4698      	mov	r8, r3
 8000e7a:	d11d      	bne.n	8000eb8 <__aeabi_ddiv+0x358>
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	4699      	mov	r9, r3
 8000e80:	3b06      	subs	r3, #6
 8000e82:	2500      	movs	r5, #0
 8000e84:	4683      	mov	fp, r0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e68f      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000e8a:	4652      	mov	r2, sl
 8000e8c:	4322      	orrs	r2, r4
 8000e8e:	d109      	bne.n	8000ea4 <__aeabi_ddiv+0x344>
 8000e90:	2302      	movs	r3, #2
 8000e92:	4649      	mov	r1, r9
 8000e94:	4319      	orrs	r1, r3
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <__aeabi_ddiv+0x398>)
 8000e98:	4689      	mov	r9, r1
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	44e3      	add	fp, ip
 8000ea2:	e69d      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <__aeabi_ddiv+0x398>)
 8000eac:	4691      	mov	r9, r2
 8000eae:	469c      	mov	ip, r3
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	44e3      	add	fp, ip
 8000eb6:	e693      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000eb8:	230c      	movs	r3, #12
 8000eba:	4699      	mov	r9, r3
 8000ebc:	3b09      	subs	r3, #9
 8000ebe:	46a0      	mov	r8, r4
 8000ec0:	4683      	mov	fp, r0
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	e671      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	4699      	mov	r9, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	469b      	mov	fp, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	e669      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	08006d4c 	.word	0x08006d4c
 8000ee4:	000003ff 	.word	0x000003ff
 8000ee8:	feffffff 	.word	0xfeffffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	000003f3 	.word	0x000003f3
 8000ef4:	fffffc0d 	.word	0xfffffc0d
 8000ef8:	fffff801 	.word	0xfffff801
 8000efc:	4649      	mov	r1, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	4319      	orrs	r1, r3
 8000f02:	4689      	mov	r9, r1
 8000f04:	2400      	movs	r4, #0
 8000f06:	2001      	movs	r0, #1
 8000f08:	e66a      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2480      	movs	r4, #128	; 0x80
 8000f0e:	469a      	mov	sl, r3
 8000f10:	2500      	movs	r5, #0
 8000f12:	4b8a      	ldr	r3, [pc, #552]	; (800113c <__aeabi_ddiv+0x5dc>)
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	e67a      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f18:	2501      	movs	r5, #1
 8000f1a:	426d      	negs	r5, r5
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	2b38      	cmp	r3, #56	; 0x38
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_ddiv+0x3c6>
 8000f24:	e670      	b.n	8000c08 <__aeabi_ddiv+0xa8>
 8000f26:	2b1f      	cmp	r3, #31
 8000f28:	dc00      	bgt.n	8000f2c <__aeabi_ddiv+0x3cc>
 8000f2a:	e0bf      	b.n	80010ac <__aeabi_ddiv+0x54c>
 8000f2c:	211f      	movs	r1, #31
 8000f2e:	4249      	negs	r1, r1
 8000f30:	1a8a      	subs	r2, r1, r2
 8000f32:	4641      	mov	r1, r8
 8000f34:	40d1      	lsrs	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	2b20      	cmp	r3, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_ddiv+0x3e6>
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4b80      	ldr	r3, [pc, #512]	; (8001140 <__aeabi_ddiv+0x5e0>)
 8000f40:	445b      	add	r3, fp
 8000f42:	4099      	lsls	r1, r3
 8000f44:	430d      	orrs	r5, r1
 8000f46:	1e6b      	subs	r3, r5, #1
 8000f48:	419d      	sbcs	r5, r3
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	432a      	orrs	r2, r5
 8000f4e:	001d      	movs	r5, r3
 8000f50:	2400      	movs	r4, #0
 8000f52:	4015      	ands	r5, r2
 8000f54:	4213      	tst	r3, r2
 8000f56:	d100      	bne.n	8000f5a <__aeabi_ddiv+0x3fa>
 8000f58:	e0d4      	b.n	8001104 <__aeabi_ddiv+0x5a4>
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4011      	ands	r1, r2
 8000f60:	2904      	cmp	r1, #4
 8000f62:	d100      	bne.n	8000f66 <__aeabi_ddiv+0x406>
 8000f64:	e0cb      	b.n	80010fe <__aeabi_ddiv+0x59e>
 8000f66:	1d11      	adds	r1, r2, #4
 8000f68:	4291      	cmp	r1, r2
 8000f6a:	4192      	sbcs	r2, r2
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	189b      	adds	r3, r3, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	0219      	lsls	r1, r3, #8
 8000f74:	d400      	bmi.n	8000f78 <__aeabi_ddiv+0x418>
 8000f76:	e0c2      	b.n	80010fe <__aeabi_ddiv+0x59e>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	2500      	movs	r5, #0
 8000f7e:	e646      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	4641      	mov	r1, r8
 8000f84:	031b      	lsls	r3, r3, #12
 8000f86:	4219      	tst	r1, r3
 8000f88:	d008      	beq.n	8000f9c <__aeabi_ddiv+0x43c>
 8000f8a:	421c      	tst	r4, r3
 8000f8c:	d106      	bne.n	8000f9c <__aeabi_ddiv+0x43c>
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	0324      	lsls	r4, r4, #12
 8000f92:	46ba      	mov	sl, r7
 8000f94:	0015      	movs	r5, r2
 8000f96:	4b69      	ldr	r3, [pc, #420]	; (800113c <__aeabi_ddiv+0x5dc>)
 8000f98:	0b24      	lsrs	r4, r4, #12
 8000f9a:	e638      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	431c      	orrs	r4, r3
 8000fa4:	0324      	lsls	r4, r4, #12
 8000fa6:	46b2      	mov	sl, r6
 8000fa8:	4b64      	ldr	r3, [pc, #400]	; (800113c <__aeabi_ddiv+0x5dc>)
 8000faa:	0b24      	lsrs	r4, r4, #12
 8000fac:	e62f      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_ddiv+0x454>
 8000fb2:	e703      	b.n	8000dbc <__aeabi_ddiv+0x25c>
 8000fb4:	19a6      	adds	r6, r4, r6
 8000fb6:	1e68      	subs	r0, r5, #1
 8000fb8:	42a6      	cmp	r6, r4
 8000fba:	d200      	bcs.n	8000fbe <__aeabi_ddiv+0x45e>
 8000fbc:	e08d      	b.n	80010da <__aeabi_ddiv+0x57a>
 8000fbe:	428e      	cmp	r6, r1
 8000fc0:	d200      	bcs.n	8000fc4 <__aeabi_ddiv+0x464>
 8000fc2:	e0a3      	b.n	800110c <__aeabi_ddiv+0x5ac>
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_ddiv+0x468>
 8000fc6:	e0b3      	b.n	8001130 <__aeabi_ddiv+0x5d0>
 8000fc8:	0005      	movs	r5, r0
 8000fca:	e6f5      	b.n	8000db8 <__aeabi_ddiv+0x258>
 8000fcc:	42aa      	cmp	r2, r5
 8000fce:	d900      	bls.n	8000fd2 <__aeabi_ddiv+0x472>
 8000fd0:	e639      	b.n	8000c46 <__aeabi_ddiv+0xe6>
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	07de      	lsls	r6, r3, #31
 8000fd6:	0858      	lsrs	r0, r3, #1
 8000fd8:	086b      	lsrs	r3, r5, #1
 8000fda:	431e      	orrs	r6, r3
 8000fdc:	07ed      	lsls	r5, r5, #31
 8000fde:	e639      	b.n	8000c54 <__aeabi_ddiv+0xf4>
 8000fe0:	4648      	mov	r0, r9
 8000fe2:	f001 f819 	bl	8002018 <__clzsi2>
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	0002      	movs	r2, r0
 8000fea:	3115      	adds	r1, #21
 8000fec:	3220      	adds	r2, #32
 8000fee:	291c      	cmp	r1, #28
 8000ff0:	dc00      	bgt.n	8000ff4 <__aeabi_ddiv+0x494>
 8000ff2:	e72c      	b.n	8000e4e <__aeabi_ddiv+0x2ee>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4083      	lsls	r3, r0
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	e732      	b.n	8000e66 <__aeabi_ddiv+0x306>
 8001000:	f001 f80a 	bl	8002018 <__clzsi2>
 8001004:	0003      	movs	r3, r0
 8001006:	001a      	movs	r2, r3
 8001008:	3215      	adds	r2, #21
 800100a:	3020      	adds	r0, #32
 800100c:	2a1c      	cmp	r2, #28
 800100e:	dc00      	bgt.n	8001012 <__aeabi_ddiv+0x4b2>
 8001010:	e700      	b.n	8000e14 <__aeabi_ddiv+0x2b4>
 8001012:	4654      	mov	r4, sl
 8001014:	3b08      	subs	r3, #8
 8001016:	2200      	movs	r2, #0
 8001018:	409c      	lsls	r4, r3
 800101a:	e705      	b.n	8000e28 <__aeabi_ddiv+0x2c8>
 800101c:	1936      	adds	r6, r6, r4
 800101e:	3b01      	subs	r3, #1
 8001020:	42b4      	cmp	r4, r6
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x4c6>
 8001024:	e6a6      	b.n	8000d74 <__aeabi_ddiv+0x214>
 8001026:	42b2      	cmp	r2, r6
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x4cc>
 800102a:	e6a3      	b.n	8000d74 <__aeabi_ddiv+0x214>
 800102c:	1e83      	subs	r3, r0, #2
 800102e:	1936      	adds	r6, r6, r4
 8001030:	e6a0      	b.n	8000d74 <__aeabi_ddiv+0x214>
 8001032:	1909      	adds	r1, r1, r4
 8001034:	3d01      	subs	r5, #1
 8001036:	428c      	cmp	r4, r1
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x4dc>
 800103a:	e68d      	b.n	8000d58 <__aeabi_ddiv+0x1f8>
 800103c:	428a      	cmp	r2, r1
 800103e:	d800      	bhi.n	8001042 <__aeabi_ddiv+0x4e2>
 8001040:	e68a      	b.n	8000d58 <__aeabi_ddiv+0x1f8>
 8001042:	1e85      	subs	r5, r0, #2
 8001044:	1909      	adds	r1, r1, r4
 8001046:	e687      	b.n	8000d58 <__aeabi_ddiv+0x1f8>
 8001048:	230f      	movs	r3, #15
 800104a:	402b      	ands	r3, r5
 800104c:	2b04      	cmp	r3, #4
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x4f2>
 8001050:	e6bc      	b.n	8000dcc <__aeabi_ddiv+0x26c>
 8001052:	2305      	movs	r3, #5
 8001054:	425b      	negs	r3, r3
 8001056:	42ab      	cmp	r3, r5
 8001058:	419b      	sbcs	r3, r3
 800105a:	3504      	adds	r5, #4
 800105c:	425b      	negs	r3, r3
 800105e:	08ed      	lsrs	r5, r5, #3
 8001060:	4498      	add	r8, r3
 8001062:	e6b4      	b.n	8000dce <__aeabi_ddiv+0x26e>
 8001064:	42af      	cmp	r7, r5
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x50a>
 8001068:	e660      	b.n	8000d2c <__aeabi_ddiv+0x1cc>
 800106a:	4282      	cmp	r2, r0
 800106c:	d804      	bhi.n	8001078 <__aeabi_ddiv+0x518>
 800106e:	d000      	beq.n	8001072 <__aeabi_ddiv+0x512>
 8001070:	e65c      	b.n	8000d2c <__aeabi_ddiv+0x1cc>
 8001072:	42ae      	cmp	r6, r5
 8001074:	d800      	bhi.n	8001078 <__aeabi_ddiv+0x518>
 8001076:	e659      	b.n	8000d2c <__aeabi_ddiv+0x1cc>
 8001078:	2302      	movs	r3, #2
 800107a:	425b      	negs	r3, r3
 800107c:	469c      	mov	ip, r3
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	44e0      	add	r8, ip
 8001082:	469c      	mov	ip, r3
 8001084:	4465      	add	r5, ip
 8001086:	429d      	cmp	r5, r3
 8001088:	419b      	sbcs	r3, r3
 800108a:	425b      	negs	r3, r3
 800108c:	191b      	adds	r3, r3, r4
 800108e:	18c0      	adds	r0, r0, r3
 8001090:	e64d      	b.n	8000d2e <__aeabi_ddiv+0x1ce>
 8001092:	428a      	cmp	r2, r1
 8001094:	d800      	bhi.n	8001098 <__aeabi_ddiv+0x538>
 8001096:	e60e      	b.n	8000cb6 <__aeabi_ddiv+0x156>
 8001098:	1e83      	subs	r3, r0, #2
 800109a:	1909      	adds	r1, r1, r4
 800109c:	e60b      	b.n	8000cb6 <__aeabi_ddiv+0x156>
 800109e:	428a      	cmp	r2, r1
 80010a0:	d800      	bhi.n	80010a4 <__aeabi_ddiv+0x544>
 80010a2:	e5f4      	b.n	8000c8e <__aeabi_ddiv+0x12e>
 80010a4:	1e83      	subs	r3, r0, #2
 80010a6:	4698      	mov	r8, r3
 80010a8:	1909      	adds	r1, r1, r4
 80010aa:	e5f0      	b.n	8000c8e <__aeabi_ddiv+0x12e>
 80010ac:	4925      	ldr	r1, [pc, #148]	; (8001144 <__aeabi_ddiv+0x5e4>)
 80010ae:	0028      	movs	r0, r5
 80010b0:	4459      	add	r1, fp
 80010b2:	408d      	lsls	r5, r1
 80010b4:	4642      	mov	r2, r8
 80010b6:	408a      	lsls	r2, r1
 80010b8:	1e69      	subs	r1, r5, #1
 80010ba:	418d      	sbcs	r5, r1
 80010bc:	4641      	mov	r1, r8
 80010be:	40d8      	lsrs	r0, r3
 80010c0:	40d9      	lsrs	r1, r3
 80010c2:	4302      	orrs	r2, r0
 80010c4:	432a      	orrs	r2, r5
 80010c6:	000b      	movs	r3, r1
 80010c8:	0751      	lsls	r1, r2, #29
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x56e>
 80010cc:	e751      	b.n	8000f72 <__aeabi_ddiv+0x412>
 80010ce:	210f      	movs	r1, #15
 80010d0:	4011      	ands	r1, r2
 80010d2:	2904      	cmp	r1, #4
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x578>
 80010d6:	e746      	b.n	8000f66 <__aeabi_ddiv+0x406>
 80010d8:	e74b      	b.n	8000f72 <__aeabi_ddiv+0x412>
 80010da:	0005      	movs	r5, r0
 80010dc:	428e      	cmp	r6, r1
 80010de:	d000      	beq.n	80010e2 <__aeabi_ddiv+0x582>
 80010e0:	e66a      	b.n	8000db8 <__aeabi_ddiv+0x258>
 80010e2:	9a00      	ldr	r2, [sp, #0]
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d000      	beq.n	80010ea <__aeabi_ddiv+0x58a>
 80010e8:	e666      	b.n	8000db8 <__aeabi_ddiv+0x258>
 80010ea:	e667      	b.n	8000dbc <__aeabi_ddiv+0x25c>
 80010ec:	4a16      	ldr	r2, [pc, #88]	; (8001148 <__aeabi_ddiv+0x5e8>)
 80010ee:	445a      	add	r2, fp
 80010f0:	2a00      	cmp	r2, #0
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_ddiv+0x596>
 80010f4:	e710      	b.n	8000f18 <__aeabi_ddiv+0x3b8>
 80010f6:	2301      	movs	r3, #1
 80010f8:	2500      	movs	r5, #0
 80010fa:	4498      	add	r8, r3
 80010fc:	e667      	b.n	8000dce <__aeabi_ddiv+0x26e>
 80010fe:	075d      	lsls	r5, r3, #29
 8001100:	025b      	lsls	r3, r3, #9
 8001102:	0b1c      	lsrs	r4, r3, #12
 8001104:	08d2      	lsrs	r2, r2, #3
 8001106:	2300      	movs	r3, #0
 8001108:	4315      	orrs	r5, r2
 800110a:	e580      	b.n	8000c0e <__aeabi_ddiv+0xae>
 800110c:	9800      	ldr	r0, [sp, #0]
 800110e:	3d02      	subs	r5, #2
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	4282      	cmp	r2, r0
 8001114:	41bf      	sbcs	r7, r7
 8001116:	427f      	negs	r7, r7
 8001118:	193c      	adds	r4, r7, r4
 800111a:	1936      	adds	r6, r6, r4
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	e7dd      	b.n	80010dc <__aeabi_ddiv+0x57c>
 8001120:	2480      	movs	r4, #128	; 0x80
 8001122:	4643      	mov	r3, r8
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	431c      	orrs	r4, r3
 8001128:	0324      	lsls	r4, r4, #12
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <__aeabi_ddiv+0x5dc>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e56e      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8001130:	9a00      	ldr	r2, [sp, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3ea      	bcc.n	800110c <__aeabi_ddiv+0x5ac>
 8001136:	0005      	movs	r5, r0
 8001138:	e7d3      	b.n	80010e2 <__aeabi_ddiv+0x582>
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	000007ff 	.word	0x000007ff
 8001140:	0000043e 	.word	0x0000043e
 8001144:	0000041e 	.word	0x0000041e
 8001148:	000003ff 	.word	0x000003ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464e      	mov	r6, r9
 8001150:	4645      	mov	r5, r8
 8001152:	46de      	mov	lr, fp
 8001154:	4657      	mov	r7, sl
 8001156:	4690      	mov	r8, r2
 8001158:	b5e0      	push	{r5, r6, r7, lr}
 800115a:	0017      	movs	r7, r2
 800115c:	031a      	lsls	r2, r3, #12
 800115e:	0b12      	lsrs	r2, r2, #12
 8001160:	0005      	movs	r5, r0
 8001162:	4684      	mov	ip, r0
 8001164:	4819      	ldr	r0, [pc, #100]	; (80011cc <__eqdf2+0x80>)
 8001166:	030e      	lsls	r6, r1, #12
 8001168:	004c      	lsls	r4, r1, #1
 800116a:	4691      	mov	r9, r2
 800116c:	005a      	lsls	r2, r3, #1
 800116e:	0fdb      	lsrs	r3, r3, #31
 8001170:	469b      	mov	fp, r3
 8001172:	0b36      	lsrs	r6, r6, #12
 8001174:	0d64      	lsrs	r4, r4, #21
 8001176:	0fc9      	lsrs	r1, r1, #31
 8001178:	0d52      	lsrs	r2, r2, #21
 800117a:	4284      	cmp	r4, r0
 800117c:	d019      	beq.n	80011b2 <__eqdf2+0x66>
 800117e:	4282      	cmp	r2, r0
 8001180:	d010      	beq.n	80011a4 <__eqdf2+0x58>
 8001182:	2001      	movs	r0, #1
 8001184:	4294      	cmp	r4, r2
 8001186:	d10e      	bne.n	80011a6 <__eqdf2+0x5a>
 8001188:	454e      	cmp	r6, r9
 800118a:	d10c      	bne.n	80011a6 <__eqdf2+0x5a>
 800118c:	2001      	movs	r0, #1
 800118e:	45c4      	cmp	ip, r8
 8001190:	d109      	bne.n	80011a6 <__eqdf2+0x5a>
 8001192:	4559      	cmp	r1, fp
 8001194:	d017      	beq.n	80011c6 <__eqdf2+0x7a>
 8001196:	2c00      	cmp	r4, #0
 8001198:	d105      	bne.n	80011a6 <__eqdf2+0x5a>
 800119a:	0030      	movs	r0, r6
 800119c:	4328      	orrs	r0, r5
 800119e:	1e43      	subs	r3, r0, #1
 80011a0:	4198      	sbcs	r0, r3
 80011a2:	e000      	b.n	80011a6 <__eqdf2+0x5a>
 80011a4:	2001      	movs	r0, #1
 80011a6:	bcf0      	pop	{r4, r5, r6, r7}
 80011a8:	46bb      	mov	fp, r7
 80011aa:	46b2      	mov	sl, r6
 80011ac:	46a9      	mov	r9, r5
 80011ae:	46a0      	mov	r8, r4
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b2:	0033      	movs	r3, r6
 80011b4:	2001      	movs	r0, #1
 80011b6:	432b      	orrs	r3, r5
 80011b8:	d1f5      	bne.n	80011a6 <__eqdf2+0x5a>
 80011ba:	42a2      	cmp	r2, r4
 80011bc:	d1f3      	bne.n	80011a6 <__eqdf2+0x5a>
 80011be:	464b      	mov	r3, r9
 80011c0:	433b      	orrs	r3, r7
 80011c2:	d1f0      	bne.n	80011a6 <__eqdf2+0x5a>
 80011c4:	e7e2      	b.n	800118c <__eqdf2+0x40>
 80011c6:	2000      	movs	r0, #0
 80011c8:	e7ed      	b.n	80011a6 <__eqdf2+0x5a>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	000007ff 	.word	0x000007ff

080011d0 <__gedf2>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	4647      	mov	r7, r8
 80011d4:	46ce      	mov	lr, r9
 80011d6:	0004      	movs	r4, r0
 80011d8:	0018      	movs	r0, r3
 80011da:	0016      	movs	r6, r2
 80011dc:	031b      	lsls	r3, r3, #12
 80011de:	0b1b      	lsrs	r3, r3, #12
 80011e0:	4d2d      	ldr	r5, [pc, #180]	; (8001298 <__gedf2+0xc8>)
 80011e2:	004a      	lsls	r2, r1, #1
 80011e4:	4699      	mov	r9, r3
 80011e6:	b580      	push	{r7, lr}
 80011e8:	0043      	lsls	r3, r0, #1
 80011ea:	030f      	lsls	r7, r1, #12
 80011ec:	46a4      	mov	ip, r4
 80011ee:	46b0      	mov	r8, r6
 80011f0:	0b3f      	lsrs	r7, r7, #12
 80011f2:	0d52      	lsrs	r2, r2, #21
 80011f4:	0fc9      	lsrs	r1, r1, #31
 80011f6:	0d5b      	lsrs	r3, r3, #21
 80011f8:	0fc0      	lsrs	r0, r0, #31
 80011fa:	42aa      	cmp	r2, r5
 80011fc:	d021      	beq.n	8001242 <__gedf2+0x72>
 80011fe:	42ab      	cmp	r3, r5
 8001200:	d013      	beq.n	800122a <__gedf2+0x5a>
 8001202:	2a00      	cmp	r2, #0
 8001204:	d122      	bne.n	800124c <__gedf2+0x7c>
 8001206:	433c      	orrs	r4, r7
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <__gedf2+0x42>
 800120c:	464d      	mov	r5, r9
 800120e:	432e      	orrs	r6, r5
 8001210:	d022      	beq.n	8001258 <__gedf2+0x88>
 8001212:	2c00      	cmp	r4, #0
 8001214:	d010      	beq.n	8001238 <__gedf2+0x68>
 8001216:	4281      	cmp	r1, r0
 8001218:	d022      	beq.n	8001260 <__gedf2+0x90>
 800121a:	2002      	movs	r0, #2
 800121c:	3901      	subs	r1, #1
 800121e:	4008      	ands	r0, r1
 8001220:	3801      	subs	r0, #1
 8001222:	bcc0      	pop	{r6, r7}
 8001224:	46b9      	mov	r9, r7
 8001226:	46b0      	mov	r8, r6
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122a:	464d      	mov	r5, r9
 800122c:	432e      	orrs	r6, r5
 800122e:	d129      	bne.n	8001284 <__gedf2+0xb4>
 8001230:	2a00      	cmp	r2, #0
 8001232:	d1f0      	bne.n	8001216 <__gedf2+0x46>
 8001234:	433c      	orrs	r4, r7
 8001236:	d1ee      	bne.n	8001216 <__gedf2+0x46>
 8001238:	2800      	cmp	r0, #0
 800123a:	d1f2      	bne.n	8001222 <__gedf2+0x52>
 800123c:	2001      	movs	r0, #1
 800123e:	4240      	negs	r0, r0
 8001240:	e7ef      	b.n	8001222 <__gedf2+0x52>
 8001242:	003d      	movs	r5, r7
 8001244:	4325      	orrs	r5, r4
 8001246:	d11d      	bne.n	8001284 <__gedf2+0xb4>
 8001248:	4293      	cmp	r3, r2
 800124a:	d0ee      	beq.n	800122a <__gedf2+0x5a>
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e2      	bne.n	8001216 <__gedf2+0x46>
 8001250:	464c      	mov	r4, r9
 8001252:	4326      	orrs	r6, r4
 8001254:	d1df      	bne.n	8001216 <__gedf2+0x46>
 8001256:	e7e0      	b.n	800121a <__gedf2+0x4a>
 8001258:	2000      	movs	r0, #0
 800125a:	2c00      	cmp	r4, #0
 800125c:	d0e1      	beq.n	8001222 <__gedf2+0x52>
 800125e:	e7dc      	b.n	800121a <__gedf2+0x4a>
 8001260:	429a      	cmp	r2, r3
 8001262:	dc0a      	bgt.n	800127a <__gedf2+0xaa>
 8001264:	dbe8      	blt.n	8001238 <__gedf2+0x68>
 8001266:	454f      	cmp	r7, r9
 8001268:	d8d7      	bhi.n	800121a <__gedf2+0x4a>
 800126a:	d00e      	beq.n	800128a <__gedf2+0xba>
 800126c:	2000      	movs	r0, #0
 800126e:	454f      	cmp	r7, r9
 8001270:	d2d7      	bcs.n	8001222 <__gedf2+0x52>
 8001272:	2900      	cmp	r1, #0
 8001274:	d0e2      	beq.n	800123c <__gedf2+0x6c>
 8001276:	0008      	movs	r0, r1
 8001278:	e7d3      	b.n	8001222 <__gedf2+0x52>
 800127a:	4243      	negs	r3, r0
 800127c:	4158      	adcs	r0, r3
 800127e:	0040      	lsls	r0, r0, #1
 8001280:	3801      	subs	r0, #1
 8001282:	e7ce      	b.n	8001222 <__gedf2+0x52>
 8001284:	2002      	movs	r0, #2
 8001286:	4240      	negs	r0, r0
 8001288:	e7cb      	b.n	8001222 <__gedf2+0x52>
 800128a:	45c4      	cmp	ip, r8
 800128c:	d8c5      	bhi.n	800121a <__gedf2+0x4a>
 800128e:	2000      	movs	r0, #0
 8001290:	45c4      	cmp	ip, r8
 8001292:	d2c6      	bcs.n	8001222 <__gedf2+0x52>
 8001294:	e7ed      	b.n	8001272 <__gedf2+0xa2>
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	000007ff 	.word	0x000007ff

0800129c <__ledf2>:
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	4647      	mov	r7, r8
 80012a0:	46ce      	mov	lr, r9
 80012a2:	0004      	movs	r4, r0
 80012a4:	0018      	movs	r0, r3
 80012a6:	0016      	movs	r6, r2
 80012a8:	031b      	lsls	r3, r3, #12
 80012aa:	0b1b      	lsrs	r3, r3, #12
 80012ac:	4d2c      	ldr	r5, [pc, #176]	; (8001360 <__ledf2+0xc4>)
 80012ae:	004a      	lsls	r2, r1, #1
 80012b0:	4699      	mov	r9, r3
 80012b2:	b580      	push	{r7, lr}
 80012b4:	0043      	lsls	r3, r0, #1
 80012b6:	030f      	lsls	r7, r1, #12
 80012b8:	46a4      	mov	ip, r4
 80012ba:	46b0      	mov	r8, r6
 80012bc:	0b3f      	lsrs	r7, r7, #12
 80012be:	0d52      	lsrs	r2, r2, #21
 80012c0:	0fc9      	lsrs	r1, r1, #31
 80012c2:	0d5b      	lsrs	r3, r3, #21
 80012c4:	0fc0      	lsrs	r0, r0, #31
 80012c6:	42aa      	cmp	r2, r5
 80012c8:	d00d      	beq.n	80012e6 <__ledf2+0x4a>
 80012ca:	42ab      	cmp	r3, r5
 80012cc:	d010      	beq.n	80012f0 <__ledf2+0x54>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d127      	bne.n	8001322 <__ledf2+0x86>
 80012d2:	433c      	orrs	r4, r7
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d111      	bne.n	80012fc <__ledf2+0x60>
 80012d8:	464d      	mov	r5, r9
 80012da:	432e      	orrs	r6, r5
 80012dc:	d10e      	bne.n	80012fc <__ledf2+0x60>
 80012de:	2000      	movs	r0, #0
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d015      	beq.n	8001310 <__ledf2+0x74>
 80012e4:	e00e      	b.n	8001304 <__ledf2+0x68>
 80012e6:	003d      	movs	r5, r7
 80012e8:	4325      	orrs	r5, r4
 80012ea:	d110      	bne.n	800130e <__ledf2+0x72>
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d118      	bne.n	8001322 <__ledf2+0x86>
 80012f0:	464d      	mov	r5, r9
 80012f2:	432e      	orrs	r6, r5
 80012f4:	d10b      	bne.n	800130e <__ledf2+0x72>
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d102      	bne.n	8001300 <__ledf2+0x64>
 80012fa:	433c      	orrs	r4, r7
 80012fc:	2c00      	cmp	r4, #0
 80012fe:	d00b      	beq.n	8001318 <__ledf2+0x7c>
 8001300:	4281      	cmp	r1, r0
 8001302:	d014      	beq.n	800132e <__ledf2+0x92>
 8001304:	2002      	movs	r0, #2
 8001306:	3901      	subs	r1, #1
 8001308:	4008      	ands	r0, r1
 800130a:	3801      	subs	r0, #1
 800130c:	e000      	b.n	8001310 <__ledf2+0x74>
 800130e:	2002      	movs	r0, #2
 8001310:	bcc0      	pop	{r6, r7}
 8001312:	46b9      	mov	r9, r7
 8001314:	46b0      	mov	r8, r6
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001318:	2800      	cmp	r0, #0
 800131a:	d1f9      	bne.n	8001310 <__ledf2+0x74>
 800131c:	2001      	movs	r0, #1
 800131e:	4240      	negs	r0, r0
 8001320:	e7f6      	b.n	8001310 <__ledf2+0x74>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1ec      	bne.n	8001300 <__ledf2+0x64>
 8001326:	464c      	mov	r4, r9
 8001328:	4326      	orrs	r6, r4
 800132a:	d1e9      	bne.n	8001300 <__ledf2+0x64>
 800132c:	e7ea      	b.n	8001304 <__ledf2+0x68>
 800132e:	429a      	cmp	r2, r3
 8001330:	dd04      	ble.n	800133c <__ledf2+0xa0>
 8001332:	4243      	negs	r3, r0
 8001334:	4158      	adcs	r0, r3
 8001336:	0040      	lsls	r0, r0, #1
 8001338:	3801      	subs	r0, #1
 800133a:	e7e9      	b.n	8001310 <__ledf2+0x74>
 800133c:	429a      	cmp	r2, r3
 800133e:	dbeb      	blt.n	8001318 <__ledf2+0x7c>
 8001340:	454f      	cmp	r7, r9
 8001342:	d8df      	bhi.n	8001304 <__ledf2+0x68>
 8001344:	d006      	beq.n	8001354 <__ledf2+0xb8>
 8001346:	2000      	movs	r0, #0
 8001348:	454f      	cmp	r7, r9
 800134a:	d2e1      	bcs.n	8001310 <__ledf2+0x74>
 800134c:	2900      	cmp	r1, #0
 800134e:	d0e5      	beq.n	800131c <__ledf2+0x80>
 8001350:	0008      	movs	r0, r1
 8001352:	e7dd      	b.n	8001310 <__ledf2+0x74>
 8001354:	45c4      	cmp	ip, r8
 8001356:	d8d5      	bhi.n	8001304 <__ledf2+0x68>
 8001358:	2000      	movs	r0, #0
 800135a:	45c4      	cmp	ip, r8
 800135c:	d2d8      	bcs.n	8001310 <__ledf2+0x74>
 800135e:	e7f5      	b.n	800134c <__ledf2+0xb0>
 8001360:	000007ff 	.word	0x000007ff

08001364 <__aeabi_dmul>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4657      	mov	r7, sl
 8001368:	464e      	mov	r6, r9
 800136a:	4645      	mov	r5, r8
 800136c:	46de      	mov	lr, fp
 800136e:	b5e0      	push	{r5, r6, r7, lr}
 8001370:	4698      	mov	r8, r3
 8001372:	030c      	lsls	r4, r1, #12
 8001374:	004b      	lsls	r3, r1, #1
 8001376:	0006      	movs	r6, r0
 8001378:	4692      	mov	sl, r2
 800137a:	b087      	sub	sp, #28
 800137c:	0b24      	lsrs	r4, r4, #12
 800137e:	0d5b      	lsrs	r3, r3, #21
 8001380:	0fcf      	lsrs	r7, r1, #31
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_dmul+0x24>
 8001386:	e15c      	b.n	8001642 <__aeabi_dmul+0x2de>
 8001388:	4ad9      	ldr	r2, [pc, #868]	; (80016f0 <__aeabi_dmul+0x38c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d100      	bne.n	8001390 <__aeabi_dmul+0x2c>
 800138e:	e175      	b.n	800167c <__aeabi_dmul+0x318>
 8001390:	0f42      	lsrs	r2, r0, #29
 8001392:	00e4      	lsls	r4, r4, #3
 8001394:	4314      	orrs	r4, r2
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	0412      	lsls	r2, r2, #16
 800139a:	4314      	orrs	r4, r2
 800139c:	4ad5      	ldr	r2, [pc, #852]	; (80016f4 <__aeabi_dmul+0x390>)
 800139e:	00c5      	lsls	r5, r0, #3
 80013a0:	4694      	mov	ip, r2
 80013a2:	4463      	add	r3, ip
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	4699      	mov	r9, r3
 80013aa:	469b      	mov	fp, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	4642      	mov	r2, r8
 80013b0:	031e      	lsls	r6, r3, #12
 80013b2:	0fd2      	lsrs	r2, r2, #31
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4650      	mov	r0, sl
 80013b8:	4690      	mov	r8, r2
 80013ba:	0b36      	lsrs	r6, r6, #12
 80013bc:	0d5b      	lsrs	r3, r3, #21
 80013be:	d100      	bne.n	80013c2 <__aeabi_dmul+0x5e>
 80013c0:	e120      	b.n	8001604 <__aeabi_dmul+0x2a0>
 80013c2:	4acb      	ldr	r2, [pc, #812]	; (80016f0 <__aeabi_dmul+0x38c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d100      	bne.n	80013ca <__aeabi_dmul+0x66>
 80013c8:	e162      	b.n	8001690 <__aeabi_dmul+0x32c>
 80013ca:	49ca      	ldr	r1, [pc, #808]	; (80016f4 <__aeabi_dmul+0x390>)
 80013cc:	0f42      	lsrs	r2, r0, #29
 80013ce:	468c      	mov	ip, r1
 80013d0:	9900      	ldr	r1, [sp, #0]
 80013d2:	4463      	add	r3, ip
 80013d4:	00f6      	lsls	r6, r6, #3
 80013d6:	468c      	mov	ip, r1
 80013d8:	4316      	orrs	r6, r2
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	449c      	add	ip, r3
 80013de:	0412      	lsls	r2, r2, #16
 80013e0:	4663      	mov	r3, ip
 80013e2:	4316      	orrs	r6, r2
 80013e4:	00c2      	lsls	r2, r0, #3
 80013e6:	2000      	movs	r0, #0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	9900      	ldr	r1, [sp, #0]
 80013ec:	4643      	mov	r3, r8
 80013ee:	3101      	adds	r1, #1
 80013f0:	468c      	mov	ip, r1
 80013f2:	4649      	mov	r1, r9
 80013f4:	407b      	eors	r3, r7
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	290f      	cmp	r1, #15
 80013fa:	d826      	bhi.n	800144a <__aeabi_dmul+0xe6>
 80013fc:	4bbe      	ldr	r3, [pc, #760]	; (80016f8 <__aeabi_dmul+0x394>)
 80013fe:	0089      	lsls	r1, r1, #2
 8001400:	5859      	ldr	r1, [r3, r1]
 8001402:	468f      	mov	pc, r1
 8001404:	4643      	mov	r3, r8
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	0034      	movs	r4, r6
 800140a:	0015      	movs	r5, r2
 800140c:	4683      	mov	fp, r0
 800140e:	465b      	mov	r3, fp
 8001410:	2b02      	cmp	r3, #2
 8001412:	d016      	beq.n	8001442 <__aeabi_dmul+0xde>
 8001414:	2b03      	cmp	r3, #3
 8001416:	d100      	bne.n	800141a <__aeabi_dmul+0xb6>
 8001418:	e203      	b.n	8001822 <__aeabi_dmul+0x4be>
 800141a:	2b01      	cmp	r3, #1
 800141c:	d000      	beq.n	8001420 <__aeabi_dmul+0xbc>
 800141e:	e0cd      	b.n	80015bc <__aeabi_dmul+0x258>
 8001420:	2200      	movs	r2, #0
 8001422:	2400      	movs	r4, #0
 8001424:	2500      	movs	r5, #0
 8001426:	9b01      	ldr	r3, [sp, #4]
 8001428:	0512      	lsls	r2, r2, #20
 800142a:	4322      	orrs	r2, r4
 800142c:	07db      	lsls	r3, r3, #31
 800142e:	431a      	orrs	r2, r3
 8001430:	0028      	movs	r0, r5
 8001432:	0011      	movs	r1, r2
 8001434:	b007      	add	sp, #28
 8001436:	bcf0      	pop	{r4, r5, r6, r7}
 8001438:	46bb      	mov	fp, r7
 800143a:	46b2      	mov	sl, r6
 800143c:	46a9      	mov	r9, r5
 800143e:	46a0      	mov	r8, r4
 8001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001442:	2400      	movs	r4, #0
 8001444:	2500      	movs	r5, #0
 8001446:	4aaa      	ldr	r2, [pc, #680]	; (80016f0 <__aeabi_dmul+0x38c>)
 8001448:	e7ed      	b.n	8001426 <__aeabi_dmul+0xc2>
 800144a:	0c28      	lsrs	r0, r5, #16
 800144c:	042d      	lsls	r5, r5, #16
 800144e:	0c2d      	lsrs	r5, r5, #16
 8001450:	002b      	movs	r3, r5
 8001452:	0c11      	lsrs	r1, r2, #16
 8001454:	0412      	lsls	r2, r2, #16
 8001456:	0c12      	lsrs	r2, r2, #16
 8001458:	4353      	muls	r3, r2
 800145a:	4698      	mov	r8, r3
 800145c:	0013      	movs	r3, r2
 800145e:	002f      	movs	r7, r5
 8001460:	4343      	muls	r3, r0
 8001462:	4699      	mov	r9, r3
 8001464:	434f      	muls	r7, r1
 8001466:	444f      	add	r7, r9
 8001468:	46bb      	mov	fp, r7
 800146a:	4647      	mov	r7, r8
 800146c:	000b      	movs	r3, r1
 800146e:	0c3f      	lsrs	r7, r7, #16
 8001470:	46ba      	mov	sl, r7
 8001472:	4343      	muls	r3, r0
 8001474:	44da      	add	sl, fp
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	45d1      	cmp	r9, sl
 800147a:	d904      	bls.n	8001486 <__aeabi_dmul+0x122>
 800147c:	2780      	movs	r7, #128	; 0x80
 800147e:	027f      	lsls	r7, r7, #9
 8001480:	46b9      	mov	r9, r7
 8001482:	444b      	add	r3, r9
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	4653      	mov	r3, sl
 8001488:	0c1b      	lsrs	r3, r3, #16
 800148a:	469b      	mov	fp, r3
 800148c:	4653      	mov	r3, sl
 800148e:	041f      	lsls	r7, r3, #16
 8001490:	4643      	mov	r3, r8
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	4698      	mov	r8, r3
 8001498:	003b      	movs	r3, r7
 800149a:	4443      	add	r3, r8
 800149c:	9304      	str	r3, [sp, #16]
 800149e:	0c33      	lsrs	r3, r6, #16
 80014a0:	0436      	lsls	r6, r6, #16
 80014a2:	0c36      	lsrs	r6, r6, #16
 80014a4:	4698      	mov	r8, r3
 80014a6:	0033      	movs	r3, r6
 80014a8:	4343      	muls	r3, r0
 80014aa:	4699      	mov	r9, r3
 80014ac:	4643      	mov	r3, r8
 80014ae:	4343      	muls	r3, r0
 80014b0:	002f      	movs	r7, r5
 80014b2:	469a      	mov	sl, r3
 80014b4:	4643      	mov	r3, r8
 80014b6:	4377      	muls	r7, r6
 80014b8:	435d      	muls	r5, r3
 80014ba:	0c38      	lsrs	r0, r7, #16
 80014bc:	444d      	add	r5, r9
 80014be:	1945      	adds	r5, r0, r5
 80014c0:	45a9      	cmp	r9, r5
 80014c2:	d903      	bls.n	80014cc <__aeabi_dmul+0x168>
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	4699      	mov	r9, r3
 80014ca:	44ca      	add	sl, r9
 80014cc:	043f      	lsls	r7, r7, #16
 80014ce:	0c28      	lsrs	r0, r5, #16
 80014d0:	0c3f      	lsrs	r7, r7, #16
 80014d2:	042d      	lsls	r5, r5, #16
 80014d4:	19ed      	adds	r5, r5, r7
 80014d6:	0c27      	lsrs	r7, r4, #16
 80014d8:	0424      	lsls	r4, r4, #16
 80014da:	0c24      	lsrs	r4, r4, #16
 80014dc:	0003      	movs	r3, r0
 80014de:	0020      	movs	r0, r4
 80014e0:	4350      	muls	r0, r2
 80014e2:	437a      	muls	r2, r7
 80014e4:	4691      	mov	r9, r2
 80014e6:	003a      	movs	r2, r7
 80014e8:	4453      	add	r3, sl
 80014ea:	9305      	str	r3, [sp, #20]
 80014ec:	0c03      	lsrs	r3, r0, #16
 80014ee:	469a      	mov	sl, r3
 80014f0:	434a      	muls	r2, r1
 80014f2:	4361      	muls	r1, r4
 80014f4:	4449      	add	r1, r9
 80014f6:	4451      	add	r1, sl
 80014f8:	44ab      	add	fp, r5
 80014fa:	4589      	cmp	r9, r1
 80014fc:	d903      	bls.n	8001506 <__aeabi_dmul+0x1a2>
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	4699      	mov	r9, r3
 8001504:	444a      	add	r2, r9
 8001506:	0400      	lsls	r0, r0, #16
 8001508:	0c0b      	lsrs	r3, r1, #16
 800150a:	0c00      	lsrs	r0, r0, #16
 800150c:	0409      	lsls	r1, r1, #16
 800150e:	1809      	adds	r1, r1, r0
 8001510:	0020      	movs	r0, r4
 8001512:	4699      	mov	r9, r3
 8001514:	4643      	mov	r3, r8
 8001516:	4370      	muls	r0, r6
 8001518:	435c      	muls	r4, r3
 800151a:	437e      	muls	r6, r7
 800151c:	435f      	muls	r7, r3
 800151e:	0c03      	lsrs	r3, r0, #16
 8001520:	4698      	mov	r8, r3
 8001522:	19a4      	adds	r4, r4, r6
 8001524:	4444      	add	r4, r8
 8001526:	444a      	add	r2, r9
 8001528:	9703      	str	r7, [sp, #12]
 800152a:	42a6      	cmp	r6, r4
 800152c:	d904      	bls.n	8001538 <__aeabi_dmul+0x1d4>
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4698      	mov	r8, r3
 8001534:	4447      	add	r7, r8
 8001536:	9703      	str	r7, [sp, #12]
 8001538:	0423      	lsls	r3, r4, #16
 800153a:	9e02      	ldr	r6, [sp, #8]
 800153c:	469a      	mov	sl, r3
 800153e:	9b05      	ldr	r3, [sp, #20]
 8001540:	445e      	add	r6, fp
 8001542:	4698      	mov	r8, r3
 8001544:	42ae      	cmp	r6, r5
 8001546:	41ad      	sbcs	r5, r5
 8001548:	1876      	adds	r6, r6, r1
 800154a:	428e      	cmp	r6, r1
 800154c:	4189      	sbcs	r1, r1
 800154e:	0400      	lsls	r0, r0, #16
 8001550:	0c00      	lsrs	r0, r0, #16
 8001552:	4450      	add	r0, sl
 8001554:	4440      	add	r0, r8
 8001556:	426d      	negs	r5, r5
 8001558:	1947      	adds	r7, r0, r5
 800155a:	46b8      	mov	r8, r7
 800155c:	4693      	mov	fp, r2
 800155e:	4249      	negs	r1, r1
 8001560:	4689      	mov	r9, r1
 8001562:	44c3      	add	fp, r8
 8001564:	44d9      	add	r9, fp
 8001566:	4298      	cmp	r0, r3
 8001568:	4180      	sbcs	r0, r0
 800156a:	45a8      	cmp	r8, r5
 800156c:	41ad      	sbcs	r5, r5
 800156e:	4593      	cmp	fp, r2
 8001570:	4192      	sbcs	r2, r2
 8001572:	4589      	cmp	r9, r1
 8001574:	4189      	sbcs	r1, r1
 8001576:	426d      	negs	r5, r5
 8001578:	4240      	negs	r0, r0
 800157a:	4328      	orrs	r0, r5
 800157c:	0c24      	lsrs	r4, r4, #16
 800157e:	4252      	negs	r2, r2
 8001580:	4249      	negs	r1, r1
 8001582:	430a      	orrs	r2, r1
 8001584:	9b03      	ldr	r3, [sp, #12]
 8001586:	1900      	adds	r0, r0, r4
 8001588:	1880      	adds	r0, r0, r2
 800158a:	18c7      	adds	r7, r0, r3
 800158c:	464b      	mov	r3, r9
 800158e:	0ddc      	lsrs	r4, r3, #23
 8001590:	9b04      	ldr	r3, [sp, #16]
 8001592:	0275      	lsls	r5, r6, #9
 8001594:	431d      	orrs	r5, r3
 8001596:	1e6a      	subs	r2, r5, #1
 8001598:	4195      	sbcs	r5, r2
 800159a:	464b      	mov	r3, r9
 800159c:	0df6      	lsrs	r6, r6, #23
 800159e:	027f      	lsls	r7, r7, #9
 80015a0:	4335      	orrs	r5, r6
 80015a2:	025a      	lsls	r2, r3, #9
 80015a4:	433c      	orrs	r4, r7
 80015a6:	4315      	orrs	r5, r2
 80015a8:	01fb      	lsls	r3, r7, #7
 80015aa:	d400      	bmi.n	80015ae <__aeabi_dmul+0x24a>
 80015ac:	e11c      	b.n	80017e8 <__aeabi_dmul+0x484>
 80015ae:	2101      	movs	r1, #1
 80015b0:	086a      	lsrs	r2, r5, #1
 80015b2:	400d      	ands	r5, r1
 80015b4:	4315      	orrs	r5, r2
 80015b6:	07e2      	lsls	r2, r4, #31
 80015b8:	4315      	orrs	r5, r2
 80015ba:	0864      	lsrs	r4, r4, #1
 80015bc:	494f      	ldr	r1, [pc, #316]	; (80016fc <__aeabi_dmul+0x398>)
 80015be:	4461      	add	r1, ip
 80015c0:	2900      	cmp	r1, #0
 80015c2:	dc00      	bgt.n	80015c6 <__aeabi_dmul+0x262>
 80015c4:	e0b0      	b.n	8001728 <__aeabi_dmul+0x3c4>
 80015c6:	076b      	lsls	r3, r5, #29
 80015c8:	d009      	beq.n	80015de <__aeabi_dmul+0x27a>
 80015ca:	220f      	movs	r2, #15
 80015cc:	402a      	ands	r2, r5
 80015ce:	2a04      	cmp	r2, #4
 80015d0:	d005      	beq.n	80015de <__aeabi_dmul+0x27a>
 80015d2:	1d2a      	adds	r2, r5, #4
 80015d4:	42aa      	cmp	r2, r5
 80015d6:	41ad      	sbcs	r5, r5
 80015d8:	426d      	negs	r5, r5
 80015da:	1964      	adds	r4, r4, r5
 80015dc:	0015      	movs	r5, r2
 80015de:	01e3      	lsls	r3, r4, #7
 80015e0:	d504      	bpl.n	80015ec <__aeabi_dmul+0x288>
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	4a46      	ldr	r2, [pc, #280]	; (8001700 <__aeabi_dmul+0x39c>)
 80015e6:	00c9      	lsls	r1, r1, #3
 80015e8:	4014      	ands	r4, r2
 80015ea:	4461      	add	r1, ip
 80015ec:	4a45      	ldr	r2, [pc, #276]	; (8001704 <__aeabi_dmul+0x3a0>)
 80015ee:	4291      	cmp	r1, r2
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0x290>
 80015f2:	e726      	b.n	8001442 <__aeabi_dmul+0xde>
 80015f4:	0762      	lsls	r2, r4, #29
 80015f6:	08ed      	lsrs	r5, r5, #3
 80015f8:	0264      	lsls	r4, r4, #9
 80015fa:	0549      	lsls	r1, r1, #21
 80015fc:	4315      	orrs	r5, r2
 80015fe:	0b24      	lsrs	r4, r4, #12
 8001600:	0d4a      	lsrs	r2, r1, #21
 8001602:	e710      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001604:	4652      	mov	r2, sl
 8001606:	4332      	orrs	r2, r6
 8001608:	d100      	bne.n	800160c <__aeabi_dmul+0x2a8>
 800160a:	e07f      	b.n	800170c <__aeabi_dmul+0x3a8>
 800160c:	2e00      	cmp	r6, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dmul+0x2ae>
 8001610:	e0dc      	b.n	80017cc <__aeabi_dmul+0x468>
 8001612:	0030      	movs	r0, r6
 8001614:	f000 fd00 	bl	8002018 <__clzsi2>
 8001618:	0002      	movs	r2, r0
 800161a:	3a0b      	subs	r2, #11
 800161c:	231d      	movs	r3, #29
 800161e:	0001      	movs	r1, r0
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4652      	mov	r2, sl
 8001624:	3908      	subs	r1, #8
 8001626:	40da      	lsrs	r2, r3
 8001628:	408e      	lsls	r6, r1
 800162a:	4316      	orrs	r6, r2
 800162c:	4652      	mov	r2, sl
 800162e:	408a      	lsls	r2, r1
 8001630:	9b00      	ldr	r3, [sp, #0]
 8001632:	4935      	ldr	r1, [pc, #212]	; (8001708 <__aeabi_dmul+0x3a4>)
 8001634:	1a18      	subs	r0, r3, r0
 8001636:	0003      	movs	r3, r0
 8001638:	468c      	mov	ip, r1
 800163a:	4463      	add	r3, ip
 800163c:	2000      	movs	r0, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	e6d3      	b.n	80013ea <__aeabi_dmul+0x86>
 8001642:	0025      	movs	r5, r4
 8001644:	4305      	orrs	r5, r0
 8001646:	d04a      	beq.n	80016de <__aeabi_dmul+0x37a>
 8001648:	2c00      	cmp	r4, #0
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0x2ea>
 800164c:	e0b0      	b.n	80017b0 <__aeabi_dmul+0x44c>
 800164e:	0020      	movs	r0, r4
 8001650:	f000 fce2 	bl	8002018 <__clzsi2>
 8001654:	0001      	movs	r1, r0
 8001656:	0002      	movs	r2, r0
 8001658:	390b      	subs	r1, #11
 800165a:	231d      	movs	r3, #29
 800165c:	0010      	movs	r0, r2
 800165e:	1a5b      	subs	r3, r3, r1
 8001660:	0031      	movs	r1, r6
 8001662:	0035      	movs	r5, r6
 8001664:	3808      	subs	r0, #8
 8001666:	4084      	lsls	r4, r0
 8001668:	40d9      	lsrs	r1, r3
 800166a:	4085      	lsls	r5, r0
 800166c:	430c      	orrs	r4, r1
 800166e:	4826      	ldr	r0, [pc, #152]	; (8001708 <__aeabi_dmul+0x3a4>)
 8001670:	1a83      	subs	r3, r0, r2
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	4699      	mov	r9, r3
 8001678:	469b      	mov	fp, r3
 800167a:	e697      	b.n	80013ac <__aeabi_dmul+0x48>
 800167c:	0005      	movs	r5, r0
 800167e:	4325      	orrs	r5, r4
 8001680:	d126      	bne.n	80016d0 <__aeabi_dmul+0x36c>
 8001682:	2208      	movs	r2, #8
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2302      	movs	r3, #2
 8001688:	2400      	movs	r4, #0
 800168a:	4691      	mov	r9, r2
 800168c:	469b      	mov	fp, r3
 800168e:	e68d      	b.n	80013ac <__aeabi_dmul+0x48>
 8001690:	4652      	mov	r2, sl
 8001692:	9b00      	ldr	r3, [sp, #0]
 8001694:	4332      	orrs	r2, r6
 8001696:	d110      	bne.n	80016ba <__aeabi_dmul+0x356>
 8001698:	4915      	ldr	r1, [pc, #84]	; (80016f0 <__aeabi_dmul+0x38c>)
 800169a:	2600      	movs	r6, #0
 800169c:	468c      	mov	ip, r1
 800169e:	4463      	add	r3, ip
 80016a0:	4649      	mov	r1, r9
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2302      	movs	r3, #2
 80016a6:	4319      	orrs	r1, r3
 80016a8:	4689      	mov	r9, r1
 80016aa:	2002      	movs	r0, #2
 80016ac:	e69d      	b.n	80013ea <__aeabi_dmul+0x86>
 80016ae:	465b      	mov	r3, fp
 80016b0:	9701      	str	r7, [sp, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d000      	beq.n	80016b8 <__aeabi_dmul+0x354>
 80016b6:	e6ad      	b.n	8001414 <__aeabi_dmul+0xb0>
 80016b8:	e6c3      	b.n	8001442 <__aeabi_dmul+0xde>
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <__aeabi_dmul+0x38c>)
 80016bc:	2003      	movs	r0, #3
 80016be:	4694      	mov	ip, r2
 80016c0:	4463      	add	r3, ip
 80016c2:	464a      	mov	r2, r9
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2303      	movs	r3, #3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	4691      	mov	r9, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	e68c      	b.n	80013ea <__aeabi_dmul+0x86>
 80016d0:	220c      	movs	r2, #12
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2303      	movs	r3, #3
 80016d6:	0005      	movs	r5, r0
 80016d8:	4691      	mov	r9, r2
 80016da:	469b      	mov	fp, r3
 80016dc:	e666      	b.n	80013ac <__aeabi_dmul+0x48>
 80016de:	2304      	movs	r3, #4
 80016e0:	4699      	mov	r9, r3
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	2400      	movs	r4, #0
 80016ea:	469b      	mov	fp, r3
 80016ec:	e65e      	b.n	80013ac <__aeabi_dmul+0x48>
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	000007ff 	.word	0x000007ff
 80016f4:	fffffc01 	.word	0xfffffc01
 80016f8:	08006d8c 	.word	0x08006d8c
 80016fc:	000003ff 	.word	0x000003ff
 8001700:	feffffff 	.word	0xfeffffff
 8001704:	000007fe 	.word	0x000007fe
 8001708:	fffffc0d 	.word	0xfffffc0d
 800170c:	4649      	mov	r1, r9
 800170e:	2301      	movs	r3, #1
 8001710:	4319      	orrs	r1, r3
 8001712:	4689      	mov	r9, r1
 8001714:	2600      	movs	r6, #0
 8001716:	2001      	movs	r0, #1
 8001718:	e667      	b.n	80013ea <__aeabi_dmul+0x86>
 800171a:	2300      	movs	r3, #0
 800171c:	2480      	movs	r4, #128	; 0x80
 800171e:	2500      	movs	r5, #0
 8001720:	4a43      	ldr	r2, [pc, #268]	; (8001830 <__aeabi_dmul+0x4cc>)
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	0324      	lsls	r4, r4, #12
 8001726:	e67e      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001728:	2001      	movs	r0, #1
 800172a:	1a40      	subs	r0, r0, r1
 800172c:	2838      	cmp	r0, #56	; 0x38
 800172e:	dd00      	ble.n	8001732 <__aeabi_dmul+0x3ce>
 8001730:	e676      	b.n	8001420 <__aeabi_dmul+0xbc>
 8001732:	281f      	cmp	r0, #31
 8001734:	dd5b      	ble.n	80017ee <__aeabi_dmul+0x48a>
 8001736:	221f      	movs	r2, #31
 8001738:	0023      	movs	r3, r4
 800173a:	4252      	negs	r2, r2
 800173c:	1a51      	subs	r1, r2, r1
 800173e:	40cb      	lsrs	r3, r1
 8001740:	0019      	movs	r1, r3
 8001742:	2820      	cmp	r0, #32
 8001744:	d003      	beq.n	800174e <__aeabi_dmul+0x3ea>
 8001746:	4a3b      	ldr	r2, [pc, #236]	; (8001834 <__aeabi_dmul+0x4d0>)
 8001748:	4462      	add	r2, ip
 800174a:	4094      	lsls	r4, r2
 800174c:	4325      	orrs	r5, r4
 800174e:	1e6a      	subs	r2, r5, #1
 8001750:	4195      	sbcs	r5, r2
 8001752:	002a      	movs	r2, r5
 8001754:	430a      	orrs	r2, r1
 8001756:	2107      	movs	r1, #7
 8001758:	000d      	movs	r5, r1
 800175a:	2400      	movs	r4, #0
 800175c:	4015      	ands	r5, r2
 800175e:	4211      	tst	r1, r2
 8001760:	d05b      	beq.n	800181a <__aeabi_dmul+0x4b6>
 8001762:	210f      	movs	r1, #15
 8001764:	2400      	movs	r4, #0
 8001766:	4011      	ands	r1, r2
 8001768:	2904      	cmp	r1, #4
 800176a:	d053      	beq.n	8001814 <__aeabi_dmul+0x4b0>
 800176c:	1d11      	adds	r1, r2, #4
 800176e:	4291      	cmp	r1, r2
 8001770:	4192      	sbcs	r2, r2
 8001772:	4252      	negs	r2, r2
 8001774:	18a4      	adds	r4, r4, r2
 8001776:	000a      	movs	r2, r1
 8001778:	0223      	lsls	r3, r4, #8
 800177a:	d54b      	bpl.n	8001814 <__aeabi_dmul+0x4b0>
 800177c:	2201      	movs	r2, #1
 800177e:	2400      	movs	r4, #0
 8001780:	2500      	movs	r5, #0
 8001782:	e650      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	031b      	lsls	r3, r3, #12
 8001788:	421c      	tst	r4, r3
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x43c>
 800178c:	421e      	tst	r6, r3
 800178e:	d107      	bne.n	80017a0 <__aeabi_dmul+0x43c>
 8001790:	4333      	orrs	r3, r6
 8001792:	031c      	lsls	r4, r3, #12
 8001794:	4643      	mov	r3, r8
 8001796:	0015      	movs	r5, r2
 8001798:	0b24      	lsrs	r4, r4, #12
 800179a:	4a25      	ldr	r2, [pc, #148]	; (8001830 <__aeabi_dmul+0x4cc>)
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	e642      	b.n	8001426 <__aeabi_dmul+0xc2>
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	0312      	lsls	r2, r2, #12
 80017a4:	4314      	orrs	r4, r2
 80017a6:	0324      	lsls	r4, r4, #12
 80017a8:	4a21      	ldr	r2, [pc, #132]	; (8001830 <__aeabi_dmul+0x4cc>)
 80017aa:	0b24      	lsrs	r4, r4, #12
 80017ac:	9701      	str	r7, [sp, #4]
 80017ae:	e63a      	b.n	8001426 <__aeabi_dmul+0xc2>
 80017b0:	f000 fc32 	bl	8002018 <__clzsi2>
 80017b4:	0001      	movs	r1, r0
 80017b6:	0002      	movs	r2, r0
 80017b8:	3115      	adds	r1, #21
 80017ba:	3220      	adds	r2, #32
 80017bc:	291c      	cmp	r1, #28
 80017be:	dc00      	bgt.n	80017c2 <__aeabi_dmul+0x45e>
 80017c0:	e74b      	b.n	800165a <__aeabi_dmul+0x2f6>
 80017c2:	0034      	movs	r4, r6
 80017c4:	3808      	subs	r0, #8
 80017c6:	2500      	movs	r5, #0
 80017c8:	4084      	lsls	r4, r0
 80017ca:	e750      	b.n	800166e <__aeabi_dmul+0x30a>
 80017cc:	f000 fc24 	bl	8002018 <__clzsi2>
 80017d0:	0003      	movs	r3, r0
 80017d2:	001a      	movs	r2, r3
 80017d4:	3215      	adds	r2, #21
 80017d6:	3020      	adds	r0, #32
 80017d8:	2a1c      	cmp	r2, #28
 80017da:	dc00      	bgt.n	80017de <__aeabi_dmul+0x47a>
 80017dc:	e71e      	b.n	800161c <__aeabi_dmul+0x2b8>
 80017de:	4656      	mov	r6, sl
 80017e0:	3b08      	subs	r3, #8
 80017e2:	2200      	movs	r2, #0
 80017e4:	409e      	lsls	r6, r3
 80017e6:	e723      	b.n	8001630 <__aeabi_dmul+0x2cc>
 80017e8:	9b00      	ldr	r3, [sp, #0]
 80017ea:	469c      	mov	ip, r3
 80017ec:	e6e6      	b.n	80015bc <__aeabi_dmul+0x258>
 80017ee:	4912      	ldr	r1, [pc, #72]	; (8001838 <__aeabi_dmul+0x4d4>)
 80017f0:	0022      	movs	r2, r4
 80017f2:	4461      	add	r1, ip
 80017f4:	002e      	movs	r6, r5
 80017f6:	408d      	lsls	r5, r1
 80017f8:	408a      	lsls	r2, r1
 80017fa:	40c6      	lsrs	r6, r0
 80017fc:	1e69      	subs	r1, r5, #1
 80017fe:	418d      	sbcs	r5, r1
 8001800:	4332      	orrs	r2, r6
 8001802:	432a      	orrs	r2, r5
 8001804:	40c4      	lsrs	r4, r0
 8001806:	0753      	lsls	r3, r2, #29
 8001808:	d0b6      	beq.n	8001778 <__aeabi_dmul+0x414>
 800180a:	210f      	movs	r1, #15
 800180c:	4011      	ands	r1, r2
 800180e:	2904      	cmp	r1, #4
 8001810:	d1ac      	bne.n	800176c <__aeabi_dmul+0x408>
 8001812:	e7b1      	b.n	8001778 <__aeabi_dmul+0x414>
 8001814:	0765      	lsls	r5, r4, #29
 8001816:	0264      	lsls	r4, r4, #9
 8001818:	0b24      	lsrs	r4, r4, #12
 800181a:	08d2      	lsrs	r2, r2, #3
 800181c:	4315      	orrs	r5, r2
 800181e:	2200      	movs	r2, #0
 8001820:	e601      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	0312      	lsls	r2, r2, #12
 8001826:	4314      	orrs	r4, r2
 8001828:	0324      	lsls	r4, r4, #12
 800182a:	4a01      	ldr	r2, [pc, #4]	; (8001830 <__aeabi_dmul+0x4cc>)
 800182c:	0b24      	lsrs	r4, r4, #12
 800182e:	e5fa      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001830:	000007ff 	.word	0x000007ff
 8001834:	0000043e 	.word	0x0000043e
 8001838:	0000041e 	.word	0x0000041e

0800183c <__aeabi_dsub>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	4657      	mov	r7, sl
 8001840:	464e      	mov	r6, r9
 8001842:	4645      	mov	r5, r8
 8001844:	46de      	mov	lr, fp
 8001846:	b5e0      	push	{r5, r6, r7, lr}
 8001848:	001e      	movs	r6, r3
 800184a:	0017      	movs	r7, r2
 800184c:	004a      	lsls	r2, r1, #1
 800184e:	030b      	lsls	r3, r1, #12
 8001850:	0d52      	lsrs	r2, r2, #21
 8001852:	0a5b      	lsrs	r3, r3, #9
 8001854:	4690      	mov	r8, r2
 8001856:	0f42      	lsrs	r2, r0, #29
 8001858:	431a      	orrs	r2, r3
 800185a:	0fcd      	lsrs	r5, r1, #31
 800185c:	4ccd      	ldr	r4, [pc, #820]	; (8001b94 <__aeabi_dsub+0x358>)
 800185e:	0331      	lsls	r1, r6, #12
 8001860:	00c3      	lsls	r3, r0, #3
 8001862:	4694      	mov	ip, r2
 8001864:	0070      	lsls	r0, r6, #1
 8001866:	0f7a      	lsrs	r2, r7, #29
 8001868:	0a49      	lsrs	r1, r1, #9
 800186a:	00ff      	lsls	r7, r7, #3
 800186c:	469a      	mov	sl, r3
 800186e:	46b9      	mov	r9, r7
 8001870:	0d40      	lsrs	r0, r0, #21
 8001872:	0ff6      	lsrs	r6, r6, #31
 8001874:	4311      	orrs	r1, r2
 8001876:	42a0      	cmp	r0, r4
 8001878:	d100      	bne.n	800187c <__aeabi_dsub+0x40>
 800187a:	e0b1      	b.n	80019e0 <__aeabi_dsub+0x1a4>
 800187c:	2201      	movs	r2, #1
 800187e:	4056      	eors	r6, r2
 8001880:	46b3      	mov	fp, r6
 8001882:	42b5      	cmp	r5, r6
 8001884:	d100      	bne.n	8001888 <__aeabi_dsub+0x4c>
 8001886:	e088      	b.n	800199a <__aeabi_dsub+0x15e>
 8001888:	4642      	mov	r2, r8
 800188a:	1a12      	subs	r2, r2, r0
 800188c:	2a00      	cmp	r2, #0
 800188e:	dc00      	bgt.n	8001892 <__aeabi_dsub+0x56>
 8001890:	e0ae      	b.n	80019f0 <__aeabi_dsub+0x1b4>
 8001892:	2800      	cmp	r0, #0
 8001894:	d100      	bne.n	8001898 <__aeabi_dsub+0x5c>
 8001896:	e0c1      	b.n	8001a1c <__aeabi_dsub+0x1e0>
 8001898:	48be      	ldr	r0, [pc, #760]	; (8001b94 <__aeabi_dsub+0x358>)
 800189a:	4580      	cmp	r8, r0
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x64>
 800189e:	e151      	b.n	8001b44 <__aeabi_dsub+0x308>
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	0400      	lsls	r0, r0, #16
 80018a4:	4301      	orrs	r1, r0
 80018a6:	2a38      	cmp	r2, #56	; 0x38
 80018a8:	dd00      	ble.n	80018ac <__aeabi_dsub+0x70>
 80018aa:	e17b      	b.n	8001ba4 <__aeabi_dsub+0x368>
 80018ac:	2a1f      	cmp	r2, #31
 80018ae:	dd00      	ble.n	80018b2 <__aeabi_dsub+0x76>
 80018b0:	e1ee      	b.n	8001c90 <__aeabi_dsub+0x454>
 80018b2:	2020      	movs	r0, #32
 80018b4:	003e      	movs	r6, r7
 80018b6:	1a80      	subs	r0, r0, r2
 80018b8:	000c      	movs	r4, r1
 80018ba:	40d6      	lsrs	r6, r2
 80018bc:	40d1      	lsrs	r1, r2
 80018be:	4087      	lsls	r7, r0
 80018c0:	4662      	mov	r2, ip
 80018c2:	4084      	lsls	r4, r0
 80018c4:	1a52      	subs	r2, r2, r1
 80018c6:	1e78      	subs	r0, r7, #1
 80018c8:	4187      	sbcs	r7, r0
 80018ca:	4694      	mov	ip, r2
 80018cc:	4334      	orrs	r4, r6
 80018ce:	4327      	orrs	r7, r4
 80018d0:	1bdc      	subs	r4, r3, r7
 80018d2:	42a3      	cmp	r3, r4
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	4662      	mov	r2, ip
 80018d8:	425b      	negs	r3, r3
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4699      	mov	r9, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	d400      	bmi.n	80018e6 <__aeabi_dsub+0xaa>
 80018e4:	e118      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 80018e6:	464b      	mov	r3, r9
 80018e8:	0258      	lsls	r0, r3, #9
 80018ea:	0a43      	lsrs	r3, r0, #9
 80018ec:	4699      	mov	r9, r3
 80018ee:	464b      	mov	r3, r9
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dsub+0xba>
 80018f4:	e137      	b.n	8001b66 <__aeabi_dsub+0x32a>
 80018f6:	4648      	mov	r0, r9
 80018f8:	f000 fb8e 	bl	8002018 <__clzsi2>
 80018fc:	0001      	movs	r1, r0
 80018fe:	3908      	subs	r1, #8
 8001900:	2320      	movs	r3, #32
 8001902:	0022      	movs	r2, r4
 8001904:	4648      	mov	r0, r9
 8001906:	1a5b      	subs	r3, r3, r1
 8001908:	40da      	lsrs	r2, r3
 800190a:	4088      	lsls	r0, r1
 800190c:	408c      	lsls	r4, r1
 800190e:	4643      	mov	r3, r8
 8001910:	4310      	orrs	r0, r2
 8001912:	4588      	cmp	r8, r1
 8001914:	dd00      	ble.n	8001918 <__aeabi_dsub+0xdc>
 8001916:	e136      	b.n	8001b86 <__aeabi_dsub+0x34a>
 8001918:	1ac9      	subs	r1, r1, r3
 800191a:	1c4b      	adds	r3, r1, #1
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dd00      	ble.n	8001922 <__aeabi_dsub+0xe6>
 8001920:	e0ea      	b.n	8001af8 <__aeabi_dsub+0x2bc>
 8001922:	2220      	movs	r2, #32
 8001924:	0026      	movs	r6, r4
 8001926:	1ad2      	subs	r2, r2, r3
 8001928:	0001      	movs	r1, r0
 800192a:	4094      	lsls	r4, r2
 800192c:	40de      	lsrs	r6, r3
 800192e:	40d8      	lsrs	r0, r3
 8001930:	2300      	movs	r3, #0
 8001932:	4091      	lsls	r1, r2
 8001934:	1e62      	subs	r2, r4, #1
 8001936:	4194      	sbcs	r4, r2
 8001938:	4681      	mov	r9, r0
 800193a:	4698      	mov	r8, r3
 800193c:	4331      	orrs	r1, r6
 800193e:	430c      	orrs	r4, r1
 8001940:	0763      	lsls	r3, r4, #29
 8001942:	d009      	beq.n	8001958 <__aeabi_dsub+0x11c>
 8001944:	230f      	movs	r3, #15
 8001946:	4023      	ands	r3, r4
 8001948:	2b04      	cmp	r3, #4
 800194a:	d005      	beq.n	8001958 <__aeabi_dsub+0x11c>
 800194c:	1d23      	adds	r3, r4, #4
 800194e:	42a3      	cmp	r3, r4
 8001950:	41a4      	sbcs	r4, r4
 8001952:	4264      	negs	r4, r4
 8001954:	44a1      	add	r9, r4
 8001956:	001c      	movs	r4, r3
 8001958:	464b      	mov	r3, r9
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	d400      	bmi.n	8001960 <__aeabi_dsub+0x124>
 800195e:	e0de      	b.n	8001b1e <__aeabi_dsub+0x2e2>
 8001960:	4641      	mov	r1, r8
 8001962:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <__aeabi_dsub+0x358>)
 8001964:	3101      	adds	r1, #1
 8001966:	4299      	cmp	r1, r3
 8001968:	d100      	bne.n	800196c <__aeabi_dsub+0x130>
 800196a:	e0e7      	b.n	8001b3c <__aeabi_dsub+0x300>
 800196c:	464b      	mov	r3, r9
 800196e:	488a      	ldr	r0, [pc, #552]	; (8001b98 <__aeabi_dsub+0x35c>)
 8001970:	08e4      	lsrs	r4, r4, #3
 8001972:	4003      	ands	r3, r0
 8001974:	0018      	movs	r0, r3
 8001976:	0549      	lsls	r1, r1, #21
 8001978:	075b      	lsls	r3, r3, #29
 800197a:	0240      	lsls	r0, r0, #9
 800197c:	4323      	orrs	r3, r4
 800197e:	0d4a      	lsrs	r2, r1, #21
 8001980:	0b04      	lsrs	r4, r0, #12
 8001982:	0512      	lsls	r2, r2, #20
 8001984:	07ed      	lsls	r5, r5, #31
 8001986:	4322      	orrs	r2, r4
 8001988:	432a      	orrs	r2, r5
 800198a:	0018      	movs	r0, r3
 800198c:	0011      	movs	r1, r2
 800198e:	bcf0      	pop	{r4, r5, r6, r7}
 8001990:	46bb      	mov	fp, r7
 8001992:	46b2      	mov	sl, r6
 8001994:	46a9      	mov	r9, r5
 8001996:	46a0      	mov	r8, r4
 8001998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800199a:	4642      	mov	r2, r8
 800199c:	1a12      	subs	r2, r2, r0
 800199e:	2a00      	cmp	r2, #0
 80019a0:	dd52      	ble.n	8001a48 <__aeabi_dsub+0x20c>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0x16c>
 80019a6:	e09c      	b.n	8001ae2 <__aeabi_dsub+0x2a6>
 80019a8:	45a0      	cmp	r8, r4
 80019aa:	d100      	bne.n	80019ae <__aeabi_dsub+0x172>
 80019ac:	e0ca      	b.n	8001b44 <__aeabi_dsub+0x308>
 80019ae:	2080      	movs	r0, #128	; 0x80
 80019b0:	0400      	lsls	r0, r0, #16
 80019b2:	4301      	orrs	r1, r0
 80019b4:	2a38      	cmp	r2, #56	; 0x38
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dsub+0x17e>
 80019b8:	e149      	b.n	8001c4e <__aeabi_dsub+0x412>
 80019ba:	2a1f      	cmp	r2, #31
 80019bc:	dc00      	bgt.n	80019c0 <__aeabi_dsub+0x184>
 80019be:	e197      	b.n	8001cf0 <__aeabi_dsub+0x4b4>
 80019c0:	0010      	movs	r0, r2
 80019c2:	000e      	movs	r6, r1
 80019c4:	3820      	subs	r0, #32
 80019c6:	40c6      	lsrs	r6, r0
 80019c8:	2a20      	cmp	r2, #32
 80019ca:	d004      	beq.n	80019d6 <__aeabi_dsub+0x19a>
 80019cc:	2040      	movs	r0, #64	; 0x40
 80019ce:	1a82      	subs	r2, r0, r2
 80019d0:	4091      	lsls	r1, r2
 80019d2:	430f      	orrs	r7, r1
 80019d4:	46b9      	mov	r9, r7
 80019d6:	464c      	mov	r4, r9
 80019d8:	1e62      	subs	r2, r4, #1
 80019da:	4194      	sbcs	r4, r2
 80019dc:	4334      	orrs	r4, r6
 80019de:	e13a      	b.n	8001c56 <__aeabi_dsub+0x41a>
 80019e0:	000a      	movs	r2, r1
 80019e2:	433a      	orrs	r2, r7
 80019e4:	d028      	beq.n	8001a38 <__aeabi_dsub+0x1fc>
 80019e6:	46b3      	mov	fp, r6
 80019e8:	42b5      	cmp	r5, r6
 80019ea:	d02b      	beq.n	8001a44 <__aeabi_dsub+0x208>
 80019ec:	4a6b      	ldr	r2, [pc, #428]	; (8001b9c <__aeabi_dsub+0x360>)
 80019ee:	4442      	add	r2, r8
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d05d      	beq.n	8001ab0 <__aeabi_dsub+0x274>
 80019f4:	4642      	mov	r2, r8
 80019f6:	4644      	mov	r4, r8
 80019f8:	1a82      	subs	r2, r0, r2
 80019fa:	2c00      	cmp	r4, #0
 80019fc:	d000      	beq.n	8001a00 <__aeabi_dsub+0x1c4>
 80019fe:	e0f5      	b.n	8001bec <__aeabi_dsub+0x3b0>
 8001a00:	4665      	mov	r5, ip
 8001a02:	431d      	orrs	r5, r3
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x1cc>
 8001a06:	e19c      	b.n	8001d42 <__aeabi_dsub+0x506>
 8001a08:	1e55      	subs	r5, r2, #1
 8001a0a:	2a01      	cmp	r2, #1
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x1d4>
 8001a0e:	e1fb      	b.n	8001e08 <__aeabi_dsub+0x5cc>
 8001a10:	4c60      	ldr	r4, [pc, #384]	; (8001b94 <__aeabi_dsub+0x358>)
 8001a12:	42a2      	cmp	r2, r4
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x1dc>
 8001a16:	e1bd      	b.n	8001d94 <__aeabi_dsub+0x558>
 8001a18:	002a      	movs	r2, r5
 8001a1a:	e0f0      	b.n	8001bfe <__aeabi_dsub+0x3c2>
 8001a1c:	0008      	movs	r0, r1
 8001a1e:	4338      	orrs	r0, r7
 8001a20:	d100      	bne.n	8001a24 <__aeabi_dsub+0x1e8>
 8001a22:	e0c3      	b.n	8001bac <__aeabi_dsub+0x370>
 8001a24:	1e50      	subs	r0, r2, #1
 8001a26:	2a01      	cmp	r2, #1
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x1f0>
 8001a2a:	e1a8      	b.n	8001d7e <__aeabi_dsub+0x542>
 8001a2c:	4c59      	ldr	r4, [pc, #356]	; (8001b94 <__aeabi_dsub+0x358>)
 8001a2e:	42a2      	cmp	r2, r4
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1f8>
 8001a32:	e087      	b.n	8001b44 <__aeabi_dsub+0x308>
 8001a34:	0002      	movs	r2, r0
 8001a36:	e736      	b.n	80018a6 <__aeabi_dsub+0x6a>
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4056      	eors	r6, r2
 8001a3c:	46b3      	mov	fp, r6
 8001a3e:	42b5      	cmp	r5, r6
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dsub+0x208>
 8001a42:	e721      	b.n	8001888 <__aeabi_dsub+0x4c>
 8001a44:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <__aeabi_dsub+0x360>)
 8001a46:	4442      	add	r2, r8
 8001a48:	2a00      	cmp	r2, #0
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x212>
 8001a4c:	e0b5      	b.n	8001bba <__aeabi_dsub+0x37e>
 8001a4e:	4642      	mov	r2, r8
 8001a50:	4644      	mov	r4, r8
 8001a52:	1a82      	subs	r2, r0, r2
 8001a54:	2c00      	cmp	r4, #0
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x21e>
 8001a58:	e138      	b.n	8001ccc <__aeabi_dsub+0x490>
 8001a5a:	4e4e      	ldr	r6, [pc, #312]	; (8001b94 <__aeabi_dsub+0x358>)
 8001a5c:	42b0      	cmp	r0, r6
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x226>
 8001a60:	e1de      	b.n	8001e20 <__aeabi_dsub+0x5e4>
 8001a62:	2680      	movs	r6, #128	; 0x80
 8001a64:	4664      	mov	r4, ip
 8001a66:	0436      	lsls	r6, r6, #16
 8001a68:	4334      	orrs	r4, r6
 8001a6a:	46a4      	mov	ip, r4
 8001a6c:	2a38      	cmp	r2, #56	; 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dsub+0x236>
 8001a70:	e196      	b.n	8001da0 <__aeabi_dsub+0x564>
 8001a72:	2a1f      	cmp	r2, #31
 8001a74:	dd00      	ble.n	8001a78 <__aeabi_dsub+0x23c>
 8001a76:	e224      	b.n	8001ec2 <__aeabi_dsub+0x686>
 8001a78:	2620      	movs	r6, #32
 8001a7a:	1ab4      	subs	r4, r6, r2
 8001a7c:	46a2      	mov	sl, r4
 8001a7e:	4664      	mov	r4, ip
 8001a80:	4656      	mov	r6, sl
 8001a82:	40b4      	lsls	r4, r6
 8001a84:	46a1      	mov	r9, r4
 8001a86:	001c      	movs	r4, r3
 8001a88:	464e      	mov	r6, r9
 8001a8a:	40d4      	lsrs	r4, r2
 8001a8c:	4326      	orrs	r6, r4
 8001a8e:	0034      	movs	r4, r6
 8001a90:	4656      	mov	r6, sl
 8001a92:	40b3      	lsls	r3, r6
 8001a94:	1e5e      	subs	r6, r3, #1
 8001a96:	41b3      	sbcs	r3, r6
 8001a98:	431c      	orrs	r4, r3
 8001a9a:	4663      	mov	r3, ip
 8001a9c:	40d3      	lsrs	r3, r2
 8001a9e:	18c9      	adds	r1, r1, r3
 8001aa0:	19e4      	adds	r4, r4, r7
 8001aa2:	42bc      	cmp	r4, r7
 8001aa4:	41bf      	sbcs	r7, r7
 8001aa6:	427f      	negs	r7, r7
 8001aa8:	46b9      	mov	r9, r7
 8001aaa:	4680      	mov	r8, r0
 8001aac:	4489      	add	r9, r1
 8001aae:	e0d8      	b.n	8001c62 <__aeabi_dsub+0x426>
 8001ab0:	4640      	mov	r0, r8
 8001ab2:	4c3b      	ldr	r4, [pc, #236]	; (8001ba0 <__aeabi_dsub+0x364>)
 8001ab4:	3001      	adds	r0, #1
 8001ab6:	4220      	tst	r0, r4
 8001ab8:	d000      	beq.n	8001abc <__aeabi_dsub+0x280>
 8001aba:	e0b4      	b.n	8001c26 <__aeabi_dsub+0x3ea>
 8001abc:	4640      	mov	r0, r8
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dsub+0x288>
 8001ac2:	e144      	b.n	8001d4e <__aeabi_dsub+0x512>
 8001ac4:	4660      	mov	r0, ip
 8001ac6:	4318      	orrs	r0, r3
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x290>
 8001aca:	e190      	b.n	8001dee <__aeabi_dsub+0x5b2>
 8001acc:	0008      	movs	r0, r1
 8001ace:	4338      	orrs	r0, r7
 8001ad0:	d000      	beq.n	8001ad4 <__aeabi_dsub+0x298>
 8001ad2:	e1aa      	b.n	8001e2a <__aeabi_dsub+0x5ee>
 8001ad4:	4661      	mov	r1, ip
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	0749      	lsls	r1, r1, #29
 8001ada:	430b      	orrs	r3, r1
 8001adc:	4661      	mov	r1, ip
 8001ade:	08cc      	lsrs	r4, r1, #3
 8001ae0:	e027      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001ae2:	0008      	movs	r0, r1
 8001ae4:	4338      	orrs	r0, r7
 8001ae6:	d061      	beq.n	8001bac <__aeabi_dsub+0x370>
 8001ae8:	1e50      	subs	r0, r2, #1
 8001aea:	2a01      	cmp	r2, #1
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x2b4>
 8001aee:	e139      	b.n	8001d64 <__aeabi_dsub+0x528>
 8001af0:	42a2      	cmp	r2, r4
 8001af2:	d027      	beq.n	8001b44 <__aeabi_dsub+0x308>
 8001af4:	0002      	movs	r2, r0
 8001af6:	e75d      	b.n	80019b4 <__aeabi_dsub+0x178>
 8001af8:	0002      	movs	r2, r0
 8001afa:	391f      	subs	r1, #31
 8001afc:	40ca      	lsrs	r2, r1
 8001afe:	0011      	movs	r1, r2
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d003      	beq.n	8001b0c <__aeabi_dsub+0x2d0>
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4098      	lsls	r0, r3
 8001b0a:	4304      	orrs	r4, r0
 8001b0c:	1e63      	subs	r3, r4, #1
 8001b0e:	419c      	sbcs	r4, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	4699      	mov	r9, r3
 8001b14:	4698      	mov	r8, r3
 8001b16:	430c      	orrs	r4, r1
 8001b18:	0763      	lsls	r3, r4, #29
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x2e2>
 8001b1c:	e712      	b.n	8001944 <__aeabi_dsub+0x108>
 8001b1e:	464b      	mov	r3, r9
 8001b20:	464a      	mov	r2, r9
 8001b22:	08e4      	lsrs	r4, r4, #3
 8001b24:	075b      	lsls	r3, r3, #29
 8001b26:	4323      	orrs	r3, r4
 8001b28:	08d4      	lsrs	r4, r2, #3
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	4919      	ldr	r1, [pc, #100]	; (8001b94 <__aeabi_dsub+0x358>)
 8001b2e:	428a      	cmp	r2, r1
 8001b30:	d00e      	beq.n	8001b50 <__aeabi_dsub+0x314>
 8001b32:	0324      	lsls	r4, r4, #12
 8001b34:	0552      	lsls	r2, r2, #21
 8001b36:	0b24      	lsrs	r4, r4, #12
 8001b38:	0d52      	lsrs	r2, r2, #21
 8001b3a:	e722      	b.n	8001982 <__aeabi_dsub+0x146>
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	2400      	movs	r4, #0
 8001b40:	2300      	movs	r3, #0
 8001b42:	e71e      	b.n	8001982 <__aeabi_dsub+0x146>
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	4662      	mov	r2, ip
 8001b48:	0752      	lsls	r2, r2, #29
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	4662      	mov	r2, ip
 8001b4e:	08d4      	lsrs	r4, r2, #3
 8001b50:	001a      	movs	r2, r3
 8001b52:	4322      	orrs	r2, r4
 8001b54:	d100      	bne.n	8001b58 <__aeabi_dsub+0x31c>
 8001b56:	e1fc      	b.n	8001f52 <__aeabi_dsub+0x716>
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	4314      	orrs	r4, r2
 8001b5e:	0324      	lsls	r4, r4, #12
 8001b60:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <__aeabi_dsub+0x358>)
 8001b62:	0b24      	lsrs	r4, r4, #12
 8001b64:	e70d      	b.n	8001982 <__aeabi_dsub+0x146>
 8001b66:	0020      	movs	r0, r4
 8001b68:	f000 fa56 	bl	8002018 <__clzsi2>
 8001b6c:	0001      	movs	r1, r0
 8001b6e:	3118      	adds	r1, #24
 8001b70:	291f      	cmp	r1, #31
 8001b72:	dc00      	bgt.n	8001b76 <__aeabi_dsub+0x33a>
 8001b74:	e6c4      	b.n	8001900 <__aeabi_dsub+0xc4>
 8001b76:	3808      	subs	r0, #8
 8001b78:	4084      	lsls	r4, r0
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	2400      	movs	r4, #0
 8001b80:	4588      	cmp	r8, r1
 8001b82:	dc00      	bgt.n	8001b86 <__aeabi_dsub+0x34a>
 8001b84:	e6c8      	b.n	8001918 <__aeabi_dsub+0xdc>
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__aeabi_dsub+0x35c>)
 8001b88:	1a5b      	subs	r3, r3, r1
 8001b8a:	4010      	ands	r0, r2
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	4681      	mov	r9, r0
 8001b90:	e6d6      	b.n	8001940 <__aeabi_dsub+0x104>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	430f      	orrs	r7, r1
 8001ba6:	1e7a      	subs	r2, r7, #1
 8001ba8:	4197      	sbcs	r7, r2
 8001baa:	e691      	b.n	80018d0 <__aeabi_dsub+0x94>
 8001bac:	4661      	mov	r1, ip
 8001bae:	08db      	lsrs	r3, r3, #3
 8001bb0:	0749      	lsls	r1, r1, #29
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	4661      	mov	r1, ip
 8001bb6:	08cc      	lsrs	r4, r1, #3
 8001bb8:	e7b8      	b.n	8001b2c <__aeabi_dsub+0x2f0>
 8001bba:	4640      	mov	r0, r8
 8001bbc:	4cd3      	ldr	r4, [pc, #844]	; (8001f0c <__aeabi_dsub+0x6d0>)
 8001bbe:	3001      	adds	r0, #1
 8001bc0:	4220      	tst	r0, r4
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x38a>
 8001bc4:	e0a2      	b.n	8001d0c <__aeabi_dsub+0x4d0>
 8001bc6:	4640      	mov	r0, r8
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d000      	beq.n	8001bce <__aeabi_dsub+0x392>
 8001bcc:	e101      	b.n	8001dd2 <__aeabi_dsub+0x596>
 8001bce:	4660      	mov	r0, ip
 8001bd0:	4318      	orrs	r0, r3
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x39a>
 8001bd4:	e15e      	b.n	8001e94 <__aeabi_dsub+0x658>
 8001bd6:	0008      	movs	r0, r1
 8001bd8:	4338      	orrs	r0, r7
 8001bda:	d000      	beq.n	8001bde <__aeabi_dsub+0x3a2>
 8001bdc:	e15f      	b.n	8001e9e <__aeabi_dsub+0x662>
 8001bde:	4661      	mov	r1, ip
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	0749      	lsls	r1, r1, #29
 8001be4:	430b      	orrs	r3, r1
 8001be6:	4661      	mov	r1, ip
 8001be8:	08cc      	lsrs	r4, r1, #3
 8001bea:	e7a2      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001bec:	4dc8      	ldr	r5, [pc, #800]	; (8001f10 <__aeabi_dsub+0x6d4>)
 8001bee:	42a8      	cmp	r0, r5
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x3b8>
 8001bf2:	e0cf      	b.n	8001d94 <__aeabi_dsub+0x558>
 8001bf4:	2580      	movs	r5, #128	; 0x80
 8001bf6:	4664      	mov	r4, ip
 8001bf8:	042d      	lsls	r5, r5, #16
 8001bfa:	432c      	orrs	r4, r5
 8001bfc:	46a4      	mov	ip, r4
 8001bfe:	2a38      	cmp	r2, #56	; 0x38
 8001c00:	dc56      	bgt.n	8001cb0 <__aeabi_dsub+0x474>
 8001c02:	2a1f      	cmp	r2, #31
 8001c04:	dd00      	ble.n	8001c08 <__aeabi_dsub+0x3cc>
 8001c06:	e0d1      	b.n	8001dac <__aeabi_dsub+0x570>
 8001c08:	2520      	movs	r5, #32
 8001c0a:	001e      	movs	r6, r3
 8001c0c:	1aad      	subs	r5, r5, r2
 8001c0e:	4664      	mov	r4, ip
 8001c10:	40ab      	lsls	r3, r5
 8001c12:	40ac      	lsls	r4, r5
 8001c14:	40d6      	lsrs	r6, r2
 8001c16:	1e5d      	subs	r5, r3, #1
 8001c18:	41ab      	sbcs	r3, r5
 8001c1a:	4334      	orrs	r4, r6
 8001c1c:	4323      	orrs	r3, r4
 8001c1e:	4664      	mov	r4, ip
 8001c20:	40d4      	lsrs	r4, r2
 8001c22:	1b09      	subs	r1, r1, r4
 8001c24:	e049      	b.n	8001cba <__aeabi_dsub+0x47e>
 8001c26:	4660      	mov	r0, ip
 8001c28:	1bdc      	subs	r4, r3, r7
 8001c2a:	1a46      	subs	r6, r0, r1
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	4180      	sbcs	r0, r0
 8001c30:	4240      	negs	r0, r0
 8001c32:	4681      	mov	r9, r0
 8001c34:	0030      	movs	r0, r6
 8001c36:	464e      	mov	r6, r9
 8001c38:	1b80      	subs	r0, r0, r6
 8001c3a:	4681      	mov	r9, r0
 8001c3c:	0200      	lsls	r0, r0, #8
 8001c3e:	d476      	bmi.n	8001d2e <__aeabi_dsub+0x4f2>
 8001c40:	464b      	mov	r3, r9
 8001c42:	4323      	orrs	r3, r4
 8001c44:	d000      	beq.n	8001c48 <__aeabi_dsub+0x40c>
 8001c46:	e652      	b.n	80018ee <__aeabi_dsub+0xb2>
 8001c48:	2400      	movs	r4, #0
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	e771      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001c4e:	4339      	orrs	r1, r7
 8001c50:	000c      	movs	r4, r1
 8001c52:	1e62      	subs	r2, r4, #1
 8001c54:	4194      	sbcs	r4, r2
 8001c56:	18e4      	adds	r4, r4, r3
 8001c58:	429c      	cmp	r4, r3
 8001c5a:	419b      	sbcs	r3, r3
 8001c5c:	425b      	negs	r3, r3
 8001c5e:	4463      	add	r3, ip
 8001c60:	4699      	mov	r9, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	d400      	bmi.n	8001c6a <__aeabi_dsub+0x42e>
 8001c68:	e756      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	469c      	mov	ip, r3
 8001c6e:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <__aeabi_dsub+0x6d4>)
 8001c70:	44e0      	add	r8, ip
 8001c72:	4598      	cmp	r8, r3
 8001c74:	d038      	beq.n	8001ce8 <__aeabi_dsub+0x4ac>
 8001c76:	464b      	mov	r3, r9
 8001c78:	48a6      	ldr	r0, [pc, #664]	; (8001f14 <__aeabi_dsub+0x6d8>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4003      	ands	r3, r0
 8001c7e:	0018      	movs	r0, r3
 8001c80:	0863      	lsrs	r3, r4, #1
 8001c82:	4014      	ands	r4, r2
 8001c84:	431c      	orrs	r4, r3
 8001c86:	07c3      	lsls	r3, r0, #31
 8001c88:	431c      	orrs	r4, r3
 8001c8a:	0843      	lsrs	r3, r0, #1
 8001c8c:	4699      	mov	r9, r3
 8001c8e:	e657      	b.n	8001940 <__aeabi_dsub+0x104>
 8001c90:	0010      	movs	r0, r2
 8001c92:	000e      	movs	r6, r1
 8001c94:	3820      	subs	r0, #32
 8001c96:	40c6      	lsrs	r6, r0
 8001c98:	2a20      	cmp	r2, #32
 8001c9a:	d004      	beq.n	8001ca6 <__aeabi_dsub+0x46a>
 8001c9c:	2040      	movs	r0, #64	; 0x40
 8001c9e:	1a82      	subs	r2, r0, r2
 8001ca0:	4091      	lsls	r1, r2
 8001ca2:	430f      	orrs	r7, r1
 8001ca4:	46b9      	mov	r9, r7
 8001ca6:	464f      	mov	r7, r9
 8001ca8:	1e7a      	subs	r2, r7, #1
 8001caa:	4197      	sbcs	r7, r2
 8001cac:	4337      	orrs	r7, r6
 8001cae:	e60f      	b.n	80018d0 <__aeabi_dsub+0x94>
 8001cb0:	4662      	mov	r2, ip
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	4193      	sbcs	r3, r2
 8001cba:	1afc      	subs	r4, r7, r3
 8001cbc:	42a7      	cmp	r7, r4
 8001cbe:	41bf      	sbcs	r7, r7
 8001cc0:	427f      	negs	r7, r7
 8001cc2:	1bcb      	subs	r3, r1, r7
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	465d      	mov	r5, fp
 8001cc8:	4680      	mov	r8, r0
 8001cca:	e608      	b.n	80018de <__aeabi_dsub+0xa2>
 8001ccc:	4666      	mov	r6, ip
 8001cce:	431e      	orrs	r6, r3
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x498>
 8001cd2:	e0be      	b.n	8001e52 <__aeabi_dsub+0x616>
 8001cd4:	1e56      	subs	r6, r2, #1
 8001cd6:	2a01      	cmp	r2, #1
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x4a0>
 8001cda:	e109      	b.n	8001ef0 <__aeabi_dsub+0x6b4>
 8001cdc:	4c8c      	ldr	r4, [pc, #560]	; (8001f10 <__aeabi_dsub+0x6d4>)
 8001cde:	42a2      	cmp	r2, r4
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x4a8>
 8001ce2:	e119      	b.n	8001f18 <__aeabi_dsub+0x6dc>
 8001ce4:	0032      	movs	r2, r6
 8001ce6:	e6c1      	b.n	8001a6c <__aeabi_dsub+0x230>
 8001ce8:	4642      	mov	r2, r8
 8001cea:	2400      	movs	r4, #0
 8001cec:	2300      	movs	r3, #0
 8001cee:	e648      	b.n	8001982 <__aeabi_dsub+0x146>
 8001cf0:	2020      	movs	r0, #32
 8001cf2:	000c      	movs	r4, r1
 8001cf4:	1a80      	subs	r0, r0, r2
 8001cf6:	003e      	movs	r6, r7
 8001cf8:	4087      	lsls	r7, r0
 8001cfa:	4084      	lsls	r4, r0
 8001cfc:	40d6      	lsrs	r6, r2
 8001cfe:	1e78      	subs	r0, r7, #1
 8001d00:	4187      	sbcs	r7, r0
 8001d02:	40d1      	lsrs	r1, r2
 8001d04:	4334      	orrs	r4, r6
 8001d06:	433c      	orrs	r4, r7
 8001d08:	448c      	add	ip, r1
 8001d0a:	e7a4      	b.n	8001c56 <__aeabi_dsub+0x41a>
 8001d0c:	4a80      	ldr	r2, [pc, #512]	; (8001f10 <__aeabi_dsub+0x6d4>)
 8001d0e:	4290      	cmp	r0, r2
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x4d8>
 8001d12:	e0e9      	b.n	8001ee8 <__aeabi_dsub+0x6ac>
 8001d14:	19df      	adds	r7, r3, r7
 8001d16:	429f      	cmp	r7, r3
 8001d18:	419b      	sbcs	r3, r3
 8001d1a:	4461      	add	r1, ip
 8001d1c:	425b      	negs	r3, r3
 8001d1e:	18c9      	adds	r1, r1, r3
 8001d20:	07cc      	lsls	r4, r1, #31
 8001d22:	087f      	lsrs	r7, r7, #1
 8001d24:	084b      	lsrs	r3, r1, #1
 8001d26:	4699      	mov	r9, r3
 8001d28:	4680      	mov	r8, r0
 8001d2a:	433c      	orrs	r4, r7
 8001d2c:	e6f4      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001d2e:	1afc      	subs	r4, r7, r3
 8001d30:	42a7      	cmp	r7, r4
 8001d32:	41bf      	sbcs	r7, r7
 8001d34:	4663      	mov	r3, ip
 8001d36:	427f      	negs	r7, r7
 8001d38:	1ac9      	subs	r1, r1, r3
 8001d3a:	1bcb      	subs	r3, r1, r7
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	e5d5      	b.n	80018ee <__aeabi_dsub+0xb2>
 8001d42:	08ff      	lsrs	r7, r7, #3
 8001d44:	074b      	lsls	r3, r1, #29
 8001d46:	465d      	mov	r5, fp
 8001d48:	433b      	orrs	r3, r7
 8001d4a:	08cc      	lsrs	r4, r1, #3
 8001d4c:	e6ee      	b.n	8001b2c <__aeabi_dsub+0x2f0>
 8001d4e:	4662      	mov	r2, ip
 8001d50:	431a      	orrs	r2, r3
 8001d52:	d000      	beq.n	8001d56 <__aeabi_dsub+0x51a>
 8001d54:	e082      	b.n	8001e5c <__aeabi_dsub+0x620>
 8001d56:	000b      	movs	r3, r1
 8001d58:	433b      	orrs	r3, r7
 8001d5a:	d11b      	bne.n	8001d94 <__aeabi_dsub+0x558>
 8001d5c:	2480      	movs	r4, #128	; 0x80
 8001d5e:	2500      	movs	r5, #0
 8001d60:	0324      	lsls	r4, r4, #12
 8001d62:	e6f9      	b.n	8001b58 <__aeabi_dsub+0x31c>
 8001d64:	19dc      	adds	r4, r3, r7
 8001d66:	429c      	cmp	r4, r3
 8001d68:	419b      	sbcs	r3, r3
 8001d6a:	4461      	add	r1, ip
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	425b      	negs	r3, r3
 8001d70:	4499      	add	r9, r3
 8001d72:	464b      	mov	r3, r9
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	d444      	bmi.n	8001e02 <__aeabi_dsub+0x5c6>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	e6cc      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001d7e:	1bdc      	subs	r4, r3, r7
 8001d80:	4662      	mov	r2, ip
 8001d82:	42a3      	cmp	r3, r4
 8001d84:	419b      	sbcs	r3, r3
 8001d86:	1a51      	subs	r1, r2, r1
 8001d88:	425b      	negs	r3, r3
 8001d8a:	1acb      	subs	r3, r1, r3
 8001d8c:	4699      	mov	r9, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	4698      	mov	r8, r3
 8001d92:	e5a4      	b.n	80018de <__aeabi_dsub+0xa2>
 8001d94:	08ff      	lsrs	r7, r7, #3
 8001d96:	074b      	lsls	r3, r1, #29
 8001d98:	465d      	mov	r5, fp
 8001d9a:	433b      	orrs	r3, r7
 8001d9c:	08cc      	lsrs	r4, r1, #3
 8001d9e:	e6d7      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001da0:	4662      	mov	r2, ip
 8001da2:	431a      	orrs	r2, r3
 8001da4:	0014      	movs	r4, r2
 8001da6:	1e63      	subs	r3, r4, #1
 8001da8:	419c      	sbcs	r4, r3
 8001daa:	e679      	b.n	8001aa0 <__aeabi_dsub+0x264>
 8001dac:	0015      	movs	r5, r2
 8001dae:	4664      	mov	r4, ip
 8001db0:	3d20      	subs	r5, #32
 8001db2:	40ec      	lsrs	r4, r5
 8001db4:	46a0      	mov	r8, r4
 8001db6:	2a20      	cmp	r2, #32
 8001db8:	d005      	beq.n	8001dc6 <__aeabi_dsub+0x58a>
 8001dba:	2540      	movs	r5, #64	; 0x40
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	1aaa      	subs	r2, r5, r2
 8001dc0:	4094      	lsls	r4, r2
 8001dc2:	4323      	orrs	r3, r4
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4654      	mov	r4, sl
 8001dc8:	1e63      	subs	r3, r4, #1
 8001dca:	419c      	sbcs	r4, r3
 8001dcc:	4643      	mov	r3, r8
 8001dce:	4323      	orrs	r3, r4
 8001dd0:	e773      	b.n	8001cba <__aeabi_dsub+0x47e>
 8001dd2:	4662      	mov	r2, ip
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	d023      	beq.n	8001e20 <__aeabi_dsub+0x5e4>
 8001dd8:	000a      	movs	r2, r1
 8001dda:	433a      	orrs	r2, r7
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x5a4>
 8001dde:	e0a0      	b.n	8001f22 <__aeabi_dsub+0x6e6>
 8001de0:	4662      	mov	r2, ip
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	0752      	lsls	r2, r2, #29
 8001de6:	4313      	orrs	r3, r2
 8001de8:	4662      	mov	r2, ip
 8001dea:	08d4      	lsrs	r4, r2, #3
 8001dec:	e6b0      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001dee:	000b      	movs	r3, r1
 8001df0:	433b      	orrs	r3, r7
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x5ba>
 8001df4:	e728      	b.n	8001c48 <__aeabi_dsub+0x40c>
 8001df6:	08ff      	lsrs	r7, r7, #3
 8001df8:	074b      	lsls	r3, r1, #29
 8001dfa:	465d      	mov	r5, fp
 8001dfc:	433b      	orrs	r3, r7
 8001dfe:	08cc      	lsrs	r4, r1, #3
 8001e00:	e697      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001e02:	2302      	movs	r3, #2
 8001e04:	4698      	mov	r8, r3
 8001e06:	e736      	b.n	8001c76 <__aeabi_dsub+0x43a>
 8001e08:	1afc      	subs	r4, r7, r3
 8001e0a:	42a7      	cmp	r7, r4
 8001e0c:	41bf      	sbcs	r7, r7
 8001e0e:	4663      	mov	r3, ip
 8001e10:	427f      	negs	r7, r7
 8001e12:	1ac9      	subs	r1, r1, r3
 8001e14:	1bcb      	subs	r3, r1, r7
 8001e16:	4699      	mov	r9, r3
 8001e18:	2301      	movs	r3, #1
 8001e1a:	465d      	mov	r5, fp
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	e55e      	b.n	80018de <__aeabi_dsub+0xa2>
 8001e20:	074b      	lsls	r3, r1, #29
 8001e22:	08ff      	lsrs	r7, r7, #3
 8001e24:	433b      	orrs	r3, r7
 8001e26:	08cc      	lsrs	r4, r1, #3
 8001e28:	e692      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001e2a:	1bdc      	subs	r4, r3, r7
 8001e2c:	4660      	mov	r0, ip
 8001e2e:	42a3      	cmp	r3, r4
 8001e30:	41b6      	sbcs	r6, r6
 8001e32:	1a40      	subs	r0, r0, r1
 8001e34:	4276      	negs	r6, r6
 8001e36:	1b80      	subs	r0, r0, r6
 8001e38:	4681      	mov	r9, r0
 8001e3a:	0200      	lsls	r0, r0, #8
 8001e3c:	d560      	bpl.n	8001f00 <__aeabi_dsub+0x6c4>
 8001e3e:	1afc      	subs	r4, r7, r3
 8001e40:	42a7      	cmp	r7, r4
 8001e42:	41bf      	sbcs	r7, r7
 8001e44:	4663      	mov	r3, ip
 8001e46:	427f      	negs	r7, r7
 8001e48:	1ac9      	subs	r1, r1, r3
 8001e4a:	1bcb      	subs	r3, r1, r7
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	465d      	mov	r5, fp
 8001e50:	e576      	b.n	8001940 <__aeabi_dsub+0x104>
 8001e52:	08ff      	lsrs	r7, r7, #3
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	433b      	orrs	r3, r7
 8001e58:	08cc      	lsrs	r4, r1, #3
 8001e5a:	e667      	b.n	8001b2c <__aeabi_dsub+0x2f0>
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	433a      	orrs	r2, r7
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x62a>
 8001e64:	e66f      	b.n	8001b46 <__aeabi_dsub+0x30a>
 8001e66:	4662      	mov	r2, ip
 8001e68:	0752      	lsls	r2, r2, #29
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	4662      	mov	r2, ip
 8001e6e:	08d4      	lsrs	r4, r2, #3
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	0312      	lsls	r2, r2, #12
 8001e74:	4214      	tst	r4, r2
 8001e76:	d007      	beq.n	8001e88 <__aeabi_dsub+0x64c>
 8001e78:	08c8      	lsrs	r0, r1, #3
 8001e7a:	4210      	tst	r0, r2
 8001e7c:	d104      	bne.n	8001e88 <__aeabi_dsub+0x64c>
 8001e7e:	465d      	mov	r5, fp
 8001e80:	0004      	movs	r4, r0
 8001e82:	08fb      	lsrs	r3, r7, #3
 8001e84:	0749      	lsls	r1, r1, #29
 8001e86:	430b      	orrs	r3, r1
 8001e88:	0f5a      	lsrs	r2, r3, #29
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	0752      	lsls	r2, r2, #29
 8001e90:	4313      	orrs	r3, r2
 8001e92:	e65d      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001e94:	074b      	lsls	r3, r1, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	433b      	orrs	r3, r7
 8001e9a:	08cc      	lsrs	r4, r1, #3
 8001e9c:	e649      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001e9e:	19dc      	adds	r4, r3, r7
 8001ea0:	429c      	cmp	r4, r3
 8001ea2:	419b      	sbcs	r3, r3
 8001ea4:	4461      	add	r1, ip
 8001ea6:	4689      	mov	r9, r1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	4499      	add	r9, r3
 8001eac:	464b      	mov	r3, r9
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	d400      	bmi.n	8001eb4 <__aeabi_dsub+0x678>
 8001eb2:	e631      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001eb4:	464a      	mov	r2, r9
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <__aeabi_dsub+0x6d8>)
 8001eb8:	401a      	ands	r2, r3
 8001eba:	2301      	movs	r3, #1
 8001ebc:	4691      	mov	r9, r2
 8001ebe:	4698      	mov	r8, r3
 8001ec0:	e62a      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001ec2:	0016      	movs	r6, r2
 8001ec4:	4664      	mov	r4, ip
 8001ec6:	3e20      	subs	r6, #32
 8001ec8:	40f4      	lsrs	r4, r6
 8001eca:	46a0      	mov	r8, r4
 8001ecc:	2a20      	cmp	r2, #32
 8001ece:	d005      	beq.n	8001edc <__aeabi_dsub+0x6a0>
 8001ed0:	2640      	movs	r6, #64	; 0x40
 8001ed2:	4664      	mov	r4, ip
 8001ed4:	1ab2      	subs	r2, r6, r2
 8001ed6:	4094      	lsls	r4, r2
 8001ed8:	4323      	orrs	r3, r4
 8001eda:	469a      	mov	sl, r3
 8001edc:	4654      	mov	r4, sl
 8001ede:	1e63      	subs	r3, r4, #1
 8001ee0:	419c      	sbcs	r4, r3
 8001ee2:	4643      	mov	r3, r8
 8001ee4:	431c      	orrs	r4, r3
 8001ee6:	e5db      	b.n	8001aa0 <__aeabi_dsub+0x264>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	2400      	movs	r4, #0
 8001eec:	2300      	movs	r3, #0
 8001eee:	e548      	b.n	8001982 <__aeabi_dsub+0x146>
 8001ef0:	19dc      	adds	r4, r3, r7
 8001ef2:	42bc      	cmp	r4, r7
 8001ef4:	41bf      	sbcs	r7, r7
 8001ef6:	4461      	add	r1, ip
 8001ef8:	4689      	mov	r9, r1
 8001efa:	427f      	negs	r7, r7
 8001efc:	44b9      	add	r9, r7
 8001efe:	e738      	b.n	8001d72 <__aeabi_dsub+0x536>
 8001f00:	464b      	mov	r3, r9
 8001f02:	4323      	orrs	r3, r4
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x6cc>
 8001f06:	e69f      	b.n	8001c48 <__aeabi_dsub+0x40c>
 8001f08:	e606      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	000007fe 	.word	0x000007fe
 8001f10:	000007ff 	.word	0x000007ff
 8001f14:	ff7fffff 	.word	0xff7fffff
 8001f18:	08ff      	lsrs	r7, r7, #3
 8001f1a:	074b      	lsls	r3, r1, #29
 8001f1c:	433b      	orrs	r3, r7
 8001f1e:	08cc      	lsrs	r4, r1, #3
 8001f20:	e616      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001f22:	4662      	mov	r2, ip
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	0752      	lsls	r2, r2, #29
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	4662      	mov	r2, ip
 8001f2c:	08d4      	lsrs	r4, r2, #3
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	0312      	lsls	r2, r2, #12
 8001f32:	4214      	tst	r4, r2
 8001f34:	d007      	beq.n	8001f46 <__aeabi_dsub+0x70a>
 8001f36:	08c8      	lsrs	r0, r1, #3
 8001f38:	4210      	tst	r0, r2
 8001f3a:	d104      	bne.n	8001f46 <__aeabi_dsub+0x70a>
 8001f3c:	465d      	mov	r5, fp
 8001f3e:	0004      	movs	r4, r0
 8001f40:	08fb      	lsrs	r3, r7, #3
 8001f42:	0749      	lsls	r1, r1, #29
 8001f44:	430b      	orrs	r3, r1
 8001f46:	0f5a      	lsrs	r2, r3, #29
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	0752      	lsls	r2, r2, #29
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	e5fe      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001f52:	2300      	movs	r3, #0
 8001f54:	4a01      	ldr	r2, [pc, #4]	; (8001f5c <__aeabi_dsub+0x720>)
 8001f56:	001c      	movs	r4, r3
 8001f58:	e513      	b.n	8001982 <__aeabi_dsub+0x146>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff

08001f60 <__aeabi_d2iz>:
 8001f60:	000a      	movs	r2, r1
 8001f62:	b530      	push	{r4, r5, lr}
 8001f64:	4c13      	ldr	r4, [pc, #76]	; (8001fb4 <__aeabi_d2iz+0x54>)
 8001f66:	0053      	lsls	r3, r2, #1
 8001f68:	0309      	lsls	r1, r1, #12
 8001f6a:	0005      	movs	r5, r0
 8001f6c:	0b09      	lsrs	r1, r1, #12
 8001f6e:	2000      	movs	r0, #0
 8001f70:	0d5b      	lsrs	r3, r3, #21
 8001f72:	0fd2      	lsrs	r2, r2, #31
 8001f74:	42a3      	cmp	r3, r4
 8001f76:	dd04      	ble.n	8001f82 <__aeabi_d2iz+0x22>
 8001f78:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <__aeabi_d2iz+0x58>)
 8001f7a:	4283      	cmp	r3, r0
 8001f7c:	dd02      	ble.n	8001f84 <__aeabi_d2iz+0x24>
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <__aeabi_d2iz+0x5c>)
 8001f80:	18d0      	adds	r0, r2, r3
 8001f82:	bd30      	pop	{r4, r5, pc}
 8001f84:	2080      	movs	r0, #128	; 0x80
 8001f86:	0340      	lsls	r0, r0, #13
 8001f88:	4301      	orrs	r1, r0
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <__aeabi_d2iz+0x60>)
 8001f8c:	1ac0      	subs	r0, r0, r3
 8001f8e:	281f      	cmp	r0, #31
 8001f90:	dd08      	ble.n	8001fa4 <__aeabi_d2iz+0x44>
 8001f92:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <__aeabi_d2iz+0x64>)
 8001f94:	1ac3      	subs	r3, r0, r3
 8001f96:	40d9      	lsrs	r1, r3
 8001f98:	000b      	movs	r3, r1
 8001f9a:	4258      	negs	r0, r3
 8001f9c:	2a00      	cmp	r2, #0
 8001f9e:	d1f0      	bne.n	8001f82 <__aeabi_d2iz+0x22>
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	e7ee      	b.n	8001f82 <__aeabi_d2iz+0x22>
 8001fa4:	4c08      	ldr	r4, [pc, #32]	; (8001fc8 <__aeabi_d2iz+0x68>)
 8001fa6:	40c5      	lsrs	r5, r0
 8001fa8:	46a4      	mov	ip, r4
 8001faa:	4463      	add	r3, ip
 8001fac:	4099      	lsls	r1, r3
 8001fae:	000b      	movs	r3, r1
 8001fb0:	432b      	orrs	r3, r5
 8001fb2:	e7f2      	b.n	8001f9a <__aeabi_d2iz+0x3a>
 8001fb4:	000003fe 	.word	0x000003fe
 8001fb8:	0000041d 	.word	0x0000041d
 8001fbc:	7fffffff 	.word	0x7fffffff
 8001fc0:	00000433 	.word	0x00000433
 8001fc4:	00000413 	.word	0x00000413
 8001fc8:	fffffbed 	.word	0xfffffbed

08001fcc <__aeabi_ui2d>:
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	1e04      	subs	r4, r0, #0
 8001fd0:	d010      	beq.n	8001ff4 <__aeabi_ui2d+0x28>
 8001fd2:	f000 f821 	bl	8002018 <__clzsi2>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <__aeabi_ui2d+0x48>)
 8001fd8:	1a1b      	subs	r3, r3, r0
 8001fda:	280a      	cmp	r0, #10
 8001fdc:	dc11      	bgt.n	8002002 <__aeabi_ui2d+0x36>
 8001fde:	220b      	movs	r2, #11
 8001fe0:	0021      	movs	r1, r4
 8001fe2:	1a12      	subs	r2, r2, r0
 8001fe4:	40d1      	lsrs	r1, r2
 8001fe6:	3015      	adds	r0, #21
 8001fe8:	030a      	lsls	r2, r1, #12
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	4084      	lsls	r4, r0
 8001fee:	0b12      	lsrs	r2, r2, #12
 8001ff0:	0d5b      	lsrs	r3, r3, #21
 8001ff2:	e001      	b.n	8001ff8 <__aeabi_ui2d+0x2c>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	051b      	lsls	r3, r3, #20
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0020      	movs	r0, r4
 8001ffe:	0019      	movs	r1, r3
 8002000:	bd10      	pop	{r4, pc}
 8002002:	0022      	movs	r2, r4
 8002004:	380b      	subs	r0, #11
 8002006:	4082      	lsls	r2, r0
 8002008:	055b      	lsls	r3, r3, #21
 800200a:	0312      	lsls	r2, r2, #12
 800200c:	2400      	movs	r4, #0
 800200e:	0b12      	lsrs	r2, r2, #12
 8002010:	0d5b      	lsrs	r3, r3, #21
 8002012:	e7f1      	b.n	8001ff8 <__aeabi_ui2d+0x2c>
 8002014:	0000041e 	.word	0x0000041e

08002018 <__clzsi2>:
 8002018:	211c      	movs	r1, #28
 800201a:	2301      	movs	r3, #1
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	4298      	cmp	r0, r3
 8002020:	d301      	bcc.n	8002026 <__clzsi2+0xe>
 8002022:	0c00      	lsrs	r0, r0, #16
 8002024:	3910      	subs	r1, #16
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	4298      	cmp	r0, r3
 800202a:	d301      	bcc.n	8002030 <__clzsi2+0x18>
 800202c:	0a00      	lsrs	r0, r0, #8
 800202e:	3908      	subs	r1, #8
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	4298      	cmp	r0, r3
 8002034:	d301      	bcc.n	800203a <__clzsi2+0x22>
 8002036:	0900      	lsrs	r0, r0, #4
 8002038:	3904      	subs	r1, #4
 800203a:	a202      	add	r2, pc, #8	; (adr r2, 8002044 <__clzsi2+0x2c>)
 800203c:	5c10      	ldrb	r0, [r2, r0]
 800203e:	1840      	adds	r0, r0, r1
 8002040:	4770      	bx	lr
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	02020304 	.word	0x02020304
 8002048:	01010101 	.word	0x01010101
	...

08002054 <__clzdi2>:
 8002054:	b510      	push	{r4, lr}
 8002056:	2900      	cmp	r1, #0
 8002058:	d103      	bne.n	8002062 <__clzdi2+0xe>
 800205a:	f7ff ffdd 	bl	8002018 <__clzsi2>
 800205e:	3020      	adds	r0, #32
 8002060:	e002      	b.n	8002068 <__clzdi2+0x14>
 8002062:	0008      	movs	r0, r1
 8002064:	f7ff ffd8 	bl	8002018 <__clzsi2>
 8002068:	bd10      	pop	{r4, pc}
 800206a:	46c0      	nop			; (mov r8, r8)

0800206c <i2c1MasterInit>:
		i2c->data_rx[i] = '\0';
	for (int i = 0; i < I2C_TX_BUFFER_SIZE; i++)
		i2c->data_tx[i] = '\0';
}

void i2c1MasterInit() {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

	i2c1GpioInit();
 8002070:	f000 f83c 	bl	80020ec <i2c1GpioInit>
	/* clock enable */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <i2c1MasterInit+0x6c>)
 8002076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <i2c1MasterInit+0x6c>)
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	0389      	lsls	r1, r1, #14
 800207e:	430a      	orrs	r2, r1
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c
	/* peripherial disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <i2c1MasterInit+0x70>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <i2c1MasterInit+0x70>)
 8002088:	2101      	movs	r1, #1
 800208a:	438a      	bics	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
	/* set timing */
	I2C1->TIMINGR = 0x00303D5B;
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <i2c1MasterInit+0x70>)
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <i2c1MasterInit+0x74>)
 8002092:	611a      	str	r2, [r3, #16]
	/* */
	CLEAR_BIT(I2C2->OAR1, I2C_OAR1_OA1EN);
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <i2c1MasterInit+0x78>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <i2c1MasterInit+0x78>)
 800209a:	4913      	ldr	r1, [pc, #76]	; (80020e8 <i2c1MasterInit+0x7c>)
 800209c:	400a      	ands	r2, r1
 800209e:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(I2C2->OAR2, I2C_OAR2_OA2EN);
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <i2c1MasterInit+0x78>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <i2c1MasterInit+0x78>)
 80020a6:	4910      	ldr	r1, [pc, #64]	; (80020e8 <i2c1MasterInit+0x7c>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]

	/*tx and rx interrupt enable */
	SET_BIT(I2C2->CR1, I2C_CR1_RXIE);
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <i2c1MasterInit+0x78>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <i2c1MasterInit+0x78>)
 80020b2:	2104      	movs	r1, #4
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C2->CR1, I2C_CR1_TXIE);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <i2c1MasterInit+0x78>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <i2c1MasterInit+0x78>)
 80020be:	2102      	movs	r1, #2
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

	/* peripherial enable */
	SET_BIT(I2C2->CR1, I2C_CR1_PE);
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <i2c1MasterInit+0x78>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <i2c1MasterInit+0x78>)
 80020ca:	2101      	movs	r1, #1
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40005400 	.word	0x40005400
 80020e0:	00303d5b 	.word	0x00303d5b
 80020e4:	40005800 	.word	0x40005800
 80020e8:	ffff7fff 	.word	0xffff7fff

080020ec <i2c1GpioInit>:

void i2c1GpioInit() {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0

	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <i2c1GpioInit+0xb4>)
 80020f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f4:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <i2c1GpioInit+0xb4>)
 80020f6:	2102      	movs	r1, #2
 80020f8:	430a      	orrs	r2, r1
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34
	/* SCL PB6  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <i2c1GpioInit+0xb8>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002102:	4929      	ldr	r1, [pc, #164]	; (80021a8 <i2c1GpioInit+0xbc>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <i2c1GpioInit+0xb8>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <i2c1GpioInit+0xb8>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0189      	lsls	r1, r1, #6
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
	/* SDA PB7 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 8002116:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <i2c1GpioInit+0xb8>)
 800211c:	4923      	ldr	r1, [pc, #140]	; (80021ac <i2c1GpioInit+0xc0>)
 800211e:	400a      	ands	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	0209      	lsls	r1, r1, #8
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
	/* SCL PB6 High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED6_0);
	/* SDC PB7  High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_1 |GPIO_OSPEEDR_OSPEED7_0);

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6);
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002136:	491e      	ldr	r1, [pc, #120]	; (80021b0 <i2c1GpioInit+0xc4>)
 8002138:	400a      	ands	r2, r1
 800213a:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6 << 1);
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <i2c1GpioInit+0xb8>)
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002142:	21f0      	movs	r1, #240	; 0xf0
 8002144:	0549      	lsls	r1, r1, #21
 8002146:	430a      	orrs	r2, r1
 8002148:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<2);
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <i2c1GpioInit+0xb8>)
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002150:	21f0      	movs	r1, #240	; 0xf0
 8002152:	0589      	lsls	r1, r1, #22
 8002154:	430a      	orrs	r2, r1
 8002156:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<3);
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <i2c1GpioInit+0xb8>)
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <i2c1GpioInit+0xb8>)
 800215e:	4915      	ldr	r1, [pc, #84]	; (80021b4 <i2c1GpioInit+0xc8>)
 8002160:	400a      	ands	r2, r1
 8002162:	621a      	str	r2, [r3, #32]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7);
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <i2c1GpioInit+0xb8>)
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	0912      	lsrs	r2, r2, #4
 800216e:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<1);
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002176:	21e0      	movs	r1, #224	; 0xe0
 8002178:	0609      	lsls	r1, r1, #24
 800217a:	430a      	orrs	r2, r1
 800217c:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<2);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002184:	21c0      	movs	r1, #192	; 0xc0
 8002186:	0609      	lsls	r1, r1, #24
 8002188:	430a      	orrs	r2, r1
 800218a:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<3);
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <i2c1GpioInit+0xb8>)
 800218e:	6a1a      	ldr	r2, [r3, #32]
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002192:	0052      	lsls	r2, r2, #1
 8002194:	0852      	lsrs	r2, r2, #1
 8002196:	621a      	str	r2, [r3, #32]
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	50000400 	.word	0x50000400
 80021a8:	ffffefff 	.word	0xffffefff
 80021ac:	ffffbfff 	.word	0xffffbfff
 80021b0:	f0ffffff 	.word	0xf0ffffff
 80021b4:	87ffffff 	.word	0x87ffffff

080021b8 <i2c1MasterFrameRx>:
	SET_BIT(I2C2->ICR, I2C_ICR_STOPCF);

	return data;
}

void i2c1MasterFrameRx(char saddr, uint8_t *rcv, uint8_t N) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6039      	str	r1, [r7, #0]
 80021c0:	0011      	movs	r1, r2
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	1c02      	adds	r2, r0, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	1dbb      	adds	r3, r7, #6
 80021ca:	1c0a      	adds	r2, r1, #0
 80021cc:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 80021ce:	f002 fdc7 	bl	8004d60 <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	613b      	str	r3, [r7, #16]
	bool timeout = false;
 80021d6:	230f      	movs	r3, #15
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, READ, N);
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 f841 	bl	8002270 <i2c1MasterStartTransfer>

	for (int i = 0; i < N; i++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e027      	b.n	8002244 <i2c1MasterFrameRx+0x8c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 80021f4:	f002 fdb4 	bl	8004d60 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b14      	cmp	r3, #20
 8002200:	d906      	bls.n	8002210 <i2c1MasterFrameRx+0x58>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002208:	2101      	movs	r1, #1
 800220a:	438a      	bics	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
				return;
 800220e:	e02a      	b.n	8002266 <i2c1MasterFrameRx+0xae>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2204      	movs	r2, #4
 8002216:	4013      	ands	r3, r2
 8002218:	425a      	negs	r2, r3
 800221a:	4153      	adcs	r3, r2
 800221c:	b2db      	uxtb	r3, r3
 800221e:	0019      	movs	r1, r3
 8002220:	230f      	movs	r3, #15
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	4053      	eors	r3, r2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	400b      	ands	r3, r1
 800222e:	d1e1      	bne.n	80021f4 <i2c1MasterFrameRx+0x3c>
			}
		}
		rcv[i] = READ_REG(I2C1->RXDR);
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002232:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	18d3      	adds	r3, r2, r3
 800223a:	b2ca      	uxtb	r2, r1
 800223c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	1dbb      	adds	r3, r7, #6
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	429a      	cmp	r2, r3
 800224c:	dbe0      	blt.n	8002210 <i2c1MasterFrameRx+0x58>

	}
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2220      	movs	r2, #32
 8002256:	4013      	ands	r3, r2
 8002258:	d0fa      	beq.n	8002250 <i2c1MasterFrameRx+0x98>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <i2c1MasterFrameRx+0xb4>)
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	4b03      	ldr	r3, [pc, #12]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002260:	2120      	movs	r1, #32
 8002262:	430a      	orrs	r2, r1
 8002264:	61da      	str	r2, [r3, #28]
}
 8002266:	46bd      	mov	sp, r7
 8002268:	b006      	add	sp, #24
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40005400 	.word	0x40005400

08002270 <i2c1MasterStartTransfer>:

void i2c1MasterStartTransfer(char saddr, uint8_t transfer_request, uint8_t N) {
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	0004      	movs	r4, r0
 8002278:	0008      	movs	r0, r1
 800227a:	0011      	movs	r1, r2
 800227c:	1dfb      	adds	r3, r7, #7
 800227e:	1c22      	adds	r2, r4, #0
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	1dbb      	adds	r3, r7, #6
 8002284:	1c02      	adds	r2, r0, #0
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	1d7b      	adds	r3, r7, #5
 800228a:	1c0a      	adds	r2, r1, #0
 800228c:	701a      	strb	r2, [r3, #0]
	/* peripherial disable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 8002294:	2101      	movs	r1, #1
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
	/* set slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0a9b      	lsrs	r3, r3, #10
 80022a0:	0299      	lsls	r1, r3, #10
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022a8:	430a      	orrs	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]
	/* read N byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <i2c1MasterStartTransfer+0xa8>)
 80022b2:	401a      	ands	r2, r3
 80022b4:	1d7b      	adds	r3, r7, #5
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	0019      	movs	r1, r3
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0489      	lsls	r1, r1, #18
 80022cc:	430a      	orrs	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */
	if (transfer_request == 1) {
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <i2c1MasterStartTransfer+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	00c9      	lsls	r1, r1, #3
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	e009      	b.n	80022fc <i2c1MasterStartTransfer+0x8c>
	} else if (transfer_request == 0) {
 80022e8:	1dbb      	adds	r3, r7, #6
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <i2c1MasterStartTransfer+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022f6:	4909      	ldr	r1, [pc, #36]	; (800231c <i2c1MasterStartTransfer+0xac>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0189      	lsls	r1, r1, #6
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]

}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b003      	add	sp, #12
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	40005400 	.word	0x40005400
 8002318:	ff00ffff 	.word	0xff00ffff
 800231c:	fffffbff 	.word	0xfffffbff

08002320 <i2c1MasterByteTx>:
		}
	}

}

void i2c1MasterByteTx(uint8_t saddr, uint8_t *data, uint8_t N) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6039      	str	r1, [r7, #0]
 8002328:	0011      	movs	r1, r2
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	1c02      	adds	r2, r0, #0
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	1c0a      	adds	r2, r1, #0
 8002334:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, WRITE, N);
 8002336:	1dbb      	adds	r3, r7, #6
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff ff95 	bl	8002270 <i2c1MasterStartTransfer>
	uint32_t counter = HAL_GetTick();
 8002346:	f002 fd0b 	bl	8004d60 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e022      	b.n	800239a <i2c1MasterByteTx+0x7a>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {

			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 8002354:	f002 fd04 	bl	8004d60 <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b14      	cmp	r3, #20
 8002360:	d906      	bls.n	8002370 <i2c1MasterByteTx+0x50>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 8002368:	2101      	movs	r1, #1
 800236a:	438a      	bics	r2, r1
 800236c:	601a      	str	r2, [r3, #0]
				return;
 800236e:	e025      	b.n	80023bc <i2c1MasterByteTx+0x9c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d0ec      	beq.n	8002354 <i2c1MasterByteTx+0x34>
			}
		}
		MODIFY_REG(I2C1->TXDR, I2C_TXDR_TXDATA, data[i]);
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	4393      	bics	r3, r2
 8002382:	001a      	movs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6839      	ldr	r1, [r7, #0]
 8002388:	18cb      	adds	r3, r1, r3
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	0019      	movs	r1, r3
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 8002390:	430a      	orrs	r2, r1
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3301      	adds	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	1dbb      	adds	r3, r7, #6
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbe5      	blt.n	8002370 <i2c1MasterByteTx+0x50>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2220      	movs	r2, #32
 80023ac:	4013      	ands	r3, r2
 80023ae:	d0fa      	beq.n	80023a6 <i2c1MasterByteTx+0x86>
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 80023b6:	2120      	movs	r1, #32
 80023b8:	430a      	orrs	r2, r1
 80023ba:	619a      	str	r2, [r3, #24]

}
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	40005400 	.word	0x40005400

080023c8 <led_init>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void led_init(LED_t *led) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A) as output SUMA CHANGING*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 80023d0:	23a0      	movs	r3, #160	; 0xa0
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	23a0      	movs	r3, #160	; 0xa0
 80023d8:	05db      	lsls	r3, r3, #23
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	01c9      	lsls	r1, r1, #7
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 80023e2:	23a0      	movs	r3, #160	; 0xa0
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	23a0      	movs	r3, #160	; 0xa0
 80023ea:	05db      	lsls	r3, r3, #23
 80023ec:	4911      	ldr	r1, [pc, #68]	; (8002434 <led_init+0x6c>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)  as output SUMA END*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <led_init+0x70>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <led_init+0x70>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <led_init+0x70>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <led_init+0x70>)
 8002404:	2102      	movs	r1, #2
 8002406:	438a      	bics	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR) as output SYSTEM R */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <led_init+0x70>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <led_init+0x70>)
 8002410:	2104      	movs	r1, #4
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <led_init+0x70>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <led_init+0x70>)
 800241c:	2108      	movs	r1, #8
 800241e:	438a      	bics	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
	led_reset(led);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f839 	bl	800249c <led_reset>
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	ffff7fff 	.word	0xffff7fff
 8002438:	50000400 	.word	0x50000400

0800243c <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->ka_counter > LED_KA_STATE_TIMEOUT)
 8002444:	f002 fc8c 	bl	8004d60 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1ad2      	subs	r2, r2, r3
 8002450:	23fa      	movs	r3, #250	; 0xfa
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d905      	bls.n	8002464 <led_enable_kalive+0x28>
		l->ka_counter = HAL_GetTick();
 8002458:	f002 fc82 	bl	8004d60 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
			sys_rp_led_off();
		else
			sys_rp_led_on();
	}

}
 8002462:	e014      	b.n	800248e <led_enable_kalive+0x52>
		if (HAL_GetTick() - l->ka_counter > LED_KA_ON_TIMEOUT)
 8002464:	f002 fc7c 	bl	8004d60 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b32      	cmp	r3, #50	; 0x32
 8002472:	d906      	bls.n	8002482 <led_enable_kalive+0x46>
			sys_rp_led_off();
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <led_enable_kalive+0x5c>)
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <led_enable_kalive+0x5c>)
 800247a:	2102      	movs	r1, #2
 800247c:	438a      	bics	r2, r1
 800247e:	615a      	str	r2, [r3, #20]
}
 8002480:	e005      	b.n	800248e <led_enable_kalive+0x52>
			sys_rp_led_on();
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <led_enable_kalive+0x5c>)
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <led_enable_kalive+0x5c>)
 8002488:	2102      	movs	r1, #2
 800248a:	430a      	orrs	r2, r1
 800248c:	615a      	str	r2, [r3, #20]
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b002      	add	sp, #8
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	50000400 	.word	0x50000400

0800249c <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	l->ch_counter = 0;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
	l->cl_counter = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
	l->cn_counter = 0;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
	l->ka_counter = HAL_GetTick();
 80024b6:	f002 fc53 	bl	8004d60 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	601a      	str	r2, [r3, #0]
	l->sysrp_counter = 0;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
	l->th_counter = 0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
	l->tok_counter = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	615a      	str	r2, [r3, #20]
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}

080024da <m24c64ReadNBytes>:

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
	i2c1MasterFrameRx(CHIP_ADDR, data, 32);
}

void m24c64ReadNBytes(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 80024da:	b590      	push	{r4, r7, lr}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	0004      	movs	r4, r0
 80024e2:	6039      	str	r1, [r7, #0]
 80024e4:	0010      	movs	r0, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	1c22      	adds	r2, r4, #0
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	1dbb      	adds	r3, r7, #6
 80024f0:	1c02      	adds	r2, r0, #0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	1d7b      	adds	r3, r7, #5
 80024f6:	1c0a      	adds	r2, r1, #0
 80024f8:	701a      	strb	r2, [r3, #0]
	uint8_t buff[2] = { 0 };
 80024fa:	210c      	movs	r1, #12
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 8002502:	1dfb      	adds	r3, r7, #7
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	b21a      	sxth	r2, r3
 800250a:	1dbb      	adds	r3, r7, #6
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b21a      	sxth	r2, r3
 8002514:	200e      	movs	r0, #14
 8002516:	183b      	adds	r3, r7, r0
 8002518:	801a      	strh	r2, [r3, #0]

	buff[0] = MemAddress >> 8;
 800251a:	183b      	adds	r3, r7, r0
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	b29b      	uxth	r3, r3
 8002522:	b2da      	uxtb	r2, r3
 8002524:	187b      	adds	r3, r7, r1
 8002526:	701a      	strb	r2, [r3, #0]
	buff[1] = MemAddress & 0xff;
 8002528:	183b      	adds	r3, r7, r0
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	187b      	adds	r3, r7, r1
 8002530:	705a      	strb	r2, [r3, #1]

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2202      	movs	r2, #2
 8002536:	0019      	movs	r1, r3
 8002538:	20a0      	movs	r0, #160	; 0xa0
 800253a:	f7ff fef1 	bl	8002320 <i2c1MasterByteTx>
	HAL_Delay(5);
 800253e:	2005      	movs	r0, #5
 8002540:	f002 fc18 	bl	8004d74 <HAL_Delay>
	i2c1MasterFrameRx(CHIP_ADDR, data, size);
 8002544:	1d7b      	adds	r3, r7, #5
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	0019      	movs	r1, r3
 800254c:	20a0      	movs	r0, #160	; 0xa0
 800254e:	f7ff fe33 	bl	80021b8 <i2c1MasterFrameRx>
}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b005      	add	sp, #20
 8002558:	bd90      	pop	{r4, r7, pc}

0800255a <getFreqOutFromEeprom>:
MAX2871_t *ppl_ptr;
UART1_t *uart1_ptr;
Tone_uhf_t *uhf_ptr;
RS485_t *rs485_ptr;

void getFreqOutFromEeprom(uint8_t buffer[10], MAX2871_t *ppl) {
 800255a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255c:	b087      	sub	sp, #28
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
	m24c64ReadNBytes(BASE_ADDR, buffer, FREQ_OUT_ADDR, FREQ_OUT_SIZE);
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	2308      	movs	r3, #8
 8002568:	2203      	movs	r2, #3
 800256a:	2003      	movs	r0, #3
 800256c:	f7ff ffb5 	bl	80024da <m24c64ReadNBytes>
	for (int i = FREQ_OUT_SIZE - 1; i >= 0; i--)
 8002570:	2307      	movs	r3, #7
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e01b      	b.n	80025ae <getFreqOutFromEeprom+0x54>
		ppl->FreqOut |= (buffer[i] << (i * 8));
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	6979      	ldr	r1, [r7, #20]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	1841      	adds	r1, r0, r1
 8002582:	7809      	ldrb	r1, [r1, #0]
 8002584:	0008      	movs	r0, r1
 8002586:	6979      	ldr	r1, [r7, #20]
 8002588:	00c9      	lsls	r1, r1, #3
 800258a:	4088      	lsls	r0, r1
 800258c:	0001      	movs	r1, r0
 800258e:	6039      	str	r1, [r7, #0]
 8002590:	17c9      	asrs	r1, r1, #31
 8002592:	6079      	str	r1, [r7, #4]
 8002594:	6838      	ldr	r0, [r7, #0]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	0006      	movs	r6, r0
 800259a:	4316      	orrs	r6, r2
 800259c:	0034      	movs	r4, r6
 800259e:	4319      	orrs	r1, r3
 80025a0:	000d      	movs	r5, r1
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	601c      	str	r4, [r3, #0]
 80025a6:	605d      	str	r5, [r3, #4]
	for (int i = FREQ_OUT_SIZE - 1; i >= 0; i--)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	dae0      	bge.n	8002576 <getFreqOutFromEeprom+0x1c>
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b007      	add	sp, #28
 80025bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025c0 <getFreqOut>:

unsigned long getFreqOut(unsigned long FreqBase) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	unsigned long suma_read;
	suma_read = FreqBase;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) ? 0 : FREQ_STEP;
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <getFreqOut+0x14c>)
 80025ce:	2104      	movs	r1, #4
 80025d0:	0018      	movs	r0, r3
 80025d2:	f002 fe0b 	bl	80051ec <HAL_GPIO_ReadPin>
 80025d6:	1e03      	subs	r3, r0, #0
 80025d8:	d001      	beq.n	80025de <getFreqOut+0x1e>
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <getFreqOut+0x20>
 80025de:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <getFreqOut+0x150>)
 80025e0:	001a      	movs	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	189b      	adds	r3, r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) ? 0 : FREQ_STEP * 2;
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	005a      	lsls	r2, r3, #1
 80025ec:	23a0      	movs	r3, #160	; 0xa0
 80025ee:	05db      	lsls	r3, r3, #23
 80025f0:	0011      	movs	r1, r2
 80025f2:	0018      	movs	r0, r3
 80025f4:	f002 fdfa 	bl	80051ec <HAL_GPIO_ReadPin>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d001      	beq.n	8002600 <getFreqOut+0x40>
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <getFreqOut+0x42>
 8002600:	4b44      	ldr	r3, [pc, #272]	; (8002714 <getFreqOut+0x154>)
 8002602:	001a      	movs	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	189b      	adds	r3, r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) ? 0 : FREQ_STEP * 4;
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <getFreqOut+0x158>)
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	0018      	movs	r0, r3
 8002610:	f002 fdec 	bl	80051ec <HAL_GPIO_ReadPin>
 8002614:	1e03      	subs	r3, r0, #0
 8002616:	d001      	beq.n	800261c <getFreqOut+0x5c>
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <getFreqOut+0x5e>
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <getFreqOut+0x15c>)
 800261e:	001a      	movs	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	189b      	adds	r3, r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) ? 0 : FREQ_STEP * 8;
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	011a      	lsls	r2, r3, #4
 800262a:	23a0      	movs	r3, #160	; 0xa0
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	0011      	movs	r1, r2
 8002630:	0018      	movs	r0, r3
 8002632:	f002 fddb 	bl	80051ec <HAL_GPIO_ReadPin>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d001      	beq.n	800263e <getFreqOut+0x7e>
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <getFreqOut+0x80>
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <getFreqOut+0x160>)
 8002640:	001a      	movs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	189b      	adds	r3, r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_4_GPIO_Port, SW_4_Pin) ? 0 : FREQ_STEP * 16;
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	23a0      	movs	r3, #160	; 0xa0
 800264e:	05db      	lsls	r3, r3, #23
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f002 fdca 	bl	80051ec <HAL_GPIO_ReadPin>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <getFreqOut+0xa0>
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <getFreqOut+0xa2>
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <getFreqOut+0x164>)
 8002662:	001a      	movs	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	189b      	adds	r3, r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin) ? 0 : FREQ_STEP * 32;
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	021a      	lsls	r2, r3, #8
 800266e:	23a0      	movs	r3, #160	; 0xa0
 8002670:	05db      	lsls	r3, r3, #23
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f002 fdb9 	bl	80051ec <HAL_GPIO_ReadPin>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d001      	beq.n	8002682 <getFreqOut+0xc2>
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <getFreqOut+0xc4>
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <getFreqOut+0x168>)
 8002684:	001a      	movs	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	189b      	adds	r3, r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_6_GPIO_Port, SW_6_Pin) ? 0 : FREQ_STEP * 64;
 800268c:	4b1f      	ldr	r3, [pc, #124]	; (800270c <getFreqOut+0x14c>)
 800268e:	2108      	movs	r1, #8
 8002690:	0018      	movs	r0, r3
 8002692:	f002 fdab 	bl	80051ec <HAL_GPIO_ReadPin>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d001      	beq.n	800269e <getFreqOut+0xde>
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <getFreqOut+0xe0>
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <getFreqOut+0x16c>)
 80026a0:	001a      	movs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	189b      	adds	r3, r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_7_GPIO_Port, SW_7_Pin) ? 0 : FREQ_STEP * 128;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <getFreqOut+0x14c>)
 80026aa:	2110      	movs	r1, #16
 80026ac:	0018      	movs	r0, r3
 80026ae:	f002 fd9d 	bl	80051ec <HAL_GPIO_ReadPin>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d001      	beq.n	80026ba <getFreqOut+0xfa>
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <getFreqOut+0xfc>
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <getFreqOut+0x170>)
 80026bc:	001a      	movs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_8_GPIO_Port, SW_8_Pin) ? 0 : FREQ_STEP * 256;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <getFreqOut+0x14c>)
 80026c6:	2120      	movs	r1, #32
 80026c8:	0018      	movs	r0, r3
 80026ca:	f002 fd8f 	bl	80051ec <HAL_GPIO_ReadPin>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d001      	beq.n	80026d6 <getFreqOut+0x116>
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <getFreqOut+0x118>
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <getFreqOut+0x174>)
 80026d8:	001a      	movs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	189b      	adds	r3, r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_9_GPIO_Port, SW_9_Pin) ? 0 : FREQ_STEP * 512;
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4a09      	ldr	r2, [pc, #36]	; (800270c <getFreqOut+0x14c>)
 80026e6:	0019      	movs	r1, r3
 80026e8:	0010      	movs	r0, r2
 80026ea:	f002 fd7f 	bl	80051ec <HAL_GPIO_ReadPin>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d001      	beq.n	80026f6 <getFreqOut+0x136>
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <getFreqOut+0x138>
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <getFreqOut+0x178>)
 80026f8:	001a      	movs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
	return suma_read;
 8002700:	68fb      	ldr	r3, [r7, #12]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	50000400 	.word	0x50000400
 8002710:	000030d4 	.word	0x000030d4
 8002714:	000061a8 	.word	0x000061a8
 8002718:	50000800 	.word	0x50000800
 800271c:	0000c350 	.word	0x0000c350
 8002720:	000186a0 	.word	0x000186a0
 8002724:	00030d40 	.word	0x00030d40
 8002728:	00061a80 	.word	0x00061a80
 800272c:	000c3500 	.word	0x000c3500
 8002730:	00186a00 	.word	0x00186a00
 8002734:	0030d400 	.word	0x0030d400
 8002738:	0061a800 	.word	0x0061a800

0800273c <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
	uart1_read_to_frame(uart1_ptr);
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <USART1_IRQHandler+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0018      	movs	r0, r3
 8002746:	f002 f9d3 	bl	8004af0 <uart1_read_to_frame>
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200000f4 	.word	0x200000f4

08002754 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002756:	b0f9      	sub	sp, #484	; 0x1e4
 8002758:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	RS485_t rs485;
	MAX2871_t ppl;
	ppl_ptr = &ppl;
 800275a:	4bab      	ldr	r3, [pc, #684]	; (8002a08 <main+0x2b4>)
 800275c:	26c0      	movs	r6, #192	; 0xc0
 800275e:	2008      	movs	r0, #8
 8002760:	1832      	adds	r2, r6, r0
 8002762:	19d2      	adds	r2, r2, r7
 8002764:	601a      	str	r2, [r3, #0]
	LED_t led;
	uint8_t buffer[10] = { 0 };
 8002766:	4ba9      	ldr	r3, [pc, #676]	; (8002a0c <main+0x2b8>)
 8002768:	22ec      	movs	r2, #236	; 0xec
 800276a:	0052      	lsls	r2, r2, #1
 800276c:	189b      	adds	r3, r3, r2
 800276e:	2208      	movs	r2, #8
 8002770:	4694      	mov	ip, r2
 8002772:	44bc      	add	ip, r7
 8002774:	4463      	add	r3, ip
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	3304      	adds	r3, #4
 800277c:	2206      	movs	r2, #6
 800277e:	2100      	movs	r1, #0
 8002780:	0018      	movs	r0, r3
 8002782:	f003 fdf7 	bl	8006374 <memset>
	UART1_t uart1;
	Tone_uhf_t uhf;
	uart1_ptr = &uart1;
 8002786:	4ba2      	ldr	r3, [pc, #648]	; (8002a10 <main+0x2bc>)
 8002788:	2214      	movs	r2, #20
 800278a:	2008      	movs	r0, #8
 800278c:	1812      	adds	r2, r2, r0
 800278e:	19d2      	adds	r2, r2, r7
 8002790:	601a      	str	r2, [r3, #0]
	uhf_ptr = &uhf;
 8002792:	4ba0      	ldr	r3, [pc, #640]	; (8002a14 <main+0x2c0>)
 8002794:	220c      	movs	r2, #12
 8002796:	18ba      	adds	r2, r7, r2
 8002798:	601a      	str	r2, [r3, #0]
	rs485_ptr = &rs485;
 800279a:	4b9f      	ldr	r3, [pc, #636]	; (8002a18 <main+0x2c4>)
 800279c:	21d4      	movs	r1, #212	; 0xd4
 800279e:	0049      	lsls	r1, r1, #1
 80027a0:	1809      	adds	r1, r1, r0
 80027a2:	19ca      	adds	r2, r1, r7
 80027a4:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027a6:	f002 fa5f 	bl	8004c68 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027aa:	f000 fbb3 	bl	8002f14 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80027ae:	f000 fc39 	bl	8003024 <MX_GPIO_Init>
	//MX_I2C1_Init();
	MX_SPI2_Init();
 80027b2:	f000 fbf7 	bl	8002fa4 <MX_SPI2_Init>
	//MX_USART1_UART_Init();
	//MX_CRC_Init();
	/* USER CODE BEGIN 2 */
	toneUhfInit(UHF_TONE, ID0, &uhf);
 80027b6:	230c      	movs	r3, #12
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	001a      	movs	r2, r3
 80027bc:	2100      	movs	r1, #0
 80027be:	2007      	movs	r0, #7
 80027c0:	f001 fd8b 	bl	80042da <toneUhfInit>

	rs485_init(&rs485);
 80027c4:	21d4      	movs	r1, #212	; 0xd4
 80027c6:	0049      	lsls	r1, r1, #1
 80027c8:	2008      	movs	r0, #8
 80027ca:	180b      	adds	r3, r1, r0
 80027cc:	19db      	adds	r3, r3, r7
 80027ce:	0018      	movs	r0, r3
 80027d0:	f001 fe08 	bl	80043e4 <rs485_init>
	led_init(&led);
 80027d4:	23a4      	movs	r3, #164	; 0xa4
 80027d6:	2108      	movs	r1, #8
 80027d8:	185b      	adds	r3, r3, r1
 80027da:	19db      	adds	r3, r3, r7
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff fdf3 	bl	80023c8 <led_init>
	max2871Init(&ppl);
 80027e2:	2108      	movs	r1, #8
 80027e4:	1873      	adds	r3, r6, r1
 80027e6:	19db      	adds	r3, r3, r7
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 fe99 	bl	8003520 <max2871Init>
	max2871RegisterInit(&hspi2, &ppl);
 80027ee:	2108      	movs	r1, #8
 80027f0:	1873      	adds	r3, r6, r1
 80027f2:	19da      	adds	r2, r3, r7
 80027f4:	4b89      	ldr	r3, [pc, #548]	; (8002a1c <main+0x2c8>)
 80027f6:	0011      	movs	r1, r2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f001 fc83 	bl	8004104 <max2871RegisterInit>
	i2c1MasterInit();
 80027fe:	f7ff fc35 	bl	800206c <i2c1MasterInit>
	uart1_init(HS16_CLK, BAUD_RATE, &uart1);
 8002802:	2214      	movs	r2, #20
 8002804:	2108      	movs	r1, #8
 8002806:	1853      	adds	r3, r2, r1
 8002808:	19da      	adds	r2, r3, r7
 800280a:	23e1      	movs	r3, #225	; 0xe1
 800280c:	025b      	lsls	r3, r3, #9
 800280e:	4884      	ldr	r0, [pc, #528]	; (8002a20 <main+0x2cc>)
 8002810:	0019      	movs	r1, r3
 8002812:	f002 f8b9 	bl	8004988 <uart1_init>
	getFreqOutFromEeprom(buffer, &ppl);
 8002816:	2108      	movs	r1, #8
 8002818:	1873      	adds	r3, r6, r1
 800281a:	19da      	adds	r2, r3, r7
 800281c:	2398      	movs	r3, #152	; 0x98
 800281e:	000e      	movs	r6, r1
 8002820:	185b      	adds	r3, r3, r1
 8002822:	19db      	adds	r3, r3, r7
 8002824:	0011      	movs	r1, r2
 8002826:	0018      	movs	r0, r3
 8002828:	f7ff fe97 	bl	800255a <getFreqOutFromEeprom>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	unsigned long freqOutCurrent = -1;
 800282c:	2301      	movs	r3, #1
 800282e:	425b      	negs	r3, r3
 8002830:	22ea      	movs	r2, #234	; 0xea
 8002832:	0052      	lsls	r2, r2, #1
 8002834:	1992      	adds	r2, r2, r6
 8002836:	19d2      	adds	r2, r2, r7
 8002838:	6013      	str	r3, [r2, #0]
	unsigned long freqOutRead;
	unsigned long freqOutNew = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	22e8      	movs	r2, #232	; 0xe8
 800283e:	0052      	lsls	r2, r2, #1
 8002840:	1992      	adds	r2, r2, r6
 8002842:	19d2      	adds	r2, r2, r7
 8002844:	6013      	str	r3, [r2, #0]
	unsigned long lastReadTick = HAL_GetTick();
 8002846:	f002 fa8b 	bl	8004d60 <HAL_GetTick>
 800284a:	0003      	movs	r3, r0
 800284c:	22e6      	movs	r2, #230	; 0xe6
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	1992      	adds	r2, r2, r6
 8002852:	19d2      	adds	r2, r2, r7
 8002854:	6013      	str	r3, [r2, #0]
	unsigned long FreqBase = 145000000;
 8002856:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <main+0x2d0>)
 8002858:	22e4      	movs	r2, #228	; 0xe4
 800285a:	0052      	lsls	r2, r2, #1
 800285c:	1992      	adds	r2, r2, r6
 800285e:	19d2      	adds	r2, r2, r7
 8002860:	6013      	str	r3, [r2, #0]
	unsigned long ON_OFF;
	unsigned long FreqOutCh;
	unsigned long FreqBaseCh;
	unsigned long PdBmCh;

	HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 8002862:	23a0      	movs	r3, #160	; 0xa0
 8002864:	05db      	lsls	r3, r3, #23
 8002866:	2201      	movs	r2, #1
 8002868:	2120      	movs	r1, #32
 800286a:	0018      	movs	r0, r3
 800286c:	f002 fcdb 	bl	8005226 <HAL_GPIO_WritePin>

	while (1) {

		led_enable_kalive(&led);
 8002870:	23a4      	movs	r3, #164	; 0xa4
 8002872:	2608      	movs	r6, #8
 8002874:	199b      	adds	r3, r3, r6
 8002876:	19db      	adds	r3, r3, r7
 8002878:	0018      	movs	r0, r3
 800287a:	f7ff fddf 	bl	800243c <led_enable_kalive>
		freqOutRead = getFreqOut(FreqBase);
 800287e:	23e4      	movs	r3, #228	; 0xe4
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	199b      	adds	r3, r3, r6
 8002884:	19db      	adds	r3, r3, r7
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff fe99 	bl	80025c0 <getFreqOut>
 800288e:	0003      	movs	r3, r0
 8002890:	26e2      	movs	r6, #226	; 0xe2
 8002892:	0076      	lsls	r6, r6, #1
 8002894:	2008      	movs	r0, #8
 8002896:	1832      	adds	r2, r6, r0
 8002898:	19d2      	adds	r2, r2, r7
 800289a:	6013      	str	r3, [r2, #0]

		if (freqOutRead != freqOutNew) {
 800289c:	1833      	adds	r3, r6, r0
 800289e:	19db      	adds	r3, r3, r7
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	23e8      	movs	r3, #232	; 0xe8
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	181b      	adds	r3, r3, r0
 80028a8:	19d9      	adds	r1, r3, r7
 80028aa:	680b      	ldr	r3, [r1, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d03b      	beq.n	8002928 <main+0x1d4>
			sprintf(uart1.tx_buffer, "Frequency: %u\n", freqOutRead);
 80028b0:	0003      	movs	r3, r0
 80028b2:	18f2      	adds	r2, r6, r3
 80028b4:	19d1      	adds	r1, r2, r7
 80028b6:	680a      	ldr	r2, [r1, #0]
 80028b8:	495b      	ldr	r1, [pc, #364]	; (8002a28 <main+0x2d4>)
 80028ba:	2014      	movs	r0, #20
 80028bc:	18c0      	adds	r0, r0, r3
 80028be:	19c3      	adds	r3, r0, r7
 80028c0:	3319      	adds	r3, #25
 80028c2:	0018      	movs	r0, r3
 80028c4:	f003 fd5e 	bl	8006384 <siprintf>
			uart1_send_frame(uart1.tx_buffer, TX_BUFFLEN);
 80028c8:	2014      	movs	r0, #20
 80028ca:	2308      	movs	r3, #8
 80028cc:	18c2      	adds	r2, r0, r3
 80028ce:	19d3      	adds	r3, r2, r7
 80028d0:	3319      	adds	r3, #25
 80028d2:	2164      	movs	r1, #100	; 0x64
 80028d4:	0018      	movs	r0, r3
 80028d6:	f002 f953 	bl	8004b80 <uart1_send_frame>
			Change_end_off();
 80028da:	23a0      	movs	r3, #160	; 0xa0
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	23a0      	movs	r3, #160	; 0xa0
 80028e2:	05db      	lsls	r3, r3, #23
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	438a      	bics	r2, r1
 80028e8:	615a      	str	r2, [r3, #20]
			lastReadTick = HAL_GetTick();
 80028ea:	f002 fa39 	bl	8004d60 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	21e6      	movs	r1, #230	; 0xe6
 80028f2:	0049      	lsls	r1, r1, #1
 80028f4:	2008      	movs	r0, #8
 80028f6:	180a      	adds	r2, r1, r0
 80028f8:	19d1      	adds	r1, r2, r7
 80028fa:	600b      	str	r3, [r1, #0]
			HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_RESET);
 80028fc:	23a0      	movs	r3, #160	; 0xa0
 80028fe:	05db      	lsls	r3, r3, #23
 8002900:	2200      	movs	r2, #0
 8002902:	2120      	movs	r1, #32
 8002904:	0018      	movs	r0, r3
 8002906:	f002 fc8e 	bl	8005226 <HAL_GPIO_WritePin>
			Freq_changing_on();
 800290a:	4b48      	ldr	r3, [pc, #288]	; (8002a2c <main+0x2d8>)
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <main+0x2d8>)
 8002910:	2101      	movs	r1, #1
 8002912:	430a      	orrs	r2, r1
 8002914:	615a      	str	r2, [r3, #20]
			freqOutNew = freqOutRead;
 8002916:	2008      	movs	r0, #8
 8002918:	1833      	adds	r3, r6, r0
 800291a:	19d9      	adds	r1, r3, r7
 800291c:	680b      	ldr	r3, [r1, #0]
 800291e:	22e8      	movs	r2, #232	; 0xe8
 8002920:	0052      	lsls	r2, r2, #1
 8002922:	1812      	adds	r2, r2, r0
 8002924:	19d2      	adds	r2, r2, r7
 8002926:	6013      	str	r3, [r2, #0]
		}

		if ((HAL_GetTick() - lastReadTick) > 100) {
 8002928:	f002 fa1a 	bl	8004d60 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	23e6      	movs	r3, #230	; 0xe6
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2108      	movs	r1, #8
 8002934:	185b      	adds	r3, r3, r1
 8002936:	19db      	adds	r3, r3, r7
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b64      	cmp	r3, #100	; 0x64
 800293e:	d943      	bls.n	80029c8 <main+0x274>
			if (freqOutNew != freqOutCurrent) {
 8002940:	26e8      	movs	r6, #232	; 0xe8
 8002942:	0076      	lsls	r6, r6, #1
 8002944:	1873      	adds	r3, r6, r1
 8002946:	19db      	adds	r3, r3, r7
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	23ea      	movs	r3, #234	; 0xea
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	0008      	movs	r0, r1
 8002950:	185b      	adds	r3, r3, r1
 8002952:	19d9      	adds	r1, r3, r7
 8002954:	680b      	ldr	r3, [r1, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d036      	beq.n	80029c8 <main+0x274>
				ppl.FreqOut = freqOutRead;
 800295a:	21e2      	movs	r1, #226	; 0xe2
 800295c:	0049      	lsls	r1, r1, #1
 800295e:	0002      	movs	r2, r0
 8002960:	188b      	adds	r3, r1, r2
 8002962:	19d9      	adds	r1, r3, r7
 8002964:	680b      	ldr	r3, [r1, #0]
 8002966:	001c      	movs	r4, r3
 8002968:	2300      	movs	r3, #0
 800296a:	001d      	movs	r5, r3
 800296c:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <main+0x2dc>)
 800296e:	21ec      	movs	r1, #236	; 0xec
 8002970:	0049      	lsls	r1, r1, #1
 8002972:	1859      	adds	r1, r3, r1
 8002974:	18bb      	adds	r3, r7, r2
 8002976:	18cb      	adds	r3, r1, r3
 8002978:	601c      	str	r4, [r3, #0]
 800297a:	605d      	str	r5, [r3, #4]
				max2871Program(&hspi2, &ppl);
 800297c:	21c0      	movs	r1, #192	; 0xc0
 800297e:	188b      	adds	r3, r1, r2
 8002980:	19da      	adds	r2, r3, r7
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <main+0x2c8>)
 8002984:	0011      	movs	r1, r2
 8002986:	0018      	movs	r0, r3
 8002988:	f001 fc34 	bl	80041f4 <max2871Program>
				HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 800298c:	23a0      	movs	r3, #160	; 0xa0
 800298e:	05db      	lsls	r3, r3, #23
 8002990:	2201      	movs	r2, #1
 8002992:	2120      	movs	r1, #32
 8002994:	0018      	movs	r0, r3
 8002996:	f002 fc46 	bl	8005226 <HAL_GPIO_WritePin>
				Freq_changing_off();
 800299a:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <main+0x2d8>)
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <main+0x2d8>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	438a      	bics	r2, r1
 80029a4:	615a      	str	r2, [r3, #20]
				Change_end_on();
 80029a6:	23a0      	movs	r3, #160	; 0xa0
 80029a8:	05db      	lsls	r3, r3, #23
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	23a0      	movs	r3, #160	; 0xa0
 80029ae:	05db      	lsls	r3, r3, #23
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	430a      	orrs	r2, r1
 80029b4:	615a      	str	r2, [r3, #20]
				freqOutCurrent = freqOutNew;
 80029b6:	2008      	movs	r0, #8
 80029b8:	1833      	adds	r3, r6, r0
 80029ba:	19d9      	adds	r1, r3, r7
 80029bc:	680b      	ldr	r3, [r1, #0]
 80029be:	22ea      	movs	r2, #234	; 0xea
 80029c0:	0052      	lsls	r2, r2, #1
 80029c2:	1812      	adds	r2, r2, r0
 80029c4:	19d2      	adds	r2, r2, r7
 80029c6:	6013      	str	r3, [r2, #0]
			}
		}

		rs485_update_status_by_uart(&rs485, &uart1);
 80029c8:	2314      	movs	r3, #20
 80029ca:	2108      	movs	r1, #8
 80029cc:	185b      	adds	r3, r3, r1
 80029ce:	19da      	adds	r2, r3, r7
 80029d0:	26d4      	movs	r6, #212	; 0xd4
 80029d2:	0076      	lsls	r6, r6, #1
 80029d4:	1873      	adds	r3, r6, r1
 80029d6:	19db      	adds	r3, r3, r7
 80029d8:	0011      	movs	r1, r2
 80029da:	0018      	movs	r0, r3
 80029dc:	f001 fd94 	bl	8004508 <rs485_update_status_by_uart>

		switch (rs485.cmd) {
 80029e0:	2108      	movs	r1, #8
 80029e2:	1873      	adds	r3, r6, r1
 80029e4:	19db      	adds	r3, r3, r7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b34      	cmp	r3, #52	; 0x34
 80029ea:	d100      	bne.n	80029ee <main+0x29a>
 80029ec:	e1d0      	b.n	8002d90 <main+0x63c>
 80029ee:	dd00      	ble.n	80029f2 <main+0x29e>
 80029f0:	e280      	b.n	8002ef4 <main+0x7a0>
 80029f2:	2b33      	cmp	r3, #51	; 0x33
 80029f4:	d100      	bne.n	80029f8 <main+0x2a4>
 80029f6:	e139      	b.n	8002c6c <main+0x518>
 80029f8:	dd00      	ble.n	80029fc <main+0x2a8>
 80029fa:	e27b      	b.n	8002ef4 <main+0x7a0>
 80029fc:	2b31      	cmp	r3, #49	; 0x31
 80029fe:	d019      	beq.n	8002a34 <main+0x2e0>
 8002a00:	2b32      	cmp	r3, #50	; 0x32
 8002a02:	d100      	bne.n	8002a06 <main+0x2b2>
 8002a04:	e0a8      	b.n	8002b58 <main+0x404>
 8002a06:	e275      	b.n	8002ef4 <main+0x7a0>
 8002a08:	200000f0 	.word	0x200000f0
 8002a0c:	fffffec0 	.word	0xfffffec0
 8002a10:	200000f4 	.word	0x200000f4
 8002a14:	200000f8 	.word	0x200000f8
 8002a18:	200000fc 	.word	0x200000fc
 8002a1c:	2000008c 	.word	0x2000008c
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	08a48640 	.word	0x08a48640
 8002a28:	08006c70 	.word	0x08006c70
 8002a2c:	50000400 	.word	0x50000400
 8002a30:	fffffee8 	.word	0xfffffee8
		case QUERY_PARAMETER_FREQOUT: //cmd = 31
			FreqOutCh = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	21da      	movs	r1, #218	; 0xda
 8002a38:	0049      	lsls	r1, r1, #1
 8002a3a:	2608      	movs	r6, #8
 8002a3c:	198a      	adds	r2, r1, r6
 8002a3e:	19d2      	adds	r2, r2, r7
 8002a40:	6013      	str	r3, [r2, #0]
			FreqOutCh = uart1.rx_buffer[4] << 24;
 8002a42:	4bc9      	ldr	r3, [pc, #804]	; (8002d68 <main+0x614>)
 8002a44:	20ec      	movs	r0, #236	; 0xec
 8002a46:	0040      	lsls	r0, r0, #1
 8002a48:	181b      	adds	r3, r3, r0
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4694      	mov	ip, r2
 8002a4e:	44bc      	add	ip, r7
 8002a50:	4463      	add	r3, ip
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	198a      	adds	r2, r1, r6
 8002a58:	19d2      	adds	r2, r2, r7
 8002a5a:	6013      	str	r3, [r2, #0]
			FreqOutCh |= uart1.rx_buffer[5] << 16;
 8002a5c:	4bc2      	ldr	r3, [pc, #776]	; (8002d68 <main+0x614>)
 8002a5e:	181b      	adds	r3, r3, r0
 8002a60:	2208      	movs	r2, #8
 8002a62:	4694      	mov	ip, r2
 8002a64:	44bc      	add	ip, r7
 8002a66:	4463      	add	r3, ip
 8002a68:	795b      	ldrb	r3, [r3, #5]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	198b      	adds	r3, r1, r6
 8002a70:	19db      	adds	r3, r3, r7
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	198a      	adds	r2, r1, r6
 8002a78:	19d2      	adds	r2, r2, r7
 8002a7a:	6013      	str	r3, [r2, #0]
			FreqOutCh |= uart1.rx_buffer[6] << 8;
 8002a7c:	4bba      	ldr	r3, [pc, #744]	; (8002d68 <main+0x614>)
 8002a7e:	181b      	adds	r3, r3, r0
 8002a80:	2208      	movs	r2, #8
 8002a82:	4694      	mov	ip, r2
 8002a84:	44bc      	add	ip, r7
 8002a86:	4463      	add	r3, ip
 8002a88:	799b      	ldrb	r3, [r3, #6]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	198b      	adds	r3, r1, r6
 8002a90:	19db      	adds	r3, r3, r7
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	198a      	adds	r2, r1, r6
 8002a98:	19d2      	adds	r2, r2, r7
 8002a9a:	6013      	str	r3, [r2, #0]
			FreqOutCh |= uart1.rx_buffer[7];
 8002a9c:	4bb2      	ldr	r3, [pc, #712]	; (8002d68 <main+0x614>)
 8002a9e:	181b      	adds	r3, r3, r0
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	4694      	mov	ip, r2
 8002aa4:	44bc      	add	ip, r7
 8002aa6:	4463      	add	r3, ip
 8002aa8:	79db      	ldrb	r3, [r3, #7]
 8002aaa:	001a      	movs	r2, r3
 8002aac:	198b      	adds	r3, r1, r6
 8002aae:	19db      	adds	r3, r3, r7
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	0030      	movs	r0, r6
 8002ab6:	180a      	adds	r2, r1, r0
 8002ab8:	19d6      	adds	r6, r2, r7
 8002aba:	6033      	str	r3, [r6, #0]

			if(FreqOutCh > FREQ_OUT_MIN & FreqOutCh < FREQ_OUT_MAX){
 8002abc:	000e      	movs	r6, r1
 8002abe:	180b      	adds	r3, r1, r0
 8002ac0:	19db      	adds	r3, r3, r7
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4aa9      	ldr	r2, [pc, #676]	; (8002d6c <main+0x618>)
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	419b      	sbcs	r3, r3
 8002aca:	425b      	negs	r3, r3
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	1833      	adds	r3, r6, r0
 8002ad0:	19db      	adds	r3, r3, r7
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	48a6      	ldr	r0, [pc, #664]	; (8002d70 <main+0x61c>)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	4288      	cmp	r0, r1
 8002ada:	415b      	adcs	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	4013      	ands	r3, r2
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d030      	beq.n	8002b48 <main+0x3f4>
		    ppl.FreqOut = FreqOutCh;
 8002ae6:	0030      	movs	r0, r6
 8002ae8:	2608      	movs	r6, #8
 8002aea:	1983      	adds	r3, r0, r6
 8002aec:	19db      	adds	r3, r3, r7
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	4b9f      	ldr	r3, [pc, #636]	; (8002d74 <main+0x620>)
 8002af8:	22ec      	movs	r2, #236	; 0xec
 8002afa:	0052      	lsls	r2, r2, #1
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	2208      	movs	r2, #8
 8002b00:	4694      	mov	ip, r2
 8002b02:	44bc      	add	ip, r7
 8002b04:	4463      	add	r3, ip
 8002b06:	6839      	ldr	r1, [r7, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6019      	str	r1, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]

		    sprintf(uart1.tx_buffer, "New Frequency: %u\n", FreqOutCh);
 8002b0e:	1982      	adds	r2, r0, r6
 8002b10:	19d3      	adds	r3, r2, r7
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4998      	ldr	r1, [pc, #608]	; (8002d78 <main+0x624>)
 8002b16:	2614      	movs	r6, #20
 8002b18:	2308      	movs	r3, #8
 8002b1a:	18f0      	adds	r0, r6, r3
 8002b1c:	19c3      	adds	r3, r0, r7
 8002b1e:	3319      	adds	r3, #25
 8002b20:	0018      	movs	r0, r3
 8002b22:	f003 fc2f 	bl	8006384 <siprintf>
		    uart1_send_frame(uart1.tx_buffer, TX_BUFFLEN);
 8002b26:	2308      	movs	r3, #8
 8002b28:	18f2      	adds	r2, r6, r3
 8002b2a:	19d3      	adds	r3, r2, r7
 8002b2c:	3319      	adds	r3, #25
 8002b2e:	2164      	movs	r1, #100	; 0x64
 8002b30:	0018      	movs	r0, r3
 8002b32:	f002 f825 	bl	8004b80 <uart1_send_frame>

			max2871Program(&hspi2, &ppl);
 8002b36:	23c0      	movs	r3, #192	; 0xc0
 8002b38:	2608      	movs	r6, #8
 8002b3a:	199b      	adds	r3, r3, r6
 8002b3c:	19da      	adds	r2, r3, r7
 8002b3e:	4b8f      	ldr	r3, [pc, #572]	; (8002d7c <main+0x628>)
 8002b40:	0011      	movs	r1, r2
 8002b42:	0018      	movs	r0, r3
 8002b44:	f001 fb56 	bl	80041f4 <max2871Program>
			}
			rs485.cmd = NONE;
 8002b48:	23d4      	movs	r3, #212	; 0xd4
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	189b      	adds	r3, r3, r2
 8002b50:	19db      	adds	r3, r3, r7
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
			break;
 8002b56:	e1d5      	b.n	8002f04 <main+0x7b0>

		case QUERY_PARAMETER_ON_OFF: //cmd = 32
			ON_OFF = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	21dc      	movs	r1, #220	; 0xdc
 8002b5c:	0049      	lsls	r1, r1, #1
 8002b5e:	2608      	movs	r6, #8
 8002b60:	198a      	adds	r2, r1, r6
 8002b62:	19d2      	adds	r2, r2, r7
 8002b64:	6013      	str	r3, [r2, #0]
			ON_OFF = uart1.rx_buffer[4] << 24;
 8002b66:	4b80      	ldr	r3, [pc, #512]	; (8002d68 <main+0x614>)
 8002b68:	20ec      	movs	r0, #236	; 0xec
 8002b6a:	0040      	lsls	r0, r0, #1
 8002b6c:	181b      	adds	r3, r3, r0
 8002b6e:	2208      	movs	r2, #8
 8002b70:	4694      	mov	ip, r2
 8002b72:	44bc      	add	ip, r7
 8002b74:	4463      	add	r3, ip
 8002b76:	791b      	ldrb	r3, [r3, #4]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	198a      	adds	r2, r1, r6
 8002b7c:	19d2      	adds	r2, r2, r7
 8002b7e:	6013      	str	r3, [r2, #0]
			ON_OFF |= uart1.rx_buffer[5] << 16;
 8002b80:	4b79      	ldr	r3, [pc, #484]	; (8002d68 <main+0x614>)
 8002b82:	181b      	adds	r3, r3, r0
 8002b84:	2208      	movs	r2, #8
 8002b86:	4694      	mov	ip, r2
 8002b88:	44bc      	add	ip, r7
 8002b8a:	4463      	add	r3, ip
 8002b8c:	795b      	ldrb	r3, [r3, #5]
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	001a      	movs	r2, r3
 8002b92:	198b      	adds	r3, r1, r6
 8002b94:	19db      	adds	r3, r3, r7
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	198a      	adds	r2, r1, r6
 8002b9c:	19d2      	adds	r2, r2, r7
 8002b9e:	6013      	str	r3, [r2, #0]
			ON_OFF |= uart1.rx_buffer[6] << 8;
 8002ba0:	4b71      	ldr	r3, [pc, #452]	; (8002d68 <main+0x614>)
 8002ba2:	181b      	adds	r3, r3, r0
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	4694      	mov	ip, r2
 8002ba8:	44bc      	add	ip, r7
 8002baa:	4463      	add	r3, ip
 8002bac:	799b      	ldrb	r3, [r3, #6]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	198b      	adds	r3, r1, r6
 8002bb4:	19db      	adds	r3, r3, r7
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	198a      	adds	r2, r1, r6
 8002bbc:	19d2      	adds	r2, r2, r7
 8002bbe:	6013      	str	r3, [r2, #0]
			ON_OFF |= uart1.rx_buffer[7];
 8002bc0:	4b69      	ldr	r3, [pc, #420]	; (8002d68 <main+0x614>)
 8002bc2:	181b      	adds	r3, r3, r0
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	4694      	mov	ip, r2
 8002bc8:	44bc      	add	ip, r7
 8002bca:	4463      	add	r3, ip
 8002bcc:	79db      	ldrb	r3, [r3, #7]
 8002bce:	001a      	movs	r2, r3
 8002bd0:	198b      	adds	r3, r1, r6
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	198a      	adds	r2, r1, r6
 8002bda:	19d2      	adds	r2, r2, r7
 8002bdc:	6013      	str	r3, [r2, #0]

			if(ON_OFF == 0){
 8002bde:	198a      	adds	r2, r1, r6
 8002be0:	19d3      	adds	r3, r2, r7
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d118      	bne.n	8002c1a <main+0x4c6>
		    HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_RESET);
 8002be8:	23a0      	movs	r3, #160	; 0xa0
 8002bea:	05db      	lsls	r3, r3, #23
 8002bec:	2200      	movs	r2, #0
 8002bee:	2120      	movs	r1, #32
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f002 fb18 	bl	8005226 <HAL_GPIO_WritePin>
		    sprintf(uart1.tx_buffer, "RFA DISABLED \n");
 8002bf6:	4a62      	ldr	r2, [pc, #392]	; (8002d80 <main+0x62c>)
 8002bf8:	2614      	movs	r6, #20
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	18f1      	adds	r1, r6, r3
 8002bfe:	19cb      	adds	r3, r1, r7
 8002c00:	3319      	adds	r3, #25
 8002c02:	0011      	movs	r1, r2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f003 fbbd 	bl	8006384 <siprintf>
		    uart1_send_frame(uart1.tx_buffer, TX_BUFFLEN);
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	18f3      	adds	r3, r6, r3
 8002c0e:	19db      	adds	r3, r3, r7
 8002c10:	3319      	adds	r3, #25
 8002c12:	2164      	movs	r1, #100	; 0x64
 8002c14:	0018      	movs	r0, r3
 8002c16:	f001 ffb3 	bl	8004b80 <uart1_send_frame>
			}
			if(ON_OFF == 1){
 8002c1a:	23dc      	movs	r3, #220	; 0xdc
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2208      	movs	r2, #8
 8002c20:	1899      	adds	r1, r3, r2
 8002c22:	19cb      	adds	r3, r1, r7
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d118      	bne.n	8002c5c <main+0x508>
		    HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 8002c2a:	23a0      	movs	r3, #160	; 0xa0
 8002c2c:	05db      	lsls	r3, r3, #23
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2120      	movs	r1, #32
 8002c32:	0018      	movs	r0, r3
 8002c34:	f002 faf7 	bl	8005226 <HAL_GPIO_WritePin>
		    sprintf(uart1.tx_buffer, "RFA ENABLED \n");
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <main+0x630>)
 8002c3a:	2614      	movs	r6, #20
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	18f1      	adds	r1, r6, r3
 8002c40:	19cb      	adds	r3, r1, r7
 8002c42:	3319      	adds	r3, #25
 8002c44:	0011      	movs	r1, r2
 8002c46:	0018      	movs	r0, r3
 8002c48:	f003 fb9c 	bl	8006384 <siprintf>
		    uart1_send_frame(uart1.tx_buffer, TX_BUFFLEN);
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	18b3      	adds	r3, r6, r2
 8002c50:	19db      	adds	r3, r3, r7
 8002c52:	3319      	adds	r3, #25
 8002c54:	2164      	movs	r1, #100	; 0x64
 8002c56:	0018      	movs	r0, r3
 8002c58:	f001 ff92 	bl	8004b80 <uart1_send_frame>
			}
			rs485.cmd = NONE;
 8002c5c:	23d4      	movs	r3, #212	; 0xd4
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2208      	movs	r2, #8
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	19db      	adds	r3, r3, r7
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
			break;
 8002c6a:	e14b      	b.n	8002f04 <main+0x7b0>

		case QUERY_PARAMETER_FREQBASE: //cmd = 33
			FreqBaseCh = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	21de      	movs	r1, #222	; 0xde
 8002c70:	0049      	lsls	r1, r1, #1
 8002c72:	2608      	movs	r6, #8
 8002c74:	198a      	adds	r2, r1, r6
 8002c76:	19d2      	adds	r2, r2, r7
 8002c78:	6013      	str	r3, [r2, #0]
			FreqBaseCh = uart1.rx_buffer[4] << 24;
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <main+0x614>)
 8002c7c:	20ec      	movs	r0, #236	; 0xec
 8002c7e:	0040      	lsls	r0, r0, #1
 8002c80:	181b      	adds	r3, r3, r0
 8002c82:	2208      	movs	r2, #8
 8002c84:	4694      	mov	ip, r2
 8002c86:	44bc      	add	ip, r7
 8002c88:	4463      	add	r3, ip
 8002c8a:	791b      	ldrb	r3, [r3, #4]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	198a      	adds	r2, r1, r6
 8002c90:	19d2      	adds	r2, r2, r7
 8002c92:	6013      	str	r3, [r2, #0]
			FreqBaseCh |= uart1.rx_buffer[5] << 16;
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <main+0x614>)
 8002c96:	181b      	adds	r3, r3, r0
 8002c98:	2208      	movs	r2, #8
 8002c9a:	4694      	mov	ip, r2
 8002c9c:	44bc      	add	ip, r7
 8002c9e:	4463      	add	r3, ip
 8002ca0:	795b      	ldrb	r3, [r3, #5]
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	198b      	adds	r3, r1, r6
 8002ca8:	19db      	adds	r3, r3, r7
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	198a      	adds	r2, r1, r6
 8002cb0:	19d2      	adds	r2, r2, r7
 8002cb2:	6013      	str	r3, [r2, #0]
			FreqBaseCh |= uart1.rx_buffer[6] << 8;
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <main+0x614>)
 8002cb6:	181b      	adds	r3, r3, r0
 8002cb8:	2208      	movs	r2, #8
 8002cba:	4694      	mov	ip, r2
 8002cbc:	44bc      	add	ip, r7
 8002cbe:	4463      	add	r3, ip
 8002cc0:	799b      	ldrb	r3, [r3, #6]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	198b      	adds	r3, r1, r6
 8002cc8:	19db      	adds	r3, r3, r7
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	198a      	adds	r2, r1, r6
 8002cd0:	19d2      	adds	r2, r2, r7
 8002cd2:	6013      	str	r3, [r2, #0]
			FreqBaseCh |= uart1.rx_buffer[7];
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <main+0x614>)
 8002cd6:	181b      	adds	r3, r3, r0
 8002cd8:	2208      	movs	r2, #8
 8002cda:	4694      	mov	ip, r2
 8002cdc:	44bc      	add	ip, r7
 8002cde:	4463      	add	r3, ip
 8002ce0:	79db      	ldrb	r3, [r3, #7]
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	198b      	adds	r3, r1, r6
 8002ce6:	19db      	adds	r3, r3, r7
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	0030      	movs	r0, r6
 8002cee:	180a      	adds	r2, r1, r0
 8002cf0:	19d2      	adds	r2, r2, r7
 8002cf2:	6013      	str	r3, [r2, #0]

			if(FreqBaseCh > FREQ_BASE_MIN & FreqBaseCh < FREQ_BASE_MAX){
 8002cf4:	000e      	movs	r6, r1
 8002cf6:	180b      	adds	r3, r1, r0
 8002cf8:	19db      	adds	r3, r3, r7
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <main+0x618>)
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	419b      	sbcs	r3, r3
 8002d02:	425b      	negs	r3, r3
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	1833      	adds	r3, r6, r0
 8002d08:	19db      	adds	r3, r3, r7
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	481e      	ldr	r0, [pc, #120]	; (8002d88 <main+0x634>)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	4288      	cmp	r0, r1
 8002d12:	415b      	adcs	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	4013      	ands	r3, r2
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01b      	beq.n	8002d56 <main+0x602>
				FreqBase = FreqBaseCh;
 8002d1e:	2008      	movs	r0, #8
 8002d20:	1833      	adds	r3, r6, r0
 8002d22:	19db      	adds	r3, r3, r7
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	22e4      	movs	r2, #228	; 0xe4
 8002d28:	0052      	lsls	r2, r2, #1
 8002d2a:	1812      	adds	r2, r2, r0
 8002d2c:	19d2      	adds	r2, r2, r7
 8002d2e:	6013      	str	r3, [r2, #0]
				sprintf(uart1.tx_buffer, "New Base Frequency: %u\n", FreqBaseCh);
 8002d30:	1833      	adds	r3, r6, r0
 8002d32:	19db      	adds	r3, r3, r7
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4915      	ldr	r1, [pc, #84]	; (8002d8c <main+0x638>)
 8002d38:	2614      	movs	r6, #20
 8002d3a:	1833      	adds	r3, r6, r0
 8002d3c:	19db      	adds	r3, r3, r7
 8002d3e:	3319      	adds	r3, #25
 8002d40:	0018      	movs	r0, r3
 8002d42:	f003 fb1f 	bl	8006384 <siprintf>
				uart1_send_frame(uart1.tx_buffer, TX_BUFFLEN);
 8002d46:	2008      	movs	r0, #8
 8002d48:	1833      	adds	r3, r6, r0
 8002d4a:	19db      	adds	r3, r3, r7
 8002d4c:	3319      	adds	r3, #25
 8002d4e:	2164      	movs	r1, #100	; 0x64
 8002d50:	0018      	movs	r0, r3
 8002d52:	f001 ff15 	bl	8004b80 <uart1_send_frame>
			}
			rs485.cmd = NONE;
 8002d56:	23d4      	movs	r3, #212	; 0xd4
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	19db      	adds	r3, r3, r7
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
			break;
 8002d64:	e0ce      	b.n	8002f04 <main+0x7b0>
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	fffffe3c 	.word	0xfffffe3c
 8002d6c:	087e60a0 	.word	0x087e60a0
 8002d70:	099bb77f 	.word	0x099bb77f
 8002d74:	fffffee8 	.word	0xfffffee8
 8002d78:	08006c80 	.word	0x08006c80
 8002d7c:	2000008c 	.word	0x2000008c
 8002d80:	08006c94 	.word	0x08006c94
 8002d84:	08006ca4 	.word	0x08006ca4
 8002d88:	08d89853 	.word	0x08d89853
 8002d8c:	08006cb4 	.word	0x08006cb4

		case QUERY_PARAMETER_PdBm: //cmd = 34
			PdBmCh = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	21e0      	movs	r1, #224	; 0xe0
 8002d94:	0049      	lsls	r1, r1, #1
 8002d96:	2608      	movs	r6, #8
 8002d98:	198a      	adds	r2, r1, r6
 8002d9a:	19d2      	adds	r2, r2, r7
 8002d9c:	6013      	str	r3, [r2, #0]
			PdBmCh = uart1.rx_buffer[4] << 24;
 8002d9e:	4b5a      	ldr	r3, [pc, #360]	; (8002f08 <main+0x7b4>)
 8002da0:	20ec      	movs	r0, #236	; 0xec
 8002da2:	0040      	lsls	r0, r0, #1
 8002da4:	181b      	adds	r3, r3, r0
 8002da6:	2208      	movs	r2, #8
 8002da8:	4694      	mov	ip, r2
 8002daa:	44bc      	add	ip, r7
 8002dac:	4463      	add	r3, ip
 8002dae:	791b      	ldrb	r3, [r3, #4]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	198a      	adds	r2, r1, r6
 8002db4:	19d2      	adds	r2, r2, r7
 8002db6:	6013      	str	r3, [r2, #0]
			PdBmCh |= uart1.rx_buffer[5] << 16;
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <main+0x7b4>)
 8002dba:	181b      	adds	r3, r3, r0
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	4694      	mov	ip, r2
 8002dc0:	44bc      	add	ip, r7
 8002dc2:	4463      	add	r3, ip
 8002dc4:	795b      	ldrb	r3, [r3, #5]
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	001a      	movs	r2, r3
 8002dca:	198b      	adds	r3, r1, r6
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	198a      	adds	r2, r1, r6
 8002dd4:	19d2      	adds	r2, r2, r7
 8002dd6:	6013      	str	r3, [r2, #0]
			PdBmCh |= uart1.rx_buffer[6] << 8;
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	; (8002f08 <main+0x7b4>)
 8002dda:	181b      	adds	r3, r3, r0
 8002ddc:	2208      	movs	r2, #8
 8002dde:	4694      	mov	ip, r2
 8002de0:	44bc      	add	ip, r7
 8002de2:	4463      	add	r3, ip
 8002de4:	799b      	ldrb	r3, [r3, #6]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	001a      	movs	r2, r3
 8002dea:	198b      	adds	r3, r1, r6
 8002dec:	19db      	adds	r3, r3, r7
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	198a      	adds	r2, r1, r6
 8002df4:	19d2      	adds	r2, r2, r7
 8002df6:	6013      	str	r3, [r2, #0]
			PdBmCh |= uart1.rx_buffer[7];
 8002df8:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <main+0x7b4>)
 8002dfa:	181b      	adds	r3, r3, r0
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	4694      	mov	ip, r2
 8002e00:	44bc      	add	ip, r7
 8002e02:	4463      	add	r3, ip
 8002e04:	79db      	ldrb	r3, [r3, #7]
 8002e06:	001a      	movs	r2, r3
 8002e08:	198b      	adds	r3, r1, r6
 8002e0a:	19db      	adds	r3, r3, r7
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	198a      	adds	r2, r1, r6
 8002e12:	19d2      	adds	r2, r2, r7
 8002e14:	6013      	str	r3, [r2, #0]

			if(PdBmCh == 0){     //Potencia de la salida en -4dBm
 8002e16:	198b      	adds	r3, r1, r6
 8002e18:	19db      	adds	r3, r3, r7
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d110      	bne.n	8002e42 <main+0x6ee>
			ppl.register4.APWR = 0x0UL;
 8002e20:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <main+0x7b8>)
 8002e22:	181b      	adds	r3, r3, r0
 8002e24:	2208      	movs	r2, #8
 8002e26:	4694      	mov	ip, r2
 8002e28:	44bc      	add	ip, r7
 8002e2a:	4463      	add	r3, ip
 8002e2c:	22bc      	movs	r2, #188	; 0xbc
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5099      	str	r1, [r3, r2]
			max2871Program(&hspi2, &ppl);
 8002e32:	23c0      	movs	r3, #192	; 0xc0
 8002e34:	199b      	adds	r3, r3, r6
 8002e36:	19da      	adds	r2, r3, r7
 8002e38:	4b35      	ldr	r3, [pc, #212]	; (8002f10 <main+0x7bc>)
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f001 f9d9 	bl	80041f4 <max2871Program>
			}
			if(PdBmCh == 1){     //Potencia de la salida en -1dBm
 8002e42:	23e0      	movs	r3, #224	; 0xe0
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2008      	movs	r0, #8
 8002e48:	181b      	adds	r3, r3, r0
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d112      	bne.n	8002e78 <main+0x724>
			ppl.register4.APWR = 0x1UL;
 8002e52:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <main+0x7b8>)
 8002e54:	22ec      	movs	r2, #236	; 0xec
 8002e56:	0052      	lsls	r2, r2, #1
 8002e58:	189b      	adds	r3, r3, r2
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	4694      	mov	ip, r2
 8002e5e:	44bc      	add	ip, r7
 8002e60:	4463      	add	r3, ip
 8002e62:	22bc      	movs	r2, #188	; 0xbc
 8002e64:	2101      	movs	r1, #1
 8002e66:	5099      	str	r1, [r3, r2]
			max2871Program(&hspi2, &ppl);
 8002e68:	23c0      	movs	r3, #192	; 0xc0
 8002e6a:	181b      	adds	r3, r3, r0
 8002e6c:	19da      	adds	r2, r3, r7
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <main+0x7bc>)
 8002e70:	0011      	movs	r1, r2
 8002e72:	0018      	movs	r0, r3
 8002e74:	f001 f9be 	bl	80041f4 <max2871Program>
			}
			if(PdBmCh == 2){     //Potencia de la salida en +2dBm
 8002e78:	23e0      	movs	r3, #224	; 0xe0
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2008      	movs	r0, #8
 8002e7e:	181b      	adds	r3, r3, r0
 8002e80:	19db      	adds	r3, r3, r7
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d112      	bne.n	8002eae <main+0x75a>
			ppl.register4.APWR = 0x2UL;
 8002e88:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <main+0x7b8>)
 8002e8a:	22ec      	movs	r2, #236	; 0xec
 8002e8c:	0052      	lsls	r2, r2, #1
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	2208      	movs	r2, #8
 8002e92:	4694      	mov	ip, r2
 8002e94:	44bc      	add	ip, r7
 8002e96:	4463      	add	r3, ip
 8002e98:	22bc      	movs	r2, #188	; 0xbc
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	5099      	str	r1, [r3, r2]
			max2871Program(&hspi2, &ppl);
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	181b      	adds	r3, r3, r0
 8002ea2:	19da      	adds	r2, r3, r7
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <main+0x7bc>)
 8002ea6:	0011      	movs	r1, r2
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f001 f9a3 	bl	80041f4 <max2871Program>
		    }
			if(PdBmCh == 3){     //Potencia de la salida en +5dBm
 8002eae:	23e0      	movs	r3, #224	; 0xe0
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2008      	movs	r0, #8
 8002eb4:	181b      	adds	r3, r3, r0
 8002eb6:	19db      	adds	r3, r3, r7
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d112      	bne.n	8002ee4 <main+0x790>
			ppl.register4.APWR = 0x3UL;
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <main+0x7b8>)
 8002ec0:	22ec      	movs	r2, #236	; 0xec
 8002ec2:	0052      	lsls	r2, r2, #1
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	4694      	mov	ip, r2
 8002eca:	44bc      	add	ip, r7
 8002ecc:	4463      	add	r3, ip
 8002ece:	22bc      	movs	r2, #188	; 0xbc
 8002ed0:	2103      	movs	r1, #3
 8002ed2:	5099      	str	r1, [r3, r2]
			max2871Program(&hspi2, &ppl);
 8002ed4:	23c0      	movs	r3, #192	; 0xc0
 8002ed6:	181b      	adds	r3, r3, r0
 8002ed8:	19da      	adds	r2, r3, r7
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <main+0x7bc>)
 8002edc:	0011      	movs	r1, r2
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f001 f988 	bl	80041f4 <max2871Program>
			}
			rs485.cmd = NONE;
 8002ee4:	23d4      	movs	r3, #212	; 0xd4
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2208      	movs	r2, #8
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	19db      	adds	r3, r3, r7
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
			break;
 8002ef2:	e007      	b.n	8002f04 <main+0x7b0>

		default:
			rs485.cmd = NONE;
 8002ef4:	23d4      	movs	r3, #212	; 0xd4
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2208      	movs	r2, #8
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	19db      	adds	r3, r3, r7
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
			break;
 8002f02:	46c0      	nop			; (mov r8, r8)
		led_enable_kalive(&led);
 8002f04:	e4b4      	b.n	8002870 <main+0x11c>
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	fffffe3c 	.word	0xfffffe3c
 8002f0c:	fffffee8 	.word	0xfffffee8
 8002f10:	2000008c 	.word	0x2000008c

08002f14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b093      	sub	sp, #76	; 0x4c
 8002f18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f1a:	2414      	movs	r4, #20
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	0018      	movs	r0, r3
 8002f20:	2334      	movs	r3, #52	; 0x34
 8002f22:	001a      	movs	r2, r3
 8002f24:	2100      	movs	r1, #0
 8002f26:	f003 fa25 	bl	8006374 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	2310      	movs	r3, #16
 8002f30:	001a      	movs	r2, r3
 8002f32:	2100      	movs	r1, #0
 8002f34:	f003 fa1e 	bl	8006374 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f002 f98f 	bl	8005260 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	2202      	movs	r2, #2
 8002f46:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	0052      	lsls	r2, r2, #1
 8002f4e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f5c:	193b      	adds	r3, r7, r4
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	0018      	movs	r0, r3
 8002f66:	f002 f9bb 	bl	80052e0 <HAL_RCC_OscConfig>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d001      	beq.n	8002f72 <SystemClock_Config+0x5e>
		Error_Handler();
 8002f6e:	f000 f8fb 	bl	8003168 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f002 fcb6 	bl	8005900 <HAL_RCC_ClockConfig>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d001      	beq.n	8002f9c <SystemClock_Config+0x88>
		Error_Handler();
 8002f98:	f000 f8e6 	bl	8003168 <Error_Handler>
	}
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b013      	add	sp, #76	; 0x4c
 8002fa2:	bd90      	pop	{r4, r7, pc}

08002fa4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <MX_SPI2_Init+0x78>)
 8002faa:	4a1d      	ldr	r2, [pc, #116]	; (8003020 <MX_SPI2_Init+0x7c>)
 8002fac:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <MX_SPI2_Init+0x78>)
 8002fb0:	2282      	movs	r2, #130	; 0x82
 8002fb2:	0052      	lsls	r2, r2, #1
 8002fb4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <MX_SPI2_Init+0x78>)
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	0212      	lsls	r2, r2, #8
 8002fbc:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fbe:	4b17      	ldr	r3, [pc, #92]	; (800301c <MX_SPI2_Init+0x78>)
 8002fc0:	22e0      	movs	r2, #224	; 0xe0
 8002fc2:	00d2      	lsls	r2, r2, #3
 8002fc4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <MX_SPI2_Init+0x78>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <MX_SPI2_Init+0x78>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <MX_SPI2_Init+0x78>)
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <MX_SPI2_Init+0x78>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <MX_SPI2_Init+0x78>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <MX_SPI2_Init+0x78>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <MX_SPI2_Init+0x78>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <MX_SPI2_Init+0x78>)
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <MX_SPI2_Init+0x78>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <MX_SPI2_Init+0x78>)
 8003000:	2208      	movs	r2, #8
 8003002:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <MX_SPI2_Init+0x78>)
 8003006:	0018      	movs	r0, r3
 8003008:	f002 fe04 	bl	8005c14 <HAL_SPI_Init>
 800300c:	1e03      	subs	r3, r0, #0
 800300e:	d001      	beq.n	8003014 <MX_SPI2_Init+0x70>
		Error_Handler();
 8003010:	f000 f8aa 	bl	8003168 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	2000008c 	.word	0x2000008c
 8003020:	40003800 	.word	0x40003800

08003024 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800302a:	240c      	movs	r4, #12
 800302c:	193b      	adds	r3, r7, r4
 800302e:	0018      	movs	r0, r3
 8003030:	2314      	movs	r3, #20
 8003032:	001a      	movs	r2, r3
 8003034:	2100      	movs	r1, #0
 8003036:	f003 f99d 	bl	8006374 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	4b45      	ldr	r3, [pc, #276]	; (8003150 <MX_GPIO_Init+0x12c>)
 800303c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303e:	4b44      	ldr	r3, [pc, #272]	; (8003150 <MX_GPIO_Init+0x12c>)
 8003040:	2102      	movs	r1, #2
 8003042:	430a      	orrs	r2, r1
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
 8003046:	4b42      	ldr	r3, [pc, #264]	; (8003150 <MX_GPIO_Init+0x12c>)
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	2202      	movs	r2, #2
 800304c:	4013      	ands	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003052:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <MX_GPIO_Init+0x12c>)
 8003054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <MX_GPIO_Init+0x12c>)
 8003058:	2104      	movs	r1, #4
 800305a:	430a      	orrs	r2, r1
 800305c:	635a      	str	r2, [r3, #52]	; 0x34
 800305e:	4b3c      	ldr	r3, [pc, #240]	; (8003150 <MX_GPIO_Init+0x12c>)
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	2204      	movs	r2, #4
 8003064:	4013      	ands	r3, r2
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800306a:	4b39      	ldr	r3, [pc, #228]	; (8003150 <MX_GPIO_Init+0x12c>)
 800306c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <MX_GPIO_Init+0x12c>)
 8003070:	2101      	movs	r1, #1
 8003072:	430a      	orrs	r2, r1
 8003074:	635a      	str	r2, [r3, #52]	; 0x34
 8003076:	4b36      	ldr	r3, [pc, #216]	; (8003150 <MX_GPIO_Init+0x12c>)
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	2201      	movs	r2, #1
 800307c:	4013      	ands	r3, r2
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin,
 8003082:	4934      	ldr	r1, [pc, #208]	; (8003154 <MX_GPIO_Init+0x130>)
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <MX_GPIO_Init+0x134>)
 8003086:	2200      	movs	r2, #0
 8003088:	0018      	movs	r0, r3
 800308a:	f002 f8cc 	bl	8005226 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800308e:	23a0      	movs	r3, #160	; 0xa0
 8003090:	05db      	lsls	r3, r3, #23
 8003092:	2200      	movs	r2, #0
 8003094:	21ae      	movs	r1, #174	; 0xae
 8003096:	0018      	movs	r0, r3
 8003098:	f002 f8c5 	bl	8005226 <HAL_GPIO_WritePin>
	MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin | MAX_RF_ENABLE_Pin | LED_1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RS485_CTRL_Pin LED_2_Pin LED_3_Pin */
	GPIO_InitStruct.Pin = RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin;
 800309c:	193b      	adds	r3, r7, r4
 800309e:	4a2d      	ldr	r2, [pc, #180]	; (8003154 <MX_GPIO_Init+0x130>)
 80030a0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a2:	193b      	adds	r3, r7, r4
 80030a4:	2201      	movs	r2, #1
 80030a6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	193b      	adds	r3, r7, r4
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	4a28      	ldr	r2, [pc, #160]	; (8003158 <MX_GPIO_Init+0x134>)
 80030b8:	0019      	movs	r1, r3
 80030ba:	0010      	movs	r0, r2
 80030bc:	f001 ff32 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : TEST_INPUT_1_Pin TEST_INPUT_2_Pin SW_2_Pin */
	GPIO_InitStruct.Pin = TEST_INPUT_1_Pin | TEST_INPUT_2_Pin | SW_2_Pin;
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	4a26      	ldr	r2, [pc, #152]	; (800315c <MX_GPIO_Init+0x138>)
 80030c4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	4a22      	ldr	r2, [pc, #136]	; (8003160 <MX_GPIO_Init+0x13c>)
 80030d6:	0019      	movs	r1, r3
 80030d8:	0010      	movs	r0, r2
 80030da:	f001 ff23 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LE_Pin MAX_CE_Pin MAX_MUX_Pin MAX_RF_ENABLE_Pin
	 LED_1_Pin */
	GPIO_InitStruct.Pin = MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	22ae      	movs	r2, #174	; 0xae
 80030e2:	601a      	str	r2, [r3, #0]
			| MAX_RF_ENABLE_Pin | LED_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	2201      	movs	r2, #1
 80030e8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f6:	193a      	adds	r2, r7, r4
 80030f8:	23a0      	movs	r3, #160	; 0xa0
 80030fa:	05db      	lsls	r3, r3, #23
 80030fc:	0011      	movs	r1, r2
 80030fe:	0018      	movs	r0, r3
 8003100:	f001 ff10 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LOCK_DETECTOR_Pin SW_1_Pin SW_3_Pin SW_4_Pin
	 SW_5_Pin */
	GPIO_InitStruct.Pin = MAX_LOCK_DETECTOR_Pin | SW_1_Pin | SW_3_Pin | SW_4_Pin
 8003104:	193b      	adds	r3, r7, r4
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <MX_GPIO_Init+0x140>)
 8003108:	601a      	str	r2, [r3, #0]
			| SW_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310a:	193b      	adds	r3, r7, r4
 800310c:	2200      	movs	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	193b      	adds	r3, r7, r4
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003116:	193a      	adds	r2, r7, r4
 8003118:	23a0      	movs	r3, #160	; 0xa0
 800311a:	05db      	lsls	r3, r3, #23
 800311c:	0011      	movs	r1, r2
 800311e:	0018      	movs	r0, r3
 8003120:	f001 ff00 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_0_Pin SW_6_Pin SW_7_Pin SW_8_Pin
	 SW_9_Pin */
	GPIO_InitStruct.Pin = SW_0_Pin | SW_6_Pin | SW_7_Pin | SW_8_Pin | SW_9_Pin;
 8003124:	0021      	movs	r1, r4
 8003126:	187b      	adds	r3, r7, r1
 8003128:	229e      	movs	r2, #158	; 0x9e
 800312a:	0052      	lsls	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312e:	187b      	adds	r3, r7, r1
 8003130:	2200      	movs	r2, #0
 8003132:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	187b      	adds	r3, r7, r1
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313a:	187b      	adds	r3, r7, r1
 800313c:	4a06      	ldr	r2, [pc, #24]	; (8003158 <MX_GPIO_Init+0x134>)
 800313e:	0019      	movs	r1, r3
 8003140:	0010      	movs	r0, r2
 8003142:	f001 feef 	bl	8004f24 <HAL_GPIO_Init>

}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	46bd      	mov	sp, r7
 800314a:	b009      	add	sp, #36	; 0x24
 800314c:	bd90      	pop	{r4, r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	40021000 	.word	0x40021000
 8003154:	00000203 	.word	0x00000203
 8003158:	50000400 	.word	0x50000400
 800315c:	0000c040 	.word	0x0000c040
 8003160:	50000800 	.word	0x50000800
 8003164:	00009940 	.word	0x00009940

08003168 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800316c:	b672      	cpsid	i
}
 800316e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003170:	e7fe      	b.n	8003170 <Error_Handler+0x8>

08003172 <getRegister0InitValue>:
 *      Author: artur
 */

#include "max2871.h"

unsigned long getRegister0InitValue(MAX2871_t *ppl) {
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]

	ppl->register0.INT = 0x0UL;   // Enables fractional-N mode
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
	ppl->register0.NDIV = 0x0UL;  // Sets integer part (N-divider) of the feedback divider factor
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]
	ppl->register0.FRAC = 0x0UL;  // Sets fractional value
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	615a      	str	r2, [r3, #20]
	ppl->register0.ADDR0 = 0x0UL; // Register address bits
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	619a      	str	r2, [r3, #24]

	return ppl->register0.INT << 31
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	07da      	lsls	r2, r3, #31
					| ppl->register0.NDIV << 15 | ppl->register0.FRAC << 3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	03db      	lsls	r3, r3, #15
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	431a      	orrs	r2, r3
					| ppl->register0.ADDR0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4313      	orrs	r3, r2
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b002      	add	sp, #8
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <getRegister1InitValue>:

unsigned long getRegister1InitValue(MAX2871_t *ppl) {
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]

	ppl->register1.CPL = 0x3UL;        // Charge pump linearity 30%
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2203      	movs	r2, #3
 80031c2:	61da      	str	r2, [r3, #28]
	ppl->register1.CPT = 0x00UL;       // Charge pump test mode  normal mode
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	621a      	str	r2, [r3, #32]
	ppl->register1.PHASE = 0x1UL;      // Phase Value (recommended)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
	ppl->register1.MODULUS = 0xFA0UL;  // 4000 for max resolution
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	22fa      	movs	r2, #250	; 0xfa
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
	ppl->register1.ADDR1 = 0x1UL;      // Register address bits
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c

	return ppl->register1.CPL << 29
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	075a      	lsls	r2, r3, #29
					| ppl->register1.CPT << 27 | ppl->register1.PHASE << 15
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	06db      	lsls	r3, r3, #27
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	03db      	lsls	r3, r3, #15
 80031f2:	431a      	orrs	r2, r3
					| ppl->register1.MODULUS << 3 | ppl->register1.ADDR1;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4313      	orrs	r3, r2
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b002      	add	sp, #8
 8003208:	bd80      	pop	{r7, pc}

0800320a <getRegister2InitValue>:

unsigned long getRegister2InitValue(MAX2871_t *ppl) {
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]

	ppl->register2.LDS = 0x1UL;    // 1 if fPFD > 32 MHz
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
	ppl->register2.SDN = 0x0UL;    // Noise mode  Low-noise mode
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	635a      	str	r2, [r3, #52]	; 0x34
	ppl->register2.MUX = 0x6UL;    // MUX pin configuration  Digital lock detect
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2206      	movs	r2, #6
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
	ppl->register2.DBR = 0x0UL;    // Reference doubler is disabled
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	63da      	str	r2, [r3, #60]	; 0x3c
	ppl->register2.RDIV2 = 0x0UL;  // Reference divide-by-2 is disabled
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
	ppl->register2.RCNT = 0x0UL;   // Reference divide Value is unused
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
	ppl->register2.REG4DB = 0x0UL; // Double buffer mode disabled
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	649a      	str	r2, [r3, #72]	; 0x48
	ppl->register2.CP = 0x00UL;    // Charge pump current  0.32 mA (1.36/RSET * (1 + CP[3:0]) RSET  5k1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	64da      	str	r2, [r3, #76]	; 0x4c
	ppl->register2.LDF = 0x0UL;    // Lock detect function  Frac-N lock detect
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	651a      	str	r2, [r3, #80]	; 0x50
	ppl->register2.LDP = 0x0UL;    // Lock detect precision  10ns
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
	ppl->register2.PDP = 0x1UL;    // Phase detector polarity set positive
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	659a      	str	r2, [r3, #88]	; 0x58
	ppl->register2.SHDN = 0x0UL;   // Sets power-down mode.
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	65da      	str	r2, [r3, #92]	; 0x5c
	ppl->register2.TRI = 0x0UL;    // Sets charge-pump three-state mode
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
	ppl->register2.RST = 0x0UL;    // Sets counter reset mode
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	665a      	str	r2, [r3, #100]	; 0x64
	ppl->register2.ADDR2 = 0x2UL;  // Register address bits
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	669a      	str	r2, [r3, #104]	; 0x68

	return ppl->register2.LDS << 31
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	07da      	lsls	r2, r3, #31
					| ppl->register2.SDN << 29 | ppl->register2.MUX << 26
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	075b      	lsls	r3, r3, #29
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	069b      	lsls	r3, r3, #26
 8003280:	431a      	orrs	r2, r3
					| ppl->register2.DBR << 25 | ppl->register2.RDIV2 << 24
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	065b      	lsls	r3, r3, #25
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	061b      	lsls	r3, r3, #24
 8003290:	431a      	orrs	r2, r3
					| ppl->register2.RCNT << 14 | ppl->register2.REG4DB << 13
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	039b      	lsls	r3, r3, #14
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329e:	035b      	lsls	r3, r3, #13
 80032a0:	431a      	orrs	r2, r3
					| ppl->register2.CP << 9 | ppl->register2.LDF << 8
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	025b      	lsls	r3, r3, #9
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	431a      	orrs	r2, r3
					| ppl->register2.LDP << 7 | ppl->register2.PDP << 6
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	01db      	lsls	r3, r3, #7
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	019b      	lsls	r3, r3, #6
 80032c0:	431a      	orrs	r2, r3
					| ppl->register2.SHDN << 5 | ppl->register2.TRI << 4
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	015b      	lsls	r3, r3, #5
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	431a      	orrs	r2, r3
					| ppl->register2.RST << 3 | ppl->register2.ADDR2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032de:	4313      	orrs	r3, r2
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <getRegister3InitValue>:

unsigned long getRegister3InitValue(MAX2871_t *ppl) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

	ppl->register3.VCO_MS = 0x0UL;   // VCO manual selection: unused
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	66da      	str	r2, [r3, #108]	; 0x6c
	ppl->register3.VAS_SHDN = 0x0UL; // VAS enabled
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	671a      	str	r2, [r3, #112]	; 0x70
	ppl->register3.RETUNE = 0x1UL;   // VAS temperature compensation enabled
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	675a      	str	r2, [r3, #116]	; 0x74
	ppl->register3.CSM = 0x0UL;      // Cycle slip mode disabled
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	679a      	str	r2, [r3, #120]	; 0x78
	ppl->register3.MUTEDEL = 0x0UL;  // Mute delay mode disabled
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c
	ppl->register3.CDM = 0x1UL;      // Fast-lock mode enabled
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	2101      	movs	r1, #1
 8003314:	5099      	str	r1, [r3, r2]
	ppl->register3.CDIV = 0x0UL;     // Clock divider value unused
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2284      	movs	r2, #132	; 0x84
 800331a:	2100      	movs	r1, #0
 800331c:	5099      	str	r1, [r3, r2]
	ppl->register3.ADDR3 = 0x3UL;    // Register address bits
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2288      	movs	r2, #136	; 0x88
 8003322:	2103      	movs	r1, #3
 8003324:	5099      	str	r1, [r3, r2]

	return ppl->register3.VCO_MS << 26
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332a:	069a      	lsls	r2, r3, #26
					| ppl->register3.VAS_SHDN << 25 | ppl->register3.RETUNE << 24
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	065b      	lsls	r3, r3, #25
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	431a      	orrs	r2, r3
					| ppl->register3.CSM << 18 | ppl->register3.MUTEDEL << 17
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003340:	049b      	lsls	r3, r3, #18
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003348:	045b      	lsls	r3, r3, #17
 800334a:	431a      	orrs	r2, r3
					| ppl->register3.CDM << 15 | ppl->register3.CDIV << 3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	585b      	ldr	r3, [r3, r1]
 8003352:	03db      	lsls	r3, r3, #15
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2184      	movs	r1, #132	; 0x84
 800335a:	585b      	ldr	r3, [r3, r1]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	431a      	orrs	r2, r3
					| ppl->register3.ADDR3;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2188      	movs	r1, #136	; 0x88
 8003364:	585b      	ldr	r3, [r3, r1]
 8003366:	4313      	orrs	r3, r2
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}

08003370 <getRegister4InitValue>:

unsigned long getRegister4InitValue(MAX2871_t *ppl) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

	ppl->register4.RES = 0x3UL;    // Reserved
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	228c      	movs	r2, #140	; 0x8c
 800337c:	2103      	movs	r1, #3
 800337e:	5099      	str	r1, [r3, r2]
	ppl->register4.SDLDO = 0x0UL;  // LDO enabled
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2290      	movs	r2, #144	; 0x90
 8003384:	2100      	movs	r1, #0
 8003386:	5099      	str	r1, [r3, r2]
	ppl->register4.SDDIV = 0x0UL;  // VCO Divider enabled
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2294      	movs	r2, #148	; 0x94
 800338c:	2100      	movs	r1, #0
 800338e:	5099      	str	r1, [r3, r2]
	ppl->register4.SDREF = 0x0UL;  // Reference input enabled
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2298      	movs	r2, #152	; 0x98
 8003394:	2100      	movs	r1, #0
 8003396:	5099      	str	r1, [r3, r2]
	ppl->register4.FB = 0x1UL;     // VCO to N counter mode is NOT divided
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	229c      	movs	r2, #156	; 0x9c
 800339c:	2101      	movs	r1, #1
 800339e:	5099      	str	r1, [r3, r2]
	ppl->register4.BS = 0x30FFUL;  // Should be chosen so that fPFD/BS  50kH or less
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	22a0      	movs	r2, #160	; 0xa0
 80033a4:	4936      	ldr	r1, [pc, #216]	; (8003480 <getRegister4InitValue+0x110>)
 80033a6:	5099      	str	r1, [r3, r2]
	ppl->register4.SDVCO = 0x0UL;  // VCO enabled
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	22a4      	movs	r2, #164	; 0xa4
 80033ac:	2100      	movs	r1, #0
 80033ae:	5099      	str	r1, [r3, r2]
	ppl->register4.MTLD = 0x0UL;   // RFOUT Mute until Lock detect mode disabled
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	22a8      	movs	r2, #168	; 0xa8
 80033b4:	2100      	movs	r1, #0
 80033b6:	5099      	str	r1, [r3, r2]
	ppl->register4.BDIV = 0x0UL;   // RFOUTB is divided (so it's the same as RFOUTA)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	22ac      	movs	r2, #172	; 0xac
 80033bc:	2100      	movs	r1, #0
 80033be:	5099      	str	r1, [r3, r2]
	ppl->register4.RFB_EN = 0x0UL; // RFOUTB disabled
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	22b0      	movs	r2, #176	; 0xb0
 80033c4:	2100      	movs	r1, #0
 80033c6:	5099      	str	r1, [r3, r2]
	ppl->register4.BPWR = 0x3UL;   // RFOUTB  5 dBm
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	22b4      	movs	r2, #180	; 0xb4
 80033cc:	2103      	movs	r1, #3
 80033ce:	5099      	str	r1, [r3, r2]
	ppl->register4.RFA_EN = 0x1UL; // RFOUTA enabled
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	22b8      	movs	r2, #184	; 0xb8
 80033d4:	2101      	movs	r1, #1
 80033d6:	5099      	str	r1, [r3, r2]
	ppl->register4.APWR = 0x2UL;   // Sets RFOUTA single-ended output power   (00 = -4dBm)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	22bc      	movs	r2, #188	; 0xbc
 80033dc:	2102      	movs	r1, #2
 80033de:	5099      	str	r1, [r3, r2]
	                                                                        //(01 = -1dBm)
	                                                                        //(10 = +2dBm)
	                                                                        //(11 = +5dBm)
	ppl->register4.ADDR4 = 0x4UL;  // Register address bits
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	22c0      	movs	r2, #192	; 0xc0
 80033e4:	2104      	movs	r1, #4
 80033e6:	5099      	str	r1, [r3, r2]

	return 	ppl->register4.RES << 29
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	228c      	movs	r2, #140	; 0x8c
 80033ec:	589b      	ldr	r3, [r3, r2]
 80033ee:	075a      	lsls	r2, r3, #29
			| ppl->register4.SDLDO << 28 | ppl->register4.SDDIV << 27
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2190      	movs	r1, #144	; 0x90
 80033f4:	585b      	ldr	r3, [r3, r1]
 80033f6:	071b      	lsls	r3, r3, #28
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2194      	movs	r1, #148	; 0x94
 80033fe:	585b      	ldr	r3, [r3, r1]
 8003400:	06db      	lsls	r3, r3, #27
 8003402:	431a      	orrs	r2, r3
			| ppl->register4.SDREF << 26 | ppl->register4.FB << 23
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2198      	movs	r1, #152	; 0x98
 8003408:	585b      	ldr	r3, [r3, r1]
 800340a:	069b      	lsls	r3, r3, #26
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	219c      	movs	r1, #156	; 0x9c
 8003412:	585b      	ldr	r3, [r3, r1]
 8003414:	05db      	lsls	r3, r3, #23
 8003416:	431a      	orrs	r2, r3
			| ppl->DIVA << 20 | ppl->register4.BS << 12
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	051b      	lsls	r3, r3, #20
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	21a0      	movs	r1, #160	; 0xa0
 8003424:	585b      	ldr	r3, [r3, r1]
 8003426:	031b      	lsls	r3, r3, #12
 8003428:	431a      	orrs	r2, r3
			| ppl->register4.SDVCO << 11 | ppl->register4.MTLD << 10
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	21a4      	movs	r1, #164	; 0xa4
 800342e:	585b      	ldr	r3, [r3, r1]
 8003430:	02db      	lsls	r3, r3, #11
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	21a8      	movs	r1, #168	; 0xa8
 8003438:	585b      	ldr	r3, [r3, r1]
 800343a:	029b      	lsls	r3, r3, #10
 800343c:	431a      	orrs	r2, r3
			| ppl->register4.BDIV << 9 | ppl->register4.RFB_EN << 8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	21ac      	movs	r1, #172	; 0xac
 8003442:	585b      	ldr	r3, [r3, r1]
 8003444:	025b      	lsls	r3, r3, #9
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	21b0      	movs	r1, #176	; 0xb0
 800344c:	585b      	ldr	r3, [r3, r1]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	431a      	orrs	r2, r3
			| ppl->register4.BPWR << 6 | ppl->register4.RFA_EN << 5
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	21b4      	movs	r1, #180	; 0xb4
 8003456:	585b      	ldr	r3, [r3, r1]
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	21b8      	movs	r1, #184	; 0xb8
 8003460:	585b      	ldr	r3, [r3, r1]
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	431a      	orrs	r2, r3
			| ppl->register4.APWR << 3 | ppl->register4.ADDR4;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	21bc      	movs	r1, #188	; 0xbc
 800346a:	585b      	ldr	r3, [r3, r1]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	21c0      	movs	r1, #192	; 0xc0
 8003474:	585b      	ldr	r3, [r3, r1]
 8003476:	4313      	orrs	r3, r2

}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b002      	add	sp, #8
 800347e:	bd80      	pop	{r7, pc}
 8003480:	000030ff 	.word	0x000030ff

08003484 <getRegister5InitValue>:

unsigned long getRegister5InitValue(MAX2871_t *ppl) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

	ppl->register5.VAS_DLY = 0x3UL;  // 0x0 if VAS_TEMP  0, 0x3 if VAS_TEMP  1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	22c4      	movs	r2, #196	; 0xc4
 8003490:	2103      	movs	r1, #3
 8003492:	5099      	str	r1, [r3, r2]
	ppl->register5.SDPLL = 0x0UL;    // PLL enabled
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	22c8      	movs	r2, #200	; 0xc8
 8003498:	2100      	movs	r1, #0
 800349a:	5099      	str	r1, [r3, r2]
	ppl->register5.F01 = 0x1UL;      // If F  0 then int
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	22cc      	movs	r2, #204	; 0xcc
 80034a0:	2101      	movs	r1, #1
 80034a2:	5099      	str	r1, [r3, r2]
	ppl->register5.LD = 0x1UL;       // Lock-Detect pin function  HIGH
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	22d0      	movs	r2, #208	; 0xd0
 80034a8:	2101      	movs	r1, #1
 80034aa:	5099      	str	r1, [r3, r2]
	ppl->register5.MUX_MSB = 0x0UL;  // MSB of MUX
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	22d4      	movs	r2, #212	; 0xd4
 80034b0:	2100      	movs	r1, #0
 80034b2:	5099      	str	r1, [r3, r2]
	ppl->register5.ADCS = 0x0UL;     // ADC normal operation (ADC isn't used)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	22d8      	movs	r2, #216	; 0xd8
 80034b8:	2100      	movs	r1, #0
 80034ba:	5099      	str	r1, [r3, r2]
	ppl->register5.ADCM = 0x0UL;     // ADC disabled
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	22dc      	movs	r2, #220	; 0xdc
 80034c0:	2100      	movs	r1, #0
 80034c2:	5099      	str	r1, [r3, r2]
	ppl->register5.ADDR5 = 0x5UL;    // Register address bits
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	22e0      	movs	r2, #224	; 0xe0
 80034c8:	2105      	movs	r1, #5
 80034ca:	5099      	str	r1, [r3, r2]

	return ppl->register5.VAS_DLY << 29 | ppl->register5.SDPLL << 25
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	22c4      	movs	r2, #196	; 0xc4
 80034d0:	589b      	ldr	r3, [r3, r2]
 80034d2:	075a      	lsls	r2, r3, #29
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	21c8      	movs	r1, #200	; 0xc8
 80034d8:	585b      	ldr	r3, [r3, r1]
 80034da:	065b      	lsls	r3, r3, #25
 80034dc:	431a      	orrs	r2, r3
			| ppl->register5.F01 << 24 | ppl->register5.LD << 22
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	21cc      	movs	r1, #204	; 0xcc
 80034e2:	585b      	ldr	r3, [r3, r1]
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	21d0      	movs	r1, #208	; 0xd0
 80034ec:	585b      	ldr	r3, [r3, r1]
 80034ee:	059b      	lsls	r3, r3, #22
 80034f0:	431a      	orrs	r2, r3
			| ppl->register5.MUX_MSB << 18 | ppl->register5.ADCS << 6
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	21d4      	movs	r1, #212	; 0xd4
 80034f6:	585b      	ldr	r3, [r3, r1]
 80034f8:	049b      	lsls	r3, r3, #18
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	21d8      	movs	r1, #216	; 0xd8
 8003500:	585b      	ldr	r3, [r3, r1]
 8003502:	019b      	lsls	r3, r3, #6
 8003504:	431a      	orrs	r2, r3
			| ppl->register5.ADCM << 3 | ppl->register5.ADDR5;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	21dc      	movs	r1, #220	; 0xdc
 800350a:	585b      	ldr	r3, [r3, r1]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	21e0      	movs	r1, #224	; 0xe0
 8003514:	585b      	ldr	r3, [r3, r1]
 8003516:	4313      	orrs	r3, r2
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <max2871Init>:

void max2871Init(MAX2871_t *ppl) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	// Composition of MAX2971 Registers
	ppl->FreqOut = 0;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	2300      	movs	r3, #0
 800352e:	600a      	str	r2, [r1, #0]
 8003530:	604b      	str	r3, [r1, #4]
	ppl->DIVA = 0x0UL;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}

08003540 <max2871Write>:

void max2871Write(SPI_HandleTypeDef *hspi2, unsigned long data)
// Writes 32 Bit value to register of MAX2871
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4] = { 0 };
 800354a:	240c      	movs	r4, #12
 800354c:	193b      	adds	r3, r7, r4
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

	buffer[0] = (data & 0xFF000000) >> 24;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	0e1b      	lsrs	r3, r3, #24
 8003556:	b2da      	uxtb	r2, r3
 8003558:	193b      	adds	r3, r7, r4
 800355a:	701a      	strb	r2, [r3, #0]
	buffer[1] = (data & 0x00FF0000) >> 16;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	b2da      	uxtb	r2, r3
 8003562:	193b      	adds	r3, r7, r4
 8003564:	705a      	strb	r2, [r3, #1]
	buffer[2] = (data & 0x0000FF00) >> 8;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	b2da      	uxtb	r2, r3
 800356c:	193b      	adds	r3, r7, r4
 800356e:	709a      	strb	r2, [r3, #2]
	buffer[3] = (data & 0x000000FF);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	193b      	adds	r3, r7, r4
 8003576:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_RESET);
 8003578:	23a0      	movs	r3, #160	; 0xa0
 800357a:	05db      	lsls	r3, r3, #23
 800357c:	2200      	movs	r2, #0
 800357e:	2104      	movs	r1, #4
 8003580:	0018      	movs	r0, r3
 8003582:	f001 fe50 	bl	8005226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_RESET);
 8003586:	23a0      	movs	r3, #160	; 0xa0
 8003588:	05db      	lsls	r3, r3, #23
 800358a:	2200      	movs	r2, #0
 800358c:	2102      	movs	r1, #2
 800358e:	0018      	movs	r0, r3
 8003590:	f001 fe49 	bl	8005226 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003594:	2001      	movs	r0, #1
 8003596:	f001 fbed 	bl	8004d74 <HAL_Delay>
	HAL_SPI_Transmit(hspi2, buffer, 4, 100);
 800359a:	1939      	adds	r1, r7, r4
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	2364      	movs	r3, #100	; 0x64
 80035a0:	2204      	movs	r2, #4
 80035a2:	f002 fbef 	bl	8005d84 <HAL_SPI_Transmit>
	HAL_Delay(1);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f001 fbe4 	bl	8004d74 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_SET);
 80035ac:	23a0      	movs	r3, #160	; 0xa0
 80035ae:	05db      	lsls	r3, r3, #23
 80035b0:	2201      	movs	r2, #1
 80035b2:	2104      	movs	r1, #4
 80035b4:	0018      	movs	r0, r3
 80035b6:	f001 fe36 	bl	8005226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_SET);
 80035ba:	23a0      	movs	r3, #160	; 0xa0
 80035bc:	05db      	lsls	r3, r3, #23
 80035be:	2201      	movs	r2, #1
 80035c0:	2102      	movs	r1, #2
 80035c2:	0018      	movs	r0, r3
 80035c4:	f001 fe2f 	bl	8005226 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80035c8:	2032      	movs	r0, #50	; 0x32
 80035ca:	f001 fbd3 	bl	8004d74 <HAL_Delay>
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b005      	add	sp, #20
 80035d4:	bd90      	pop	{r4, r7, pc}
	...

080035d8 <max2871CalculateRegister0Values>:

void max2871CalculateRegister0Values(MAX2871_t *ppl) // Calculates values of NDIV, FRAC & DIVA
{
 80035d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035da:	b0bf      	sub	sp, #252	; 0xfc
 80035dc:	af00      	add	r7, sp, #0
 80035de:	22dc      	movs	r2, #220	; 0xdc
 80035e0:	2308      	movs	r3, #8
 80035e2:	18d3      	adds	r3, r2, r3
 80035e4:	19db      	adds	r3, r3, r7
 80035e6:	6018      	str	r0, [r3, #0]
	double rest;
	unsigned long FreqRef = 50000000.0;  // FreqRef * 5
 80035e8:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <max2871CalculateRegister0Values+0x248>)
 80035ea:	21ec      	movs	r1, #236	; 0xec
 80035ec:	2008      	movs	r0, #8
 80035ee:	1809      	adds	r1, r1, r0
 80035f0:	19c9      	adds	r1, r1, r7
 80035f2:	600b      	str	r3, [r1, #0]
	unsigned long Resol = 4000.0;
 80035f4:	23fa      	movs	r3, #250	; 0xfa
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	21e8      	movs	r1, #232	; 0xe8
 80035fa:	2008      	movs	r0, #8
 80035fc:	1809      	adds	r1, r1, r0
 80035fe:	19c9      	adds	r1, r1, r7
 8003600:	600b      	str	r3, [r1, #0]

	if (ppl->FreqOut >= 3000000000) {
 8003602:	2308      	movs	r3, #8
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	19db      	adds	r3, r3, r7
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <max2871CalculateRegister0Values+0x42>
 8003612:	d173      	bne.n	80036fc <max2871CalculateRegister0Values+0x124>
 8003614:	4983      	ldr	r1, [pc, #524]	; (8003824 <max2871CalculateRegister0Values+0x24c>)
 8003616:	428a      	cmp	r2, r1
 8003618:	d970      	bls.n	80036fc <max2871CalculateRegister0Values+0x124>
		ppl->DIVA = 0;
 800361a:	26dc      	movs	r6, #220	; 0xdc
 800361c:	2308      	movs	r3, #8
 800361e:	18f3      	adds	r3, r6, r3
 8003620:	19db      	adds	r3, r3, r7
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut / FreqRef;
 8003628:	2308      	movs	r3, #8
 800362a:	18f3      	adds	r3, r6, r3
 800362c:	19db      	adds	r3, r3, r7
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	24ec      	movs	r4, #236	; 0xec
 8003636:	2308      	movs	r3, #8
 8003638:	18e3      	adds	r3, r4, r3
 800363a:	19db      	adds	r3, r3, r7
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	18ba      	adds	r2, r7, r2
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	2284      	movs	r2, #132	; 0x84
 8003648:	18ba      	adds	r2, r7, r2
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f7fc fe28 	bl	80002a8 <__aeabi_uldivmod>
 8003658:	0002      	movs	r2, r0
 800365a:	000b      	movs	r3, r1
 800365c:	2308      	movs	r3, #8
 800365e:	18f3      	adds	r3, r6, r3
 8003660:	19db      	adds	r3, r3, r7
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut % FreqRef;
 8003666:	2308      	movs	r3, #8
 8003668:	18f3      	adds	r3, r6, r3
 800366a:	19db      	adds	r3, r3, r7
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	2308      	movs	r3, #8
 8003674:	18e3      	adds	r3, r4, r3
 8003676:	19db      	adds	r3, r3, r7
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	67bb      	str	r3, [r7, #120]	; 0x78
 800367c:	2300      	movs	r3, #0
 800367e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003680:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003684:	f7fc fe10 	bl	80002a8 <__aeabi_uldivmod>
 8003688:	0010      	movs	r0, r2
 800368a:	0019      	movs	r1, r3
 800368c:	f7fc fe4a 	bl	8000324 <__aeabi_ul2d>
 8003690:	0002      	movs	r2, r0
 8003692:	000b      	movs	r3, r1
 8003694:	25e0      	movs	r5, #224	; 0xe0
 8003696:	2108      	movs	r1, #8
 8003698:	1869      	adds	r1, r5, r1
 800369a:	19c9      	adds	r1, r1, r7
 800369c:	600a      	str	r2, [r1, #0]
 800369e:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 80036a0:	2308      	movs	r3, #8
 80036a2:	18e3      	adds	r3, r4, r3
 80036a4:	19db      	adds	r3, r3, r7
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	f7fe fc90 	bl	8001fcc <__aeabi_ui2d>
 80036ac:	0002      	movs	r2, r0
 80036ae:	000b      	movs	r3, r1
 80036b0:	2108      	movs	r1, #8
 80036b2:	1869      	adds	r1, r5, r1
 80036b4:	19c9      	adds	r1, r1, r7
 80036b6:	6808      	ldr	r0, [r1, #0]
 80036b8:	6849      	ldr	r1, [r1, #4]
 80036ba:	f7fd fa51 	bl	8000b60 <__aeabi_ddiv>
 80036be:	0002      	movs	r2, r0
 80036c0:	000b      	movs	r3, r1
 80036c2:	0014      	movs	r4, r2
 80036c4:	001d      	movs	r5, r3
 80036c6:	23e8      	movs	r3, #232	; 0xe8
 80036c8:	2208      	movs	r2, #8
 80036ca:	189b      	adds	r3, r3, r2
 80036cc:	19db      	adds	r3, r3, r7
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	f7fe fc7c 	bl	8001fcc <__aeabi_ui2d>
 80036d4:	0002      	movs	r2, r0
 80036d6:	000b      	movs	r3, r1
 80036d8:	0020      	movs	r0, r4
 80036da:	0029      	movs	r1, r5
 80036dc:	f7fd fe42 	bl	8001364 <__aeabi_dmul>
 80036e0:	0002      	movs	r2, r0
 80036e2:	000b      	movs	r3, r1
 80036e4:	0010      	movs	r0, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	f7fc fdfe 	bl	80002e8 <__aeabi_d2uiz>
 80036ec:	0002      	movs	r2, r0
 80036ee:	2308      	movs	r3, #8
 80036f0:	18f3      	adds	r3, r6, r3
 80036f2:	19db      	adds	r3, r3, r7
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	615a      	str	r2, [r3, #20]
		ppl->DIVA = 7;
		ppl->register0.NDIV = ppl->FreqOut * 128 / FreqRef;
		rest = ppl->FreqOut * 128 % FreqRef;
		ppl->register0.FRAC = rest / FreqRef * Resol;
	}
}
 80036f8:	f000 fcfc 	bl	80040f4 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 3000000000) && (ppl->FreqOut >= 1500000000)) {
 80036fc:	23dc      	movs	r3, #220	; 0xdc
 80036fe:	2208      	movs	r2, #8
 8003700:	189b      	adds	r3, r3, r2
 8003702:	19db      	adds	r3, r3, r7
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d000      	beq.n	8003710 <max2871CalculateRegister0Values+0x138>
 800370e:	e08d      	b.n	800382c <max2871CalculateRegister0Values+0x254>
 8003710:	d103      	bne.n	800371a <max2871CalculateRegister0Values+0x142>
 8003712:	4944      	ldr	r1, [pc, #272]	; (8003824 <max2871CalculateRegister0Values+0x24c>)
 8003714:	428a      	cmp	r2, r1
 8003716:	d900      	bls.n	800371a <max2871CalculateRegister0Values+0x142>
 8003718:	e088      	b.n	800382c <max2871CalculateRegister0Values+0x254>
 800371a:	23dc      	movs	r3, #220	; 0xdc
 800371c:	2208      	movs	r2, #8
 800371e:	189b      	adds	r3, r3, r2
 8003720:	19db      	adds	r3, r3, r7
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <max2871CalculateRegister0Values+0x160>
 800372c:	d000      	beq.n	8003730 <max2871CalculateRegister0Values+0x158>
 800372e:	e07d      	b.n	800382c <max2871CalculateRegister0Values+0x254>
 8003730:	493d      	ldr	r1, [pc, #244]	; (8003828 <max2871CalculateRegister0Values+0x250>)
 8003732:	428a      	cmp	r2, r1
 8003734:	d800      	bhi.n	8003738 <max2871CalculateRegister0Values+0x160>
 8003736:	e079      	b.n	800382c <max2871CalculateRegister0Values+0x254>
		ppl->DIVA = 1;
 8003738:	26dc      	movs	r6, #220	; 0xdc
 800373a:	2308      	movs	r3, #8
 800373c:	18f3      	adds	r3, r6, r3
 800373e:	19db      	adds	r3, r3, r7
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2201      	movs	r2, #1
 8003744:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 2 / FreqRef;
 8003746:	2308      	movs	r3, #8
 8003748:	18f3      	adds	r3, r6, r3
 800374a:	19db      	adds	r3, r3, r7
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	1892      	adds	r2, r2, r2
 8003754:	415b      	adcs	r3, r3
 8003756:	0010      	movs	r0, r2
 8003758:	0019      	movs	r1, r3
 800375a:	24ec      	movs	r4, #236	; 0xec
 800375c:	2308      	movs	r3, #8
 800375e:	18e3      	adds	r3, r4, r3
 8003760:	19db      	adds	r3, r3, r7
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	673b      	str	r3, [r7, #112]	; 0x70
 8003766:	2300      	movs	r3, #0
 8003768:	677b      	str	r3, [r7, #116]	; 0x74
 800376a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800376c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800376e:	f7fc fd9b 	bl	80002a8 <__aeabi_uldivmod>
 8003772:	0002      	movs	r2, r0
 8003774:	000b      	movs	r3, r1
 8003776:	2308      	movs	r3, #8
 8003778:	18f3      	adds	r3, r6, r3
 800377a:	19db      	adds	r3, r3, r7
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 2 % FreqRef;
 8003780:	2308      	movs	r3, #8
 8003782:	18f3      	adds	r3, r6, r3
 8003784:	19db      	adds	r3, r3, r7
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	1892      	adds	r2, r2, r2
 800378e:	415b      	adcs	r3, r3
 8003790:	0010      	movs	r0, r2
 8003792:	0019      	movs	r1, r3
 8003794:	2308      	movs	r3, #8
 8003796:	18e3      	adds	r3, r4, r3
 8003798:	19db      	adds	r3, r3, r7
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	66bb      	str	r3, [r7, #104]	; 0x68
 800379e:	2300      	movs	r3, #0
 80037a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	f7fc fd7f 	bl	80002a8 <__aeabi_uldivmod>
 80037aa:	0010      	movs	r0, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	f7fc fdb9 	bl	8000324 <__aeabi_ul2d>
 80037b2:	0002      	movs	r2, r0
 80037b4:	000b      	movs	r3, r1
 80037b6:	25e0      	movs	r5, #224	; 0xe0
 80037b8:	2108      	movs	r1, #8
 80037ba:	1869      	adds	r1, r5, r1
 80037bc:	19c9      	adds	r1, r1, r7
 80037be:	600a      	str	r2, [r1, #0]
 80037c0:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 80037c2:	2308      	movs	r3, #8
 80037c4:	18e3      	adds	r3, r4, r3
 80037c6:	19db      	adds	r3, r3, r7
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	f7fe fbff 	bl	8001fcc <__aeabi_ui2d>
 80037ce:	0002      	movs	r2, r0
 80037d0:	000b      	movs	r3, r1
 80037d2:	2108      	movs	r1, #8
 80037d4:	1869      	adds	r1, r5, r1
 80037d6:	19c9      	adds	r1, r1, r7
 80037d8:	6808      	ldr	r0, [r1, #0]
 80037da:	6849      	ldr	r1, [r1, #4]
 80037dc:	f7fd f9c0 	bl	8000b60 <__aeabi_ddiv>
 80037e0:	0002      	movs	r2, r0
 80037e2:	000b      	movs	r3, r1
 80037e4:	0014      	movs	r4, r2
 80037e6:	001d      	movs	r5, r3
 80037e8:	23e8      	movs	r3, #232	; 0xe8
 80037ea:	2208      	movs	r2, #8
 80037ec:	189b      	adds	r3, r3, r2
 80037ee:	19db      	adds	r3, r3, r7
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	f7fe fbeb 	bl	8001fcc <__aeabi_ui2d>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0020      	movs	r0, r4
 80037fc:	0029      	movs	r1, r5
 80037fe:	f7fd fdb1 	bl	8001364 <__aeabi_dmul>
 8003802:	0002      	movs	r2, r0
 8003804:	000b      	movs	r3, r1
 8003806:	0010      	movs	r0, r2
 8003808:	0019      	movs	r1, r3
 800380a:	f7fc fd6d 	bl	80002e8 <__aeabi_d2uiz>
 800380e:	0002      	movs	r2, r0
 8003810:	2308      	movs	r3, #8
 8003812:	18f3      	adds	r3, r6, r3
 8003814:	19db      	adds	r3, r3, r7
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	615a      	str	r2, [r3, #20]
 800381a:	f000 fc6b 	bl	80040f4 <max2871CalculateRegister0Values+0xb1c>
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	02faf080 	.word	0x02faf080
 8003824:	b2d05dff 	.word	0xb2d05dff
 8003828:	59682eff 	.word	0x59682eff
	} else if ((ppl->FreqOut < 1500000000) && (ppl->FreqOut >= 750000000)) {
 800382c:	23dc      	movs	r3, #220	; 0xdc
 800382e:	2208      	movs	r2, #8
 8003830:	189b      	adds	r3, r3, r2
 8003832:	19db      	adds	r3, r3, r7
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d000      	beq.n	8003840 <max2871CalculateRegister0Values+0x268>
 800383e:	e0aa      	b.n	8003996 <max2871CalculateRegister0Values+0x3be>
 8003840:	d103      	bne.n	800384a <max2871CalculateRegister0Values+0x272>
 8003842:	49b5      	ldr	r1, [pc, #724]	; (8003b18 <max2871CalculateRegister0Values+0x540>)
 8003844:	428a      	cmp	r2, r1
 8003846:	d900      	bls.n	800384a <max2871CalculateRegister0Values+0x272>
 8003848:	e0a5      	b.n	8003996 <max2871CalculateRegister0Values+0x3be>
 800384a:	23dc      	movs	r3, #220	; 0xdc
 800384c:	2208      	movs	r2, #8
 800384e:	189b      	adds	r3, r3, r2
 8003850:	19db      	adds	r3, r3, r7
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <max2871CalculateRegister0Values+0x290>
 800385c:	d000      	beq.n	8003860 <max2871CalculateRegister0Values+0x288>
 800385e:	e09a      	b.n	8003996 <max2871CalculateRegister0Values+0x3be>
 8003860:	49ae      	ldr	r1, [pc, #696]	; (8003b1c <max2871CalculateRegister0Values+0x544>)
 8003862:	428a      	cmp	r2, r1
 8003864:	d800      	bhi.n	8003868 <max2871CalculateRegister0Values+0x290>
 8003866:	e096      	b.n	8003996 <max2871CalculateRegister0Values+0x3be>
		ppl->DIVA = 2;
 8003868:	26dc      	movs	r6, #220	; 0xdc
 800386a:	2308      	movs	r3, #8
 800386c:	18f3      	adds	r3, r6, r3
 800386e:	19db      	adds	r3, r3, r7
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2202      	movs	r2, #2
 8003874:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 4 / FreqRef;
 8003876:	2308      	movs	r3, #8
 8003878:	18f3      	adds	r3, r6, r3
 800387a:	19db      	adds	r3, r3, r7
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	0f91      	lsrs	r1, r2, #30
 8003884:	0098      	lsls	r0, r3, #2
 8003886:	24d4      	movs	r4, #212	; 0xd4
 8003888:	2508      	movs	r5, #8
 800388a:	1965      	adds	r5, r4, r5
 800388c:	19ed      	adds	r5, r5, r7
 800388e:	6028      	str	r0, [r5, #0]
 8003890:	0020      	movs	r0, r4
 8003892:	0005      	movs	r5, r0
 8003894:	2408      	movs	r4, #8
 8003896:	1900      	adds	r0, r0, r4
 8003898:	19c4      	adds	r4, r0, r7
 800389a:	6820      	ldr	r0, [r4, #0]
 800389c:	4308      	orrs	r0, r1
 800389e:	0029      	movs	r1, r5
 80038a0:	2408      	movs	r4, #8
 80038a2:	1909      	adds	r1, r1, r4
 80038a4:	19c9      	adds	r1, r1, r7
 80038a6:	6008      	str	r0, [r1, #0]
 80038a8:	0093      	lsls	r3, r2, #2
 80038aa:	21d0      	movs	r1, #208	; 0xd0
 80038ac:	2208      	movs	r2, #8
 80038ae:	188a      	adds	r2, r1, r2
 80038b0:	19d2      	adds	r2, r2, r7
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	23ec      	movs	r3, #236	; 0xec
 80038b6:	001c      	movs	r4, r3
 80038b8:	2208      	movs	r2, #8
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	19da      	adds	r2, r3, r7
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
 80038c2:	2300      	movs	r3, #0
 80038c4:	667b      	str	r3, [r7, #100]	; 0x64
 80038c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ca:	2008      	movs	r0, #8
 80038cc:	1809      	adds	r1, r1, r0
 80038ce:	19c9      	adds	r1, r1, r7
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	6849      	ldr	r1, [r1, #4]
 80038d4:	f7fc fce8 	bl	80002a8 <__aeabi_uldivmod>
 80038d8:	0002      	movs	r2, r0
 80038da:	000b      	movs	r3, r1
 80038dc:	2308      	movs	r3, #8
 80038de:	18f3      	adds	r3, r6, r3
 80038e0:	19d9      	adds	r1, r3, r7
 80038e2:	680b      	ldr	r3, [r1, #0]
 80038e4:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 4 % FreqRef;
 80038e6:	2308      	movs	r3, #8
 80038e8:	18f3      	adds	r3, r6, r3
 80038ea:	19da      	adds	r2, r3, r7
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0f91      	lsrs	r1, r2, #30
 80038f4:	0098      	lsls	r0, r3, #2
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4308      	orrs	r0, r1
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	0093      	lsls	r3, r2, #2
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	0023      	movs	r3, r4
 8003904:	001d      	movs	r5, r3
 8003906:	2208      	movs	r2, #8
 8003908:	189b      	adds	r3, r3, r2
 800390a:	19da      	adds	r2, r3, r7
 800390c:	6813      	ldr	r3, [r2, #0]
 800390e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003910:	2300      	movs	r3, #0
 8003912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003918:	6838      	ldr	r0, [r7, #0]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	f7fc fcc4 	bl	80002a8 <__aeabi_uldivmod>
 8003920:	0010      	movs	r0, r2
 8003922:	0019      	movs	r1, r3
 8003924:	f7fc fcfe 	bl	8000324 <__aeabi_ul2d>
 8003928:	0002      	movs	r2, r0
 800392a:	000b      	movs	r3, r1
 800392c:	24e0      	movs	r4, #224	; 0xe0
 800392e:	2108      	movs	r1, #8
 8003930:	1861      	adds	r1, r4, r1
 8003932:	19c9      	adds	r1, r1, r7
 8003934:	600a      	str	r2, [r1, #0]
 8003936:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003938:	002b      	movs	r3, r5
 800393a:	2208      	movs	r2, #8
 800393c:	189b      	adds	r3, r3, r2
 800393e:	19db      	adds	r3, r3, r7
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	f7fe fb43 	bl	8001fcc <__aeabi_ui2d>
 8003946:	0002      	movs	r2, r0
 8003948:	000b      	movs	r3, r1
 800394a:	2108      	movs	r1, #8
 800394c:	1861      	adds	r1, r4, r1
 800394e:	19c9      	adds	r1, r1, r7
 8003950:	6808      	ldr	r0, [r1, #0]
 8003952:	6849      	ldr	r1, [r1, #4]
 8003954:	f7fd f904 	bl	8000b60 <__aeabi_ddiv>
 8003958:	0002      	movs	r2, r0
 800395a:	000b      	movs	r3, r1
 800395c:	0014      	movs	r4, r2
 800395e:	001d      	movs	r5, r3
 8003960:	23e8      	movs	r3, #232	; 0xe8
 8003962:	2208      	movs	r2, #8
 8003964:	189b      	adds	r3, r3, r2
 8003966:	19db      	adds	r3, r3, r7
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	f7fe fb2f 	bl	8001fcc <__aeabi_ui2d>
 800396e:	0002      	movs	r2, r0
 8003970:	000b      	movs	r3, r1
 8003972:	0020      	movs	r0, r4
 8003974:	0029      	movs	r1, r5
 8003976:	f7fd fcf5 	bl	8001364 <__aeabi_dmul>
 800397a:	0002      	movs	r2, r0
 800397c:	000b      	movs	r3, r1
 800397e:	0010      	movs	r0, r2
 8003980:	0019      	movs	r1, r3
 8003982:	f7fc fcb1 	bl	80002e8 <__aeabi_d2uiz>
 8003986:	0002      	movs	r2, r0
 8003988:	2308      	movs	r3, #8
 800398a:	18f3      	adds	r3, r6, r3
 800398c:	19db      	adds	r3, r3, r7
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	615a      	str	r2, [r3, #20]
 8003992:	f000 fbaf 	bl	80040f4 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 750000000) && (ppl->FreqOut >= 375000000)) {
 8003996:	23dc      	movs	r3, #220	; 0xdc
 8003998:	2208      	movs	r2, #8
 800399a:	189b      	adds	r3, r3, r2
 800399c:	19db      	adds	r3, r3, r7
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d000      	beq.n	80039aa <max2871CalculateRegister0Values+0x3d2>
 80039a8:	e0bc      	b.n	8003b24 <max2871CalculateRegister0Values+0x54c>
 80039aa:	d103      	bne.n	80039b4 <max2871CalculateRegister0Values+0x3dc>
 80039ac:	495b      	ldr	r1, [pc, #364]	; (8003b1c <max2871CalculateRegister0Values+0x544>)
 80039ae:	428a      	cmp	r2, r1
 80039b0:	d900      	bls.n	80039b4 <max2871CalculateRegister0Values+0x3dc>
 80039b2:	e0b7      	b.n	8003b24 <max2871CalculateRegister0Values+0x54c>
 80039b4:	23dc      	movs	r3, #220	; 0xdc
 80039b6:	2208      	movs	r2, #8
 80039b8:	189b      	adds	r3, r3, r2
 80039ba:	19db      	adds	r3, r3, r7
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <max2871CalculateRegister0Values+0x3fa>
 80039c6:	d000      	beq.n	80039ca <max2871CalculateRegister0Values+0x3f2>
 80039c8:	e0ac      	b.n	8003b24 <max2871CalculateRegister0Values+0x54c>
 80039ca:	4955      	ldr	r1, [pc, #340]	; (8003b20 <max2871CalculateRegister0Values+0x548>)
 80039cc:	428a      	cmp	r2, r1
 80039ce:	d800      	bhi.n	80039d2 <max2871CalculateRegister0Values+0x3fa>
 80039d0:	e0a8      	b.n	8003b24 <max2871CalculateRegister0Values+0x54c>
		ppl->DIVA = 3;
 80039d2:	26dc      	movs	r6, #220	; 0xdc
 80039d4:	2308      	movs	r3, #8
 80039d6:	18f3      	adds	r3, r6, r3
 80039d8:	19db      	adds	r3, r3, r7
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2203      	movs	r2, #3
 80039de:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 8 / FreqRef;
 80039e0:	2308      	movs	r3, #8
 80039e2:	18f3      	adds	r3, r6, r3
 80039e4:	19db      	adds	r3, r3, r7
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	0f51      	lsrs	r1, r2, #29
 80039ee:	00d8      	lsls	r0, r3, #3
 80039f0:	24cc      	movs	r4, #204	; 0xcc
 80039f2:	2508      	movs	r5, #8
 80039f4:	1965      	adds	r5, r4, r5
 80039f6:	19ed      	adds	r5, r5, r7
 80039f8:	6028      	str	r0, [r5, #0]
 80039fa:	2008      	movs	r0, #8
 80039fc:	1820      	adds	r0, r4, r0
 80039fe:	19c0      	adds	r0, r0, r7
 8003a00:	6800      	ldr	r0, [r0, #0]
 8003a02:	4308      	orrs	r0, r1
 8003a04:	2108      	movs	r1, #8
 8003a06:	1861      	adds	r1, r4, r1
 8003a08:	19c9      	adds	r1, r1, r7
 8003a0a:	6008      	str	r0, [r1, #0]
 8003a0c:	00d3      	lsls	r3, r2, #3
 8003a0e:	21c8      	movs	r1, #200	; 0xc8
 8003a10:	2208      	movs	r2, #8
 8003a12:	188a      	adds	r2, r1, r2
 8003a14:	19d2      	adds	r2, r2, r7
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	24ec      	movs	r4, #236	; 0xec
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	18e3      	adds	r3, r4, r3
 8003a1e:	19db      	adds	r3, r3, r7
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	653b      	str	r3, [r7, #80]	; 0x50
 8003a24:	2300      	movs	r3, #0
 8003a26:	657b      	str	r3, [r7, #84]	; 0x54
 8003a28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2c:	2008      	movs	r0, #8
 8003a2e:	1809      	adds	r1, r1, r0
 8003a30:	19c9      	adds	r1, r1, r7
 8003a32:	6808      	ldr	r0, [r1, #0]
 8003a34:	6849      	ldr	r1, [r1, #4]
 8003a36:	f7fc fc37 	bl	80002a8 <__aeabi_uldivmod>
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	000b      	movs	r3, r1
 8003a3e:	2308      	movs	r3, #8
 8003a40:	18f3      	adds	r3, r6, r3
 8003a42:	19db      	adds	r3, r3, r7
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 8 % FreqRef;
 8003a48:	2308      	movs	r3, #8
 8003a4a:	18f3      	adds	r3, r6, r3
 8003a4c:	19db      	adds	r3, r3, r7
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	0f51      	lsrs	r1, r2, #29
 8003a56:	468c      	mov	ip, r1
 8003a58:	00d8      	lsls	r0, r3, #3
 8003a5a:	25c4      	movs	r5, #196	; 0xc4
 8003a5c:	2108      	movs	r1, #8
 8003a5e:	1869      	adds	r1, r5, r1
 8003a60:	19c9      	adds	r1, r1, r7
 8003a62:	6008      	str	r0, [r1, #0]
 8003a64:	2108      	movs	r1, #8
 8003a66:	1869      	adds	r1, r5, r1
 8003a68:	19c8      	adds	r0, r1, r7
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	4661      	mov	r1, ip
 8003a6e:	4308      	orrs	r0, r1
 8003a70:	2108      	movs	r1, #8
 8003a72:	1869      	adds	r1, r5, r1
 8003a74:	19c9      	adds	r1, r1, r7
 8003a76:	6008      	str	r0, [r1, #0]
 8003a78:	00d3      	lsls	r3, r2, #3
 8003a7a:	21c0      	movs	r1, #192	; 0xc0
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	188a      	adds	r2, r1, r2
 8003a80:	19d2      	adds	r2, r2, r7
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	2308      	movs	r3, #8
 8003a86:	18e3      	adds	r3, r4, r3
 8003a88:	19db      	adds	r3, r3, r7
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a8e:	2300      	movs	r3, #0
 8003a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a96:	2008      	movs	r0, #8
 8003a98:	1809      	adds	r1, r1, r0
 8003a9a:	19c9      	adds	r1, r1, r7
 8003a9c:	6808      	ldr	r0, [r1, #0]
 8003a9e:	6849      	ldr	r1, [r1, #4]
 8003aa0:	f7fc fc02 	bl	80002a8 <__aeabi_uldivmod>
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	f7fc fc3c 	bl	8000324 <__aeabi_ul2d>
 8003aac:	0002      	movs	r2, r0
 8003aae:	000b      	movs	r3, r1
 8003ab0:	25e0      	movs	r5, #224	; 0xe0
 8003ab2:	2108      	movs	r1, #8
 8003ab4:	1869      	adds	r1, r5, r1
 8003ab6:	19c9      	adds	r1, r1, r7
 8003ab8:	600a      	str	r2, [r1, #0]
 8003aba:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003abc:	2308      	movs	r3, #8
 8003abe:	18e3      	adds	r3, r4, r3
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	f7fe fa82 	bl	8001fcc <__aeabi_ui2d>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	000b      	movs	r3, r1
 8003acc:	2108      	movs	r1, #8
 8003ace:	1869      	adds	r1, r5, r1
 8003ad0:	19c9      	adds	r1, r1, r7
 8003ad2:	6808      	ldr	r0, [r1, #0]
 8003ad4:	6849      	ldr	r1, [r1, #4]
 8003ad6:	f7fd f843 	bl	8000b60 <__aeabi_ddiv>
 8003ada:	0002      	movs	r2, r0
 8003adc:	000b      	movs	r3, r1
 8003ade:	0014      	movs	r4, r2
 8003ae0:	001d      	movs	r5, r3
 8003ae2:	23e8      	movs	r3, #232	; 0xe8
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	19db      	adds	r3, r3, r7
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	f7fe fa6e 	bl	8001fcc <__aeabi_ui2d>
 8003af0:	0002      	movs	r2, r0
 8003af2:	000b      	movs	r3, r1
 8003af4:	0020      	movs	r0, r4
 8003af6:	0029      	movs	r1, r5
 8003af8:	f7fd fc34 	bl	8001364 <__aeabi_dmul>
 8003afc:	0002      	movs	r2, r0
 8003afe:	000b      	movs	r3, r1
 8003b00:	0010      	movs	r0, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	f7fc fbf0 	bl	80002e8 <__aeabi_d2uiz>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	18f3      	adds	r3, r6, r3
 8003b0e:	19db      	adds	r3, r3, r7
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	615a      	str	r2, [r3, #20]
 8003b14:	e2ee      	b.n	80040f4 <max2871CalculateRegister0Values+0xb1c>
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	59682eff 	.word	0x59682eff
 8003b1c:	2cb4177f 	.word	0x2cb4177f
 8003b20:	165a0bbf 	.word	0x165a0bbf
	} else if ((ppl->FreqOut < 375000000) && (ppl->FreqOut >= 187500000)) {
 8003b24:	23dc      	movs	r3, #220	; 0xdc
 8003b26:	2208      	movs	r2, #8
 8003b28:	189b      	adds	r3, r3, r2
 8003b2a:	19db      	adds	r3, r3, r7
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d000      	beq.n	8003b38 <max2871CalculateRegister0Values+0x560>
 8003b36:	e0b5      	b.n	8003ca4 <max2871CalculateRegister0Values+0x6cc>
 8003b38:	d103      	bne.n	8003b42 <max2871CalculateRegister0Values+0x56a>
 8003b3a:	49ba      	ldr	r1, [pc, #744]	; (8003e24 <max2871CalculateRegister0Values+0x84c>)
 8003b3c:	428a      	cmp	r2, r1
 8003b3e:	d900      	bls.n	8003b42 <max2871CalculateRegister0Values+0x56a>
 8003b40:	e0b0      	b.n	8003ca4 <max2871CalculateRegister0Values+0x6cc>
 8003b42:	23dc      	movs	r3, #220	; 0xdc
 8003b44:	2208      	movs	r2, #8
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	19db      	adds	r3, r3, r7
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <max2871CalculateRegister0Values+0x588>
 8003b54:	d000      	beq.n	8003b58 <max2871CalculateRegister0Values+0x580>
 8003b56:	e0a5      	b.n	8003ca4 <max2871CalculateRegister0Values+0x6cc>
 8003b58:	49b3      	ldr	r1, [pc, #716]	; (8003e28 <max2871CalculateRegister0Values+0x850>)
 8003b5a:	428a      	cmp	r2, r1
 8003b5c:	d800      	bhi.n	8003b60 <max2871CalculateRegister0Values+0x588>
 8003b5e:	e0a1      	b.n	8003ca4 <max2871CalculateRegister0Values+0x6cc>
		ppl->DIVA = 4;
 8003b60:	26dc      	movs	r6, #220	; 0xdc
 8003b62:	2308      	movs	r3, #8
 8003b64:	18f3      	adds	r3, r6, r3
 8003b66:	19db      	adds	r3, r3, r7
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 16 / FreqRef;
 8003b6e:	2308      	movs	r3, #8
 8003b70:	18f3      	adds	r3, r6, r3
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0f11      	lsrs	r1, r2, #28
 8003b7c:	0118      	lsls	r0, r3, #4
 8003b7e:	24bc      	movs	r4, #188	; 0xbc
 8003b80:	2508      	movs	r5, #8
 8003b82:	1965      	adds	r5, r4, r5
 8003b84:	19ed      	adds	r5, r5, r7
 8003b86:	6028      	str	r0, [r5, #0]
 8003b88:	2008      	movs	r0, #8
 8003b8a:	1820      	adds	r0, r4, r0
 8003b8c:	19c0      	adds	r0, r0, r7
 8003b8e:	6800      	ldr	r0, [r0, #0]
 8003b90:	4308      	orrs	r0, r1
 8003b92:	2108      	movs	r1, #8
 8003b94:	1861      	adds	r1, r4, r1
 8003b96:	19c9      	adds	r1, r1, r7
 8003b98:	6008      	str	r0, [r1, #0]
 8003b9a:	0113      	lsls	r3, r2, #4
 8003b9c:	21b8      	movs	r1, #184	; 0xb8
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	188a      	adds	r2, r1, r2
 8003ba2:	19d2      	adds	r2, r2, r7
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	24ec      	movs	r4, #236	; 0xec
 8003ba8:	2308      	movs	r3, #8
 8003baa:	18e3      	adds	r3, r4, r3
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bba:	2008      	movs	r0, #8
 8003bbc:	1809      	adds	r1, r1, r0
 8003bbe:	19c9      	adds	r1, r1, r7
 8003bc0:	6808      	ldr	r0, [r1, #0]
 8003bc2:	6849      	ldr	r1, [r1, #4]
 8003bc4:	f7fc fb70 	bl	80002a8 <__aeabi_uldivmod>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	000b      	movs	r3, r1
 8003bcc:	2308      	movs	r3, #8
 8003bce:	18f3      	adds	r3, r6, r3
 8003bd0:	19db      	adds	r3, r3, r7
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 16 % FreqRef;
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	18f3      	adds	r3, r6, r3
 8003bda:	19db      	adds	r3, r3, r7
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	0f11      	lsrs	r1, r2, #28
 8003be4:	468c      	mov	ip, r1
 8003be6:	0118      	lsls	r0, r3, #4
 8003be8:	25b4      	movs	r5, #180	; 0xb4
 8003bea:	2108      	movs	r1, #8
 8003bec:	1869      	adds	r1, r5, r1
 8003bee:	19c9      	adds	r1, r1, r7
 8003bf0:	6008      	str	r0, [r1, #0]
 8003bf2:	2108      	movs	r1, #8
 8003bf4:	1869      	adds	r1, r5, r1
 8003bf6:	19c8      	adds	r0, r1, r7
 8003bf8:	6800      	ldr	r0, [r0, #0]
 8003bfa:	4661      	mov	r1, ip
 8003bfc:	4308      	orrs	r0, r1
 8003bfe:	2108      	movs	r1, #8
 8003c00:	1869      	adds	r1, r5, r1
 8003c02:	19c9      	adds	r1, r1, r7
 8003c04:	6008      	str	r0, [r1, #0]
 8003c06:	0113      	lsls	r3, r2, #4
 8003c08:	21b0      	movs	r1, #176	; 0xb0
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	188a      	adds	r2, r1, r2
 8003c0e:	19d2      	adds	r2, r2, r7
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	2308      	movs	r3, #8
 8003c14:	18e3      	adds	r3, r4, r3
 8003c16:	19db      	adds	r3, r3, r7
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c24:	2008      	movs	r0, #8
 8003c26:	1809      	adds	r1, r1, r0
 8003c28:	19c9      	adds	r1, r1, r7
 8003c2a:	6808      	ldr	r0, [r1, #0]
 8003c2c:	6849      	ldr	r1, [r1, #4]
 8003c2e:	f7fc fb3b 	bl	80002a8 <__aeabi_uldivmod>
 8003c32:	0010      	movs	r0, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	f7fc fb75 	bl	8000324 <__aeabi_ul2d>
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	000b      	movs	r3, r1
 8003c3e:	25e0      	movs	r5, #224	; 0xe0
 8003c40:	2108      	movs	r1, #8
 8003c42:	1869      	adds	r1, r5, r1
 8003c44:	19c9      	adds	r1, r1, r7
 8003c46:	600a      	str	r2, [r1, #0]
 8003c48:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	18e3      	adds	r3, r4, r3
 8003c4e:	19db      	adds	r3, r3, r7
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	f7fe f9bb 	bl	8001fcc <__aeabi_ui2d>
 8003c56:	0002      	movs	r2, r0
 8003c58:	000b      	movs	r3, r1
 8003c5a:	2108      	movs	r1, #8
 8003c5c:	1869      	adds	r1, r5, r1
 8003c5e:	19c9      	adds	r1, r1, r7
 8003c60:	6808      	ldr	r0, [r1, #0]
 8003c62:	6849      	ldr	r1, [r1, #4]
 8003c64:	f7fc ff7c 	bl	8000b60 <__aeabi_ddiv>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	0014      	movs	r4, r2
 8003c6e:	001d      	movs	r5, r3
 8003c70:	23e8      	movs	r3, #232	; 0xe8
 8003c72:	2208      	movs	r2, #8
 8003c74:	189b      	adds	r3, r3, r2
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	f7fe f9a7 	bl	8001fcc <__aeabi_ui2d>
 8003c7e:	0002      	movs	r2, r0
 8003c80:	000b      	movs	r3, r1
 8003c82:	0020      	movs	r0, r4
 8003c84:	0029      	movs	r1, r5
 8003c86:	f7fd fb6d 	bl	8001364 <__aeabi_dmul>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	000b      	movs	r3, r1
 8003c8e:	0010      	movs	r0, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	f7fc fb29 	bl	80002e8 <__aeabi_d2uiz>
 8003c96:	0002      	movs	r2, r0
 8003c98:	2308      	movs	r3, #8
 8003c9a:	18f3      	adds	r3, r6, r3
 8003c9c:	19db      	adds	r3, r3, r7
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	615a      	str	r2, [r3, #20]
 8003ca2:	e227      	b.n	80040f4 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 187500000) && (ppl->FreqOut >= 93750000)) {
 8003ca4:	23dc      	movs	r3, #220	; 0xdc
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	19db      	adds	r3, r3, r7
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d000      	beq.n	8003cb8 <max2871CalculateRegister0Values+0x6e0>
 8003cb6:	e0bb      	b.n	8003e30 <max2871CalculateRegister0Values+0x858>
 8003cb8:	d103      	bne.n	8003cc2 <max2871CalculateRegister0Values+0x6ea>
 8003cba:	495b      	ldr	r1, [pc, #364]	; (8003e28 <max2871CalculateRegister0Values+0x850>)
 8003cbc:	428a      	cmp	r2, r1
 8003cbe:	d900      	bls.n	8003cc2 <max2871CalculateRegister0Values+0x6ea>
 8003cc0:	e0b6      	b.n	8003e30 <max2871CalculateRegister0Values+0x858>
 8003cc2:	23dc      	movs	r3, #220	; 0xdc
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	19db      	adds	r3, r3, r7
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <max2871CalculateRegister0Values+0x708>
 8003cd4:	d000      	beq.n	8003cd8 <max2871CalculateRegister0Values+0x700>
 8003cd6:	e0ab      	b.n	8003e30 <max2871CalculateRegister0Values+0x858>
 8003cd8:	4954      	ldr	r1, [pc, #336]	; (8003e2c <max2871CalculateRegister0Values+0x854>)
 8003cda:	428a      	cmp	r2, r1
 8003cdc:	d800      	bhi.n	8003ce0 <max2871CalculateRegister0Values+0x708>
 8003cde:	e0a7      	b.n	8003e30 <max2871CalculateRegister0Values+0x858>
		ppl->DIVA = 5;
 8003ce0:	26dc      	movs	r6, #220	; 0xdc
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	18f3      	adds	r3, r6, r3
 8003ce6:	19db      	adds	r3, r3, r7
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2205      	movs	r2, #5
 8003cec:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 32 / FreqRef;
 8003cee:	2308      	movs	r3, #8
 8003cf0:	18f3      	adds	r3, r6, r3
 8003cf2:	19db      	adds	r3, r3, r7
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	0ed1      	lsrs	r1, r2, #27
 8003cfc:	0158      	lsls	r0, r3, #5
 8003cfe:	24ac      	movs	r4, #172	; 0xac
 8003d00:	2508      	movs	r5, #8
 8003d02:	1965      	adds	r5, r4, r5
 8003d04:	19ed      	adds	r5, r5, r7
 8003d06:	6028      	str	r0, [r5, #0]
 8003d08:	2008      	movs	r0, #8
 8003d0a:	1820      	adds	r0, r4, r0
 8003d0c:	19c0      	adds	r0, r0, r7
 8003d0e:	6800      	ldr	r0, [r0, #0]
 8003d10:	4308      	orrs	r0, r1
 8003d12:	2108      	movs	r1, #8
 8003d14:	1861      	adds	r1, r4, r1
 8003d16:	19c9      	adds	r1, r1, r7
 8003d18:	6008      	str	r0, [r1, #0]
 8003d1a:	0153      	lsls	r3, r2, #5
 8003d1c:	21a8      	movs	r1, #168	; 0xa8
 8003d1e:	2208      	movs	r2, #8
 8003d20:	188a      	adds	r2, r1, r2
 8003d22:	19d2      	adds	r2, r2, r7
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	24ec      	movs	r4, #236	; 0xec
 8003d28:	2308      	movs	r3, #8
 8003d2a:	18e3      	adds	r3, r4, r3
 8003d2c:	19db      	adds	r3, r3, r7
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	2008      	movs	r0, #8
 8003d3c:	1809      	adds	r1, r1, r0
 8003d3e:	19c9      	adds	r1, r1, r7
 8003d40:	6808      	ldr	r0, [r1, #0]
 8003d42:	6849      	ldr	r1, [r1, #4]
 8003d44:	f7fc fab0 	bl	80002a8 <__aeabi_uldivmod>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	000b      	movs	r3, r1
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	18f3      	adds	r3, r6, r3
 8003d50:	19db      	adds	r3, r3, r7
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 32 % FreqRef;
 8003d56:	2308      	movs	r3, #8
 8003d58:	18f3      	adds	r3, r6, r3
 8003d5a:	19db      	adds	r3, r3, r7
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	0ed1      	lsrs	r1, r2, #27
 8003d64:	468c      	mov	ip, r1
 8003d66:	0158      	lsls	r0, r3, #5
 8003d68:	25a4      	movs	r5, #164	; 0xa4
 8003d6a:	2108      	movs	r1, #8
 8003d6c:	1869      	adds	r1, r5, r1
 8003d6e:	19c9      	adds	r1, r1, r7
 8003d70:	6008      	str	r0, [r1, #0]
 8003d72:	2108      	movs	r1, #8
 8003d74:	1869      	adds	r1, r5, r1
 8003d76:	19c8      	adds	r0, r1, r7
 8003d78:	6800      	ldr	r0, [r0, #0]
 8003d7a:	4661      	mov	r1, ip
 8003d7c:	4308      	orrs	r0, r1
 8003d7e:	2108      	movs	r1, #8
 8003d80:	1869      	adds	r1, r5, r1
 8003d82:	19c9      	adds	r1, r1, r7
 8003d84:	6008      	str	r0, [r1, #0]
 8003d86:	0153      	lsls	r3, r2, #5
 8003d88:	21a0      	movs	r1, #160	; 0xa0
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	188a      	adds	r2, r1, r2
 8003d8e:	19d2      	adds	r2, r2, r7
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	2308      	movs	r3, #8
 8003d94:	18e3      	adds	r3, r4, r3
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	2008      	movs	r0, #8
 8003da6:	1809      	adds	r1, r1, r0
 8003da8:	19c9      	adds	r1, r1, r7
 8003daa:	6808      	ldr	r0, [r1, #0]
 8003dac:	6849      	ldr	r1, [r1, #4]
 8003dae:	f7fc fa7b 	bl	80002a8 <__aeabi_uldivmod>
 8003db2:	0010      	movs	r0, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	f7fc fab5 	bl	8000324 <__aeabi_ul2d>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	000b      	movs	r3, r1
 8003dbe:	25e0      	movs	r5, #224	; 0xe0
 8003dc0:	2108      	movs	r1, #8
 8003dc2:	1869      	adds	r1, r5, r1
 8003dc4:	19c9      	adds	r1, r1, r7
 8003dc6:	600a      	str	r2, [r1, #0]
 8003dc8:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003dca:	2308      	movs	r3, #8
 8003dcc:	18e3      	adds	r3, r4, r3
 8003dce:	19db      	adds	r3, r3, r7
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	f7fe f8fb 	bl	8001fcc <__aeabi_ui2d>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	000b      	movs	r3, r1
 8003dda:	2108      	movs	r1, #8
 8003ddc:	1869      	adds	r1, r5, r1
 8003dde:	19c9      	adds	r1, r1, r7
 8003de0:	6808      	ldr	r0, [r1, #0]
 8003de2:	6849      	ldr	r1, [r1, #4]
 8003de4:	f7fc febc 	bl	8000b60 <__aeabi_ddiv>
 8003de8:	0002      	movs	r2, r0
 8003dea:	000b      	movs	r3, r1
 8003dec:	0014      	movs	r4, r2
 8003dee:	001d      	movs	r5, r3
 8003df0:	23e8      	movs	r3, #232	; 0xe8
 8003df2:	2208      	movs	r2, #8
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	19db      	adds	r3, r3, r7
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	f7fe f8e7 	bl	8001fcc <__aeabi_ui2d>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	000b      	movs	r3, r1
 8003e02:	0020      	movs	r0, r4
 8003e04:	0029      	movs	r1, r5
 8003e06:	f7fd faad 	bl	8001364 <__aeabi_dmul>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	000b      	movs	r3, r1
 8003e0e:	0010      	movs	r0, r2
 8003e10:	0019      	movs	r1, r3
 8003e12:	f7fc fa69 	bl	80002e8 <__aeabi_d2uiz>
 8003e16:	0002      	movs	r2, r0
 8003e18:	2308      	movs	r3, #8
 8003e1a:	18f3      	adds	r3, r6, r3
 8003e1c:	19db      	adds	r3, r3, r7
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	615a      	str	r2, [r3, #20]
 8003e22:	e167      	b.n	80040f4 <max2871CalculateRegister0Values+0xb1c>
 8003e24:	165a0bbf 	.word	0x165a0bbf
 8003e28:	0b2d05df 	.word	0x0b2d05df
 8003e2c:	059682ef 	.word	0x059682ef
	} else if ((ppl->FreqOut < 93750000) && (ppl->FreqOut >= 46875000)) {
 8003e30:	23dc      	movs	r3, #220	; 0xdc
 8003e32:	2208      	movs	r2, #8
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d000      	beq.n	8003e44 <max2871CalculateRegister0Values+0x86c>
 8003e42:	e0b5      	b.n	8003fb0 <max2871CalculateRegister0Values+0x9d8>
 8003e44:	d103      	bne.n	8003e4e <max2871CalculateRegister0Values+0x876>
 8003e46:	49ad      	ldr	r1, [pc, #692]	; (80040fc <max2871CalculateRegister0Values+0xb24>)
 8003e48:	428a      	cmp	r2, r1
 8003e4a:	d900      	bls.n	8003e4e <max2871CalculateRegister0Values+0x876>
 8003e4c:	e0b0      	b.n	8003fb0 <max2871CalculateRegister0Values+0x9d8>
 8003e4e:	23dc      	movs	r3, #220	; 0xdc
 8003e50:	2208      	movs	r2, #8
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	19db      	adds	r3, r3, r7
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <max2871CalculateRegister0Values+0x894>
 8003e60:	d000      	beq.n	8003e64 <max2871CalculateRegister0Values+0x88c>
 8003e62:	e0a5      	b.n	8003fb0 <max2871CalculateRegister0Values+0x9d8>
 8003e64:	49a6      	ldr	r1, [pc, #664]	; (8004100 <max2871CalculateRegister0Values+0xb28>)
 8003e66:	428a      	cmp	r2, r1
 8003e68:	d800      	bhi.n	8003e6c <max2871CalculateRegister0Values+0x894>
 8003e6a:	e0a1      	b.n	8003fb0 <max2871CalculateRegister0Values+0x9d8>
		ppl->DIVA = 6;
 8003e6c:	26dc      	movs	r6, #220	; 0xdc
 8003e6e:	2308      	movs	r3, #8
 8003e70:	18f3      	adds	r3, r6, r3
 8003e72:	19db      	adds	r3, r3, r7
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2206      	movs	r2, #6
 8003e78:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 64 / FreqRef;
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	18f3      	adds	r3, r6, r3
 8003e7e:	19db      	adds	r3, r3, r7
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0e91      	lsrs	r1, r2, #26
 8003e88:	0198      	lsls	r0, r3, #6
 8003e8a:	249c      	movs	r4, #156	; 0x9c
 8003e8c:	2508      	movs	r5, #8
 8003e8e:	1965      	adds	r5, r4, r5
 8003e90:	19ed      	adds	r5, r5, r7
 8003e92:	6028      	str	r0, [r5, #0]
 8003e94:	2008      	movs	r0, #8
 8003e96:	1820      	adds	r0, r4, r0
 8003e98:	19c0      	adds	r0, r0, r7
 8003e9a:	6800      	ldr	r0, [r0, #0]
 8003e9c:	4308      	orrs	r0, r1
 8003e9e:	2108      	movs	r1, #8
 8003ea0:	1861      	adds	r1, r4, r1
 8003ea2:	19c9      	adds	r1, r1, r7
 8003ea4:	6008      	str	r0, [r1, #0]
 8003ea6:	0193      	lsls	r3, r2, #6
 8003ea8:	2198      	movs	r1, #152	; 0x98
 8003eaa:	2208      	movs	r2, #8
 8003eac:	188a      	adds	r2, r1, r2
 8003eae:	19d2      	adds	r2, r2, r7
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	24ec      	movs	r4, #236	; 0xec
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	18e3      	adds	r3, r4, r3
 8003eb8:	19db      	adds	r3, r3, r7
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	623b      	str	r3, [r7, #32]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	6a3a      	ldr	r2, [r7, #32]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	2008      	movs	r0, #8
 8003ec8:	1809      	adds	r1, r1, r0
 8003eca:	19c9      	adds	r1, r1, r7
 8003ecc:	6808      	ldr	r0, [r1, #0]
 8003ece:	6849      	ldr	r1, [r1, #4]
 8003ed0:	f7fc f9ea 	bl	80002a8 <__aeabi_uldivmod>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	000b      	movs	r3, r1
 8003ed8:	2308      	movs	r3, #8
 8003eda:	18f3      	adds	r3, r6, r3
 8003edc:	19db      	adds	r3, r3, r7
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 64 % FreqRef;
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	18f3      	adds	r3, r6, r3
 8003ee6:	19db      	adds	r3, r3, r7
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0e91      	lsrs	r1, r2, #26
 8003ef0:	468c      	mov	ip, r1
 8003ef2:	0198      	lsls	r0, r3, #6
 8003ef4:	2594      	movs	r5, #148	; 0x94
 8003ef6:	2108      	movs	r1, #8
 8003ef8:	1869      	adds	r1, r5, r1
 8003efa:	19c9      	adds	r1, r1, r7
 8003efc:	6008      	str	r0, [r1, #0]
 8003efe:	2108      	movs	r1, #8
 8003f00:	1869      	adds	r1, r5, r1
 8003f02:	19c8      	adds	r0, r1, r7
 8003f04:	6800      	ldr	r0, [r0, #0]
 8003f06:	4661      	mov	r1, ip
 8003f08:	4308      	orrs	r0, r1
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	1869      	adds	r1, r5, r1
 8003f0e:	19c9      	adds	r1, r1, r7
 8003f10:	6008      	str	r0, [r1, #0]
 8003f12:	0193      	lsls	r3, r2, #6
 8003f14:	2190      	movs	r1, #144	; 0x90
 8003f16:	2208      	movs	r2, #8
 8003f18:	188a      	adds	r2, r1, r2
 8003f1a:	19d2      	adds	r2, r2, r7
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	2308      	movs	r3, #8
 8003f20:	18e3      	adds	r3, r4, r3
 8003f22:	19db      	adds	r3, r3, r7
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2008      	movs	r0, #8
 8003f32:	1809      	adds	r1, r1, r0
 8003f34:	19c9      	adds	r1, r1, r7
 8003f36:	6808      	ldr	r0, [r1, #0]
 8003f38:	6849      	ldr	r1, [r1, #4]
 8003f3a:	f7fc f9b5 	bl	80002a8 <__aeabi_uldivmod>
 8003f3e:	0010      	movs	r0, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	f7fc f9ef 	bl	8000324 <__aeabi_ul2d>
 8003f46:	0002      	movs	r2, r0
 8003f48:	000b      	movs	r3, r1
 8003f4a:	25e0      	movs	r5, #224	; 0xe0
 8003f4c:	2108      	movs	r1, #8
 8003f4e:	1869      	adds	r1, r5, r1
 8003f50:	19c9      	adds	r1, r1, r7
 8003f52:	600a      	str	r2, [r1, #0]
 8003f54:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003f56:	2308      	movs	r3, #8
 8003f58:	18e3      	adds	r3, r4, r3
 8003f5a:	19db      	adds	r3, r3, r7
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	f7fe f835 	bl	8001fcc <__aeabi_ui2d>
 8003f62:	0002      	movs	r2, r0
 8003f64:	000b      	movs	r3, r1
 8003f66:	2108      	movs	r1, #8
 8003f68:	1869      	adds	r1, r5, r1
 8003f6a:	19c9      	adds	r1, r1, r7
 8003f6c:	6808      	ldr	r0, [r1, #0]
 8003f6e:	6849      	ldr	r1, [r1, #4]
 8003f70:	f7fc fdf6 	bl	8000b60 <__aeabi_ddiv>
 8003f74:	0002      	movs	r2, r0
 8003f76:	000b      	movs	r3, r1
 8003f78:	0014      	movs	r4, r2
 8003f7a:	001d      	movs	r5, r3
 8003f7c:	23e8      	movs	r3, #232	; 0xe8
 8003f7e:	2208      	movs	r2, #8
 8003f80:	189b      	adds	r3, r3, r2
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	f7fe f821 	bl	8001fcc <__aeabi_ui2d>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	000b      	movs	r3, r1
 8003f8e:	0020      	movs	r0, r4
 8003f90:	0029      	movs	r1, r5
 8003f92:	f7fd f9e7 	bl	8001364 <__aeabi_dmul>
 8003f96:	0002      	movs	r2, r0
 8003f98:	000b      	movs	r3, r1
 8003f9a:	0010      	movs	r0, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	f7fc f9a3 	bl	80002e8 <__aeabi_d2uiz>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	2308      	movs	r3, #8
 8003fa6:	18f3      	adds	r3, r6, r3
 8003fa8:	19db      	adds	r3, r3, r7
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	615a      	str	r2, [r3, #20]
 8003fae:	e0a1      	b.n	80040f4 <max2871CalculateRegister0Values+0xb1c>
		ppl->DIVA = 7;
 8003fb0:	26dc      	movs	r6, #220	; 0xdc
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	18f3      	adds	r3, r6, r3
 8003fb6:	19db      	adds	r3, r3, r7
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2207      	movs	r2, #7
 8003fbc:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 128 / FreqRef;
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	18f3      	adds	r3, r6, r3
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0e51      	lsrs	r1, r2, #25
 8003fcc:	01d8      	lsls	r0, r3, #7
 8003fce:	248c      	movs	r4, #140	; 0x8c
 8003fd0:	2508      	movs	r5, #8
 8003fd2:	1965      	adds	r5, r4, r5
 8003fd4:	19ed      	adds	r5, r5, r7
 8003fd6:	6028      	str	r0, [r5, #0]
 8003fd8:	2008      	movs	r0, #8
 8003fda:	1820      	adds	r0, r4, r0
 8003fdc:	19c0      	adds	r0, r0, r7
 8003fde:	6800      	ldr	r0, [r0, #0]
 8003fe0:	4308      	orrs	r0, r1
 8003fe2:	2108      	movs	r1, #8
 8003fe4:	1861      	adds	r1, r4, r1
 8003fe6:	19c9      	adds	r1, r1, r7
 8003fe8:	6008      	str	r0, [r1, #0]
 8003fea:	01d3      	lsls	r3, r2, #7
 8003fec:	2188      	movs	r1, #136	; 0x88
 8003fee:	2208      	movs	r2, #8
 8003ff0:	188a      	adds	r2, r1, r2
 8003ff2:	19d2      	adds	r2, r2, r7
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	24ec      	movs	r4, #236	; 0xec
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	18e3      	adds	r3, r4, r3
 8003ffc:	19db      	adds	r3, r3, r7
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2008      	movs	r0, #8
 800400c:	1809      	adds	r1, r1, r0
 800400e:	19c9      	adds	r1, r1, r7
 8004010:	6808      	ldr	r0, [r1, #0]
 8004012:	6849      	ldr	r1, [r1, #4]
 8004014:	f7fc f948 	bl	80002a8 <__aeabi_uldivmod>
 8004018:	0002      	movs	r2, r0
 800401a:	000b      	movs	r3, r1
 800401c:	2308      	movs	r3, #8
 800401e:	18f3      	adds	r3, r6, r3
 8004020:	19db      	adds	r3, r3, r7
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 128 % FreqRef;
 8004026:	2308      	movs	r3, #8
 8004028:	18f3      	adds	r3, r6, r3
 800402a:	19db      	adds	r3, r3, r7
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	0e51      	lsrs	r1, r2, #25
 8004034:	468c      	mov	ip, r1
 8004036:	01d8      	lsls	r0, r3, #7
 8004038:	2584      	movs	r5, #132	; 0x84
 800403a:	2108      	movs	r1, #8
 800403c:	1869      	adds	r1, r5, r1
 800403e:	19c9      	adds	r1, r1, r7
 8004040:	6008      	str	r0, [r1, #0]
 8004042:	2108      	movs	r1, #8
 8004044:	1869      	adds	r1, r5, r1
 8004046:	19c8      	adds	r0, r1, r7
 8004048:	6800      	ldr	r0, [r0, #0]
 800404a:	4661      	mov	r1, ip
 800404c:	4308      	orrs	r0, r1
 800404e:	2108      	movs	r1, #8
 8004050:	1869      	adds	r1, r5, r1
 8004052:	19c9      	adds	r1, r1, r7
 8004054:	6008      	str	r0, [r1, #0]
 8004056:	01d3      	lsls	r3, r2, #7
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	2208      	movs	r2, #8
 800405c:	188a      	adds	r2, r1, r2
 800405e:	19d2      	adds	r2, r2, r7
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	2308      	movs	r3, #8
 8004064:	18e3      	adds	r3, r4, r3
 8004066:	19db      	adds	r3, r3, r7
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2008      	movs	r0, #8
 8004076:	1809      	adds	r1, r1, r0
 8004078:	19c9      	adds	r1, r1, r7
 800407a:	6808      	ldr	r0, [r1, #0]
 800407c:	6849      	ldr	r1, [r1, #4]
 800407e:	f7fc f913 	bl	80002a8 <__aeabi_uldivmod>
 8004082:	0010      	movs	r0, r2
 8004084:	0019      	movs	r1, r3
 8004086:	f7fc f94d 	bl	8000324 <__aeabi_ul2d>
 800408a:	0002      	movs	r2, r0
 800408c:	000b      	movs	r3, r1
 800408e:	25e0      	movs	r5, #224	; 0xe0
 8004090:	2108      	movs	r1, #8
 8004092:	1869      	adds	r1, r5, r1
 8004094:	19c9      	adds	r1, r1, r7
 8004096:	600a      	str	r2, [r1, #0]
 8004098:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 800409a:	2308      	movs	r3, #8
 800409c:	18e3      	adds	r3, r4, r3
 800409e:	19db      	adds	r3, r3, r7
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	f7fd ff93 	bl	8001fcc <__aeabi_ui2d>
 80040a6:	0002      	movs	r2, r0
 80040a8:	000b      	movs	r3, r1
 80040aa:	2108      	movs	r1, #8
 80040ac:	1869      	adds	r1, r5, r1
 80040ae:	19c9      	adds	r1, r1, r7
 80040b0:	6808      	ldr	r0, [r1, #0]
 80040b2:	6849      	ldr	r1, [r1, #4]
 80040b4:	f7fc fd54 	bl	8000b60 <__aeabi_ddiv>
 80040b8:	0002      	movs	r2, r0
 80040ba:	000b      	movs	r3, r1
 80040bc:	0014      	movs	r4, r2
 80040be:	001d      	movs	r5, r3
 80040c0:	23e8      	movs	r3, #232	; 0xe8
 80040c2:	2208      	movs	r2, #8
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	f7fd ff7f 	bl	8001fcc <__aeabi_ui2d>
 80040ce:	0002      	movs	r2, r0
 80040d0:	000b      	movs	r3, r1
 80040d2:	0020      	movs	r0, r4
 80040d4:	0029      	movs	r1, r5
 80040d6:	f7fd f945 	bl	8001364 <__aeabi_dmul>
 80040da:	0002      	movs	r2, r0
 80040dc:	000b      	movs	r3, r1
 80040de:	0010      	movs	r0, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	f7fc f901 	bl	80002e8 <__aeabi_d2uiz>
 80040e6:	0002      	movs	r2, r0
 80040e8:	2308      	movs	r3, #8
 80040ea:	18f3      	adds	r3, r6, r3
 80040ec:	19db      	adds	r3, r3, r7
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	615a      	str	r2, [r3, #20]
}
 80040f2:	e7ff      	b.n	80040f4 <max2871CalculateRegister0Values+0xb1c>
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b03f      	add	sp, #252	; 0xfc
 80040fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fc:	059682ef 	.word	0x059682ef
 8004100:	02cb4177 	.word	0x02cb4177

08004104 <max2871RegisterInit>:

void max2871RegisterInit(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < 2; i++) {
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e041      	b.n	8004198 <max2871RegisterInit+0x94>
		max2871Write(hspi2, getRegister5InitValue(ppl));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	0018      	movs	r0, r3
 8004118:	f7ff f9b4 	bl	8003484 <getRegister5InitValue>
 800411c:	0002      	movs	r2, r0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0011      	movs	r1, r2
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff fa0c 	bl	8003540 <max2871Write>
		HAL_Delay(20);
 8004128:	2014      	movs	r0, #20
 800412a:	f000 fe23 	bl	8004d74 <HAL_Delay>
		max2871Write(hspi2, getRegister4InitValue(ppl));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff f91d 	bl	8003370 <getRegister4InitValue>
 8004136:	0002      	movs	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0011      	movs	r1, r2
 800413c:	0018      	movs	r0, r3
 800413e:	f7ff f9ff 	bl	8003540 <max2871Write>
        max2871Write(hspi2, getRegister3InitValue(ppl));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	0018      	movs	r0, r3
 8004146:	f7ff f8cf 	bl	80032e8 <getRegister3InitValue>
 800414a:	0002      	movs	r2, r0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	0011      	movs	r1, r2
 8004150:	0018      	movs	r0, r3
 8004152:	f7ff f9f5 	bl	8003540 <max2871Write>
		max2871Write(hspi2, getRegister2InitValue(ppl));
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	0018      	movs	r0, r3
 800415a:	f7ff f856 	bl	800320a <getRegister2InitValue>
 800415e:	0002      	movs	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	0011      	movs	r1, r2
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff f9eb 	bl	8003540 <max2871Write>
		max2871Write(hspi2, getRegister1InitValue(ppl));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	0018      	movs	r0, r3
 800416e:	f7ff f822 	bl	80031b6 <getRegister1InitValue>
 8004172:	0002      	movs	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0011      	movs	r1, r2
 8004178:	0018      	movs	r0, r3
 800417a:	f7ff f9e1 	bl	8003540 <max2871Write>
		max2871Write(hspi2, getRegister0InitValue(ppl));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	0018      	movs	r0, r3
 8004182:	f7fe fff6 	bl	8003172 <getRegister0InitValue>
 8004186:	0002      	movs	r2, r0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0011      	movs	r1, r2
 800418c:	0018      	movs	r0, r3
 800418e:	f7ff f9d7 	bl	8003540 <max2871Write>
	for (int i = 0; i < 2; i++) {
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b01      	cmp	r3, #1
 800419c:	ddba      	ble.n	8004114 <max2871RegisterInit+0x10>
	}
}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b004      	add	sp, #16
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <waitForLock>:

void waitForLock() {
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
	GPIO_PinState lock = GPIO_PIN_SET;
 80041ae:	1dfb      	adds	r3, r7, #7
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
	unsigned long t_ini = HAL_GetTick();
 80041b4:	f000 fdd4 	bl	8004d60 <HAL_GetTick>
 80041b8:	0003      	movs	r3, r0
 80041ba:	603b      	str	r3, [r7, #0]
	while (lock == GPIO_PIN_SET || (HAL_GetTick() - t_ini < 2000)) {
 80041bc:	e008      	b.n	80041d0 <waitForLock+0x28>
		lock = HAL_GPIO_ReadPin(MAX_LOCK_DETECTOR_GPIO_Port,
 80041be:	1dfc      	adds	r4, r7, #7
 80041c0:	23a0      	movs	r3, #160	; 0xa0
 80041c2:	05db      	lsls	r3, r3, #23
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	0018      	movs	r0, r3
 80041c8:	f001 f810 	bl	80051ec <HAL_GPIO_ReadPin>
 80041cc:	0003      	movs	r3, r0
 80041ce:	7023      	strb	r3, [r4, #0]
	while (lock == GPIO_PIN_SET || (HAL_GetTick() - t_ini < 2000)) {
 80041d0:	1dfb      	adds	r3, r7, #7
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d0f2      	beq.n	80041be <waitForLock+0x16>
 80041d8:	f000 fdc2 	bl	8004d60 <HAL_GetTick>
 80041dc:	0002      	movs	r2, r0
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	1ad2      	subs	r2, r2, r3
 80041e2:	23fa      	movs	r3, #250	; 0xfa
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3e9      	bcc.n	80041be <waitForLock+0x16>
				MAX_LOCK_DETECTOR_Pin);
	}
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b003      	add	sp, #12
 80041f2:	bd90      	pop	{r4, r7, pc}

080041f4 <max2871Program>:

void max2871Program(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) // Compose register value of register 0 and 4
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]

	unsigned long composedRegisterValue;
	max2871CalculateRegister0Values(ppl);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	0018      	movs	r0, r3
 8004202:	f7ff f9e9 	bl	80035d8 <max2871CalculateRegister0Values>

	composedRegisterValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	07da      	lsls	r2, r3, #31
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	03db      	lsls	r3, r3, #15
 8004212:	431a      	orrs	r2, r3
			| ppl->register0.FRAC << 3 | ppl->register0.ADDR0;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	431a      	orrs	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
	composedRegisterValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

	max2871Write(hspi2, composedRegisterValue);
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff f988 	bl	8003540 <max2871Write>

	waitForLock();
 8004230:	f7ff ffba 	bl	80041a8 <waitForLock>

	composedRegisterValue = ppl->register4.RES << 29
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	228c      	movs	r2, #140	; 0x8c
 8004238:	589b      	ldr	r3, [r3, r2]
 800423a:	075a      	lsls	r2, r3, #29
			| ppl->register4.SDLDO << 28 | ppl->register4.SDDIV << 27
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2190      	movs	r1, #144	; 0x90
 8004240:	585b      	ldr	r3, [r3, r1]
 8004242:	071b      	lsls	r3, r3, #28
 8004244:	431a      	orrs	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2194      	movs	r1, #148	; 0x94
 800424a:	585b      	ldr	r3, [r3, r1]
 800424c:	06db      	lsls	r3, r3, #27
 800424e:	431a      	orrs	r2, r3
			| ppl->register4.SDREF << 26 | ppl->register4.FB << 23
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2198      	movs	r1, #152	; 0x98
 8004254:	585b      	ldr	r3, [r3, r1]
 8004256:	069b      	lsls	r3, r3, #26
 8004258:	431a      	orrs	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	219c      	movs	r1, #156	; 0x9c
 800425e:	585b      	ldr	r3, [r3, r1]
 8004260:	05db      	lsls	r3, r3, #23
 8004262:	431a      	orrs	r2, r3
			| ppl->DIVA << 20 | ppl->register4.BS << 12
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	051b      	lsls	r3, r3, #20
 800426a:	431a      	orrs	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	21a0      	movs	r1, #160	; 0xa0
 8004270:	585b      	ldr	r3, [r3, r1]
 8004272:	031b      	lsls	r3, r3, #12
 8004274:	431a      	orrs	r2, r3
			| ppl->register4.SDVCO << 11 | ppl->register4.MTLD << 10
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	21a4      	movs	r1, #164	; 0xa4
 800427a:	585b      	ldr	r3, [r3, r1]
 800427c:	02db      	lsls	r3, r3, #11
 800427e:	431a      	orrs	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	21a8      	movs	r1, #168	; 0xa8
 8004284:	585b      	ldr	r3, [r3, r1]
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	431a      	orrs	r2, r3
			| ppl->register4.BDIV << 9 | ppl->register4.RFB_EN << 8
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	21ac      	movs	r1, #172	; 0xac
 800428e:	585b      	ldr	r3, [r3, r1]
 8004290:	025b      	lsls	r3, r3, #9
 8004292:	431a      	orrs	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	21b0      	movs	r1, #176	; 0xb0
 8004298:	585b      	ldr	r3, [r3, r1]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	431a      	orrs	r2, r3
			| ppl->register4.BPWR << 6 | ppl->register4.RFA_EN << 5
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	21b4      	movs	r1, #180	; 0xb4
 80042a2:	585b      	ldr	r3, [r3, r1]
 80042a4:	019b      	lsls	r3, r3, #6
 80042a6:	431a      	orrs	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	21b8      	movs	r1, #184	; 0xb8
 80042ac:	585b      	ldr	r3, [r3, r1]
 80042ae:	015b      	lsls	r3, r3, #5
 80042b0:	431a      	orrs	r2, r3
			| ppl->register4.APWR << 3 | ppl->register4.ADDR4;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	21bc      	movs	r1, #188	; 0xbc
 80042b6:	585b      	ldr	r3, [r3, r1]
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	431a      	orrs	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	21c0      	movs	r1, #192	; 0xc0
 80042c0:	585b      	ldr	r3, [r3, r1]
	composedRegisterValue = ppl->register4.RES << 29
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

	max2871Write(hspi2, composedRegisterValue);
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7ff f937 	bl	8003540 <max2871Write>
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b004      	add	sp, #16
 80042d8:	bd80      	pop	{r7, pc}

080042da <toneUhfInit>:
	/* PA3  PA_HAB as output - ENABLE - DISABLE PA */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE3_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE3_1);
}

void toneUhfInit(Function_t funcion, Id_t id, Tone_uhf_t *uhf) {
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	603a      	str	r2, [r7, #0]
 80042e2:	1dfb      	adds	r3, r7, #7
 80042e4:	1c02      	adds	r2, r0, #0
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	1dbb      	adds	r3, r7, #6
 80042ea:	1c0a      	adds	r2, r1, #0
 80042ec:	701a      	strb	r2, [r3, #0]
	uhf->ON_OFF = 0;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]
	uhf->FreqBase = 0;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2200      	movs	r2, #0
 80042f8:	605a      	str	r2, [r3, #4]
	uhf->FreqOut = 0;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
	uhf->PdBm = 0;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	731a      	strb	r2, [r3, #12]
	uhf->function = funcion;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	1dfa      	adds	r2, r7, #7
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	739a      	strb	r2, [r3, #14]
	uhf->id = id;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	1dba      	adds	r2, r7, #6
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	735a      	strb	r2, [r3, #13]
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b002      	add	sp, #8
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	000a      	movs	r2, r1
 800432a:	1cfb      	adds	r3, r7, #3
 800432c:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 800432e:	230a      	movs	r3, #10
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <crc_get+0xc0>)
 8004334:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8004336:	230c      	movs	r3, #12
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	2200      	movs	r2, #0
 800433c:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 800433e:	230f      	movs	r3, #15
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e03d      	b.n	80043c4 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8004348:	230f      	movs	r3, #15
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	18d3      	adds	r3, r2, r3
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	b299      	uxth	r1, r3
 800435a:	220c      	movs	r2, #12
 800435c:	18bb      	adds	r3, r7, r2
 800435e:	18ba      	adds	r2, r7, r2
 8004360:	8812      	ldrh	r2, [r2, #0]
 8004362:	404a      	eors	r2, r1
 8004364:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8004366:	230e      	movs	r3, #14
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e01e      	b.n	80043ae <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8004370:	210c      	movs	r1, #12
 8004372:	187b      	adds	r3, r7, r1
 8004374:	2200      	movs	r2, #0
 8004376:	5e9b      	ldrsh	r3, [r3, r2]
 8004378:	2b00      	cmp	r3, #0
 800437a:	da0c      	bge.n	8004396 <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 800437c:	187b      	adds	r3, r7, r1
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	b21a      	sxth	r2, r3
 8004384:	230a      	movs	r3, #10
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	2000      	movs	r0, #0
 800438a:	5e1b      	ldrsh	r3, [r3, r0]
 800438c:	4053      	eors	r3, r2
 800438e:	b21a      	sxth	r2, r3
 8004390:	187b      	adds	r3, r7, r1
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	e005      	b.n	80043a2 <crc_get+0x82>
			else
				crc <<= 1;
 8004396:	230c      	movs	r3, #12
 8004398:	18fa      	adds	r2, r7, r3
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	18db      	adds	r3, r3, r3
 80043a0:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 80043a2:	210e      	movs	r1, #14
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	3201      	adds	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	230e      	movs	r3, #14
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b07      	cmp	r3, #7
 80043b6:	d9db      	bls.n	8004370 <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 80043b8:	210f      	movs	r1, #15
 80043ba:	187b      	adds	r3, r7, r1
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	3201      	adds	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	230f      	movs	r3, #15
 80043c6:	18fa      	adds	r2, r7, r3
 80043c8:	1cfb      	adds	r3, r7, #3
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3ba      	bcc.n	8004348 <crc_get+0x28>
		}
	}
	return crc;
 80043d2:	230c      	movs	r3, #12
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	881b      	ldrh	r3, [r3, #0]
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	00001021 	.word	0x00001021

080043e4 <rs485_init>:

void rs485_init(RS485_t *r) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	r->len = 0;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2207      	movs	r2, #7
 80043f6:	721a      	strb	r2, [r3, #8]
	r->cmd = NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]

	/* PB5 DE485 as output  */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <rs485_init+0x3c>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <rs485_init+0x3c>)
 8004404:	2180      	movs	r1, #128	; 0x80
 8004406:	02c9      	lsls	r1, r1, #11
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <rs485_init+0x3c>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <rs485_init+0x3c>)
 8004412:	4904      	ldr	r1, [pc, #16]	; (8004424 <rs485_init+0x40>)
 8004414:	400a      	ands	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b002      	add	sp, #8
 800441e:	bd80      	pop	{r7, pc}
 8004420:	50000400 	.word	0x50000400
 8004424:	fff7ffff 	.word	0xfff7ffff

08004428 <rs485_check_frame>:
Rs485_status_t rs485_check_frame(RS485_t *r, UART1_t *u) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

	if (u->rx_count > (MINIMUN_FRAME_LEN)) {
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	227d      	movs	r2, #125	; 0x7d
 8004436:	5c9b      	ldrb	r3, [r3, r2]
 8004438:	2b06      	cmp	r3, #6
 800443a:	d913      	bls.n	8004464 <rs485_check_frame+0x3c>
		if (u->rx_buffer[0] == LTEL_START_MARK) {
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	227e      	movs	r2, #126	; 0x7e
 8004442:	4293      	cmp	r3, r2
 8004444:	d10c      	bne.n	8004460 <rs485_check_frame+0x38>
			if (u->rx_buffer[u->rx_count - 1] == LTEL_END_MARK)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	227d      	movs	r2, #125	; 0x7d
 800444a:	5c9b      	ldrb	r3, [r3, r2]
 800444c:	3b01      	subs	r3, #1
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	5cd3      	ldrb	r3, [r2, r3]
 8004452:	227f      	movs	r2, #127	; 0x7f
 8004454:	4293      	cmp	r3, r2
 8004456:	d101      	bne.n	800445c <rs485_check_frame+0x34>
				return VALID_FRAME;
 8004458:	2302      	movs	r3, #2
 800445a:	e004      	b.n	8004466 <rs485_check_frame+0x3e>
			else
				return START_READING;
 800445c:	2301      	movs	r3, #1
 800445e:	e002      	b.n	8004466 <rs485_check_frame+0x3e>
		} else
			return NOT_VALID_FRAME;
 8004460:	2303      	movs	r3, #3
 8004462:	e000      	b.n	8004466 <rs485_check_frame+0x3e>
	} else

		return WAITING;
 8004464:	2308      	movs	r3, #8
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b002      	add	sp, #8
 800446c:	bd80      	pop	{r7, pc}

0800446e <rs485_check_CRC_module>:

Rs485_status_t rs485_check_CRC_module(UART1_t *uart1) {
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = uart1->rx_buffer[8] << 8;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7a1b      	ldrb	r3, [r3, #8]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	60fb      	str	r3, [r7, #12]
	crc_save |= uart1->rx_buffer[9];
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7a5b      	ldrb	r3, [r3, #9]
 8004482:	001a      	movs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(uart1->rx_buffer[1]), 7);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3301      	adds	r3, #1
 800448e:	2107      	movs	r1, #7
 8004490:	0018      	movs	r0, r3
 8004492:	f7ff ff45 	bl	8004320 <crc_get>
 8004496:	0003      	movs	r3, r0
 8004498:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d101      	bne.n	80044a6 <rs485_check_CRC_module+0x38>
		return DATA_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e000      	b.n	80044a8 <rs485_check_CRC_module+0x3a>
	return CRC_ERROR;
 80044a6:	2306      	movs	r3, #6
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b004      	add	sp, #16
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <rs485_check_valid_module>:

Rs485_status_t rs485_check_valid_module(UART1_t *uart1) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	if (uart1->rx_buffer[1] == UHF_TONE) {
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	2b07      	cmp	r3, #7
 80044be:	d11c      	bne.n	80044fa <rs485_check_valid_module+0x4a>
		if (uart1->rx_buffer[2] == ID0) {
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	789b      	ldrb	r3, [r3, #2]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <rs485_check_valid_module+0x46>
			for (int i = 3; i < uart1->rx_count; i++)
 80044c8:	2303      	movs	r3, #3
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e00b      	b.n	80044e6 <rs485_check_valid_module+0x36>
				if (uart1->rx_buffer[i] == LTEL_END_MARK)
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	18d3      	adds	r3, r2, r3
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	227f      	movs	r2, #127	; 0x7f
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <rs485_check_valid_module+0x30>
					return VALID_MODULE;
 80044dc:	2309      	movs	r3, #9
 80044de:	e00f      	b.n	8004500 <rs485_check_valid_module+0x50>
			for (int i = 3; i < uart1->rx_count; i++)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3301      	adds	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	227d      	movs	r2, #125	; 0x7d
 80044ea:	5c9b      	ldrb	r3, [r3, r2]
 80044ec:	001a      	movs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4293      	cmp	r3, r2
 80044f2:	dbec      	blt.n	80044ce <rs485_check_valid_module+0x1e>
 80044f4:	e003      	b.n	80044fe <rs485_check_valid_module+0x4e>
		} else
			return WRONG_MODULE_ID;
 80044f6:	2305      	movs	r3, #5
 80044f8:	e002      	b.n	8004500 <rs485_check_valid_module+0x50>
	} else
		return WRONG_MODULE_FUNCTION;
 80044fa:	2304      	movs	r3, #4
 80044fc:	e000      	b.n	8004500 <rs485_check_valid_module+0x50>
	return WRONG_MODULE_FUNCTION;
 80044fe:	2304      	movs	r3, #4
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b004      	add	sp, #16
 8004506:	bd80      	pop	{r7, pc}

08004508 <rs485_update_status_by_uart>:

void rs485_parameters_cmd_action(uint8_t *frame) {

}

void rs485_update_status_by_uart(RS485_t *rs485, UART1_t *uart1) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
	switch (rs485->status) {
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7a1b      	ldrb	r3, [r3, #8]
 8004516:	2b09      	cmp	r3, #9
 8004518:	d900      	bls.n	800451c <rs485_update_status_by_uart+0x14>
 800451a:	e081      	b.n	8004620 <rs485_update_status_by_uart+0x118>
 800451c:	009a      	lsls	r2, r3, #2
 800451e:	4b47      	ldr	r3, [pc, #284]	; (800463c <rs485_update_status_by_uart+0x134>)
 8004520:	18d3      	adds	r3, r2, r3
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	469f      	mov	pc, r3
	case VALID_MODULE:
		rs485->status = rs485_check_CRC_module(uart1);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	0018      	movs	r0, r3
 800452a:	f7ff ffa0 	bl	800446e <rs485_check_CRC_module>
 800452e:	0003      	movs	r3, r0
 8004530:	001a      	movs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	721a      	strb	r2, [r3, #8]
		break;
 8004536:	e07c      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	case DATA_OK:
		rs485->cmd = uart1->rx_buffer[3];
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	78da      	ldrb	r2, [r3, #3]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	701a      	strb	r2, [r3, #0]
		uart1_send_str("DATA OK\r\n");
 8004540:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <rs485_update_status_by_uart+0x138>)
 8004542:	0018      	movs	r0, r3
 8004544:	f000 faf8 	bl	8004b38 <uart1_send_str>
		rs485->status = DONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2207      	movs	r2, #7
 800454c:	721a      	strb	r2, [r3, #8]
		break;
 800454e:	e070      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	case START_READING:
		rs485->status = WAITING;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2208      	movs	r2, #8
 8004554:	721a      	strb	r2, [r3, #8]
		if (uart1_clean_by_timeout(uart1, "START_READING"))
 8004556:	4a3b      	ldr	r2, [pc, #236]	; (8004644 <rs485_update_status_by_uart+0x13c>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	0011      	movs	r1, r2
 800455c:	0018      	movs	r0, r3
 800455e:	f000 f971 	bl	8004844 <uart1_clean_by_timeout>
 8004562:	1e03      	subs	r3, r0, #0
 8004564:	d064      	beq.n	8004630 <rs485_update_status_by_uart+0x128>
			rs485->status = DONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2207      	movs	r2, #7
 800456a:	721a      	strb	r2, [r3, #8]
		break;
 800456c:	e060      	b.n	8004630 <rs485_update_status_by_uart+0x128>
	case VALID_FRAME:
		rs485->status = rs485_check_valid_module(uart1);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	0018      	movs	r0, r3
 8004572:	f7ff ff9d 	bl	80044b0 <rs485_check_valid_module>
 8004576:	0003      	movs	r3, r0
 8004578:	001a      	movs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	721a      	strb	r2, [r3, #8]
		break;
 800457e:	e058      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	case NOT_VALID_FRAME:
		HAL_Delay(50);
 8004580:	2032      	movs	r0, #50	; 0x32
 8004582:	f000 fbf7 	bl	8004d74 <HAL_Delay>
	    uart1_send_str("NOT VALID FRAME\r\n");
 8004586:	4b30      	ldr	r3, [pc, #192]	; (8004648 <rs485_update_status_by_uart+0x140>)
 8004588:	0018      	movs	r0, r3
 800458a:	f000 fad5 	bl	8004b38 <uart1_send_str>
		uart1_clean_buffer(uart1);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	0018      	movs	r0, r3
 8004592:	f000 fb1b 	bl	8004bcc <uart1_clean_buffer>
		rs485->status = DONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2207      	movs	r2, #7
 800459a:	721a      	strb	r2, [r3, #8]
		break;
 800459c:	e049      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	case WRONG_MODULE_ID:
		uart1_send_str("WRONG MODULE ID\r\n");
 800459e:	4b2b      	ldr	r3, [pc, #172]	; (800464c <rs485_update_status_by_uart+0x144>)
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 fac9 	bl	8004b38 <uart1_send_str>
		uart1_clean_buffer(uart1);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 fb0f 	bl	8004bcc <uart1_clean_buffer>
		rs485->status = DONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2207      	movs	r2, #7
 80045b2:	721a      	strb	r2, [r3, #8]
		break;
 80045b4:	e03d      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	case WRONG_MODULE_FUNCTION:
		uart1_send_str("WRONG FUNCTION\r\n");
 80045b6:	4b26      	ldr	r3, [pc, #152]	; (8004650 <rs485_update_status_by_uart+0x148>)
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 fabd 	bl	8004b38 <uart1_send_str>
		uart1_clean_buffer(uart1);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 fb03 	bl	8004bcc <uart1_clean_buffer>
		rs485->status = DONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2207      	movs	r2, #7
 80045ca:	721a      	strb	r2, [r3, #8]
		break;
 80045cc:	e031      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	case CRC_ERROR:
		uart1_send_str("CRC ERROR\r\n");
 80045ce:	4b21      	ldr	r3, [pc, #132]	; (8004654 <rs485_update_status_by_uart+0x14c>)
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 fab1 	bl	8004b38 <uart1_send_str>
		uart1_clean_buffer(uart1);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 faf7 	bl	8004bcc <uart1_clean_buffer>
		rs485->status = DONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2207      	movs	r2, #7
 80045e2:	721a      	strb	r2, [r3, #8]
		break;
 80045e4:	e025      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	case WAITING:
		rs485->status = rs485_check_frame(rs485, uart1);
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	0011      	movs	r1, r2
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7ff ff1b 	bl	8004428 <rs485_check_frame>
 80045f2:	0003      	movs	r3, r0
 80045f4:	001a      	movs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	721a      	strb	r2, [r3, #8]
		uart1_clean_by_timeout(uart1, "WAITING");
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <rs485_update_status_by_uart+0x150>)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	0011      	movs	r1, r2
 8004600:	0018      	movs	r0, r3
 8004602:	f000 f91f 	bl	8004844 <uart1_clean_by_timeout>
		break;
 8004606:	e014      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	case DONE:
		uart1_send_str("DONE\r\n");
 8004608:	4b14      	ldr	r3, [pc, #80]	; (800465c <rs485_update_status_by_uart+0x154>)
 800460a:	0018      	movs	r0, r3
 800460c:	f000 fa94 	bl	8004b38 <uart1_send_str>
		uart1_clean_buffer(uart1);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	0018      	movs	r0, r3
 8004614:	f000 fada 	bl	8004bcc <uart1_clean_buffer>
		rs485->status = WAITING;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2208      	movs	r2, #8
 800461c:	721a      	strb	r2, [r3, #8]
		break;
 800461e:	e008      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
	default:
		rs485->status = DONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2207      	movs	r2, #7
 8004624:	721a      	strb	r2, [r3, #8]
		uart1_clean_buffer(uart1);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	0018      	movs	r0, r3
 800462a:	f000 facf 	bl	8004bcc <uart1_clean_buffer>
		break;
 800462e:	e000      	b.n	8004632 <rs485_update_status_by_uart+0x12a>
		break;
 8004630:	46c0      	nop			; (mov r8, r8)
	}
}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	46bd      	mov	sp, r7
 8004636:	b002      	add	sp, #8
 8004638:	bd80      	pop	{r7, pc}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	08006dcc 	.word	0x08006dcc
 8004640:	08006ccc 	.word	0x08006ccc
 8004644:	08006cd8 	.word	0x08006cd8
 8004648:	08006ce8 	.word	0x08006ce8
 800464c:	08006cfc 	.word	0x08006cfc
 8004650:	08006d10 	.word	0x08006d10
 8004654:	08006d24 	.word	0x08006d24
 8004658:	08006d30 	.word	0x08006d30
 800465c:	08006d38 	.word	0x08006d38

08004660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004666:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <HAL_MspInit+0x44>)
 8004668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466a:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <HAL_MspInit+0x44>)
 800466c:	2101      	movs	r1, #1
 800466e:	430a      	orrs	r2, r1
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_MspInit+0x44>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2201      	movs	r2, #1
 8004678:	4013      	ands	r3, r2
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_MspInit+0x44>)
 8004680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_MspInit+0x44>)
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	0549      	lsls	r1, r1, #21
 8004688:	430a      	orrs	r2, r1
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_MspInit+0x44>)
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	055b      	lsls	r3, r3, #21
 8004694:	4013      	ands	r3, r2
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	40021000 	.word	0x40021000

080046a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b08b      	sub	sp, #44	; 0x2c
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	2414      	movs	r4, #20
 80046b2:	193b      	adds	r3, r7, r4
 80046b4:	0018      	movs	r0, r3
 80046b6:	2314      	movs	r3, #20
 80046b8:	001a      	movs	r2, r3
 80046ba:	2100      	movs	r1, #0
 80046bc:	f001 fe5a 	bl	8006374 <memset>
  if(hspi->Instance==SPI2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a26      	ldr	r2, [pc, #152]	; (8004760 <HAL_SPI_MspInit+0xb8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d146      	bne.n	8004758 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046ca:	4b26      	ldr	r3, [pc, #152]	; (8004764 <HAL_SPI_MspInit+0xbc>)
 80046cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ce:	4b25      	ldr	r3, [pc, #148]	; (8004764 <HAL_SPI_MspInit+0xbc>)
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	01c9      	lsls	r1, r1, #7
 80046d4:	430a      	orrs	r2, r1
 80046d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80046d8:	4b22      	ldr	r3, [pc, #136]	; (8004764 <HAL_SPI_MspInit+0xbc>)
 80046da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e6:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <HAL_SPI_MspInit+0xbc>)
 80046e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ea:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <HAL_SPI_MspInit+0xbc>)
 80046ec:	2101      	movs	r1, #1
 80046ee:	430a      	orrs	r2, r1
 80046f0:	635a      	str	r2, [r3, #52]	; 0x34
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <HAL_SPI_MspInit+0xbc>)
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	2201      	movs	r2, #1
 80046f8:	4013      	ands	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MAX_SCK_Pin;
 80046fe:	193b      	adds	r3, r7, r4
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	193b      	adds	r3, r7, r4
 8004706:	2202      	movs	r2, #2
 8004708:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	193b      	adds	r3, r7, r4
 800470c:	2200      	movs	r2, #0
 800470e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004710:	193b      	adds	r3, r7, r4
 8004712:	2200      	movs	r2, #0
 8004714:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004716:	193b      	adds	r3, r7, r4
 8004718:	2200      	movs	r2, #0
 800471a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_SCK_GPIO_Port, &GPIO_InitStruct);
 800471c:	193a      	adds	r2, r7, r4
 800471e:	23a0      	movs	r3, #160	; 0xa0
 8004720:	05db      	lsls	r3, r3, #23
 8004722:	0011      	movs	r1, r2
 8004724:	0018      	movs	r0, r3
 8004726:	f000 fbfd 	bl	8004f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAX_DATA_Pin;
 800472a:	0021      	movs	r1, r4
 800472c:	187b      	adds	r3, r7, r1
 800472e:	2210      	movs	r2, #16
 8004730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004732:	187b      	adds	r3, r7, r1
 8004734:	2202      	movs	r2, #2
 8004736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	187b      	adds	r3, r7, r1
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473e:	187b      	adds	r3, r7, r1
 8004740:	2200      	movs	r2, #0
 8004742:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004744:	187b      	adds	r3, r7, r1
 8004746:	2201      	movs	r2, #1
 8004748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_DATA_GPIO_Port, &GPIO_InitStruct);
 800474a:	187a      	adds	r2, r7, r1
 800474c:	23a0      	movs	r3, #160	; 0xa0
 800474e:	05db      	lsls	r3, r3, #23
 8004750:	0011      	movs	r1, r2
 8004752:	0018      	movs	r0, r3
 8004754:	f000 fbe6 	bl	8004f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b00b      	add	sp, #44	; 0x2c
 800475e:	bd90      	pop	{r4, r7, pc}
 8004760:	40003800 	.word	0x40003800
 8004764:	40021000 	.word	0x40021000

08004768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800476c:	e7fe      	b.n	800476c <NMI_Handler+0x4>

0800476e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004772:	e7fe      	b.n	8004772 <HardFault_Handler+0x4>

08004774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800478c:	f000 fad6 	bl	8004d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <_sbrk+0x5c>)
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <_sbrk+0x60>)
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <_sbrk+0x64>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <_sbrk+0x64>)
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <_sbrk+0x68>)
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <_sbrk+0x64>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	18d3      	adds	r3, r2, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d207      	bcs.n	80047d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047c8:	f001 fdaa 	bl	8006320 <__errno>
 80047cc:	0003      	movs	r3, r0
 80047ce:	220c      	movs	r2, #12
 80047d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	425b      	negs	r3, r3
 80047d6:	e009      	b.n	80047ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047d8:	4b08      	ldr	r3, [pc, #32]	; (80047fc <_sbrk+0x64>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <_sbrk+0x64>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	18d2      	adds	r2, r2, r3
 80047e6:	4b05      	ldr	r3, [pc, #20]	; (80047fc <_sbrk+0x64>)
 80047e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b006      	add	sp, #24
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20002000 	.word	0x20002000
 80047f8:	00000400 	.word	0x00000400
 80047fc:	20000100 	.word	0x20000100
 8004800:	20000118 	.word	0x20000118

08004804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	0002      	movs	r2, r0
 8004818:	1dfb      	adds	r3, r7, #7
 800481a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800481c:	1dfb      	adds	r3, r7, #7
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b7f      	cmp	r3, #127	; 0x7f
 8004822:	d809      	bhi.n	8004838 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004824:	1dfb      	adds	r3, r7, #7
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	001a      	movs	r2, r3
 800482a:	231f      	movs	r3, #31
 800482c:	401a      	ands	r2, r3
 800482e:	4b04      	ldr	r3, [pc, #16]	; (8004840 <__NVIC_EnableIRQ+0x30>)
 8004830:	2101      	movs	r1, #1
 8004832:	4091      	lsls	r1, r2
 8004834:	000a      	movs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b002      	add	sp, #8
 800483e:	bd80      	pop	{r7, pc}
 8004840:	e000e100 	.word	0xe000e100

08004844 <uart1_clean_by_timeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  uart1_clean_by_timeout(UART1_t* uart1,const char* str){
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 800484e:	f000 fa87 	bl	8004d60 <HAL_GetTick>
 8004852:	0002      	movs	r2, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	585b      	ldr	r3, [r3, r1]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	4a0f      	ldr	r2, [pc, #60]	; (800489c <uart1_clean_by_timeout+0x58>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d917      	bls.n	8004892 <uart1_clean_by_timeout+0x4e>
			uart1_send_str((char*)str);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	0018      	movs	r0, r3
 8004866:	f000 f967 	bl	8004b38 <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <uart1_clean_by_timeout+0x5c>)
 800486c:	0018      	movs	r0, r3
 800486e:	f000 f963 	bl	8004b38 <uart1_send_str>
			if(strlen(str)>0)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <uart1_clean_by_timeout+0x3e>
				uart1_clean_buffer(uart1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f9a5 	bl	8004bcc <uart1_clean_buffer>
			uart1->timeout = HAL_GetTick();
 8004882:	f000 fa6d 	bl	8004d60 <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	505a      	str	r2, [r3, r1]
			return 1;
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <uart1_clean_by_timeout+0x50>
		}
		return 0;
 8004892:	2300      	movs	r3, #0
}
 8004894:	0018      	movs	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}
 800489c:	00001388 	.word	0x00001388
 80048a0:	08006d40 	.word	0x08006d40

080048a4 <uart1_gpio_init>:

void uart1_gpio_init() {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
	 PA9     ------> USART1_TX
	 PA10     ------> USART1_RX
	 */

	/* PA10 alternate mode */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 80048a8:	23a0      	movs	r3, #160	; 0xa0
 80048aa:	05db      	lsls	r3, r3, #23
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	23a0      	movs	r3, #160	; 0xa0
 80048b0:	05db      	lsls	r3, r3, #23
 80048b2:	4930      	ldr	r1, [pc, #192]	; (8004974 <uart1_gpio_init+0xd0>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 80048b8:	23a0      	movs	r3, #160	; 0xa0
 80048ba:	05db      	lsls	r3, r3, #23
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	23a0      	movs	r3, #160	; 0xa0
 80048c0:	05db      	lsls	r3, r3, #23
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	0389      	lsls	r1, r1, #14
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 80048ca:	23a0      	movs	r3, #160	; 0xa0
 80048cc:	05db      	lsls	r3, r3, #23
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	23a0      	movs	r3, #160	; 0xa0
 80048d2:	05db      	lsls	r3, r3, #23
 80048d4:	4928      	ldr	r1, [pc, #160]	; (8004978 <uart1_gpio_init+0xd4>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 80048da:	23a0      	movs	r3, #160	; 0xa0
 80048dc:	05db      	lsls	r3, r3, #23
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	23a0      	movs	r3, #160	; 0xa0
 80048e2:	05db      	lsls	r3, r3, #23
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	0309      	lsls	r1, r1, #12
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 80048ec:	23a0      	movs	r3, #160	; 0xa0
 80048ee:	05db      	lsls	r3, r3, #23
 80048f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f2:	23a0      	movs	r3, #160	; 0xa0
 80048f4:	05db      	lsls	r3, r3, #23
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	0049      	lsls	r1, r1, #1
 80048fa:	430a      	orrs	r2, r1
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 80048fe:	23a0      	movs	r3, #160	; 0xa0
 8004900:	05db      	lsls	r3, r3, #23
 8004902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004904:	23a0      	movs	r3, #160	; 0xa0
 8004906:	05db      	lsls	r3, r3, #23
 8004908:	491c      	ldr	r1, [pc, #112]	; (800497c <uart1_gpio_init+0xd8>)
 800490a:	400a      	ands	r2, r1
 800490c:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 800490e:	23a0      	movs	r3, #160	; 0xa0
 8004910:	05db      	lsls	r3, r3, #23
 8004912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004914:	23a0      	movs	r3, #160	; 0xa0
 8004916:	05db      	lsls	r3, r3, #23
 8004918:	4919      	ldr	r1, [pc, #100]	; (8004980 <uart1_gpio_init+0xdc>)
 800491a:	400a      	ands	r2, r1
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 800491e:	23a0      	movs	r3, #160	; 0xa0
 8004920:	05db      	lsls	r3, r3, #23
 8004922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004924:	23a0      	movs	r3, #160	; 0xa0
 8004926:	05db      	lsls	r3, r3, #23
 8004928:	4916      	ldr	r1, [pc, #88]	; (8004984 <uart1_gpio_init+0xe0>)
 800492a:	400a      	ands	r2, r1
 800492c:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 800492e:	23a0      	movs	r3, #160	; 0xa0
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004934:	23a0      	movs	r3, #160	; 0xa0
 8004936:	05db      	lsls	r3, r3, #23
 8004938:	2110      	movs	r1, #16
 800493a:	430a      	orrs	r2, r1
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 800493e:	23a0      	movs	r3, #160	; 0xa0
 8004940:	05db      	lsls	r3, r3, #23
 8004942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004944:	23a0      	movs	r3, #160	; 0xa0
 8004946:	05db      	lsls	r3, r3, #23
 8004948:	2120      	movs	r1, #32
 800494a:	438a      	bics	r2, r1
 800494c:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 800494e:	23a0      	movs	r3, #160	; 0xa0
 8004950:	05db      	lsls	r3, r3, #23
 8004952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004954:	23a0      	movs	r3, #160	; 0xa0
 8004956:	05db      	lsls	r3, r3, #23
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	438a      	bics	r2, r1
 800495c:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 800495e:	23a0      	movs	r3, #160	; 0xa0
 8004960:	05db      	lsls	r3, r3, #23
 8004962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004964:	23a0      	movs	r3, #160	; 0xa0
 8004966:	05db      	lsls	r3, r3, #23
 8004968:	2180      	movs	r1, #128	; 0x80
 800496a:	438a      	bics	r2, r1
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	ffefffff 	.word	0xffefffff
 8004978:	fffbffff 	.word	0xfffbffff
 800497c:	fffffdff 	.word	0xfffffdff
 8004980:	fffffbff 	.word	0xfffffbff
 8004984:	fffff7ff 	.word	0xfffff7ff

08004988 <uart1_init>:

void uart1_init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8004998:	f7ff ff84 	bl	80048a4 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 800499c:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <uart1_init+0x94>)
 800499e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a0:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <uart1_init+0x94>)
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	01c9      	lsls	r1, r1, #7
 80049a6:	430a      	orrs	r2, r1
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <uart1_init+0x98>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d10b      	bne.n	80049ca <uart1_init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <uart1_init+0x94>)
 80049b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049b6:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <uart1_init+0x94>)
 80049b8:	2101      	movs	r1, #1
 80049ba:	438a      	bics	r2, r1
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 80049be:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <uart1_init+0x94>)
 80049c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049c2:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <uart1_init+0x94>)
 80049c4:	2102      	movs	r1, #2
 80049c6:	430a      	orrs	r2, r1
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7fb fba1 	bl	8000114 <__udivsi3>
 80049d2:	0003      	movs	r3, r0
 80049d4:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <uart1_init+0x9c>)
 80049dc:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <uart1_init+0x9c>)
 80049e0:	220c      	movs	r2, #12
 80049e2:	601a      	str	r2, [r3, #0]
	u->rx_count = 0;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	227d      	movs	r2, #125	; 0x7d
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

	uart1_clean_buffer(u);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 f8ec 	bl	8004bcc <uart1_clean_buffer>

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <uart1_init+0x9c>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <uart1_init+0x9c>)
 80049fa:	2120      	movs	r1, #32
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8004a00:	201b      	movs	r0, #27
 8004a02:	f7ff ff05 	bl	8004810 <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <uart1_init+0x9c>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <uart1_init+0x9c>)
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b006      	add	sp, #24
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	40013800 	.word	0x40013800

08004a28 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	0002      	movs	r2, r0
 8004a30:	1dfb      	adds	r3, r7, #7
 8004a32:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8004a34:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <uart1_write+0x50>)
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <uart1_write+0x50>)
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	0089      	lsls	r1, r1, #2
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <uart1_write+0x54>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2280      	movs	r2, #128	; 0x80
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d0fa      	beq.n	8004a44 <uart1_write+0x1c>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <uart1_write+0x54>)
 8004a50:	1dfa      	adds	r2, r7, #7
 8004a52:	7812      	ldrb	r2, [r2, #0]
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <uart1_write+0x54>)
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	2240      	movs	r2, #64	; 0x40
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d0fa      	beq.n	8004a58 <uart1_write+0x30>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <uart1_write+0x50>)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <uart1_write+0x50>)
 8004a68:	4905      	ldr	r1, [pc, #20]	; (8004a80 <uart1_write+0x58>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	615a      	str	r2, [r3, #20]
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b002      	add	sp, #8
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	50000400 	.word	0x50000400
 8004a7c:	40013800 	.word	0x40013800
 8004a80:	fffffdff 	.word	0xfffffdff

08004a84 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 8004a8a:	4b18      	ldr	r3, [pc, #96]	; (8004aec <uart1_1byte_read+0x68>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	401a      	ands	r2, r3
 8004a92:	1dfb      	adds	r3, r7, #7
 8004a94:	1e51      	subs	r1, r2, #1
 8004a96:	418a      	sbcs	r2, r1
 8004a98:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <uart1_1byte_read+0x68>)
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	1dbb      	adds	r3, r7, #6
 8004aa4:	1e51      	subs	r1, r2, #1
 8004aa6:	418a      	sbcs	r2, r1
 8004aa8:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 8004aaa:	1dbb      	adds	r3, r7, #6
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <uart1_1byte_read+0x36>
 8004ab2:	1dfb      	adds	r3, r7, #7
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d012      	beq.n	8004ae0 <uart1_1byte_read+0x5c>
		if (override)
 8004aba:	1dfb      	adds	r3, r7, #7
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <uart1_1byte_read+0x68>)
 8004ac4:	6a1a      	ldr	r2, [r3, #32]
 8004ac6:	4b09      	ldr	r3, [pc, #36]	; (8004aec <uart1_1byte_read+0x68>)
 8004ac8:	2108      	movs	r1, #8
 8004aca:	430a      	orrs	r2, r1
 8004acc:	621a      	str	r2, [r3, #32]
		data = USART1->RDR;
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <uart1_1byte_read+0x68>)
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	1d7b      	adds	r3, r7, #5
 8004ad6:	701a      	strb	r2, [r3, #0]
		return data;
 8004ad8:	1d7b      	adds	r3, r7, #5
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e000      	b.n	8004ae2 <uart1_1byte_read+0x5e>
	} else
		return '\0';
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b002      	add	sp, #8
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	40013800 	.word	0x40013800

08004af0 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	227d      	movs	r2, #125	; 0x7d
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	2b18      	cmp	r3, #24
 8004b00:	d907      	bls.n	8004b12 <uart1_read_to_frame+0x22>
		uart1_clean_buffer(u);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 f861 	bl	8004bcc <uart1_clean_buffer>
		u->rx_count = 0;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	227d      	movs	r2, #125	; 0x7d
 8004b0e:	2100      	movs	r1, #0
 8004b10:	5499      	strb	r1, [r3, r2]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	227d      	movs	r2, #125	; 0x7d
 8004b16:	5c9b      	ldrb	r3, [r3, r2]
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	b2d0      	uxtb	r0, r2
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	217d      	movs	r1, #125	; 0x7d
 8004b20:	5450      	strb	r0, [r2, r1]
 8004b22:	001c      	movs	r4, r3
 8004b24:	f7ff ffae 	bl	8004a84 <uart1_1byte_read>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	551a      	strb	r2, [r3, r4]
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b003      	add	sp, #12
 8004b36:	bd90      	pop	{r4, r7, pc}

08004b38 <uart1_send_str>:

void uart1_send_str(char *str) {
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8004b40:	230f      	movs	r3, #15
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e00d      	b.n	8004b66 <uart1_send_str+0x2e>
		uart1_write(str[i]);
 8004b4a:	240f      	movs	r4, #15
 8004b4c:	193b      	adds	r3, r7, r4
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7ff ff66 	bl	8004a28 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8004b5c:	193b      	adds	r3, r7, r4
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	193b      	adds	r3, r7, r4
 8004b62:	3201      	adds	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	230f      	movs	r3, #15
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	18d3      	adds	r3, r2, r3
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e9      	bne.n	8004b4a <uart1_send_str+0x12>
}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b005      	add	sp, #20
 8004b7e:	bd90      	pop	{r4, r7, pc}

08004b80 <uart1_send_frame>:

void uart1_send_frame(char *str, uint8_t len) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	000a      	movs	r2, r1
 8004b8a:	1cfb      	adds	r3, r7, #3
 8004b8c:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 8004b8e:	1cfb      	adds	r3, r7, #3
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <uart1_send_frame+0x44>
		for (int i = 0; i < len; i++){
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e00e      	b.n	8004bba <uart1_send_frame+0x3a>
			uart1_write(str[i]);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7ff ff3f 	bl	8004a28 <uart1_write>
			str[i] = (char) '\0';
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	18d3      	adds	r3, r2, r3
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	1cfb      	adds	r3, r7, #3
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	dbeb      	blt.n	8004b9c <uart1_send_frame+0x1c>
		}
	}
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b004      	add	sp, #16
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	227d      	movs	r2, #125	; 0x7d
 8004bd8:	2100      	movs	r1, #0
 8004bda:	5499      	strb	r1, [r3, r2]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e010      	b.n	8004c04 <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b18      	cmp	r3, #24
 8004be6:	dc04      	bgt.n	8004bf2 <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	18d3      	adds	r3, r2, r3
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	18d3      	adds	r3, r2, r3
 8004bf8:	3319      	adds	r3, #25
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b63      	cmp	r3, #99	; 0x63
 8004c08:	ddeb      	ble.n	8004be2 <uart1_clean_buffer+0x16>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b004      	add	sp, #16
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c14:	480d      	ldr	r0, [pc, #52]	; (8004c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c18:	f7ff fdf4 	bl	8004804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c1c:	480c      	ldr	r0, [pc, #48]	; (8004c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c1e:	490d      	ldr	r1, [pc, #52]	; (8004c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c20:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <LoopForever+0xe>)
  movs r3, #0
 8004c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c24:	e002      	b.n	8004c2c <LoopCopyDataInit>

08004c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c2a:	3304      	adds	r3, #4

08004c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c30:	d3f9      	bcc.n	8004c26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c34:	4c0a      	ldr	r4, [pc, #40]	; (8004c60 <LoopForever+0x16>)
  movs r3, #0
 8004c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c38:	e001      	b.n	8004c3e <LoopFillZerobss>

08004c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c3c:	3204      	adds	r2, #4

08004c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c40:	d3fb      	bcc.n	8004c3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004c42:	f001 fb73 	bl	800632c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004c46:	f7fd fd85 	bl	8002754 <main>

08004c4a <LoopForever>:

LoopForever:
  b LoopForever
 8004c4a:	e7fe      	b.n	8004c4a <LoopForever>
  ldr   r0, =_estack
 8004c4c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004c58:	08006e78 	.word	0x08006e78
  ldr r2, =_sbss
 8004c5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004c60:	20000118 	.word	0x20000118

08004c64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c64:	e7fe      	b.n	8004c64 <ADC1_IRQHandler>
	...

08004c68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c6e:	1dfb      	adds	r3, r7, #7
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_Init+0x3c>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <HAL_Init+0x3c>)
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	0049      	lsls	r1, r1, #1
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c82:	2003      	movs	r0, #3
 8004c84:	f000 f810 	bl	8004ca8 <HAL_InitTick>
 8004c88:	1e03      	subs	r3, r0, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004c8c:	1dfb      	adds	r3, r7, #7
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e001      	b.n	8004c98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004c94:	f7ff fce4 	bl	8004660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c98:	1dfb      	adds	r3, r7, #7
 8004c9a:	781b      	ldrb	r3, [r3, #0]
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40022000 	.word	0x40022000

08004ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cb0:	230f      	movs	r3, #15
 8004cb2:	18fb      	adds	r3, r7, r3
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <HAL_InitTick+0x88>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02b      	beq.n	8004d18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <HAL_InitTick+0x8c>)
 8004cc2:	681c      	ldr	r4, [r3, #0]
 8004cc4:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <HAL_InitTick+0x88>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	0019      	movs	r1, r3
 8004cca:	23fa      	movs	r3, #250	; 0xfa
 8004ccc:	0098      	lsls	r0, r3, #2
 8004cce:	f7fb fa21 	bl	8000114 <__udivsi3>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	0020      	movs	r0, r4
 8004cd8:	f7fb fa1c 	bl	8000114 <__udivsi3>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 f913 	bl	8004f0a <HAL_SYSTICK_Config>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d112      	bne.n	8004d0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d80a      	bhi.n	8004d04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	425b      	negs	r3, r3
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f000 f8f2 	bl	8004ee0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <HAL_InitTick+0x90>)
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	e00d      	b.n	8004d20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004d04:	230f      	movs	r3, #15
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e008      	b.n	8004d20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d0e:	230f      	movs	r3, #15
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e003      	b.n	8004d20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d18:	230f      	movs	r3, #15
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004d20:	230f      	movs	r3, #15
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	781b      	ldrb	r3, [r3, #0]
}
 8004d26:	0018      	movs	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b005      	add	sp, #20
 8004d2c:	bd90      	pop	{r4, r7, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	20000008 	.word	0x20000008
 8004d34:	20000000 	.word	0x20000000
 8004d38:	20000004 	.word	0x20000004

08004d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_IncTick+0x1c>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	001a      	movs	r2, r3
 8004d46:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <HAL_IncTick+0x20>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	18d2      	adds	r2, r2, r3
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_IncTick+0x20>)
 8004d4e:	601a      	str	r2, [r3, #0]
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	20000008 	.word	0x20000008
 8004d5c:	20000104 	.word	0x20000104

08004d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  return uwTick;
 8004d64:	4b02      	ldr	r3, [pc, #8]	; (8004d70 <HAL_GetTick+0x10>)
 8004d66:	681b      	ldr	r3, [r3, #0]
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	20000104 	.word	0x20000104

08004d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d7c:	f7ff fff0 	bl	8004d60 <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	d005      	beq.n	8004d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_Delay+0x44>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	001a      	movs	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	189b      	adds	r3, r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	f7ff ffe0 	bl	8004d60 <HAL_GetTick>
 8004da0:	0002      	movs	r2, r0
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d8f7      	bhi.n	8004d9c <HAL_Delay+0x28>
  {
  }
}
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b004      	add	sp, #16
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	20000008 	.word	0x20000008

08004dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	1dfb      	adds	r3, r7, #7
 8004dc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dca:	1dfb      	adds	r3, r7, #7
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd0:	d828      	bhi.n	8004e24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dd2:	4a2f      	ldr	r2, [pc, #188]	; (8004e90 <__NVIC_SetPriority+0xd4>)
 8004dd4:	1dfb      	adds	r3, r7, #7
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	b25b      	sxtb	r3, r3
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	33c0      	adds	r3, #192	; 0xc0
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	589b      	ldr	r3, [r3, r2]
 8004de2:	1dfa      	adds	r2, r7, #7
 8004de4:	7812      	ldrb	r2, [r2, #0]
 8004de6:	0011      	movs	r1, r2
 8004de8:	2203      	movs	r2, #3
 8004dea:	400a      	ands	r2, r1
 8004dec:	00d2      	lsls	r2, r2, #3
 8004dee:	21ff      	movs	r1, #255	; 0xff
 8004df0:	4091      	lsls	r1, r2
 8004df2:	000a      	movs	r2, r1
 8004df4:	43d2      	mvns	r2, r2
 8004df6:	401a      	ands	r2, r3
 8004df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	019b      	lsls	r3, r3, #6
 8004dfe:	22ff      	movs	r2, #255	; 0xff
 8004e00:	401a      	ands	r2, r3
 8004e02:	1dfb      	adds	r3, r7, #7
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	0018      	movs	r0, r3
 8004e08:	2303      	movs	r3, #3
 8004e0a:	4003      	ands	r3, r0
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e10:	481f      	ldr	r0, [pc, #124]	; (8004e90 <__NVIC_SetPriority+0xd4>)
 8004e12:	1dfb      	adds	r3, r7, #7
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	089b      	lsrs	r3, r3, #2
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	33c0      	adds	r3, #192	; 0xc0
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e22:	e031      	b.n	8004e88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e24:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <__NVIC_SetPriority+0xd8>)
 8004e26:	1dfb      	adds	r3, r7, #7
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	230f      	movs	r3, #15
 8004e2e:	400b      	ands	r3, r1
 8004e30:	3b08      	subs	r3, #8
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	3306      	adds	r3, #6
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	18d3      	adds	r3, r2, r3
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	1dfa      	adds	r2, r7, #7
 8004e40:	7812      	ldrb	r2, [r2, #0]
 8004e42:	0011      	movs	r1, r2
 8004e44:	2203      	movs	r2, #3
 8004e46:	400a      	ands	r2, r1
 8004e48:	00d2      	lsls	r2, r2, #3
 8004e4a:	21ff      	movs	r1, #255	; 0xff
 8004e4c:	4091      	lsls	r1, r2
 8004e4e:	000a      	movs	r2, r1
 8004e50:	43d2      	mvns	r2, r2
 8004e52:	401a      	ands	r2, r3
 8004e54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	019b      	lsls	r3, r3, #6
 8004e5a:	22ff      	movs	r2, #255	; 0xff
 8004e5c:	401a      	ands	r2, r3
 8004e5e:	1dfb      	adds	r3, r7, #7
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	0018      	movs	r0, r3
 8004e64:	2303      	movs	r3, #3
 8004e66:	4003      	ands	r3, r0
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e6c:	4809      	ldr	r0, [pc, #36]	; (8004e94 <__NVIC_SetPriority+0xd8>)
 8004e6e:	1dfb      	adds	r3, r7, #7
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	001c      	movs	r4, r3
 8004e74:	230f      	movs	r3, #15
 8004e76:	4023      	ands	r3, r4
 8004e78:	3b08      	subs	r3, #8
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	3306      	adds	r3, #6
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	18c3      	adds	r3, r0, r3
 8004e84:	3304      	adds	r3, #4
 8004e86:	601a      	str	r2, [r3, #0]
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b003      	add	sp, #12
 8004e8e:	bd90      	pop	{r4, r7, pc}
 8004e90:	e000e100 	.word	0xe000e100
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	1e5a      	subs	r2, r3, #1
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	045b      	lsls	r3, r3, #17
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d301      	bcc.n	8004eb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eac:	2301      	movs	r3, #1
 8004eae:	e010      	b.n	8004ed2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <SysTick_Config+0x44>)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	3a01      	subs	r2, #1
 8004eb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eb8:	2301      	movs	r3, #1
 8004eba:	425b      	negs	r3, r3
 8004ebc:	2103      	movs	r1, #3
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7ff ff7c 	bl	8004dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <SysTick_Config+0x44>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <SysTick_Config+0x44>)
 8004ecc:	2207      	movs	r2, #7
 8004ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b002      	add	sp, #8
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	e000e010 	.word	0xe000e010

08004ee0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	210f      	movs	r1, #15
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	1c02      	adds	r2, r0, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	0011      	movs	r1, r2
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7ff ff5d 	bl	8004dbc <__NVIC_SetPriority>
}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f7ff ffbf 	bl	8004e98 <SysTick_Config>
 8004f1a:	0003      	movs	r3, r0
}
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b002      	add	sp, #8
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f32:	e147      	b.n	80051c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2101      	movs	r1, #1
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4091      	lsls	r1, r2
 8004f3e:	000a      	movs	r2, r1
 8004f40:	4013      	ands	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d100      	bne.n	8004f4c <HAL_GPIO_Init+0x28>
 8004f4a:	e138      	b.n	80051be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2203      	movs	r2, #3
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d005      	beq.n	8004f64 <HAL_GPIO_Init+0x40>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d130      	bne.n	8004fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	2203      	movs	r2, #3
 8004f70:	409a      	lsls	r2, r3
 8004f72:	0013      	movs	r3, r2
 8004f74:	43da      	mvns	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	409a      	lsls	r2, r3
 8004f86:	0013      	movs	r3, r2
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	0013      	movs	r3, r2
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	0013      	movs	r3, r2
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d017      	beq.n	8005002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	2203      	movs	r2, #3
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	0013      	movs	r3, r2
 8004fe2:	43da      	mvns	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	409a      	lsls	r2, r3
 8004ff4:	0013      	movs	r3, r2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2203      	movs	r2, #3
 8005008:	4013      	ands	r3, r2
 800500a:	2b02      	cmp	r3, #2
 800500c:	d123      	bne.n	8005056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	08da      	lsrs	r2, r3, #3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3208      	adds	r2, #8
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	58d3      	ldr	r3, [r2, r3]
 800501a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2207      	movs	r2, #7
 8005020:	4013      	ands	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	220f      	movs	r2, #15
 8005026:	409a      	lsls	r2, r3
 8005028:	0013      	movs	r3, r2
 800502a:	43da      	mvns	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2107      	movs	r1, #7
 800503a:	400b      	ands	r3, r1
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	409a      	lsls	r2, r3
 8005040:	0013      	movs	r3, r2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	08da      	lsrs	r2, r3, #3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3208      	adds	r2, #8
 8005050:	0092      	lsls	r2, r2, #2
 8005052:	6939      	ldr	r1, [r7, #16]
 8005054:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	2203      	movs	r2, #3
 8005062:	409a      	lsls	r2, r3
 8005064:	0013      	movs	r3, r2
 8005066:	43da      	mvns	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4013      	ands	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2203      	movs	r2, #3
 8005074:	401a      	ands	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	409a      	lsls	r2, r3
 800507c:	0013      	movs	r3, r2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	23c0      	movs	r3, #192	; 0xc0
 8005090:	029b      	lsls	r3, r3, #10
 8005092:	4013      	ands	r3, r2
 8005094:	d100      	bne.n	8005098 <HAL_GPIO_Init+0x174>
 8005096:	e092      	b.n	80051be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005098:	4a50      	ldr	r2, [pc, #320]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	3318      	adds	r3, #24
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	589b      	ldr	r3, [r3, r2]
 80050a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2203      	movs	r2, #3
 80050aa:	4013      	ands	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	220f      	movs	r2, #15
 80050b0:	409a      	lsls	r2, r3
 80050b2:	0013      	movs	r3, r2
 80050b4:	43da      	mvns	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	23a0      	movs	r3, #160	; 0xa0
 80050c0:	05db      	lsls	r3, r3, #23
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d013      	beq.n	80050ee <HAL_GPIO_Init+0x1ca>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a45      	ldr	r2, [pc, #276]	; (80051e0 <HAL_GPIO_Init+0x2bc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00d      	beq.n	80050ea <HAL_GPIO_Init+0x1c6>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a44      	ldr	r2, [pc, #272]	; (80051e4 <HAL_GPIO_Init+0x2c0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <HAL_GPIO_Init+0x1c2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a43      	ldr	r2, [pc, #268]	; (80051e8 <HAL_GPIO_Init+0x2c4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d101      	bne.n	80050e2 <HAL_GPIO_Init+0x1be>
 80050de:	2303      	movs	r3, #3
 80050e0:	e006      	b.n	80050f0 <HAL_GPIO_Init+0x1cc>
 80050e2:	2305      	movs	r3, #5
 80050e4:	e004      	b.n	80050f0 <HAL_GPIO_Init+0x1cc>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e002      	b.n	80050f0 <HAL_GPIO_Init+0x1cc>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <HAL_GPIO_Init+0x1cc>
 80050ee:	2300      	movs	r3, #0
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	2103      	movs	r1, #3
 80050f4:	400a      	ands	r2, r1
 80050f6:	00d2      	lsls	r2, r2, #3
 80050f8:	4093      	lsls	r3, r2
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005100:	4936      	ldr	r1, [pc, #216]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	089b      	lsrs	r3, r3, #2
 8005106:	3318      	adds	r3, #24
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800510e:	4b33      	ldr	r3, [pc, #204]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	43da      	mvns	r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	035b      	lsls	r3, r3, #13
 8005126:	4013      	ands	r3, r2
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005138:	4b28      	ldr	r3, [pc, #160]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43da      	mvns	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	039b      	lsls	r3, r3, #14
 8005150:	4013      	ands	r3, r2
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800515c:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 8005164:	2384      	movs	r3, #132	; 0x84
 8005166:	58d3      	ldr	r3, [r2, r3]
 8005168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	43da      	mvns	r2, r3
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4013      	ands	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	029b      	lsls	r3, r3, #10
 800517c:	4013      	ands	r3, r2
 800517e:	d003      	beq.n	8005188 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005188:	4914      	ldr	r1, [pc, #80]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 800518a:	2284      	movs	r2, #132	; 0x84
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005190:	4a12      	ldr	r2, [pc, #72]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	58d3      	ldr	r3, [r2, r3]
 8005196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	43da      	mvns	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4013      	ands	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	025b      	lsls	r3, r3, #9
 80051aa:	4013      	ands	r3, r2
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051b6:	4909      	ldr	r1, [pc, #36]	; (80051dc <HAL_GPIO_Init+0x2b8>)
 80051b8:	2280      	movs	r2, #128	; 0x80
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	3301      	adds	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	40da      	lsrs	r2, r3
 80051cc:	1e13      	subs	r3, r2, #0
 80051ce:	d000      	beq.n	80051d2 <HAL_GPIO_Init+0x2ae>
 80051d0:	e6b0      	b.n	8004f34 <HAL_GPIO_Init+0x10>
  }
}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b006      	add	sp, #24
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40021800 	.word	0x40021800
 80051e0:	50000400 	.word	0x50000400
 80051e4:	50000800 	.word	0x50000800
 80051e8:	50000c00 	.word	0x50000c00

080051ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	000a      	movs	r2, r1
 80051f6:	1cbb      	adds	r3, r7, #2
 80051f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	1cba      	adds	r2, r7, #2
 8005200:	8812      	ldrh	r2, [r2, #0]
 8005202:	4013      	ands	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005206:	230f      	movs	r3, #15
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e003      	b.n	8005218 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005210:	230f      	movs	r3, #15
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	2200      	movs	r2, #0
 8005216:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005218:	230f      	movs	r3, #15
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	781b      	ldrb	r3, [r3, #0]
}
 800521e:	0018      	movs	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	b004      	add	sp, #16
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	0008      	movs	r0, r1
 8005230:	0011      	movs	r1, r2
 8005232:	1cbb      	adds	r3, r7, #2
 8005234:	1c02      	adds	r2, r0, #0
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	1c7b      	adds	r3, r7, #1
 800523a:	1c0a      	adds	r2, r1, #0
 800523c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800523e:	1c7b      	adds	r3, r7, #1
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d004      	beq.n	8005250 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005246:	1cbb      	adds	r3, r7, #2
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800524e:	e003      	b.n	8005258 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005250:	1cbb      	adds	r3, r7, #2
 8005252:	881a      	ldrh	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	b002      	add	sp, #8
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800526e:	4013      	ands	r3, r2
 8005270:	0019      	movs	r1, r3
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	429a      	cmp	r2, r3
 8005282:	d11f      	bne.n	80052c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	0013      	movs	r3, r2
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	189b      	adds	r3, r3, r2
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	4912      	ldr	r1, [pc, #72]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005292:	0018      	movs	r0, r3
 8005294:	f7fa ff3e 	bl	8000114 <__udivsi3>
 8005298:	0003      	movs	r3, r0
 800529a:	3301      	adds	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800529e:	e008      	b.n	80052b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e001      	b.n	80052b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e009      	b.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052b2:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	401a      	ands	r2, r3
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d0ed      	beq.n	80052a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	0018      	movs	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b004      	add	sp, #16
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	40007000 	.word	0x40007000
 80052d4:	fffff9ff 	.word	0xfffff9ff
 80052d8:	20000000 	.word	0x20000000
 80052dc:	000f4240 	.word	0x000f4240

080052e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e2f3      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2201      	movs	r2, #1
 80052f8:	4013      	ands	r3, r2
 80052fa:	d100      	bne.n	80052fe <HAL_RCC_OscConfig+0x1e>
 80052fc:	e07c      	b.n	80053f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052fe:	4bc3      	ldr	r3, [pc, #780]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2238      	movs	r2, #56	; 0x38
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005308:	4bc0      	ldr	r3, [pc, #768]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2203      	movs	r2, #3
 800530e:	4013      	ands	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b10      	cmp	r3, #16
 8005316:	d102      	bne.n	800531e <HAL_RCC_OscConfig+0x3e>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d002      	beq.n	8005324 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d10b      	bne.n	800533c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005324:	4bb9      	ldr	r3, [pc, #740]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	4013      	ands	r3, r2
 800532e:	d062      	beq.n	80053f6 <HAL_RCC_OscConfig+0x116>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d15e      	bne.n	80053f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e2ce      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	025b      	lsls	r3, r3, #9
 8005344:	429a      	cmp	r2, r3
 8005346:	d107      	bne.n	8005358 <HAL_RCC_OscConfig+0x78>
 8005348:	4bb0      	ldr	r3, [pc, #704]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	4baf      	ldr	r3, [pc, #700]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 800534e:	2180      	movs	r1, #128	; 0x80
 8005350:	0249      	lsls	r1, r1, #9
 8005352:	430a      	orrs	r2, r1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e020      	b.n	800539a <HAL_RCC_OscConfig+0xba>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	23a0      	movs	r3, #160	; 0xa0
 800535e:	02db      	lsls	r3, r3, #11
 8005360:	429a      	cmp	r2, r3
 8005362:	d10e      	bne.n	8005382 <HAL_RCC_OscConfig+0xa2>
 8005364:	4ba9      	ldr	r3, [pc, #676]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4ba8      	ldr	r3, [pc, #672]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 800536a:	2180      	movs	r1, #128	; 0x80
 800536c:	02c9      	lsls	r1, r1, #11
 800536e:	430a      	orrs	r2, r1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	4ba6      	ldr	r3, [pc, #664]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4ba5      	ldr	r3, [pc, #660]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005378:	2180      	movs	r1, #128	; 0x80
 800537a:	0249      	lsls	r1, r1, #9
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e00b      	b.n	800539a <HAL_RCC_OscConfig+0xba>
 8005382:	4ba2      	ldr	r3, [pc, #648]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4ba1      	ldr	r3, [pc, #644]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005388:	49a1      	ldr	r1, [pc, #644]	; (8005610 <HAL_RCC_OscConfig+0x330>)
 800538a:	400a      	ands	r2, r1
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	4b9f      	ldr	r3, [pc, #636]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b9e      	ldr	r3, [pc, #632]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005394:	499f      	ldr	r1, [pc, #636]	; (8005614 <HAL_RCC_OscConfig+0x334>)
 8005396:	400a      	ands	r2, r1
 8005398:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d014      	beq.n	80053cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a2:	f7ff fcdd 	bl	8004d60 <HAL_GetTick>
 80053a6:	0003      	movs	r3, r0
 80053a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ac:	f7ff fcd8 	bl	8004d60 <HAL_GetTick>
 80053b0:	0002      	movs	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	; 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e28d      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053be:	4b93      	ldr	r3, [pc, #588]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	029b      	lsls	r3, r3, #10
 80053c6:	4013      	ands	r3, r2
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0xcc>
 80053ca:	e015      	b.n	80053f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7ff fcc8 	bl	8004d60 <HAL_GetTick>
 80053d0:	0003      	movs	r3, r0
 80053d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d6:	f7ff fcc3 	bl	8004d60 <HAL_GetTick>
 80053da:	0002      	movs	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	; 0x64
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e278      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053e8:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	4013      	ands	r3, r2
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0xf6>
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2202      	movs	r2, #2
 80053fe:	4013      	ands	r3, r2
 8005400:	d100      	bne.n	8005404 <HAL_RCC_OscConfig+0x124>
 8005402:	e099      	b.n	8005538 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005404:	4b81      	ldr	r3, [pc, #516]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2238      	movs	r2, #56	; 0x38
 800540a:	4013      	ands	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800540e:	4b7f      	ldr	r3, [pc, #508]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2203      	movs	r2, #3
 8005414:	4013      	ands	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b10      	cmp	r3, #16
 800541c:	d102      	bne.n	8005424 <HAL_RCC_OscConfig+0x144>
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d002      	beq.n	800542a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d135      	bne.n	8005496 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800542a:	4b78      	ldr	r3, [pc, #480]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4013      	ands	r3, r2
 8005434:	d005      	beq.n	8005442 <HAL_RCC_OscConfig+0x162>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e24b      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b72      	ldr	r3, [pc, #456]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4a74      	ldr	r2, [pc, #464]	; (8005618 <HAL_RCC_OscConfig+0x338>)
 8005448:	4013      	ands	r3, r2
 800544a:	0019      	movs	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	021a      	lsls	r2, r3, #8
 8005452:	4b6e      	ldr	r3, [pc, #440]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d112      	bne.n	8005484 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800545e:	4b6b      	ldr	r3, [pc, #428]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a6e      	ldr	r2, [pc, #440]	; (800561c <HAL_RCC_OscConfig+0x33c>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	4b67      	ldr	r3, [pc, #412]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 800546e:	430a      	orrs	r2, r1
 8005470:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005472:	4b66      	ldr	r3, [pc, #408]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	0adb      	lsrs	r3, r3, #11
 8005478:	2207      	movs	r2, #7
 800547a:	4013      	ands	r3, r2
 800547c:	4a68      	ldr	r2, [pc, #416]	; (8005620 <HAL_RCC_OscConfig+0x340>)
 800547e:	40da      	lsrs	r2, r3
 8005480:	4b68      	ldr	r3, [pc, #416]	; (8005624 <HAL_RCC_OscConfig+0x344>)
 8005482:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005484:	4b68      	ldr	r3, [pc, #416]	; (8005628 <HAL_RCC_OscConfig+0x348>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	0018      	movs	r0, r3
 800548a:	f7ff fc0d 	bl	8004ca8 <HAL_InitTick>
 800548e:	1e03      	subs	r3, r0, #0
 8005490:	d051      	beq.n	8005536 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e221      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d030      	beq.n	8005500 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800549e:	4b5b      	ldr	r3, [pc, #364]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5e      	ldr	r2, [pc, #376]	; (800561c <HAL_RCC_OscConfig+0x33c>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	0019      	movs	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	4b57      	ldr	r3, [pc, #348]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80054b2:	4b56      	ldr	r3, [pc, #344]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b55      	ldr	r3, [pc, #340]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80054b8:	2180      	movs	r1, #128	; 0x80
 80054ba:	0049      	lsls	r1, r1, #1
 80054bc:	430a      	orrs	r2, r1
 80054be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7ff fc4e 	bl	8004d60 <HAL_GetTick>
 80054c4:	0003      	movs	r3, r0
 80054c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ca:	f7ff fc49 	bl	8004d60 <HAL_GetTick>
 80054ce:	0002      	movs	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e1fe      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054dc:	4b4b      	ldr	r3, [pc, #300]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4013      	ands	r3, r2
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e8:	4b48      	ldr	r3, [pc, #288]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a4a      	ldr	r2, [pc, #296]	; (8005618 <HAL_RCC_OscConfig+0x338>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	4b44      	ldr	r3, [pc, #272]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	e01b      	b.n	8005538 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005500:	4b42      	ldr	r3, [pc, #264]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005506:	4949      	ldr	r1, [pc, #292]	; (800562c <HAL_RCC_OscConfig+0x34c>)
 8005508:	400a      	ands	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7ff fc28 	bl	8004d60 <HAL_GetTick>
 8005510:	0003      	movs	r3, r0
 8005512:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005516:	f7ff fc23 	bl	8004d60 <HAL_GetTick>
 800551a:	0002      	movs	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1d8      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005528:	4b38      	ldr	r3, [pc, #224]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4013      	ands	r3, r2
 8005532:	d1f0      	bne.n	8005516 <HAL_RCC_OscConfig+0x236>
 8005534:	e000      	b.n	8005538 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005536:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	4013      	ands	r3, r2
 8005540:	d047      	beq.n	80055d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005542:	4b32      	ldr	r3, [pc, #200]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2238      	movs	r2, #56	; 0x38
 8005548:	4013      	ands	r3, r2
 800554a:	2b18      	cmp	r3, #24
 800554c:	d10a      	bne.n	8005564 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800554e:	4b2f      	ldr	r3, [pc, #188]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005552:	2202      	movs	r2, #2
 8005554:	4013      	ands	r3, r2
 8005556:	d03c      	beq.n	80055d2 <HAL_RCC_OscConfig+0x2f2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d138      	bne.n	80055d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e1ba      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d019      	beq.n	80055a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 800556e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005570:	4b26      	ldr	r3, [pc, #152]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005572:	2101      	movs	r1, #1
 8005574:	430a      	orrs	r2, r1
 8005576:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7ff fbf2 	bl	8004d60 <HAL_GetTick>
 800557c:	0003      	movs	r3, r0
 800557e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005582:	f7ff fbed 	bl	8004d60 <HAL_GetTick>
 8005586:	0002      	movs	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e1a2      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	2202      	movs	r2, #2
 800559a:	4013      	ands	r3, r2
 800559c:	d0f1      	beq.n	8005582 <HAL_RCC_OscConfig+0x2a2>
 800559e:	e018      	b.n	80055d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80055a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80055a6:	2101      	movs	r1, #1
 80055a8:	438a      	bics	r2, r1
 80055aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7ff fbd8 	bl	8004d60 <HAL_GetTick>
 80055b0:	0003      	movs	r3, r0
 80055b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b6:	f7ff fbd3 	bl	8004d60 <HAL_GetTick>
 80055ba:	0002      	movs	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e188      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80055ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055cc:	2202      	movs	r2, #2
 80055ce:	4013      	ands	r3, r2
 80055d0:	d1f1      	bne.n	80055b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2204      	movs	r2, #4
 80055d8:	4013      	ands	r3, r2
 80055da:	d100      	bne.n	80055de <HAL_RCC_OscConfig+0x2fe>
 80055dc:	e0c6      	b.n	800576c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055de:	231f      	movs	r3, #31
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2238      	movs	r2, #56	; 0x38
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d11e      	bne.n	8005630 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCC_OscConfig+0x32c>)
 80055f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f6:	2202      	movs	r2, #2
 80055f8:	4013      	ands	r3, r2
 80055fa:	d100      	bne.n	80055fe <HAL_RCC_OscConfig+0x31e>
 80055fc:	e0b6      	b.n	800576c <HAL_RCC_OscConfig+0x48c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d000      	beq.n	8005608 <HAL_RCC_OscConfig+0x328>
 8005606:	e0b1      	b.n	800576c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e166      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
 800560c:	40021000 	.word	0x40021000
 8005610:	fffeffff 	.word	0xfffeffff
 8005614:	fffbffff 	.word	0xfffbffff
 8005618:	ffff80ff 	.word	0xffff80ff
 800561c:	ffffc7ff 	.word	0xffffc7ff
 8005620:	00f42400 	.word	0x00f42400
 8005624:	20000000 	.word	0x20000000
 8005628:	20000004 	.word	0x20000004
 800562c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005630:	4bac      	ldr	r3, [pc, #688]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	055b      	lsls	r3, r3, #21
 8005638:	4013      	ands	r3, r2
 800563a:	d101      	bne.n	8005640 <HAL_RCC_OscConfig+0x360>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_RCC_OscConfig+0x362>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d011      	beq.n	800566a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005646:	4ba7      	ldr	r3, [pc, #668]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564a:	4ba6      	ldr	r3, [pc, #664]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	0549      	lsls	r1, r1, #21
 8005650:	430a      	orrs	r2, r1
 8005652:	63da      	str	r2, [r3, #60]	; 0x3c
 8005654:	4ba3      	ldr	r3, [pc, #652]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	055b      	lsls	r3, r3, #21
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005662:	231f      	movs	r3, #31
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800566a:	4b9f      	ldr	r3, [pc, #636]	; (80058e8 <HAL_RCC_OscConfig+0x608>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4013      	ands	r3, r2
 8005674:	d11a      	bne.n	80056ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005676:	4b9c      	ldr	r3, [pc, #624]	; (80058e8 <HAL_RCC_OscConfig+0x608>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b9b      	ldr	r3, [pc, #620]	; (80058e8 <HAL_RCC_OscConfig+0x608>)
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	0049      	lsls	r1, r1, #1
 8005680:	430a      	orrs	r2, r1
 8005682:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005684:	f7ff fb6c 	bl	8004d60 <HAL_GetTick>
 8005688:	0003      	movs	r3, r0
 800568a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568e:	f7ff fb67 	bl	8004d60 <HAL_GetTick>
 8005692:	0002      	movs	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e11c      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a0:	4b91      	ldr	r3, [pc, #580]	; (80058e8 <HAL_RCC_OscConfig+0x608>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4013      	ands	r3, r2
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d106      	bne.n	80056c2 <HAL_RCC_OscConfig+0x3e2>
 80056b4:	4b8b      	ldr	r3, [pc, #556]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056b8:	4b8a      	ldr	r3, [pc, #552]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056ba:	2101      	movs	r1, #1
 80056bc:	430a      	orrs	r2, r1
 80056be:	65da      	str	r2, [r3, #92]	; 0x5c
 80056c0:	e01c      	b.n	80056fc <HAL_RCC_OscConfig+0x41c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b05      	cmp	r3, #5
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x404>
 80056ca:	4b86      	ldr	r3, [pc, #536]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056ce:	4b85      	ldr	r3, [pc, #532]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056d0:	2104      	movs	r1, #4
 80056d2:	430a      	orrs	r2, r1
 80056d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80056d6:	4b83      	ldr	r3, [pc, #524]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056da:	4b82      	ldr	r3, [pc, #520]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056dc:	2101      	movs	r1, #1
 80056de:	430a      	orrs	r2, r1
 80056e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80056e2:	e00b      	b.n	80056fc <HAL_RCC_OscConfig+0x41c>
 80056e4:	4b7f      	ldr	r3, [pc, #508]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056e8:	4b7e      	ldr	r3, [pc, #504]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056ea:	2101      	movs	r1, #1
 80056ec:	438a      	bics	r2, r1
 80056ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80056f0:	4b7c      	ldr	r3, [pc, #496]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056f4:	4b7b      	ldr	r3, [pc, #492]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80056f6:	2104      	movs	r1, #4
 80056f8:	438a      	bics	r2, r1
 80056fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d014      	beq.n	800572e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7ff fb2c 	bl	8004d60 <HAL_GetTick>
 8005708:	0003      	movs	r3, r0
 800570a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800570c:	e009      	b.n	8005722 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7ff fb27 	bl	8004d60 <HAL_GetTick>
 8005712:	0002      	movs	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	4a74      	ldr	r2, [pc, #464]	; (80058ec <HAL_RCC_OscConfig+0x60c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e0db      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005722:	4b70      	ldr	r3, [pc, #448]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	2202      	movs	r2, #2
 8005728:	4013      	ands	r3, r2
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x42e>
 800572c:	e013      	b.n	8005756 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7ff fb17 	bl	8004d60 <HAL_GetTick>
 8005732:	0003      	movs	r3, r0
 8005734:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005736:	e009      	b.n	800574c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005738:	f7ff fb12 	bl	8004d60 <HAL_GetTick>
 800573c:	0002      	movs	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	4a6a      	ldr	r2, [pc, #424]	; (80058ec <HAL_RCC_OscConfig+0x60c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e0c6      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800574c:	4b65      	ldr	r3, [pc, #404]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 800574e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005750:	2202      	movs	r2, #2
 8005752:	4013      	ands	r3, r2
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005756:	231f      	movs	r3, #31
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005760:	4b60      	ldr	r3, [pc, #384]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005764:	4b5f      	ldr	r3, [pc, #380]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005766:	4962      	ldr	r1, [pc, #392]	; (80058f0 <HAL_RCC_OscConfig+0x610>)
 8005768:	400a      	ands	r2, r1
 800576a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d100      	bne.n	8005776 <HAL_RCC_OscConfig+0x496>
 8005774:	e0b0      	b.n	80058d8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005776:	4b5b      	ldr	r3, [pc, #364]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2238      	movs	r2, #56	; 0x38
 800577c:	4013      	ands	r3, r2
 800577e:	2b10      	cmp	r3, #16
 8005780:	d100      	bne.n	8005784 <HAL_RCC_OscConfig+0x4a4>
 8005782:	e078      	b.n	8005876 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d153      	bne.n	8005834 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578c:	4b55      	ldr	r3, [pc, #340]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b54      	ldr	r3, [pc, #336]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005792:	4958      	ldr	r1, [pc, #352]	; (80058f4 <HAL_RCC_OscConfig+0x614>)
 8005794:	400a      	ands	r2, r1
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7ff fae2 	bl	8004d60 <HAL_GetTick>
 800579c:	0003      	movs	r3, r0
 800579e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a2:	f7ff fadd 	bl	8004d60 <HAL_GetTick>
 80057a6:	0002      	movs	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e092      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b4:	4b4b      	ldr	r3, [pc, #300]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	049b      	lsls	r3, r3, #18
 80057bc:	4013      	ands	r3, r2
 80057be:	d1f0      	bne.n	80057a2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057c0:	4b48      	ldr	r3, [pc, #288]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a4c      	ldr	r2, [pc, #304]	; (80058f8 <HAL_RCC_OscConfig+0x618>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	0019      	movs	r1, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1a      	ldr	r2, [r3, #32]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	431a      	orrs	r2, r3
 80057e8:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80057ea:	430a      	orrs	r2, r1
 80057ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ee:	4b3d      	ldr	r3, [pc, #244]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b3c      	ldr	r3, [pc, #240]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80057f4:	2180      	movs	r1, #128	; 0x80
 80057f6:	0449      	lsls	r1, r1, #17
 80057f8:	430a      	orrs	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80057fc:	4b39      	ldr	r3, [pc, #228]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	0549      	lsls	r1, r1, #21
 8005806:	430a      	orrs	r2, r1
 8005808:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580a:	f7ff faa9 	bl	8004d60 <HAL_GetTick>
 800580e:	0003      	movs	r3, r0
 8005810:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005814:	f7ff faa4 	bl	8004d60 <HAL_GetTick>
 8005818:	0002      	movs	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e059      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005826:	4b2f      	ldr	r3, [pc, #188]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	2380      	movs	r3, #128	; 0x80
 800582c:	049b      	lsls	r3, r3, #18
 800582e:	4013      	ands	r3, r2
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x534>
 8005832:	e051      	b.n	80058d8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005834:	4b2b      	ldr	r3, [pc, #172]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b2a      	ldr	r3, [pc, #168]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 800583a:	492e      	ldr	r1, [pc, #184]	; (80058f4 <HAL_RCC_OscConfig+0x614>)
 800583c:	400a      	ands	r2, r1
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7ff fa8e 	bl	8004d60 <HAL_GetTick>
 8005844:	0003      	movs	r3, r0
 8005846:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7ff fa89 	bl	8004d60 <HAL_GetTick>
 800584e:	0002      	movs	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e03e      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585c:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	049b      	lsls	r3, r3, #18
 8005864:	4013      	ands	r3, r2
 8005866:	d1f0      	bne.n	800584a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005868:	4b1e      	ldr	r3, [pc, #120]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 800586e:	4923      	ldr	r1, [pc, #140]	; (80058fc <HAL_RCC_OscConfig+0x61c>)
 8005870:	400a      	ands	r2, r1
 8005872:	60da      	str	r2, [r3, #12]
 8005874:	e030      	b.n	80058d8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e02b      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005882:	4b18      	ldr	r3, [pc, #96]	; (80058e4 <HAL_RCC_OscConfig+0x604>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2203      	movs	r2, #3
 800588c:	401a      	ands	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	429a      	cmp	r2, r3
 8005894:	d11e      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2270      	movs	r2, #112	; 0x70
 800589a:	401a      	ands	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d117      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	23fe      	movs	r3, #254	; 0xfe
 80058a8:	01db      	lsls	r3, r3, #7
 80058aa:	401a      	ands	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10e      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	23f8      	movs	r3, #248	; 0xf8
 80058ba:	039b      	lsls	r3, r3, #14
 80058bc:	401a      	ands	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d106      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	0f5b      	lsrs	r3, r3, #29
 80058ca:	075a      	lsls	r2, r3, #29
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d001      	beq.n	80058d8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b008      	add	sp, #32
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	40021000 	.word	0x40021000
 80058e8:	40007000 	.word	0x40007000
 80058ec:	00001388 	.word	0x00001388
 80058f0:	efffffff 	.word	0xefffffff
 80058f4:	feffffff 	.word	0xfeffffff
 80058f8:	1fc1808c 	.word	0x1fc1808c
 80058fc:	effefffc 	.word	0xeffefffc

08005900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0e9      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005914:	4b76      	ldr	r3, [pc, #472]	; (8005af0 <HAL_RCC_ClockConfig+0x1f0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2207      	movs	r2, #7
 800591a:	4013      	ands	r3, r2
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d91e      	bls.n	8005960 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005922:	4b73      	ldr	r3, [pc, #460]	; (8005af0 <HAL_RCC_ClockConfig+0x1f0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2207      	movs	r2, #7
 8005928:	4393      	bics	r3, r2
 800592a:	0019      	movs	r1, r3
 800592c:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <HAL_RCC_ClockConfig+0x1f0>)
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005934:	f7ff fa14 	bl	8004d60 <HAL_GetTick>
 8005938:	0003      	movs	r3, r0
 800593a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800593c:	e009      	b.n	8005952 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593e:	f7ff fa0f 	bl	8004d60 <HAL_GetTick>
 8005942:	0002      	movs	r2, r0
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	4a6a      	ldr	r2, [pc, #424]	; (8005af4 <HAL_RCC_ClockConfig+0x1f4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e0ca      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005952:	4b67      	ldr	r3, [pc, #412]	; (8005af0 <HAL_RCC_ClockConfig+0x1f0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2207      	movs	r2, #7
 8005958:	4013      	ands	r3, r2
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d1ee      	bne.n	800593e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2202      	movs	r2, #2
 8005966:	4013      	ands	r3, r2
 8005968:	d015      	beq.n	8005996 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2204      	movs	r2, #4
 8005970:	4013      	ands	r3, r2
 8005972:	d006      	beq.n	8005982 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005974:	4b60      	ldr	r3, [pc, #384]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	4b5f      	ldr	r3, [pc, #380]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 800597a:	21e0      	movs	r1, #224	; 0xe0
 800597c:	01c9      	lsls	r1, r1, #7
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005982:	4b5d      	ldr	r3, [pc, #372]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4a5d      	ldr	r2, [pc, #372]	; (8005afc <HAL_RCC_ClockConfig+0x1fc>)
 8005988:	4013      	ands	r3, r2
 800598a:	0019      	movs	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	4b59      	ldr	r3, [pc, #356]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005992:	430a      	orrs	r2, r1
 8005994:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2201      	movs	r2, #1
 800599c:	4013      	ands	r3, r2
 800599e:	d057      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a8:	4b53      	ldr	r3, [pc, #332]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	029b      	lsls	r3, r3, #10
 80059b0:	4013      	ands	r3, r2
 80059b2:	d12b      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e097      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c0:	4b4d      	ldr	r3, [pc, #308]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	2380      	movs	r3, #128	; 0x80
 80059c6:	049b      	lsls	r3, r3, #18
 80059c8:	4013      	ands	r3, r2
 80059ca:	d11f      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e08b      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059d8:	4b47      	ldr	r3, [pc, #284]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4013      	ands	r3, r2
 80059e2:	d113      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e07f      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d106      	bne.n	80059fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059f0:	4b41      	ldr	r3, [pc, #260]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	2202      	movs	r2, #2
 80059f6:	4013      	ands	r3, r2
 80059f8:	d108      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e074      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059fe:	4b3e      	ldr	r3, [pc, #248]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a02:	2202      	movs	r2, #2
 8005a04:	4013      	ands	r3, r2
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e06d      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a0c:	4b3a      	ldr	r3, [pc, #232]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2207      	movs	r2, #7
 8005a12:	4393      	bics	r3, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	4b37      	ldr	r3, [pc, #220]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a20:	f7ff f99e 	bl	8004d60 <HAL_GetTick>
 8005a24:	0003      	movs	r3, r0
 8005a26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a28:	e009      	b.n	8005a3e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2a:	f7ff f999 	bl	8004d60 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	4a2f      	ldr	r2, [pc, #188]	; (8005af4 <HAL_RCC_ClockConfig+0x1f4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e054      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2238      	movs	r2, #56	; 0x38
 8005a44:	401a      	ands	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d1ec      	bne.n	8005a2a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a50:	4b27      	ldr	r3, [pc, #156]	; (8005af0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2207      	movs	r2, #7
 8005a56:	4013      	ands	r3, r2
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d21e      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2207      	movs	r2, #7
 8005a64:	4393      	bics	r3, r2
 8005a66:	0019      	movs	r1, r3
 8005a68:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a70:	f7ff f976 	bl	8004d60 <HAL_GetTick>
 8005a74:	0003      	movs	r3, r0
 8005a76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a78:	e009      	b.n	8005a8e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a7a:	f7ff f971 	bl	8004d60 <HAL_GetTick>
 8005a7e:	0002      	movs	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <HAL_RCC_ClockConfig+0x1f4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e02c      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a8e:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2207      	movs	r2, #7
 8005a94:	4013      	ands	r3, r2
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1ee      	bne.n	8005a7a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d009      	beq.n	8005aba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa6:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <HAL_RCC_ClockConfig+0x200>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	0019      	movs	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005aba:	f000 f829 	bl	8005b10 <HAL_RCC_GetSysClockFreq>
 8005abe:	0001      	movs	r1, r0
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <HAL_RCC_ClockConfig+0x1f8>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	0a1b      	lsrs	r3, r3, #8
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	401a      	ands	r2, r3
 8005aca:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <HAL_RCC_ClockConfig+0x204>)
 8005acc:	0092      	lsls	r2, r2, #2
 8005ace:	58d3      	ldr	r3, [r2, r3]
 8005ad0:	221f      	movs	r2, #31
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	000a      	movs	r2, r1
 8005ad6:	40da      	lsrs	r2, r3
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_ClockConfig+0x208>)
 8005ada:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005adc:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <HAL_RCC_ClockConfig+0x20c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff f8e1 	bl	8004ca8 <HAL_InitTick>
 8005ae6:	0003      	movs	r3, r0
}
 8005ae8:	0018      	movs	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b004      	add	sp, #16
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40022000 	.word	0x40022000
 8005af4:	00001388 	.word	0x00001388
 8005af8:	40021000 	.word	0x40021000
 8005afc:	fffff0ff 	.word	0xfffff0ff
 8005b00:	ffff8fff 	.word	0xffff8fff
 8005b04:	08006df4 	.word	0x08006df4
 8005b08:	20000000 	.word	0x20000000
 8005b0c:	20000004 	.word	0x20000004

08005b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b16:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2238      	movs	r2, #56	; 0x38
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d10f      	bne.n	8005b40 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005b20:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	0adb      	lsrs	r3, r3, #11
 8005b26:	2207      	movs	r2, #7
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	409a      	lsls	r2, r3
 8005b2e:	0013      	movs	r3, r2
 8005b30:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	4835      	ldr	r0, [pc, #212]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b36:	f7fa faed 	bl	8000114 <__udivsi3>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e05d      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b40:	4b31      	ldr	r3, [pc, #196]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2238      	movs	r2, #56	; 0x38
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d102      	bne.n	8005b52 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b4c:	4b30      	ldr	r3, [pc, #192]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e054      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b52:	4b2d      	ldr	r3, [pc, #180]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2238      	movs	r2, #56	; 0x38
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d138      	bne.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b5e:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	2203      	movs	r2, #3
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b68:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	2207      	movs	r2, #7
 8005b70:	4013      	ands	r3, r2
 8005b72:	3301      	adds	r3, #1
 8005b74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d10d      	bne.n	8005b98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4824      	ldr	r0, [pc, #144]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b80:	f7fa fac8 	bl	8000114 <__udivsi3>
 8005b84:	0003      	movs	r3, r0
 8005b86:	0019      	movs	r1, r3
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	227f      	movs	r2, #127	; 0x7f
 8005b90:	4013      	ands	r3, r2
 8005b92:	434b      	muls	r3, r1
 8005b94:	617b      	str	r3, [r7, #20]
        break;
 8005b96:	e00d      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	481c      	ldr	r0, [pc, #112]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b9c:	f7fa faba 	bl	8000114 <__udivsi3>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	227f      	movs	r2, #127	; 0x7f
 8005bac:	4013      	ands	r3, r2
 8005bae:	434b      	muls	r3, r1
 8005bb0:	617b      	str	r3, [r7, #20]
        break;
 8005bb2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	0f5b      	lsrs	r3, r3, #29
 8005bba:	2207      	movs	r2, #7
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	6978      	ldr	r0, [r7, #20]
 8005bc6:	f7fa faa5 	bl	8000114 <__udivsi3>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	e015      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2238      	movs	r2, #56	; 0x38
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d103      	bne.n	8005be4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e00b      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005be4:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2238      	movs	r2, #56	; 0x38
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b18      	cmp	r3, #24
 8005bee:	d103      	bne.n	8005bf8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005bf0:	23fa      	movs	r3, #250	; 0xfa
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	e001      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bfc:	693b      	ldr	r3, [r7, #16]
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b006      	add	sp, #24
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	00f42400 	.word	0x00f42400
 8005c10:	007a1200 	.word	0x007a1200

08005c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e0a8      	b.n	8005d78 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	2382      	movs	r3, #130	; 0x82
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d009      	beq.n	8005c4e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	61da      	str	r2, [r3, #28]
 8005c40:	e005      	b.n	8005c4e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	225d      	movs	r2, #93	; 0x5d
 8005c58:	5c9b      	ldrb	r3, [r3, r2]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d107      	bne.n	8005c70 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	225c      	movs	r2, #92	; 0x5c
 8005c64:	2100      	movs	r1, #0
 8005c66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f7fe fd1c 	bl	80046a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	225d      	movs	r2, #93	; 0x5d
 8005c74:	2102      	movs	r1, #2
 8005c76:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2140      	movs	r1, #64	; 0x40
 8005c84:	438a      	bics	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	23e0      	movs	r3, #224	; 0xe0
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d902      	bls.n	8005c9a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e002      	b.n	8005ca0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	015b      	lsls	r3, r3, #5
 8005c9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	23f0      	movs	r3, #240	; 0xf0
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d008      	beq.n	8005cbe <HAL_SPI_Init+0xaa>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	23e0      	movs	r3, #224	; 0xe0
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	2382      	movs	r3, #130	; 0x82
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6899      	ldr	r1, [r3, #8]
 8005ccc:	2384      	movs	r3, #132	; 0x84
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	400b      	ands	r3, r1
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2102      	movs	r1, #2
 8005cda:	400b      	ands	r3, r1
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	400b      	ands	r3, r1
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6999      	ldr	r1, [r3, #24]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	400b      	ands	r3, r1
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2138      	movs	r1, #56	; 0x38
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	2180      	movs	r1, #128	; 0x80
 8005d04:	400b      	ands	r3, r1
 8005d06:	431a      	orrs	r2, r3
 8005d08:	0011      	movs	r1, r2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	019b      	lsls	r3, r3, #6
 8005d12:	401a      	ands	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	2204      	movs	r2, #4
 8005d24:	401a      	ands	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2110      	movs	r1, #16
 8005d2c:	400b      	ands	r3, r1
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d34:	2108      	movs	r1, #8
 8005d36:	400b      	ands	r3, r1
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68d9      	ldr	r1, [r3, #12]
 8005d3e:	23f0      	movs	r3, #240	; 0xf0
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	400b      	ands	r3, r1
 8005d44:	431a      	orrs	r2, r3
 8005d46:	0011      	movs	r1, r2
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	2380      	movs	r3, #128	; 0x80
 8005d4c:	015b      	lsls	r3, r3, #5
 8005d4e:	401a      	ands	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4907      	ldr	r1, [pc, #28]	; (8005d80 <HAL_SPI_Init+0x16c>)
 8005d64:	400a      	ands	r2, r1
 8005d66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	225d      	movs	r2, #93	; 0x5d
 8005d72:	2101      	movs	r1, #1
 8005d74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	0018      	movs	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b004      	add	sp, #16
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	fffff7ff 	.word	0xfffff7ff

08005d84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	1dbb      	adds	r3, r7, #6
 8005d92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d94:	231f      	movs	r3, #31
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	225c      	movs	r2, #92	; 0x5c
 8005da0:	5c9b      	ldrb	r3, [r3, r2]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_SPI_Transmit+0x26>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e140      	b.n	800602c <HAL_SPI_Transmit+0x2a8>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	225c      	movs	r2, #92	; 0x5c
 8005dae:	2101      	movs	r1, #1
 8005db0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db2:	f7fe ffd5 	bl	8004d60 <HAL_GetTick>
 8005db6:	0003      	movs	r3, r0
 8005db8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005dba:	2316      	movs	r3, #22
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	1dba      	adds	r2, r7, #6
 8005dc0:	8812      	ldrh	r2, [r2, #0]
 8005dc2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	225d      	movs	r2, #93	; 0x5d
 8005dc8:	5c9b      	ldrb	r3, [r3, r2]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d004      	beq.n	8005dda <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005dd0:	231f      	movs	r3, #31
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005dd8:	e11d      	b.n	8006016 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_SPI_Transmit+0x64>
 8005de0:	1dbb      	adds	r3, r7, #6
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005de8:	231f      	movs	r3, #31
 8005dea:	18fb      	adds	r3, r7, r3
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]
    goto error;
 8005df0:	e111      	b.n	8006016 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	225d      	movs	r2, #93	; 0x5d
 8005df6:	2103      	movs	r1, #3
 8005df8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1dba      	adds	r2, r7, #6
 8005e0a:	8812      	ldrh	r2, [r2, #0]
 8005e0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1dba      	adds	r2, r7, #6
 8005e12:	8812      	ldrh	r2, [r2, #0]
 8005e14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2244      	movs	r2, #68	; 0x44
 8005e20:	2100      	movs	r1, #0
 8005e22:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2246      	movs	r2, #70	; 0x46
 8005e28:	2100      	movs	r1, #0
 8005e2a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d110      	bne.n	8005e66 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2140      	movs	r1, #64	; 0x40
 8005e50:	438a      	bics	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2180      	movs	r1, #128	; 0x80
 8005e60:	01c9      	lsls	r1, r1, #7
 8005e62:	430a      	orrs	r2, r1
 8005e64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2240      	movs	r2, #64	; 0x40
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d007      	beq.n	8005e84 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2140      	movs	r1, #64	; 0x40
 8005e80:	430a      	orrs	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	23e0      	movs	r3, #224	; 0xe0
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d94e      	bls.n	8005f2e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <HAL_SPI_Transmit+0x11e>
 8005e98:	2316      	movs	r3, #22
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d13f      	bne.n	8005f22 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	881a      	ldrh	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	1c9a      	adds	r2, r3, #2
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ec6:	e02c      	b.n	8005f22 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d112      	bne.n	8005efc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	881a      	ldrh	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	1c9a      	adds	r2, r3, #2
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005efa:	e012      	b.n	8005f22 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005efc:	f7fe ff30 	bl	8004d60 <HAL_GetTick>
 8005f00:	0002      	movs	r2, r0
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d802      	bhi.n	8005f12 <HAL_SPI_Transmit+0x18e>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	d102      	bne.n	8005f18 <HAL_SPI_Transmit+0x194>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005f18:	231f      	movs	r3, #31
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f20:	e079      	b.n	8006016 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1cd      	bne.n	8005ec8 <HAL_SPI_Transmit+0x144>
 8005f2c:	e04f      	b.n	8005fce <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <HAL_SPI_Transmit+0x1bc>
 8005f36:	2316      	movs	r3, #22
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d141      	bne.n	8005fc4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	7812      	ldrb	r2, [r2, #0]
 8005f4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005f66:	e02d      	b.n	8005fc4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d113      	bne.n	8005f9e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	330c      	adds	r3, #12
 8005f80:	7812      	ldrb	r2, [r2, #0]
 8005f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f9c:	e012      	b.n	8005fc4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f9e:	f7fe fedf 	bl	8004d60 <HAL_GetTick>
 8005fa2:	0002      	movs	r2, r0
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d802      	bhi.n	8005fb4 <HAL_SPI_Transmit+0x230>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	d102      	bne.n	8005fba <HAL_SPI_Transmit+0x236>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005fba:	231f      	movs	r3, #31
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	701a      	strb	r2, [r3, #0]
          goto error;
 8005fc2:	e028      	b.n	8006016 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1cc      	bne.n	8005f68 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 f95d 	bl	8006294 <SPI_EndRxTxTransaction>
 8005fda:	1e03      	subs	r3, r0, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fec:	2300      	movs	r3, #0
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800600a:	231f      	movs	r3, #31
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	2201      	movs	r2, #1
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	e000      	b.n	8006016 <HAL_SPI_Transmit+0x292>
  }

error:
 8006014:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	225d      	movs	r2, #93	; 0x5d
 800601a:	2101      	movs	r1, #1
 800601c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	225c      	movs	r2, #92	; 0x5c
 8006022:	2100      	movs	r1, #0
 8006024:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006026:	231f      	movs	r3, #31
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	781b      	ldrb	r3, [r3, #0]
}
 800602c:	0018      	movs	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	b008      	add	sp, #32
 8006032:	bd80      	pop	{r7, pc}

08006034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	1dfb      	adds	r3, r7, #7
 8006042:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006044:	f7fe fe8c 	bl	8004d60 <HAL_GetTick>
 8006048:	0002      	movs	r2, r0
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	18d3      	adds	r3, r2, r3
 8006052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006054:	f7fe fe84 	bl	8004d60 <HAL_GetTick>
 8006058:	0003      	movs	r3, r0
 800605a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800605c:	4b3a      	ldr	r3, [pc, #232]	; (8006148 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	015b      	lsls	r3, r3, #5
 8006062:	0d1b      	lsrs	r3, r3, #20
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	4353      	muls	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606a:	e058      	b.n	800611e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	d055      	beq.n	800611e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006072:	f7fe fe75 	bl	8004d60 <HAL_GetTick>
 8006076:	0002      	movs	r2, r0
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	429a      	cmp	r2, r3
 8006080:	d902      	bls.n	8006088 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d142      	bne.n	800610e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	21e0      	movs	r1, #224	; 0xe0
 8006094:	438a      	bics	r2, r1
 8006096:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	2382      	movs	r3, #130	; 0x82
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d113      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x98>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d005      	beq.n	80060bc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d107      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2140      	movs	r1, #64	; 0x40
 80060c8:	438a      	bics	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	019b      	lsls	r3, r3, #6
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d110      	bne.n	80060fa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	491a      	ldr	r1, [pc, #104]	; (800614c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80060e4:	400a      	ands	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2180      	movs	r1, #128	; 0x80
 80060f4:	0189      	lsls	r1, r1, #6
 80060f6:	430a      	orrs	r2, r1
 80060f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	225d      	movs	r2, #93	; 0x5d
 80060fe:	2101      	movs	r1, #1
 8006100:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	225c      	movs	r2, #92	; 0x5c
 8006106:	2100      	movs	r1, #0
 8006108:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e017      	b.n	800613e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	3b01      	subs	r3, #1
 800611c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	4013      	ands	r3, r2
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	425a      	negs	r2, r3
 800612e:	4153      	adcs	r3, r2
 8006130:	b2db      	uxtb	r3, r3
 8006132:	001a      	movs	r2, r3
 8006134:	1dfb      	adds	r3, r7, #7
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d197      	bne.n	800606c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	0018      	movs	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	b008      	add	sp, #32
 8006144:	bd80      	pop	{r7, pc}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	20000000 	.word	0x20000000
 800614c:	ffffdfff 	.word	0xffffdfff

08006150 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800615e:	2317      	movs	r3, #23
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006166:	f7fe fdfb 	bl	8004d60 <HAL_GetTick>
 800616a:	0002      	movs	r2, r0
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	18d3      	adds	r3, r2, r3
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006176:	f7fe fdf3 	bl	8004d60 <HAL_GetTick>
 800617a:	0003      	movs	r3, r0
 800617c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006186:	4b41      	ldr	r3, [pc, #260]	; (800628c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	0013      	movs	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	189b      	adds	r3, r3, r2
 8006190:	00da      	lsls	r2, r3, #3
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	0d1b      	lsrs	r3, r3, #20
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	4353      	muls	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800619c:	e068      	b.n	8006270 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	23c0      	movs	r3, #192	; 0xc0
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d10a      	bne.n	80061be <SPI_WaitFifoStateUntilTimeout+0x6e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	2117      	movs	r1, #23
 80061b6:	187b      	adds	r3, r7, r1
 80061b8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061ba:	187b      	adds	r3, r7, r1
 80061bc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	3301      	adds	r3, #1
 80061c2:	d055      	beq.n	8006270 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061c4:	f7fe fdcc 	bl	8004d60 <HAL_GetTick>
 80061c8:	0002      	movs	r2, r0
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d902      	bls.n	80061da <SPI_WaitFifoStateUntilTimeout+0x8a>
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d142      	bne.n	8006260 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	21e0      	movs	r1, #224	; 0xe0
 80061e6:	438a      	bics	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	2382      	movs	r3, #130	; 0x82
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d113      	bne.n	800621e <SPI_WaitFifoStateUntilTimeout+0xce>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	429a      	cmp	r2, r3
 8006200:	d005      	beq.n	800620e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	2380      	movs	r3, #128	; 0x80
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	429a      	cmp	r2, r3
 800620c:	d107      	bne.n	800621e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	438a      	bics	r2, r1
 800621c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	019b      	lsls	r3, r3, #6
 8006226:	429a      	cmp	r2, r3
 8006228:	d110      	bne.n	800624c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4916      	ldr	r1, [pc, #88]	; (8006290 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006236:	400a      	ands	r2, r1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2180      	movs	r1, #128	; 0x80
 8006246:	0189      	lsls	r1, r1, #6
 8006248:	430a      	orrs	r2, r1
 800624a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	225d      	movs	r2, #93	; 0x5d
 8006250:	2101      	movs	r1, #1
 8006252:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	225c      	movs	r2, #92	; 0x5c
 8006258:	2100      	movs	r1, #0
 800625a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e010      	b.n	8006282 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	3b01      	subs	r3, #1
 800626e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d18e      	bne.n	800619e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b00a      	add	sp, #40	; 0x28
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	20000000 	.word	0x20000000
 8006290:	ffffdfff 	.word	0xffffdfff

08006294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	23c0      	movs	r3, #192	; 0xc0
 80062a4:	0159      	lsls	r1, r3, #5
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	0013      	movs	r3, r2
 80062ae:	2200      	movs	r2, #0
 80062b0:	f7ff ff4e 	bl	8006150 <SPI_WaitFifoStateUntilTimeout>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d007      	beq.n	80062c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062bc:	2220      	movs	r2, #32
 80062be:	431a      	orrs	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e027      	b.n	8006318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	0013      	movs	r3, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	2180      	movs	r1, #128	; 0x80
 80062d6:	f7ff fead 	bl	8006034 <SPI_WaitFlagStateUntilTimeout>
 80062da:	1e03      	subs	r3, r0, #0
 80062dc:	d007      	beq.n	80062ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e2:	2220      	movs	r2, #32
 80062e4:	431a      	orrs	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e014      	b.n	8006318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	23c0      	movs	r3, #192	; 0xc0
 80062f2:	00d9      	lsls	r1, r3, #3
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	0013      	movs	r3, r2
 80062fc:	2200      	movs	r2, #0
 80062fe:	f7ff ff27 	bl	8006150 <SPI_WaitFifoStateUntilTimeout>
 8006302:	1e03      	subs	r3, r0, #0
 8006304:	d007      	beq.n	8006316 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630a:	2220      	movs	r2, #32
 800630c:	431a      	orrs	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e000      	b.n	8006318 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b004      	add	sp, #16
 800631e:	bd80      	pop	{r7, pc}

08006320 <__errno>:
 8006320:	4b01      	ldr	r3, [pc, #4]	; (8006328 <__errno+0x8>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	4770      	bx	lr
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	2000000c 	.word	0x2000000c

0800632c <__libc_init_array>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	2600      	movs	r6, #0
 8006330:	4d0c      	ldr	r5, [pc, #48]	; (8006364 <__libc_init_array+0x38>)
 8006332:	4c0d      	ldr	r4, [pc, #52]	; (8006368 <__libc_init_array+0x3c>)
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	42a6      	cmp	r6, r4
 800633a:	d109      	bne.n	8006350 <__libc_init_array+0x24>
 800633c:	2600      	movs	r6, #0
 800633e:	f000 fc8b 	bl	8006c58 <_init>
 8006342:	4d0a      	ldr	r5, [pc, #40]	; (800636c <__libc_init_array+0x40>)
 8006344:	4c0a      	ldr	r4, [pc, #40]	; (8006370 <__libc_init_array+0x44>)
 8006346:	1b64      	subs	r4, r4, r5
 8006348:	10a4      	asrs	r4, r4, #2
 800634a:	42a6      	cmp	r6, r4
 800634c:	d105      	bne.n	800635a <__libc_init_array+0x2e>
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	00b3      	lsls	r3, r6, #2
 8006352:	58eb      	ldr	r3, [r5, r3]
 8006354:	4798      	blx	r3
 8006356:	3601      	adds	r6, #1
 8006358:	e7ee      	b.n	8006338 <__libc_init_array+0xc>
 800635a:	00b3      	lsls	r3, r6, #2
 800635c:	58eb      	ldr	r3, [r5, r3]
 800635e:	4798      	blx	r3
 8006360:	3601      	adds	r6, #1
 8006362:	e7f2      	b.n	800634a <__libc_init_array+0x1e>
 8006364:	08006e70 	.word	0x08006e70
 8006368:	08006e70 	.word	0x08006e70
 800636c:	08006e70 	.word	0x08006e70
 8006370:	08006e74 	.word	0x08006e74

08006374 <memset>:
 8006374:	0003      	movs	r3, r0
 8006376:	1882      	adds	r2, r0, r2
 8006378:	4293      	cmp	r3, r2
 800637a:	d100      	bne.n	800637e <memset+0xa>
 800637c:	4770      	bx	lr
 800637e:	7019      	strb	r1, [r3, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	e7f9      	b.n	8006378 <memset+0x4>

08006384 <siprintf>:
 8006384:	b40e      	push	{r1, r2, r3}
 8006386:	b500      	push	{lr}
 8006388:	490b      	ldr	r1, [pc, #44]	; (80063b8 <siprintf+0x34>)
 800638a:	b09c      	sub	sp, #112	; 0x70
 800638c:	ab1d      	add	r3, sp, #116	; 0x74
 800638e:	9002      	str	r0, [sp, #8]
 8006390:	9006      	str	r0, [sp, #24]
 8006392:	9107      	str	r1, [sp, #28]
 8006394:	9104      	str	r1, [sp, #16]
 8006396:	4809      	ldr	r0, [pc, #36]	; (80063bc <siprintf+0x38>)
 8006398:	4909      	ldr	r1, [pc, #36]	; (80063c0 <siprintf+0x3c>)
 800639a:	cb04      	ldmia	r3!, {r2}
 800639c:	9105      	str	r1, [sp, #20]
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	a902      	add	r1, sp, #8
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	f000 f870 	bl	8006488 <_svfiprintf_r>
 80063a8:	2300      	movs	r3, #0
 80063aa:	9a02      	ldr	r2, [sp, #8]
 80063ac:	7013      	strb	r3, [r2, #0]
 80063ae:	b01c      	add	sp, #112	; 0x70
 80063b0:	bc08      	pop	{r3}
 80063b2:	b003      	add	sp, #12
 80063b4:	4718      	bx	r3
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	7fffffff 	.word	0x7fffffff
 80063bc:	2000000c 	.word	0x2000000c
 80063c0:	ffff0208 	.word	0xffff0208

080063c4 <__ssputs_r>:
 80063c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c6:	688e      	ldr	r6, [r1, #8]
 80063c8:	b085      	sub	sp, #20
 80063ca:	0007      	movs	r7, r0
 80063cc:	000c      	movs	r4, r1
 80063ce:	9203      	str	r2, [sp, #12]
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	429e      	cmp	r6, r3
 80063d4:	d83c      	bhi.n	8006450 <__ssputs_r+0x8c>
 80063d6:	2390      	movs	r3, #144	; 0x90
 80063d8:	898a      	ldrh	r2, [r1, #12]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	421a      	tst	r2, r3
 80063de:	d034      	beq.n	800644a <__ssputs_r+0x86>
 80063e0:	6909      	ldr	r1, [r1, #16]
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	6960      	ldr	r0, [r4, #20]
 80063e6:	1a5b      	subs	r3, r3, r1
 80063e8:	9302      	str	r3, [sp, #8]
 80063ea:	2303      	movs	r3, #3
 80063ec:	4343      	muls	r3, r0
 80063ee:	0fdd      	lsrs	r5, r3, #31
 80063f0:	18ed      	adds	r5, r5, r3
 80063f2:	9b01      	ldr	r3, [sp, #4]
 80063f4:	9802      	ldr	r0, [sp, #8]
 80063f6:	3301      	adds	r3, #1
 80063f8:	181b      	adds	r3, r3, r0
 80063fa:	106d      	asrs	r5, r5, #1
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	d900      	bls.n	8006402 <__ssputs_r+0x3e>
 8006400:	001d      	movs	r5, r3
 8006402:	0553      	lsls	r3, r2, #21
 8006404:	d532      	bpl.n	800646c <__ssputs_r+0xa8>
 8006406:	0029      	movs	r1, r5
 8006408:	0038      	movs	r0, r7
 800640a:	f000 fb53 	bl	8006ab4 <_malloc_r>
 800640e:	1e06      	subs	r6, r0, #0
 8006410:	d109      	bne.n	8006426 <__ssputs_r+0x62>
 8006412:	230c      	movs	r3, #12
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	2001      	movs	r0, #1
 800641a:	89a2      	ldrh	r2, [r4, #12]
 800641c:	4240      	negs	r0, r0
 800641e:	4313      	orrs	r3, r2
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	b005      	add	sp, #20
 8006424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006426:	9a02      	ldr	r2, [sp, #8]
 8006428:	6921      	ldr	r1, [r4, #16]
 800642a:	f000 faba 	bl	80069a2 <memcpy>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	4a14      	ldr	r2, [pc, #80]	; (8006484 <__ssputs_r+0xc0>)
 8006432:	401a      	ands	r2, r3
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	4313      	orrs	r3, r2
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	9b02      	ldr	r3, [sp, #8]
 800643c:	6126      	str	r6, [r4, #16]
 800643e:	18f6      	adds	r6, r6, r3
 8006440:	6026      	str	r6, [r4, #0]
 8006442:	6165      	str	r5, [r4, #20]
 8006444:	9e01      	ldr	r6, [sp, #4]
 8006446:	1aed      	subs	r5, r5, r3
 8006448:	60a5      	str	r5, [r4, #8]
 800644a:	9b01      	ldr	r3, [sp, #4]
 800644c:	429e      	cmp	r6, r3
 800644e:	d900      	bls.n	8006452 <__ssputs_r+0x8e>
 8006450:	9e01      	ldr	r6, [sp, #4]
 8006452:	0032      	movs	r2, r6
 8006454:	9903      	ldr	r1, [sp, #12]
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	f000 faac 	bl	80069b4 <memmove>
 800645c:	68a3      	ldr	r3, [r4, #8]
 800645e:	2000      	movs	r0, #0
 8006460:	1b9b      	subs	r3, r3, r6
 8006462:	60a3      	str	r3, [r4, #8]
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	199e      	adds	r6, r3, r6
 8006468:	6026      	str	r6, [r4, #0]
 800646a:	e7da      	b.n	8006422 <__ssputs_r+0x5e>
 800646c:	002a      	movs	r2, r5
 800646e:	0038      	movs	r0, r7
 8006470:	f000 fb96 	bl	8006ba0 <_realloc_r>
 8006474:	1e06      	subs	r6, r0, #0
 8006476:	d1e0      	bne.n	800643a <__ssputs_r+0x76>
 8006478:	0038      	movs	r0, r7
 800647a:	6921      	ldr	r1, [r4, #16]
 800647c:	f000 faae 	bl	80069dc <_free_r>
 8006480:	e7c7      	b.n	8006412 <__ssputs_r+0x4e>
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	fffffb7f 	.word	0xfffffb7f

08006488 <_svfiprintf_r>:
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	b0a1      	sub	sp, #132	; 0x84
 800648c:	9003      	str	r0, [sp, #12]
 800648e:	001d      	movs	r5, r3
 8006490:	898b      	ldrh	r3, [r1, #12]
 8006492:	000f      	movs	r7, r1
 8006494:	0016      	movs	r6, r2
 8006496:	061b      	lsls	r3, r3, #24
 8006498:	d511      	bpl.n	80064be <_svfiprintf_r+0x36>
 800649a:	690b      	ldr	r3, [r1, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10e      	bne.n	80064be <_svfiprintf_r+0x36>
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	f000 fb07 	bl	8006ab4 <_malloc_r>
 80064a6:	6038      	str	r0, [r7, #0]
 80064a8:	6138      	str	r0, [r7, #16]
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d105      	bne.n	80064ba <_svfiprintf_r+0x32>
 80064ae:	230c      	movs	r3, #12
 80064b0:	9a03      	ldr	r2, [sp, #12]
 80064b2:	3801      	subs	r0, #1
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	b021      	add	sp, #132	; 0x84
 80064b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	2300      	movs	r3, #0
 80064c0:	ac08      	add	r4, sp, #32
 80064c2:	6163      	str	r3, [r4, #20]
 80064c4:	3320      	adds	r3, #32
 80064c6:	7663      	strb	r3, [r4, #25]
 80064c8:	3310      	adds	r3, #16
 80064ca:	76a3      	strb	r3, [r4, #26]
 80064cc:	9507      	str	r5, [sp, #28]
 80064ce:	0035      	movs	r5, r6
 80064d0:	782b      	ldrb	r3, [r5, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <_svfiprintf_r+0x52>
 80064d6:	2b25      	cmp	r3, #37	; 0x25
 80064d8:	d147      	bne.n	800656a <_svfiprintf_r+0xe2>
 80064da:	1bab      	subs	r3, r5, r6
 80064dc:	9305      	str	r3, [sp, #20]
 80064de:	42b5      	cmp	r5, r6
 80064e0:	d00c      	beq.n	80064fc <_svfiprintf_r+0x74>
 80064e2:	0032      	movs	r2, r6
 80064e4:	0039      	movs	r1, r7
 80064e6:	9803      	ldr	r0, [sp, #12]
 80064e8:	f7ff ff6c 	bl	80063c4 <__ssputs_r>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d100      	bne.n	80064f2 <_svfiprintf_r+0x6a>
 80064f0:	e0ae      	b.n	8006650 <_svfiprintf_r+0x1c8>
 80064f2:	6962      	ldr	r2, [r4, #20]
 80064f4:	9b05      	ldr	r3, [sp, #20]
 80064f6:	4694      	mov	ip, r2
 80064f8:	4463      	add	r3, ip
 80064fa:	6163      	str	r3, [r4, #20]
 80064fc:	782b      	ldrb	r3, [r5, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d100      	bne.n	8006504 <_svfiprintf_r+0x7c>
 8006502:	e0a5      	b.n	8006650 <_svfiprintf_r+0x1c8>
 8006504:	2201      	movs	r2, #1
 8006506:	2300      	movs	r3, #0
 8006508:	4252      	negs	r2, r2
 800650a:	6062      	str	r2, [r4, #4]
 800650c:	a904      	add	r1, sp, #16
 800650e:	3254      	adds	r2, #84	; 0x54
 8006510:	1852      	adds	r2, r2, r1
 8006512:	1c6e      	adds	r6, r5, #1
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	60e3      	str	r3, [r4, #12]
 8006518:	60a3      	str	r3, [r4, #8]
 800651a:	7013      	strb	r3, [r2, #0]
 800651c:	65a3      	str	r3, [r4, #88]	; 0x58
 800651e:	2205      	movs	r2, #5
 8006520:	7831      	ldrb	r1, [r6, #0]
 8006522:	4854      	ldr	r0, [pc, #336]	; (8006674 <_svfiprintf_r+0x1ec>)
 8006524:	f000 fa32 	bl	800698c <memchr>
 8006528:	1c75      	adds	r5, r6, #1
 800652a:	2800      	cmp	r0, #0
 800652c:	d11f      	bne.n	800656e <_svfiprintf_r+0xe6>
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	06d3      	lsls	r3, r2, #27
 8006532:	d504      	bpl.n	800653e <_svfiprintf_r+0xb6>
 8006534:	2353      	movs	r3, #83	; 0x53
 8006536:	a904      	add	r1, sp, #16
 8006538:	185b      	adds	r3, r3, r1
 800653a:	2120      	movs	r1, #32
 800653c:	7019      	strb	r1, [r3, #0]
 800653e:	0713      	lsls	r3, r2, #28
 8006540:	d504      	bpl.n	800654c <_svfiprintf_r+0xc4>
 8006542:	2353      	movs	r3, #83	; 0x53
 8006544:	a904      	add	r1, sp, #16
 8006546:	185b      	adds	r3, r3, r1
 8006548:	212b      	movs	r1, #43	; 0x2b
 800654a:	7019      	strb	r1, [r3, #0]
 800654c:	7833      	ldrb	r3, [r6, #0]
 800654e:	2b2a      	cmp	r3, #42	; 0x2a
 8006550:	d016      	beq.n	8006580 <_svfiprintf_r+0xf8>
 8006552:	0035      	movs	r5, r6
 8006554:	2100      	movs	r1, #0
 8006556:	200a      	movs	r0, #10
 8006558:	68e3      	ldr	r3, [r4, #12]
 800655a:	782a      	ldrb	r2, [r5, #0]
 800655c:	1c6e      	adds	r6, r5, #1
 800655e:	3a30      	subs	r2, #48	; 0x30
 8006560:	2a09      	cmp	r2, #9
 8006562:	d94e      	bls.n	8006602 <_svfiprintf_r+0x17a>
 8006564:	2900      	cmp	r1, #0
 8006566:	d111      	bne.n	800658c <_svfiprintf_r+0x104>
 8006568:	e017      	b.n	800659a <_svfiprintf_r+0x112>
 800656a:	3501      	adds	r5, #1
 800656c:	e7b0      	b.n	80064d0 <_svfiprintf_r+0x48>
 800656e:	4b41      	ldr	r3, [pc, #260]	; (8006674 <_svfiprintf_r+0x1ec>)
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	1ac0      	subs	r0, r0, r3
 8006574:	2301      	movs	r3, #1
 8006576:	4083      	lsls	r3, r0
 8006578:	4313      	orrs	r3, r2
 800657a:	002e      	movs	r6, r5
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	e7ce      	b.n	800651e <_svfiprintf_r+0x96>
 8006580:	9b07      	ldr	r3, [sp, #28]
 8006582:	1d19      	adds	r1, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	9107      	str	r1, [sp, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	db01      	blt.n	8006590 <_svfiprintf_r+0x108>
 800658c:	930b      	str	r3, [sp, #44]	; 0x2c
 800658e:	e004      	b.n	800659a <_svfiprintf_r+0x112>
 8006590:	425b      	negs	r3, r3
 8006592:	60e3      	str	r3, [r4, #12]
 8006594:	2302      	movs	r3, #2
 8006596:	4313      	orrs	r3, r2
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	782b      	ldrb	r3, [r5, #0]
 800659c:	2b2e      	cmp	r3, #46	; 0x2e
 800659e:	d10a      	bne.n	80065b6 <_svfiprintf_r+0x12e>
 80065a0:	786b      	ldrb	r3, [r5, #1]
 80065a2:	2b2a      	cmp	r3, #42	; 0x2a
 80065a4:	d135      	bne.n	8006612 <_svfiprintf_r+0x18a>
 80065a6:	9b07      	ldr	r3, [sp, #28]
 80065a8:	3502      	adds	r5, #2
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	9207      	str	r2, [sp, #28]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	db2b      	blt.n	800660c <_svfiprintf_r+0x184>
 80065b4:	9309      	str	r3, [sp, #36]	; 0x24
 80065b6:	4e30      	ldr	r6, [pc, #192]	; (8006678 <_svfiprintf_r+0x1f0>)
 80065b8:	2203      	movs	r2, #3
 80065ba:	0030      	movs	r0, r6
 80065bc:	7829      	ldrb	r1, [r5, #0]
 80065be:	f000 f9e5 	bl	800698c <memchr>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d006      	beq.n	80065d4 <_svfiprintf_r+0x14c>
 80065c6:	2340      	movs	r3, #64	; 0x40
 80065c8:	1b80      	subs	r0, r0, r6
 80065ca:	4083      	lsls	r3, r0
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	3501      	adds	r5, #1
 80065d0:	4313      	orrs	r3, r2
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	7829      	ldrb	r1, [r5, #0]
 80065d6:	2206      	movs	r2, #6
 80065d8:	4828      	ldr	r0, [pc, #160]	; (800667c <_svfiprintf_r+0x1f4>)
 80065da:	1c6e      	adds	r6, r5, #1
 80065dc:	7621      	strb	r1, [r4, #24]
 80065de:	f000 f9d5 	bl	800698c <memchr>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d03c      	beq.n	8006660 <_svfiprintf_r+0x1d8>
 80065e6:	4b26      	ldr	r3, [pc, #152]	; (8006680 <_svfiprintf_r+0x1f8>)
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d125      	bne.n	8006638 <_svfiprintf_r+0x1b0>
 80065ec:	2207      	movs	r2, #7
 80065ee:	9b07      	ldr	r3, [sp, #28]
 80065f0:	3307      	adds	r3, #7
 80065f2:	4393      	bics	r3, r2
 80065f4:	3308      	adds	r3, #8
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	6963      	ldr	r3, [r4, #20]
 80065fa:	9a04      	ldr	r2, [sp, #16]
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	6163      	str	r3, [r4, #20]
 8006600:	e765      	b.n	80064ce <_svfiprintf_r+0x46>
 8006602:	4343      	muls	r3, r0
 8006604:	0035      	movs	r5, r6
 8006606:	2101      	movs	r1, #1
 8006608:	189b      	adds	r3, r3, r2
 800660a:	e7a6      	b.n	800655a <_svfiprintf_r+0xd2>
 800660c:	2301      	movs	r3, #1
 800660e:	425b      	negs	r3, r3
 8006610:	e7d0      	b.n	80065b4 <_svfiprintf_r+0x12c>
 8006612:	2300      	movs	r3, #0
 8006614:	200a      	movs	r0, #10
 8006616:	001a      	movs	r2, r3
 8006618:	3501      	adds	r5, #1
 800661a:	6063      	str	r3, [r4, #4]
 800661c:	7829      	ldrb	r1, [r5, #0]
 800661e:	1c6e      	adds	r6, r5, #1
 8006620:	3930      	subs	r1, #48	; 0x30
 8006622:	2909      	cmp	r1, #9
 8006624:	d903      	bls.n	800662e <_svfiprintf_r+0x1a6>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0c5      	beq.n	80065b6 <_svfiprintf_r+0x12e>
 800662a:	9209      	str	r2, [sp, #36]	; 0x24
 800662c:	e7c3      	b.n	80065b6 <_svfiprintf_r+0x12e>
 800662e:	4342      	muls	r2, r0
 8006630:	0035      	movs	r5, r6
 8006632:	2301      	movs	r3, #1
 8006634:	1852      	adds	r2, r2, r1
 8006636:	e7f1      	b.n	800661c <_svfiprintf_r+0x194>
 8006638:	ab07      	add	r3, sp, #28
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	003a      	movs	r2, r7
 800663e:	0021      	movs	r1, r4
 8006640:	4b10      	ldr	r3, [pc, #64]	; (8006684 <_svfiprintf_r+0x1fc>)
 8006642:	9803      	ldr	r0, [sp, #12]
 8006644:	e000      	b.n	8006648 <_svfiprintf_r+0x1c0>
 8006646:	bf00      	nop
 8006648:	9004      	str	r0, [sp, #16]
 800664a:	9b04      	ldr	r3, [sp, #16]
 800664c:	3301      	adds	r3, #1
 800664e:	d1d3      	bne.n	80065f8 <_svfiprintf_r+0x170>
 8006650:	89bb      	ldrh	r3, [r7, #12]
 8006652:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006654:	065b      	lsls	r3, r3, #25
 8006656:	d400      	bmi.n	800665a <_svfiprintf_r+0x1d2>
 8006658:	e72d      	b.n	80064b6 <_svfiprintf_r+0x2e>
 800665a:	2001      	movs	r0, #1
 800665c:	4240      	negs	r0, r0
 800665e:	e72a      	b.n	80064b6 <_svfiprintf_r+0x2e>
 8006660:	ab07      	add	r3, sp, #28
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	003a      	movs	r2, r7
 8006666:	0021      	movs	r1, r4
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <_svfiprintf_r+0x1fc>)
 800666a:	9803      	ldr	r0, [sp, #12]
 800666c:	f000 f87c 	bl	8006768 <_printf_i>
 8006670:	e7ea      	b.n	8006648 <_svfiprintf_r+0x1c0>
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	08006e34 	.word	0x08006e34
 8006678:	08006e3a 	.word	0x08006e3a
 800667c:	08006e3e 	.word	0x08006e3e
 8006680:	00000000 	.word	0x00000000
 8006684:	080063c5 	.word	0x080063c5

08006688 <_printf_common>:
 8006688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800668a:	0015      	movs	r5, r2
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	688a      	ldr	r2, [r1, #8]
 8006690:	690b      	ldr	r3, [r1, #16]
 8006692:	000c      	movs	r4, r1
 8006694:	9000      	str	r0, [sp, #0]
 8006696:	4293      	cmp	r3, r2
 8006698:	da00      	bge.n	800669c <_printf_common+0x14>
 800669a:	0013      	movs	r3, r2
 800669c:	0022      	movs	r2, r4
 800669e:	602b      	str	r3, [r5, #0]
 80066a0:	3243      	adds	r2, #67	; 0x43
 80066a2:	7812      	ldrb	r2, [r2, #0]
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	d001      	beq.n	80066ac <_printf_common+0x24>
 80066a8:	3301      	adds	r3, #1
 80066aa:	602b      	str	r3, [r5, #0]
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	069b      	lsls	r3, r3, #26
 80066b0:	d502      	bpl.n	80066b8 <_printf_common+0x30>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	3302      	adds	r3, #2
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	2306      	movs	r3, #6
 80066bc:	0017      	movs	r7, r2
 80066be:	401f      	ands	r7, r3
 80066c0:	421a      	tst	r2, r3
 80066c2:	d027      	beq.n	8006714 <_printf_common+0x8c>
 80066c4:	0023      	movs	r3, r4
 80066c6:	3343      	adds	r3, #67	; 0x43
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	1e5a      	subs	r2, r3, #1
 80066cc:	4193      	sbcs	r3, r2
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	0692      	lsls	r2, r2, #26
 80066d2:	d430      	bmi.n	8006736 <_printf_common+0xae>
 80066d4:	0022      	movs	r2, r4
 80066d6:	9901      	ldr	r1, [sp, #4]
 80066d8:	9800      	ldr	r0, [sp, #0]
 80066da:	9e08      	ldr	r6, [sp, #32]
 80066dc:	3243      	adds	r2, #67	; 0x43
 80066de:	47b0      	blx	r6
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d025      	beq.n	8006730 <_printf_common+0xa8>
 80066e4:	2306      	movs	r3, #6
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	682a      	ldr	r2, [r5, #0]
 80066ea:	68e1      	ldr	r1, [r4, #12]
 80066ec:	2500      	movs	r5, #0
 80066ee:	4003      	ands	r3, r0
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d103      	bne.n	80066fc <_printf_common+0x74>
 80066f4:	1a8d      	subs	r5, r1, r2
 80066f6:	43eb      	mvns	r3, r5
 80066f8:	17db      	asrs	r3, r3, #31
 80066fa:	401d      	ands	r5, r3
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	6922      	ldr	r2, [r4, #16]
 8006700:	4293      	cmp	r3, r2
 8006702:	dd01      	ble.n	8006708 <_printf_common+0x80>
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	18ed      	adds	r5, r5, r3
 8006708:	2700      	movs	r7, #0
 800670a:	42bd      	cmp	r5, r7
 800670c:	d120      	bne.n	8006750 <_printf_common+0xc8>
 800670e:	2000      	movs	r0, #0
 8006710:	e010      	b.n	8006734 <_printf_common+0xac>
 8006712:	3701      	adds	r7, #1
 8006714:	68e3      	ldr	r3, [r4, #12]
 8006716:	682a      	ldr	r2, [r5, #0]
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	42bb      	cmp	r3, r7
 800671c:	ddd2      	ble.n	80066c4 <_printf_common+0x3c>
 800671e:	0022      	movs	r2, r4
 8006720:	2301      	movs	r3, #1
 8006722:	9901      	ldr	r1, [sp, #4]
 8006724:	9800      	ldr	r0, [sp, #0]
 8006726:	9e08      	ldr	r6, [sp, #32]
 8006728:	3219      	adds	r2, #25
 800672a:	47b0      	blx	r6
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d1f0      	bne.n	8006712 <_printf_common+0x8a>
 8006730:	2001      	movs	r0, #1
 8006732:	4240      	negs	r0, r0
 8006734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006736:	2030      	movs	r0, #48	; 0x30
 8006738:	18e1      	adds	r1, r4, r3
 800673a:	3143      	adds	r1, #67	; 0x43
 800673c:	7008      	strb	r0, [r1, #0]
 800673e:	0021      	movs	r1, r4
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	3145      	adds	r1, #69	; 0x45
 8006744:	7809      	ldrb	r1, [r1, #0]
 8006746:	18a2      	adds	r2, r4, r2
 8006748:	3243      	adds	r2, #67	; 0x43
 800674a:	3302      	adds	r3, #2
 800674c:	7011      	strb	r1, [r2, #0]
 800674e:	e7c1      	b.n	80066d4 <_printf_common+0x4c>
 8006750:	0022      	movs	r2, r4
 8006752:	2301      	movs	r3, #1
 8006754:	9901      	ldr	r1, [sp, #4]
 8006756:	9800      	ldr	r0, [sp, #0]
 8006758:	9e08      	ldr	r6, [sp, #32]
 800675a:	321a      	adds	r2, #26
 800675c:	47b0      	blx	r6
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	d0e6      	beq.n	8006730 <_printf_common+0xa8>
 8006762:	3701      	adds	r7, #1
 8006764:	e7d1      	b.n	800670a <_printf_common+0x82>
	...

08006768 <_printf_i>:
 8006768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676a:	b08b      	sub	sp, #44	; 0x2c
 800676c:	9206      	str	r2, [sp, #24]
 800676e:	000a      	movs	r2, r1
 8006770:	3243      	adds	r2, #67	; 0x43
 8006772:	9307      	str	r3, [sp, #28]
 8006774:	9005      	str	r0, [sp, #20]
 8006776:	9204      	str	r2, [sp, #16]
 8006778:	7e0a      	ldrb	r2, [r1, #24]
 800677a:	000c      	movs	r4, r1
 800677c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800677e:	2a78      	cmp	r2, #120	; 0x78
 8006780:	d807      	bhi.n	8006792 <_printf_i+0x2a>
 8006782:	2a62      	cmp	r2, #98	; 0x62
 8006784:	d809      	bhi.n	800679a <_printf_i+0x32>
 8006786:	2a00      	cmp	r2, #0
 8006788:	d100      	bne.n	800678c <_printf_i+0x24>
 800678a:	e0c1      	b.n	8006910 <_printf_i+0x1a8>
 800678c:	2a58      	cmp	r2, #88	; 0x58
 800678e:	d100      	bne.n	8006792 <_printf_i+0x2a>
 8006790:	e08c      	b.n	80068ac <_printf_i+0x144>
 8006792:	0026      	movs	r6, r4
 8006794:	3642      	adds	r6, #66	; 0x42
 8006796:	7032      	strb	r2, [r6, #0]
 8006798:	e022      	b.n	80067e0 <_printf_i+0x78>
 800679a:	0010      	movs	r0, r2
 800679c:	3863      	subs	r0, #99	; 0x63
 800679e:	2815      	cmp	r0, #21
 80067a0:	d8f7      	bhi.n	8006792 <_printf_i+0x2a>
 80067a2:	f7f9 fcad 	bl	8000100 <__gnu_thumb1_case_shi>
 80067a6:	0016      	.short	0x0016
 80067a8:	fff6001f 	.word	0xfff6001f
 80067ac:	fff6fff6 	.word	0xfff6fff6
 80067b0:	001ffff6 	.word	0x001ffff6
 80067b4:	fff6fff6 	.word	0xfff6fff6
 80067b8:	fff6fff6 	.word	0xfff6fff6
 80067bc:	003600a8 	.word	0x003600a8
 80067c0:	fff6009a 	.word	0xfff6009a
 80067c4:	00b9fff6 	.word	0x00b9fff6
 80067c8:	0036fff6 	.word	0x0036fff6
 80067cc:	fff6fff6 	.word	0xfff6fff6
 80067d0:	009e      	.short	0x009e
 80067d2:	0026      	movs	r6, r4
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	3642      	adds	r6, #66	; 0x42
 80067d8:	1d11      	adds	r1, r2, #4
 80067da:	6019      	str	r1, [r3, #0]
 80067dc:	6813      	ldr	r3, [r2, #0]
 80067de:	7033      	strb	r3, [r6, #0]
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0a7      	b.n	8006934 <_printf_i+0x1cc>
 80067e4:	6808      	ldr	r0, [r1, #0]
 80067e6:	6819      	ldr	r1, [r3, #0]
 80067e8:	1d0a      	adds	r2, r1, #4
 80067ea:	0605      	lsls	r5, r0, #24
 80067ec:	d50b      	bpl.n	8006806 <_printf_i+0x9e>
 80067ee:	680d      	ldr	r5, [r1, #0]
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	2d00      	cmp	r5, #0
 80067f4:	da03      	bge.n	80067fe <_printf_i+0x96>
 80067f6:	232d      	movs	r3, #45	; 0x2d
 80067f8:	9a04      	ldr	r2, [sp, #16]
 80067fa:	426d      	negs	r5, r5
 80067fc:	7013      	strb	r3, [r2, #0]
 80067fe:	4b61      	ldr	r3, [pc, #388]	; (8006984 <_printf_i+0x21c>)
 8006800:	270a      	movs	r7, #10
 8006802:	9303      	str	r3, [sp, #12]
 8006804:	e01b      	b.n	800683e <_printf_i+0xd6>
 8006806:	680d      	ldr	r5, [r1, #0]
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	0641      	lsls	r1, r0, #25
 800680c:	d5f1      	bpl.n	80067f2 <_printf_i+0x8a>
 800680e:	b22d      	sxth	r5, r5
 8006810:	e7ef      	b.n	80067f2 <_printf_i+0x8a>
 8006812:	680d      	ldr	r5, [r1, #0]
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	1d08      	adds	r0, r1, #4
 8006818:	6018      	str	r0, [r3, #0]
 800681a:	062e      	lsls	r6, r5, #24
 800681c:	d501      	bpl.n	8006822 <_printf_i+0xba>
 800681e:	680d      	ldr	r5, [r1, #0]
 8006820:	e003      	b.n	800682a <_printf_i+0xc2>
 8006822:	066d      	lsls	r5, r5, #25
 8006824:	d5fb      	bpl.n	800681e <_printf_i+0xb6>
 8006826:	680d      	ldr	r5, [r1, #0]
 8006828:	b2ad      	uxth	r5, r5
 800682a:	4b56      	ldr	r3, [pc, #344]	; (8006984 <_printf_i+0x21c>)
 800682c:	2708      	movs	r7, #8
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	2a6f      	cmp	r2, #111	; 0x6f
 8006832:	d000      	beq.n	8006836 <_printf_i+0xce>
 8006834:	3702      	adds	r7, #2
 8006836:	0023      	movs	r3, r4
 8006838:	2200      	movs	r2, #0
 800683a:	3343      	adds	r3, #67	; 0x43
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	60a3      	str	r3, [r4, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	db03      	blt.n	800684e <_printf_i+0xe6>
 8006846:	2204      	movs	r2, #4
 8006848:	6821      	ldr	r1, [r4, #0]
 800684a:	4391      	bics	r1, r2
 800684c:	6021      	str	r1, [r4, #0]
 800684e:	2d00      	cmp	r5, #0
 8006850:	d102      	bne.n	8006858 <_printf_i+0xf0>
 8006852:	9e04      	ldr	r6, [sp, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00c      	beq.n	8006872 <_printf_i+0x10a>
 8006858:	9e04      	ldr	r6, [sp, #16]
 800685a:	0028      	movs	r0, r5
 800685c:	0039      	movs	r1, r7
 800685e:	f7f9 fcdf 	bl	8000220 <__aeabi_uidivmod>
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	3e01      	subs	r6, #1
 8006866:	5c5b      	ldrb	r3, [r3, r1]
 8006868:	7033      	strb	r3, [r6, #0]
 800686a:	002b      	movs	r3, r5
 800686c:	0005      	movs	r5, r0
 800686e:	429f      	cmp	r7, r3
 8006870:	d9f3      	bls.n	800685a <_printf_i+0xf2>
 8006872:	2f08      	cmp	r7, #8
 8006874:	d109      	bne.n	800688a <_printf_i+0x122>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	07db      	lsls	r3, r3, #31
 800687a:	d506      	bpl.n	800688a <_printf_i+0x122>
 800687c:	6863      	ldr	r3, [r4, #4]
 800687e:	6922      	ldr	r2, [r4, #16]
 8006880:	4293      	cmp	r3, r2
 8006882:	dc02      	bgt.n	800688a <_printf_i+0x122>
 8006884:	2330      	movs	r3, #48	; 0x30
 8006886:	3e01      	subs	r6, #1
 8006888:	7033      	strb	r3, [r6, #0]
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	1b9b      	subs	r3, r3, r6
 800688e:	6123      	str	r3, [r4, #16]
 8006890:	9b07      	ldr	r3, [sp, #28]
 8006892:	0021      	movs	r1, r4
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	9805      	ldr	r0, [sp, #20]
 8006898:	9b06      	ldr	r3, [sp, #24]
 800689a:	aa09      	add	r2, sp, #36	; 0x24
 800689c:	f7ff fef4 	bl	8006688 <_printf_common>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d14c      	bne.n	800693e <_printf_i+0x1d6>
 80068a4:	2001      	movs	r0, #1
 80068a6:	4240      	negs	r0, r0
 80068a8:	b00b      	add	sp, #44	; 0x2c
 80068aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ac:	3145      	adds	r1, #69	; 0x45
 80068ae:	700a      	strb	r2, [r1, #0]
 80068b0:	4a34      	ldr	r2, [pc, #208]	; (8006984 <_printf_i+0x21c>)
 80068b2:	9203      	str	r2, [sp, #12]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	6821      	ldr	r1, [r4, #0]
 80068b8:	ca20      	ldmia	r2!, {r5}
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	0608      	lsls	r0, r1, #24
 80068be:	d516      	bpl.n	80068ee <_printf_i+0x186>
 80068c0:	07cb      	lsls	r3, r1, #31
 80068c2:	d502      	bpl.n	80068ca <_printf_i+0x162>
 80068c4:	2320      	movs	r3, #32
 80068c6:	4319      	orrs	r1, r3
 80068c8:	6021      	str	r1, [r4, #0]
 80068ca:	2710      	movs	r7, #16
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	d1b2      	bne.n	8006836 <_printf_i+0xce>
 80068d0:	2320      	movs	r3, #32
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	439a      	bics	r2, r3
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	e7ad      	b.n	8006836 <_printf_i+0xce>
 80068da:	2220      	movs	r2, #32
 80068dc:	6809      	ldr	r1, [r1, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	6022      	str	r2, [r4, #0]
 80068e2:	0022      	movs	r2, r4
 80068e4:	2178      	movs	r1, #120	; 0x78
 80068e6:	3245      	adds	r2, #69	; 0x45
 80068e8:	7011      	strb	r1, [r2, #0]
 80068ea:	4a27      	ldr	r2, [pc, #156]	; (8006988 <_printf_i+0x220>)
 80068ec:	e7e1      	b.n	80068b2 <_printf_i+0x14a>
 80068ee:	0648      	lsls	r0, r1, #25
 80068f0:	d5e6      	bpl.n	80068c0 <_printf_i+0x158>
 80068f2:	b2ad      	uxth	r5, r5
 80068f4:	e7e4      	b.n	80068c0 <_printf_i+0x158>
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	680d      	ldr	r5, [r1, #0]
 80068fa:	1d10      	adds	r0, r2, #4
 80068fc:	6949      	ldr	r1, [r1, #20]
 80068fe:	6018      	str	r0, [r3, #0]
 8006900:	6813      	ldr	r3, [r2, #0]
 8006902:	062e      	lsls	r6, r5, #24
 8006904:	d501      	bpl.n	800690a <_printf_i+0x1a2>
 8006906:	6019      	str	r1, [r3, #0]
 8006908:	e002      	b.n	8006910 <_printf_i+0x1a8>
 800690a:	066d      	lsls	r5, r5, #25
 800690c:	d5fb      	bpl.n	8006906 <_printf_i+0x19e>
 800690e:	8019      	strh	r1, [r3, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	9e04      	ldr	r6, [sp, #16]
 8006914:	6123      	str	r3, [r4, #16]
 8006916:	e7bb      	b.n	8006890 <_printf_i+0x128>
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	1d11      	adds	r1, r2, #4
 800691c:	6019      	str	r1, [r3, #0]
 800691e:	6816      	ldr	r6, [r2, #0]
 8006920:	2100      	movs	r1, #0
 8006922:	0030      	movs	r0, r6
 8006924:	6862      	ldr	r2, [r4, #4]
 8006926:	f000 f831 	bl	800698c <memchr>
 800692a:	2800      	cmp	r0, #0
 800692c:	d001      	beq.n	8006932 <_printf_i+0x1ca>
 800692e:	1b80      	subs	r0, r0, r6
 8006930:	6060      	str	r0, [r4, #4]
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	2300      	movs	r3, #0
 8006938:	9a04      	ldr	r2, [sp, #16]
 800693a:	7013      	strb	r3, [r2, #0]
 800693c:	e7a8      	b.n	8006890 <_printf_i+0x128>
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	0032      	movs	r2, r6
 8006942:	9906      	ldr	r1, [sp, #24]
 8006944:	9805      	ldr	r0, [sp, #20]
 8006946:	9d07      	ldr	r5, [sp, #28]
 8006948:	47a8      	blx	r5
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d0aa      	beq.n	80068a4 <_printf_i+0x13c>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	079b      	lsls	r3, r3, #30
 8006952:	d415      	bmi.n	8006980 <_printf_i+0x218>
 8006954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006956:	68e0      	ldr	r0, [r4, #12]
 8006958:	4298      	cmp	r0, r3
 800695a:	daa5      	bge.n	80068a8 <_printf_i+0x140>
 800695c:	0018      	movs	r0, r3
 800695e:	e7a3      	b.n	80068a8 <_printf_i+0x140>
 8006960:	0022      	movs	r2, r4
 8006962:	2301      	movs	r3, #1
 8006964:	9906      	ldr	r1, [sp, #24]
 8006966:	9805      	ldr	r0, [sp, #20]
 8006968:	9e07      	ldr	r6, [sp, #28]
 800696a:	3219      	adds	r2, #25
 800696c:	47b0      	blx	r6
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d098      	beq.n	80068a4 <_printf_i+0x13c>
 8006972:	3501      	adds	r5, #1
 8006974:	68e3      	ldr	r3, [r4, #12]
 8006976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	42ab      	cmp	r3, r5
 800697c:	dcf0      	bgt.n	8006960 <_printf_i+0x1f8>
 800697e:	e7e9      	b.n	8006954 <_printf_i+0x1ec>
 8006980:	2500      	movs	r5, #0
 8006982:	e7f7      	b.n	8006974 <_printf_i+0x20c>
 8006984:	08006e45 	.word	0x08006e45
 8006988:	08006e56 	.word	0x08006e56

0800698c <memchr>:
 800698c:	b2c9      	uxtb	r1, r1
 800698e:	1882      	adds	r2, r0, r2
 8006990:	4290      	cmp	r0, r2
 8006992:	d101      	bne.n	8006998 <memchr+0xc>
 8006994:	2000      	movs	r0, #0
 8006996:	4770      	bx	lr
 8006998:	7803      	ldrb	r3, [r0, #0]
 800699a:	428b      	cmp	r3, r1
 800699c:	d0fb      	beq.n	8006996 <memchr+0xa>
 800699e:	3001      	adds	r0, #1
 80069a0:	e7f6      	b.n	8006990 <memchr+0x4>

080069a2 <memcpy>:
 80069a2:	2300      	movs	r3, #0
 80069a4:	b510      	push	{r4, lr}
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d100      	bne.n	80069ac <memcpy+0xa>
 80069aa:	bd10      	pop	{r4, pc}
 80069ac:	5ccc      	ldrb	r4, [r1, r3]
 80069ae:	54c4      	strb	r4, [r0, r3]
 80069b0:	3301      	adds	r3, #1
 80069b2:	e7f8      	b.n	80069a6 <memcpy+0x4>

080069b4 <memmove>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4288      	cmp	r0, r1
 80069b8:	d902      	bls.n	80069c0 <memmove+0xc>
 80069ba:	188b      	adds	r3, r1, r2
 80069bc:	4298      	cmp	r0, r3
 80069be:	d303      	bcc.n	80069c8 <memmove+0x14>
 80069c0:	2300      	movs	r3, #0
 80069c2:	e007      	b.n	80069d4 <memmove+0x20>
 80069c4:	5c8b      	ldrb	r3, [r1, r2]
 80069c6:	5483      	strb	r3, [r0, r2]
 80069c8:	3a01      	subs	r2, #1
 80069ca:	d2fb      	bcs.n	80069c4 <memmove+0x10>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	5ccc      	ldrb	r4, [r1, r3]
 80069d0:	54c4      	strb	r4, [r0, r3]
 80069d2:	3301      	adds	r3, #1
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d1fa      	bne.n	80069ce <memmove+0x1a>
 80069d8:	e7f8      	b.n	80069cc <memmove+0x18>
	...

080069dc <_free_r>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	0005      	movs	r5, r0
 80069e0:	2900      	cmp	r1, #0
 80069e2:	d010      	beq.n	8006a06 <_free_r+0x2a>
 80069e4:	1f0c      	subs	r4, r1, #4
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	da00      	bge.n	80069ee <_free_r+0x12>
 80069ec:	18e4      	adds	r4, r4, r3
 80069ee:	0028      	movs	r0, r5
 80069f0:	f000 f918 	bl	8006c24 <__malloc_lock>
 80069f4:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <_free_r+0x90>)
 80069f6:	6813      	ldr	r3, [r2, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <_free_r+0x2c>
 80069fc:	6063      	str	r3, [r4, #4]
 80069fe:	6014      	str	r4, [r2, #0]
 8006a00:	0028      	movs	r0, r5
 8006a02:	f000 f917 	bl	8006c34 <__malloc_unlock>
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	d908      	bls.n	8006a1e <_free_r+0x42>
 8006a0c:	6821      	ldr	r1, [r4, #0]
 8006a0e:	1860      	adds	r0, r4, r1
 8006a10:	4283      	cmp	r3, r0
 8006a12:	d1f3      	bne.n	80069fc <_free_r+0x20>
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	1841      	adds	r1, r0, r1
 8006a1a:	6021      	str	r1, [r4, #0]
 8006a1c:	e7ee      	b.n	80069fc <_free_r+0x20>
 8006a1e:	001a      	movs	r2, r3
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <_free_r+0x4e>
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	d9f9      	bls.n	8006a1e <_free_r+0x42>
 8006a2a:	6811      	ldr	r1, [r2, #0]
 8006a2c:	1850      	adds	r0, r2, r1
 8006a2e:	42a0      	cmp	r0, r4
 8006a30:	d10b      	bne.n	8006a4a <_free_r+0x6e>
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	1809      	adds	r1, r1, r0
 8006a36:	1850      	adds	r0, r2, r1
 8006a38:	6011      	str	r1, [r2, #0]
 8006a3a:	4283      	cmp	r3, r0
 8006a3c:	d1e0      	bne.n	8006a00 <_free_r+0x24>
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	1841      	adds	r1, r0, r1
 8006a44:	6011      	str	r1, [r2, #0]
 8006a46:	6053      	str	r3, [r2, #4]
 8006a48:	e7da      	b.n	8006a00 <_free_r+0x24>
 8006a4a:	42a0      	cmp	r0, r4
 8006a4c:	d902      	bls.n	8006a54 <_free_r+0x78>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	e7d5      	b.n	8006a00 <_free_r+0x24>
 8006a54:	6821      	ldr	r1, [r4, #0]
 8006a56:	1860      	adds	r0, r4, r1
 8006a58:	4283      	cmp	r3, r0
 8006a5a:	d103      	bne.n	8006a64 <_free_r+0x88>
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	1841      	adds	r1, r0, r1
 8006a62:	6021      	str	r1, [r4, #0]
 8006a64:	6063      	str	r3, [r4, #4]
 8006a66:	6054      	str	r4, [r2, #4]
 8006a68:	e7ca      	b.n	8006a00 <_free_r+0x24>
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	20000108 	.word	0x20000108

08006a70 <sbrk_aligned>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	4e0f      	ldr	r6, [pc, #60]	; (8006ab0 <sbrk_aligned+0x40>)
 8006a74:	000d      	movs	r5, r1
 8006a76:	6831      	ldr	r1, [r6, #0]
 8006a78:	0004      	movs	r4, r0
 8006a7a:	2900      	cmp	r1, #0
 8006a7c:	d102      	bne.n	8006a84 <sbrk_aligned+0x14>
 8006a7e:	f000 f8bf 	bl	8006c00 <_sbrk_r>
 8006a82:	6030      	str	r0, [r6, #0]
 8006a84:	0029      	movs	r1, r5
 8006a86:	0020      	movs	r0, r4
 8006a88:	f000 f8ba 	bl	8006c00 <_sbrk_r>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d00a      	beq.n	8006aa6 <sbrk_aligned+0x36>
 8006a90:	2303      	movs	r3, #3
 8006a92:	1cc5      	adds	r5, r0, #3
 8006a94:	439d      	bics	r5, r3
 8006a96:	42a8      	cmp	r0, r5
 8006a98:	d007      	beq.n	8006aaa <sbrk_aligned+0x3a>
 8006a9a:	1a29      	subs	r1, r5, r0
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	f000 f8af 	bl	8006c00 <_sbrk_r>
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	d101      	bne.n	8006aaa <sbrk_aligned+0x3a>
 8006aa6:	2501      	movs	r5, #1
 8006aa8:	426d      	negs	r5, r5
 8006aaa:	0028      	movs	r0, r5
 8006aac:	bd70      	pop	{r4, r5, r6, pc}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	2000010c 	.word	0x2000010c

08006ab4 <_malloc_r>:
 8006ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	1ccb      	adds	r3, r1, #3
 8006aba:	4393      	bics	r3, r2
 8006abc:	3308      	adds	r3, #8
 8006abe:	0006      	movs	r6, r0
 8006ac0:	001f      	movs	r7, r3
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d232      	bcs.n	8006b2c <_malloc_r+0x78>
 8006ac6:	270c      	movs	r7, #12
 8006ac8:	42b9      	cmp	r1, r7
 8006aca:	d831      	bhi.n	8006b30 <_malloc_r+0x7c>
 8006acc:	0030      	movs	r0, r6
 8006ace:	f000 f8a9 	bl	8006c24 <__malloc_lock>
 8006ad2:	4d32      	ldr	r5, [pc, #200]	; (8006b9c <_malloc_r+0xe8>)
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	001c      	movs	r4, r3
 8006ad8:	2c00      	cmp	r4, #0
 8006ada:	d12e      	bne.n	8006b3a <_malloc_r+0x86>
 8006adc:	0039      	movs	r1, r7
 8006ade:	0030      	movs	r0, r6
 8006ae0:	f7ff ffc6 	bl	8006a70 <sbrk_aligned>
 8006ae4:	0004      	movs	r4, r0
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d11e      	bne.n	8006b28 <_malloc_r+0x74>
 8006aea:	682c      	ldr	r4, [r5, #0]
 8006aec:	0025      	movs	r5, r4
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	d14a      	bne.n	8006b88 <_malloc_r+0xd4>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	0029      	movs	r1, r5
 8006af6:	18e3      	adds	r3, r4, r3
 8006af8:	0030      	movs	r0, r6
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	f000 f880 	bl	8006c00 <_sbrk_r>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	4283      	cmp	r3, r0
 8006b04:	d143      	bne.n	8006b8e <_malloc_r+0xda>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	3703      	adds	r7, #3
 8006b0a:	1aff      	subs	r7, r7, r3
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	439f      	bics	r7, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	2f0c      	cmp	r7, #12
 8006b14:	d200      	bcs.n	8006b18 <_malloc_r+0x64>
 8006b16:	270c      	movs	r7, #12
 8006b18:	0039      	movs	r1, r7
 8006b1a:	0030      	movs	r0, r6
 8006b1c:	f7ff ffa8 	bl	8006a70 <sbrk_aligned>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d034      	beq.n	8006b8e <_malloc_r+0xda>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	19df      	adds	r7, r3, r7
 8006b28:	6027      	str	r7, [r4, #0]
 8006b2a:	e013      	b.n	8006b54 <_malloc_r+0xa0>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dacb      	bge.n	8006ac8 <_malloc_r+0x14>
 8006b30:	230c      	movs	r3, #12
 8006b32:	2500      	movs	r5, #0
 8006b34:	6033      	str	r3, [r6, #0]
 8006b36:	0028      	movs	r0, r5
 8006b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	1bd1      	subs	r1, r2, r7
 8006b3e:	d420      	bmi.n	8006b82 <_malloc_r+0xce>
 8006b40:	290b      	cmp	r1, #11
 8006b42:	d917      	bls.n	8006b74 <_malloc_r+0xc0>
 8006b44:	19e2      	adds	r2, r4, r7
 8006b46:	6027      	str	r7, [r4, #0]
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	d111      	bne.n	8006b70 <_malloc_r+0xbc>
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	6863      	ldr	r3, [r4, #4]
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	6053      	str	r3, [r2, #4]
 8006b54:	0030      	movs	r0, r6
 8006b56:	0025      	movs	r5, r4
 8006b58:	f000 f86c 	bl	8006c34 <__malloc_unlock>
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	350b      	adds	r5, #11
 8006b60:	1d23      	adds	r3, r4, #4
 8006b62:	4395      	bics	r5, r2
 8006b64:	1aea      	subs	r2, r5, r3
 8006b66:	429d      	cmp	r5, r3
 8006b68:	d0e5      	beq.n	8006b36 <_malloc_r+0x82>
 8006b6a:	1b5b      	subs	r3, r3, r5
 8006b6c:	50a3      	str	r3, [r4, r2]
 8006b6e:	e7e2      	b.n	8006b36 <_malloc_r+0x82>
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	e7ec      	b.n	8006b4e <_malloc_r+0x9a>
 8006b74:	6862      	ldr	r2, [r4, #4]
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	d101      	bne.n	8006b7e <_malloc_r+0xca>
 8006b7a:	602a      	str	r2, [r5, #0]
 8006b7c:	e7ea      	b.n	8006b54 <_malloc_r+0xa0>
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	e7e8      	b.n	8006b54 <_malloc_r+0xa0>
 8006b82:	0023      	movs	r3, r4
 8006b84:	6864      	ldr	r4, [r4, #4]
 8006b86:	e7a7      	b.n	8006ad8 <_malloc_r+0x24>
 8006b88:	002c      	movs	r4, r5
 8006b8a:	686d      	ldr	r5, [r5, #4]
 8006b8c:	e7af      	b.n	8006aee <_malloc_r+0x3a>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	0030      	movs	r0, r6
 8006b92:	6033      	str	r3, [r6, #0]
 8006b94:	f000 f84e 	bl	8006c34 <__malloc_unlock>
 8006b98:	e7cd      	b.n	8006b36 <_malloc_r+0x82>
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	20000108 	.word	0x20000108

08006ba0 <_realloc_r>:
 8006ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba2:	0007      	movs	r7, r0
 8006ba4:	000e      	movs	r6, r1
 8006ba6:	0014      	movs	r4, r2
 8006ba8:	2900      	cmp	r1, #0
 8006baa:	d105      	bne.n	8006bb8 <_realloc_r+0x18>
 8006bac:	0011      	movs	r1, r2
 8006bae:	f7ff ff81 	bl	8006ab4 <_malloc_r>
 8006bb2:	0005      	movs	r5, r0
 8006bb4:	0028      	movs	r0, r5
 8006bb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	d103      	bne.n	8006bc4 <_realloc_r+0x24>
 8006bbc:	f7ff ff0e 	bl	80069dc <_free_r>
 8006bc0:	0025      	movs	r5, r4
 8006bc2:	e7f7      	b.n	8006bb4 <_realloc_r+0x14>
 8006bc4:	f000 f83e 	bl	8006c44 <_malloc_usable_size_r>
 8006bc8:	9001      	str	r0, [sp, #4]
 8006bca:	4284      	cmp	r4, r0
 8006bcc:	d803      	bhi.n	8006bd6 <_realloc_r+0x36>
 8006bce:	0035      	movs	r5, r6
 8006bd0:	0843      	lsrs	r3, r0, #1
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	d3ee      	bcc.n	8006bb4 <_realloc_r+0x14>
 8006bd6:	0021      	movs	r1, r4
 8006bd8:	0038      	movs	r0, r7
 8006bda:	f7ff ff6b 	bl	8006ab4 <_malloc_r>
 8006bde:	1e05      	subs	r5, r0, #0
 8006be0:	d0e8      	beq.n	8006bb4 <_realloc_r+0x14>
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	0022      	movs	r2, r4
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d900      	bls.n	8006bec <_realloc_r+0x4c>
 8006bea:	001a      	movs	r2, r3
 8006bec:	0031      	movs	r1, r6
 8006bee:	0028      	movs	r0, r5
 8006bf0:	f7ff fed7 	bl	80069a2 <memcpy>
 8006bf4:	0031      	movs	r1, r6
 8006bf6:	0038      	movs	r0, r7
 8006bf8:	f7ff fef0 	bl	80069dc <_free_r>
 8006bfc:	e7da      	b.n	8006bb4 <_realloc_r+0x14>
	...

08006c00 <_sbrk_r>:
 8006c00:	2300      	movs	r3, #0
 8006c02:	b570      	push	{r4, r5, r6, lr}
 8006c04:	4d06      	ldr	r5, [pc, #24]	; (8006c20 <_sbrk_r+0x20>)
 8006c06:	0004      	movs	r4, r0
 8006c08:	0008      	movs	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fd fdc4 	bl	8004798 <_sbrk>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d103      	bne.n	8006c1c <_sbrk_r+0x1c>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d000      	beq.n	8006c1c <_sbrk_r+0x1c>
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	bd70      	pop	{r4, r5, r6, pc}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	20000110 	.word	0x20000110

08006c24 <__malloc_lock>:
 8006c24:	b510      	push	{r4, lr}
 8006c26:	4802      	ldr	r0, [pc, #8]	; (8006c30 <__malloc_lock+0xc>)
 8006c28:	f000 f814 	bl	8006c54 <__retarget_lock_acquire_recursive>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	20000114 	.word	0x20000114

08006c34 <__malloc_unlock>:
 8006c34:	b510      	push	{r4, lr}
 8006c36:	4802      	ldr	r0, [pc, #8]	; (8006c40 <__malloc_unlock+0xc>)
 8006c38:	f000 f80d 	bl	8006c56 <__retarget_lock_release_recursive>
 8006c3c:	bd10      	pop	{r4, pc}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	20000114 	.word	0x20000114

08006c44 <_malloc_usable_size_r>:
 8006c44:	1f0b      	subs	r3, r1, #4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	1f18      	subs	r0, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da01      	bge.n	8006c52 <_malloc_usable_size_r+0xe>
 8006c4e:	580b      	ldr	r3, [r1, r0]
 8006c50:	18c0      	adds	r0, r0, r3
 8006c52:	4770      	bx	lr

08006c54 <__retarget_lock_acquire_recursive>:
 8006c54:	4770      	bx	lr

08006c56 <__retarget_lock_release_recursive>:
 8006c56:	4770      	bx	lr

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
