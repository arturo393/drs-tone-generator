
DRS_tone_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005630  08005630  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08005644  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08005644  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009702  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cab  00000000  00000000  00029736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015494  00000000  00000000  0002c340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaa7  00000000  00000000  000417d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083762  00000000  00000000  0004c27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf9dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d9c  00000000  00000000  000cfa30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005550 	.word	0x08005550

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005550 	.word	0x08005550

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_uldivmod>:
 8000218:	2b00      	cmp	r3, #0
 800021a:	d111      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 800021c:	2a00      	cmp	r2, #0
 800021e:	d10f      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 8000220:	2900      	cmp	r1, #0
 8000222:	d100      	bne.n	8000226 <__aeabi_uldivmod+0xe>
 8000224:	2800      	cmp	r0, #0
 8000226:	d002      	beq.n	800022e <__aeabi_uldivmod+0x16>
 8000228:	2100      	movs	r1, #0
 800022a:	43c9      	mvns	r1, r1
 800022c:	0008      	movs	r0, r1
 800022e:	b407      	push	{r0, r1, r2}
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <__aeabi_uldivmod+0x24>)
 8000232:	a102      	add	r1, pc, #8	; (adr r1, 800023c <__aeabi_uldivmod+0x24>)
 8000234:	1840      	adds	r0, r0, r1
 8000236:	9002      	str	r0, [sp, #8]
 8000238:	bd03      	pop	{r0, r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	ffffffd9 	.word	0xffffffd9
 8000240:	b403      	push	{r0, r1}
 8000242:	4668      	mov	r0, sp
 8000244:	b501      	push	{r0, lr}
 8000246:	9802      	ldr	r0, [sp, #8]
 8000248:	f000 f83a 	bl	80002c0 <__udivmoddi4>
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	469e      	mov	lr, r3
 8000250:	b002      	add	sp, #8
 8000252:	bc0c      	pop	{r2, r3}
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_d2uiz>:
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	2200      	movs	r2, #0
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <__aeabi_d2uiz+0x38>)
 800025e:	0004      	movs	r4, r0
 8000260:	000d      	movs	r5, r1
 8000262:	f001 fdb9 	bl	8001dd8 <__aeabi_dcmpge>
 8000266:	2800      	cmp	r0, #0
 8000268:	d104      	bne.n	8000274 <__aeabi_d2uiz+0x1c>
 800026a:	0020      	movs	r0, r4
 800026c:	0029      	movs	r1, r5
 800026e:	f001 fd23 	bl	8001cb8 <__aeabi_d2iz>
 8000272:	bd70      	pop	{r4, r5, r6, pc}
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <__aeabi_d2uiz+0x38>)
 8000276:	2200      	movs	r2, #0
 8000278:	0020      	movs	r0, r4
 800027a:	0029      	movs	r1, r5
 800027c:	f001 f98a 	bl	8001594 <__aeabi_dsub>
 8000280:	f001 fd1a 	bl	8001cb8 <__aeabi_d2iz>
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	061b      	lsls	r3, r3, #24
 8000288:	469c      	mov	ip, r3
 800028a:	4460      	add	r0, ip
 800028c:	e7f1      	b.n	8000272 <__aeabi_d2uiz+0x1a>
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	41e00000 	.word	0x41e00000

08000294 <__aeabi_ul2d>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0006      	movs	r6, r0
 8000298:	0008      	movs	r0, r1
 800029a:	f001 fd43 	bl	8001d24 <__aeabi_ui2d>
 800029e:	2200      	movs	r2, #0
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <__aeabi_ul2d+0x28>)
 80002a2:	f000 ff0b 	bl	80010bc <__aeabi_dmul>
 80002a6:	000d      	movs	r5, r1
 80002a8:	0004      	movs	r4, r0
 80002aa:	0030      	movs	r0, r6
 80002ac:	f001 fd3a 	bl	8001d24 <__aeabi_ui2d>
 80002b0:	002b      	movs	r3, r5
 80002b2:	0022      	movs	r2, r4
 80002b4:	f000 f8d0 	bl	8000458 <__aeabi_dadd>
 80002b8:	bd70      	pop	{r4, r5, r6, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	41f00000 	.word	0x41f00000

080002c0 <__udivmoddi4>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	4657      	mov	r7, sl
 80002c4:	464e      	mov	r6, r9
 80002c6:	4645      	mov	r5, r8
 80002c8:	46de      	mov	lr, fp
 80002ca:	b5e0      	push	{r5, r6, r7, lr}
 80002cc:	0004      	movs	r4, r0
 80002ce:	000d      	movs	r5, r1
 80002d0:	4692      	mov	sl, r2
 80002d2:	4699      	mov	r9, r3
 80002d4:	b083      	sub	sp, #12
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d830      	bhi.n	800033c <__udivmoddi4+0x7c>
 80002da:	d02d      	beq.n	8000338 <__udivmoddi4+0x78>
 80002dc:	4649      	mov	r1, r9
 80002de:	4650      	mov	r0, sl
 80002e0:	f001 fda2 	bl	8001e28 <__clzdi2>
 80002e4:	0029      	movs	r1, r5
 80002e6:	0006      	movs	r6, r0
 80002e8:	0020      	movs	r0, r4
 80002ea:	f001 fd9d 	bl	8001e28 <__clzdi2>
 80002ee:	1a33      	subs	r3, r6, r0
 80002f0:	4698      	mov	r8, r3
 80002f2:	3b20      	subs	r3, #32
 80002f4:	469b      	mov	fp, r3
 80002f6:	d433      	bmi.n	8000360 <__udivmoddi4+0xa0>
 80002f8:	465a      	mov	r2, fp
 80002fa:	4653      	mov	r3, sl
 80002fc:	4093      	lsls	r3, r2
 80002fe:	4642      	mov	r2, r8
 8000300:	001f      	movs	r7, r3
 8000302:	4653      	mov	r3, sl
 8000304:	4093      	lsls	r3, r2
 8000306:	001e      	movs	r6, r3
 8000308:	42af      	cmp	r7, r5
 800030a:	d83a      	bhi.n	8000382 <__udivmoddi4+0xc2>
 800030c:	42af      	cmp	r7, r5
 800030e:	d100      	bne.n	8000312 <__udivmoddi4+0x52>
 8000310:	e078      	b.n	8000404 <__udivmoddi4+0x144>
 8000312:	465b      	mov	r3, fp
 8000314:	1ba4      	subs	r4, r4, r6
 8000316:	41bd      	sbcs	r5, r7
 8000318:	2b00      	cmp	r3, #0
 800031a:	da00      	bge.n	800031e <__udivmoddi4+0x5e>
 800031c:	e075      	b.n	800040a <__udivmoddi4+0x14a>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2301      	movs	r3, #1
 8000328:	465a      	mov	r2, fp
 800032a:	4093      	lsls	r3, r2
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2301      	movs	r3, #1
 8000330:	4642      	mov	r2, r8
 8000332:	4093      	lsls	r3, r2
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	e028      	b.n	800038a <__udivmoddi4+0xca>
 8000338:	4282      	cmp	r2, r0
 800033a:	d9cf      	bls.n	80002dc <__udivmoddi4+0x1c>
 800033c:	2200      	movs	r2, #0
 800033e:	2300      	movs	r3, #0
 8000340:	9200      	str	r2, [sp, #0]
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <__udivmoddi4+0x8e>
 800034a:	601c      	str	r4, [r3, #0]
 800034c:	605d      	str	r5, [r3, #4]
 800034e:	9800      	ldr	r0, [sp, #0]
 8000350:	9901      	ldr	r1, [sp, #4]
 8000352:	b003      	add	sp, #12
 8000354:	bcf0      	pop	{r4, r5, r6, r7}
 8000356:	46bb      	mov	fp, r7
 8000358:	46b2      	mov	sl, r6
 800035a:	46a9      	mov	r9, r5
 800035c:	46a0      	mov	r8, r4
 800035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000360:	4642      	mov	r2, r8
 8000362:	2320      	movs	r3, #32
 8000364:	1a9b      	subs	r3, r3, r2
 8000366:	4652      	mov	r2, sl
 8000368:	40da      	lsrs	r2, r3
 800036a:	4641      	mov	r1, r8
 800036c:	0013      	movs	r3, r2
 800036e:	464a      	mov	r2, r9
 8000370:	408a      	lsls	r2, r1
 8000372:	0017      	movs	r7, r2
 8000374:	4642      	mov	r2, r8
 8000376:	431f      	orrs	r7, r3
 8000378:	4653      	mov	r3, sl
 800037a:	4093      	lsls	r3, r2
 800037c:	001e      	movs	r6, r3
 800037e:	42af      	cmp	r7, r5
 8000380:	d9c4      	bls.n	800030c <__udivmoddi4+0x4c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	4643      	mov	r3, r8
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0d9      	beq.n	8000344 <__udivmoddi4+0x84>
 8000390:	07fb      	lsls	r3, r7, #31
 8000392:	0872      	lsrs	r2, r6, #1
 8000394:	431a      	orrs	r2, r3
 8000396:	4646      	mov	r6, r8
 8000398:	087b      	lsrs	r3, r7, #1
 800039a:	e00e      	b.n	80003ba <__udivmoddi4+0xfa>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d101      	bne.n	80003a4 <__udivmoddi4+0xe4>
 80003a0:	42a2      	cmp	r2, r4
 80003a2:	d80c      	bhi.n	80003be <__udivmoddi4+0xfe>
 80003a4:	1aa4      	subs	r4, r4, r2
 80003a6:	419d      	sbcs	r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	1924      	adds	r4, r4, r4
 80003ac:	416d      	adcs	r5, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	3e01      	subs	r6, #1
 80003b2:	1824      	adds	r4, r4, r0
 80003b4:	414d      	adcs	r5, r1
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d006      	beq.n	80003c8 <__udivmoddi4+0x108>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	d9ee      	bls.n	800039c <__udivmoddi4+0xdc>
 80003be:	3e01      	subs	r6, #1
 80003c0:	1924      	adds	r4, r4, r4
 80003c2:	416d      	adcs	r5, r5
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d1f8      	bne.n	80003ba <__udivmoddi4+0xfa>
 80003c8:	9800      	ldr	r0, [sp, #0]
 80003ca:	9901      	ldr	r1, [sp, #4]
 80003cc:	465b      	mov	r3, fp
 80003ce:	1900      	adds	r0, r0, r4
 80003d0:	4169      	adcs	r1, r5
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db24      	blt.n	8000420 <__udivmoddi4+0x160>
 80003d6:	002b      	movs	r3, r5
 80003d8:	465a      	mov	r2, fp
 80003da:	4644      	mov	r4, r8
 80003dc:	40d3      	lsrs	r3, r2
 80003de:	002a      	movs	r2, r5
 80003e0:	40e2      	lsrs	r2, r4
 80003e2:	001c      	movs	r4, r3
 80003e4:	465b      	mov	r3, fp
 80003e6:	0015      	movs	r5, r2
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db2a      	blt.n	8000442 <__udivmoddi4+0x182>
 80003ec:	0026      	movs	r6, r4
 80003ee:	409e      	lsls	r6, r3
 80003f0:	0033      	movs	r3, r6
 80003f2:	0026      	movs	r6, r4
 80003f4:	4647      	mov	r7, r8
 80003f6:	40be      	lsls	r6, r7
 80003f8:	0032      	movs	r2, r6
 80003fa:	1a80      	subs	r0, r0, r2
 80003fc:	4199      	sbcs	r1, r3
 80003fe:	9000      	str	r0, [sp, #0]
 8000400:	9101      	str	r1, [sp, #4]
 8000402:	e79f      	b.n	8000344 <__udivmoddi4+0x84>
 8000404:	42a3      	cmp	r3, r4
 8000406:	d8bc      	bhi.n	8000382 <__udivmoddi4+0xc2>
 8000408:	e783      	b.n	8000312 <__udivmoddi4+0x52>
 800040a:	4642      	mov	r2, r8
 800040c:	2320      	movs	r3, #32
 800040e:	2100      	movs	r1, #0
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	2200      	movs	r2, #0
 8000414:	9100      	str	r1, [sp, #0]
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	2201      	movs	r2, #1
 800041a:	40da      	lsrs	r2, r3
 800041c:	9201      	str	r2, [sp, #4]
 800041e:	e786      	b.n	800032e <__udivmoddi4+0x6e>
 8000420:	4642      	mov	r2, r8
 8000422:	2320      	movs	r3, #32
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	002a      	movs	r2, r5
 8000428:	4646      	mov	r6, r8
 800042a:	409a      	lsls	r2, r3
 800042c:	0023      	movs	r3, r4
 800042e:	40f3      	lsrs	r3, r6
 8000430:	4644      	mov	r4, r8
 8000432:	4313      	orrs	r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	40e2      	lsrs	r2, r4
 8000438:	001c      	movs	r4, r3
 800043a:	465b      	mov	r3, fp
 800043c:	0015      	movs	r5, r2
 800043e:	2b00      	cmp	r3, #0
 8000440:	dad4      	bge.n	80003ec <__udivmoddi4+0x12c>
 8000442:	4642      	mov	r2, r8
 8000444:	002f      	movs	r7, r5
 8000446:	2320      	movs	r3, #32
 8000448:	0026      	movs	r6, r4
 800044a:	4097      	lsls	r7, r2
 800044c:	1a9b      	subs	r3, r3, r2
 800044e:	40de      	lsrs	r6, r3
 8000450:	003b      	movs	r3, r7
 8000452:	4333      	orrs	r3, r6
 8000454:	e7cd      	b.n	80003f2 <__udivmoddi4+0x132>
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dadd>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	464f      	mov	r7, r9
 800045c:	4646      	mov	r6, r8
 800045e:	46d6      	mov	lr, sl
 8000460:	000d      	movs	r5, r1
 8000462:	0004      	movs	r4, r0
 8000464:	b5c0      	push	{r6, r7, lr}
 8000466:	001f      	movs	r7, r3
 8000468:	0011      	movs	r1, r2
 800046a:	0328      	lsls	r0, r5, #12
 800046c:	0f62      	lsrs	r2, r4, #29
 800046e:	0a40      	lsrs	r0, r0, #9
 8000470:	4310      	orrs	r0, r2
 8000472:	007a      	lsls	r2, r7, #1
 8000474:	0d52      	lsrs	r2, r2, #21
 8000476:	00e3      	lsls	r3, r4, #3
 8000478:	033c      	lsls	r4, r7, #12
 800047a:	4691      	mov	r9, r2
 800047c:	0a64      	lsrs	r4, r4, #9
 800047e:	0ffa      	lsrs	r2, r7, #31
 8000480:	0f4f      	lsrs	r7, r1, #29
 8000482:	006e      	lsls	r6, r5, #1
 8000484:	4327      	orrs	r7, r4
 8000486:	4692      	mov	sl, r2
 8000488:	46b8      	mov	r8, r7
 800048a:	0d76      	lsrs	r6, r6, #21
 800048c:	0fed      	lsrs	r5, r5, #31
 800048e:	00c9      	lsls	r1, r1, #3
 8000490:	4295      	cmp	r5, r2
 8000492:	d100      	bne.n	8000496 <__aeabi_dadd+0x3e>
 8000494:	e099      	b.n	80005ca <__aeabi_dadd+0x172>
 8000496:	464c      	mov	r4, r9
 8000498:	1b34      	subs	r4, r6, r4
 800049a:	46a4      	mov	ip, r4
 800049c:	2c00      	cmp	r4, #0
 800049e:	dc00      	bgt.n	80004a2 <__aeabi_dadd+0x4a>
 80004a0:	e07c      	b.n	800059c <__aeabi_dadd+0x144>
 80004a2:	464a      	mov	r2, r9
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_dadd+0x52>
 80004a8:	e0b8      	b.n	800061c <__aeabi_dadd+0x1c4>
 80004aa:	4ac5      	ldr	r2, [pc, #788]	; (80007c0 <__aeabi_dadd+0x368>)
 80004ac:	4296      	cmp	r6, r2
 80004ae:	d100      	bne.n	80004b2 <__aeabi_dadd+0x5a>
 80004b0:	e11c      	b.n	80006ec <__aeabi_dadd+0x294>
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	003c      	movs	r4, r7
 80004b6:	0412      	lsls	r2, r2, #16
 80004b8:	4314      	orrs	r4, r2
 80004ba:	46a0      	mov	r8, r4
 80004bc:	4662      	mov	r2, ip
 80004be:	2a38      	cmp	r2, #56	; 0x38
 80004c0:	dd00      	ble.n	80004c4 <__aeabi_dadd+0x6c>
 80004c2:	e161      	b.n	8000788 <__aeabi_dadd+0x330>
 80004c4:	2a1f      	cmp	r2, #31
 80004c6:	dd00      	ble.n	80004ca <__aeabi_dadd+0x72>
 80004c8:	e1cc      	b.n	8000864 <__aeabi_dadd+0x40c>
 80004ca:	4664      	mov	r4, ip
 80004cc:	2220      	movs	r2, #32
 80004ce:	1b12      	subs	r2, r2, r4
 80004d0:	4644      	mov	r4, r8
 80004d2:	4094      	lsls	r4, r2
 80004d4:	000f      	movs	r7, r1
 80004d6:	46a1      	mov	r9, r4
 80004d8:	4664      	mov	r4, ip
 80004da:	4091      	lsls	r1, r2
 80004dc:	40e7      	lsrs	r7, r4
 80004de:	464c      	mov	r4, r9
 80004e0:	1e4a      	subs	r2, r1, #1
 80004e2:	4191      	sbcs	r1, r2
 80004e4:	433c      	orrs	r4, r7
 80004e6:	4642      	mov	r2, r8
 80004e8:	4321      	orrs	r1, r4
 80004ea:	4664      	mov	r4, ip
 80004ec:	40e2      	lsrs	r2, r4
 80004ee:	1a80      	subs	r0, r0, r2
 80004f0:	1a5c      	subs	r4, r3, r1
 80004f2:	42a3      	cmp	r3, r4
 80004f4:	419b      	sbcs	r3, r3
 80004f6:	425f      	negs	r7, r3
 80004f8:	1bc7      	subs	r7, r0, r7
 80004fa:	023b      	lsls	r3, r7, #8
 80004fc:	d400      	bmi.n	8000500 <__aeabi_dadd+0xa8>
 80004fe:	e0d0      	b.n	80006a2 <__aeabi_dadd+0x24a>
 8000500:	027f      	lsls	r7, r7, #9
 8000502:	0a7f      	lsrs	r7, r7, #9
 8000504:	2f00      	cmp	r7, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0xb2>
 8000508:	e0ff      	b.n	800070a <__aeabi_dadd+0x2b2>
 800050a:	0038      	movs	r0, r7
 800050c:	f001 fc6e 	bl	8001dec <__clzsi2>
 8000510:	0001      	movs	r1, r0
 8000512:	3908      	subs	r1, #8
 8000514:	2320      	movs	r3, #32
 8000516:	0022      	movs	r2, r4
 8000518:	1a5b      	subs	r3, r3, r1
 800051a:	408f      	lsls	r7, r1
 800051c:	40da      	lsrs	r2, r3
 800051e:	408c      	lsls	r4, r1
 8000520:	4317      	orrs	r7, r2
 8000522:	42b1      	cmp	r1, r6
 8000524:	da00      	bge.n	8000528 <__aeabi_dadd+0xd0>
 8000526:	e0ff      	b.n	8000728 <__aeabi_dadd+0x2d0>
 8000528:	1b89      	subs	r1, r1, r6
 800052a:	1c4b      	adds	r3, r1, #1
 800052c:	2b1f      	cmp	r3, #31
 800052e:	dd00      	ble.n	8000532 <__aeabi_dadd+0xda>
 8000530:	e0a8      	b.n	8000684 <__aeabi_dadd+0x22c>
 8000532:	2220      	movs	r2, #32
 8000534:	0039      	movs	r1, r7
 8000536:	1ad2      	subs	r2, r2, r3
 8000538:	0020      	movs	r0, r4
 800053a:	4094      	lsls	r4, r2
 800053c:	4091      	lsls	r1, r2
 800053e:	40d8      	lsrs	r0, r3
 8000540:	1e62      	subs	r2, r4, #1
 8000542:	4194      	sbcs	r4, r2
 8000544:	40df      	lsrs	r7, r3
 8000546:	2600      	movs	r6, #0
 8000548:	4301      	orrs	r1, r0
 800054a:	430c      	orrs	r4, r1
 800054c:	0763      	lsls	r3, r4, #29
 800054e:	d009      	beq.n	8000564 <__aeabi_dadd+0x10c>
 8000550:	230f      	movs	r3, #15
 8000552:	4023      	ands	r3, r4
 8000554:	2b04      	cmp	r3, #4
 8000556:	d005      	beq.n	8000564 <__aeabi_dadd+0x10c>
 8000558:	1d23      	adds	r3, r4, #4
 800055a:	42a3      	cmp	r3, r4
 800055c:	41a4      	sbcs	r4, r4
 800055e:	4264      	negs	r4, r4
 8000560:	193f      	adds	r7, r7, r4
 8000562:	001c      	movs	r4, r3
 8000564:	023b      	lsls	r3, r7, #8
 8000566:	d400      	bmi.n	800056a <__aeabi_dadd+0x112>
 8000568:	e09e      	b.n	80006a8 <__aeabi_dadd+0x250>
 800056a:	4b95      	ldr	r3, [pc, #596]	; (80007c0 <__aeabi_dadd+0x368>)
 800056c:	3601      	adds	r6, #1
 800056e:	429e      	cmp	r6, r3
 8000570:	d100      	bne.n	8000574 <__aeabi_dadd+0x11c>
 8000572:	e0b7      	b.n	80006e4 <__aeabi_dadd+0x28c>
 8000574:	4a93      	ldr	r2, [pc, #588]	; (80007c4 <__aeabi_dadd+0x36c>)
 8000576:	08e4      	lsrs	r4, r4, #3
 8000578:	4017      	ands	r7, r2
 800057a:	077b      	lsls	r3, r7, #29
 800057c:	0571      	lsls	r1, r6, #21
 800057e:	027f      	lsls	r7, r7, #9
 8000580:	4323      	orrs	r3, r4
 8000582:	0b3f      	lsrs	r7, r7, #12
 8000584:	0d4a      	lsrs	r2, r1, #21
 8000586:	0512      	lsls	r2, r2, #20
 8000588:	433a      	orrs	r2, r7
 800058a:	07ed      	lsls	r5, r5, #31
 800058c:	432a      	orrs	r2, r5
 800058e:	0018      	movs	r0, r3
 8000590:	0011      	movs	r1, r2
 8000592:	bce0      	pop	{r5, r6, r7}
 8000594:	46ba      	mov	sl, r7
 8000596:	46b1      	mov	r9, r6
 8000598:	46a8      	mov	r8, r5
 800059a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059c:	2c00      	cmp	r4, #0
 800059e:	d04b      	beq.n	8000638 <__aeabi_dadd+0x1e0>
 80005a0:	464c      	mov	r4, r9
 80005a2:	1ba4      	subs	r4, r4, r6
 80005a4:	46a4      	mov	ip, r4
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_dadd+0x154>
 80005aa:	e123      	b.n	80007f4 <__aeabi_dadd+0x39c>
 80005ac:	0004      	movs	r4, r0
 80005ae:	431c      	orrs	r4, r3
 80005b0:	d100      	bne.n	80005b4 <__aeabi_dadd+0x15c>
 80005b2:	e1af      	b.n	8000914 <__aeabi_dadd+0x4bc>
 80005b4:	4662      	mov	r2, ip
 80005b6:	1e54      	subs	r4, r2, #1
 80005b8:	2a01      	cmp	r2, #1
 80005ba:	d100      	bne.n	80005be <__aeabi_dadd+0x166>
 80005bc:	e215      	b.n	80009ea <__aeabi_dadd+0x592>
 80005be:	4d80      	ldr	r5, [pc, #512]	; (80007c0 <__aeabi_dadd+0x368>)
 80005c0:	45ac      	cmp	ip, r5
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x16e>
 80005c4:	e1c8      	b.n	8000958 <__aeabi_dadd+0x500>
 80005c6:	46a4      	mov	ip, r4
 80005c8:	e11b      	b.n	8000802 <__aeabi_dadd+0x3aa>
 80005ca:	464a      	mov	r2, r9
 80005cc:	1ab2      	subs	r2, r6, r2
 80005ce:	4694      	mov	ip, r2
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_dadd+0x17e>
 80005d4:	e0ac      	b.n	8000730 <__aeabi_dadd+0x2d8>
 80005d6:	464a      	mov	r2, r9
 80005d8:	2a00      	cmp	r2, #0
 80005da:	d043      	beq.n	8000664 <__aeabi_dadd+0x20c>
 80005dc:	4a78      	ldr	r2, [pc, #480]	; (80007c0 <__aeabi_dadd+0x368>)
 80005de:	4296      	cmp	r6, r2
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x18c>
 80005e2:	e1af      	b.n	8000944 <__aeabi_dadd+0x4ec>
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	003c      	movs	r4, r7
 80005e8:	0412      	lsls	r2, r2, #16
 80005ea:	4314      	orrs	r4, r2
 80005ec:	46a0      	mov	r8, r4
 80005ee:	4662      	mov	r2, ip
 80005f0:	2a38      	cmp	r2, #56	; 0x38
 80005f2:	dc67      	bgt.n	80006c4 <__aeabi_dadd+0x26c>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dc00      	bgt.n	80005fa <__aeabi_dadd+0x1a2>
 80005f8:	e15f      	b.n	80008ba <__aeabi_dadd+0x462>
 80005fa:	4647      	mov	r7, r8
 80005fc:	3a20      	subs	r2, #32
 80005fe:	40d7      	lsrs	r7, r2
 8000600:	4662      	mov	r2, ip
 8000602:	2a20      	cmp	r2, #32
 8000604:	d005      	beq.n	8000612 <__aeabi_dadd+0x1ba>
 8000606:	4664      	mov	r4, ip
 8000608:	2240      	movs	r2, #64	; 0x40
 800060a:	1b12      	subs	r2, r2, r4
 800060c:	4644      	mov	r4, r8
 800060e:	4094      	lsls	r4, r2
 8000610:	4321      	orrs	r1, r4
 8000612:	1e4a      	subs	r2, r1, #1
 8000614:	4191      	sbcs	r1, r2
 8000616:	000c      	movs	r4, r1
 8000618:	433c      	orrs	r4, r7
 800061a:	e057      	b.n	80006cc <__aeabi_dadd+0x274>
 800061c:	003a      	movs	r2, r7
 800061e:	430a      	orrs	r2, r1
 8000620:	d100      	bne.n	8000624 <__aeabi_dadd+0x1cc>
 8000622:	e105      	b.n	8000830 <__aeabi_dadd+0x3d8>
 8000624:	0022      	movs	r2, r4
 8000626:	3a01      	subs	r2, #1
 8000628:	2c01      	cmp	r4, #1
 800062a:	d100      	bne.n	800062e <__aeabi_dadd+0x1d6>
 800062c:	e182      	b.n	8000934 <__aeabi_dadd+0x4dc>
 800062e:	4c64      	ldr	r4, [pc, #400]	; (80007c0 <__aeabi_dadd+0x368>)
 8000630:	45a4      	cmp	ip, r4
 8000632:	d05b      	beq.n	80006ec <__aeabi_dadd+0x294>
 8000634:	4694      	mov	ip, r2
 8000636:	e741      	b.n	80004bc <__aeabi_dadd+0x64>
 8000638:	4c63      	ldr	r4, [pc, #396]	; (80007c8 <__aeabi_dadd+0x370>)
 800063a:	1c77      	adds	r7, r6, #1
 800063c:	4227      	tst	r7, r4
 800063e:	d000      	beq.n	8000642 <__aeabi_dadd+0x1ea>
 8000640:	e0c4      	b.n	80007cc <__aeabi_dadd+0x374>
 8000642:	0004      	movs	r4, r0
 8000644:	431c      	orrs	r4, r3
 8000646:	2e00      	cmp	r6, #0
 8000648:	d000      	beq.n	800064c <__aeabi_dadd+0x1f4>
 800064a:	e169      	b.n	8000920 <__aeabi_dadd+0x4c8>
 800064c:	2c00      	cmp	r4, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_dadd+0x1fa>
 8000650:	e1bf      	b.n	80009d2 <__aeabi_dadd+0x57a>
 8000652:	4644      	mov	r4, r8
 8000654:	430c      	orrs	r4, r1
 8000656:	d000      	beq.n	800065a <__aeabi_dadd+0x202>
 8000658:	e1d0      	b.n	80009fc <__aeabi_dadd+0x5a4>
 800065a:	0742      	lsls	r2, r0, #29
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	4313      	orrs	r3, r2
 8000660:	08c0      	lsrs	r0, r0, #3
 8000662:	e029      	b.n	80006b8 <__aeabi_dadd+0x260>
 8000664:	003a      	movs	r2, r7
 8000666:	430a      	orrs	r2, r1
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x214>
 800066a:	e170      	b.n	800094e <__aeabi_dadd+0x4f6>
 800066c:	4662      	mov	r2, ip
 800066e:	4664      	mov	r4, ip
 8000670:	3a01      	subs	r2, #1
 8000672:	2c01      	cmp	r4, #1
 8000674:	d100      	bne.n	8000678 <__aeabi_dadd+0x220>
 8000676:	e0e0      	b.n	800083a <__aeabi_dadd+0x3e2>
 8000678:	4c51      	ldr	r4, [pc, #324]	; (80007c0 <__aeabi_dadd+0x368>)
 800067a:	45a4      	cmp	ip, r4
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x228>
 800067e:	e161      	b.n	8000944 <__aeabi_dadd+0x4ec>
 8000680:	4694      	mov	ip, r2
 8000682:	e7b4      	b.n	80005ee <__aeabi_dadd+0x196>
 8000684:	003a      	movs	r2, r7
 8000686:	391f      	subs	r1, #31
 8000688:	40ca      	lsrs	r2, r1
 800068a:	0011      	movs	r1, r2
 800068c:	2b20      	cmp	r3, #32
 800068e:	d003      	beq.n	8000698 <__aeabi_dadd+0x240>
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	409f      	lsls	r7, r3
 8000696:	433c      	orrs	r4, r7
 8000698:	1e63      	subs	r3, r4, #1
 800069a:	419c      	sbcs	r4, r3
 800069c:	2700      	movs	r7, #0
 800069e:	2600      	movs	r6, #0
 80006a0:	430c      	orrs	r4, r1
 80006a2:	0763      	lsls	r3, r4, #29
 80006a4:	d000      	beq.n	80006a8 <__aeabi_dadd+0x250>
 80006a6:	e753      	b.n	8000550 <__aeabi_dadd+0xf8>
 80006a8:	46b4      	mov	ip, r6
 80006aa:	08e4      	lsrs	r4, r4, #3
 80006ac:	077b      	lsls	r3, r7, #29
 80006ae:	4323      	orrs	r3, r4
 80006b0:	08f8      	lsrs	r0, r7, #3
 80006b2:	4a43      	ldr	r2, [pc, #268]	; (80007c0 <__aeabi_dadd+0x368>)
 80006b4:	4594      	cmp	ip, r2
 80006b6:	d01d      	beq.n	80006f4 <__aeabi_dadd+0x29c>
 80006b8:	4662      	mov	r2, ip
 80006ba:	0307      	lsls	r7, r0, #12
 80006bc:	0552      	lsls	r2, r2, #21
 80006be:	0b3f      	lsrs	r7, r7, #12
 80006c0:	0d52      	lsrs	r2, r2, #21
 80006c2:	e760      	b.n	8000586 <__aeabi_dadd+0x12e>
 80006c4:	4644      	mov	r4, r8
 80006c6:	430c      	orrs	r4, r1
 80006c8:	1e62      	subs	r2, r4, #1
 80006ca:	4194      	sbcs	r4, r2
 80006cc:	18e4      	adds	r4, r4, r3
 80006ce:	429c      	cmp	r4, r3
 80006d0:	419b      	sbcs	r3, r3
 80006d2:	425f      	negs	r7, r3
 80006d4:	183f      	adds	r7, r7, r0
 80006d6:	023b      	lsls	r3, r7, #8
 80006d8:	d5e3      	bpl.n	80006a2 <__aeabi_dadd+0x24a>
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <__aeabi_dadd+0x368>)
 80006dc:	3601      	adds	r6, #1
 80006de:	429e      	cmp	r6, r3
 80006e0:	d000      	beq.n	80006e4 <__aeabi_dadd+0x28c>
 80006e2:	e0b5      	b.n	8000850 <__aeabi_dadd+0x3f8>
 80006e4:	0032      	movs	r2, r6
 80006e6:	2700      	movs	r7, #0
 80006e8:	2300      	movs	r3, #0
 80006ea:	e74c      	b.n	8000586 <__aeabi_dadd+0x12e>
 80006ec:	0742      	lsls	r2, r0, #29
 80006ee:	08db      	lsrs	r3, r3, #3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	08c0      	lsrs	r0, r0, #3
 80006f4:	001a      	movs	r2, r3
 80006f6:	4302      	orrs	r2, r0
 80006f8:	d100      	bne.n	80006fc <__aeabi_dadd+0x2a4>
 80006fa:	e1e1      	b.n	8000ac0 <__aeabi_dadd+0x668>
 80006fc:	2780      	movs	r7, #128	; 0x80
 80006fe:	033f      	lsls	r7, r7, #12
 8000700:	4307      	orrs	r7, r0
 8000702:	033f      	lsls	r7, r7, #12
 8000704:	4a2e      	ldr	r2, [pc, #184]	; (80007c0 <__aeabi_dadd+0x368>)
 8000706:	0b3f      	lsrs	r7, r7, #12
 8000708:	e73d      	b.n	8000586 <__aeabi_dadd+0x12e>
 800070a:	0020      	movs	r0, r4
 800070c:	f001 fb6e 	bl	8001dec <__clzsi2>
 8000710:	0001      	movs	r1, r0
 8000712:	3118      	adds	r1, #24
 8000714:	291f      	cmp	r1, #31
 8000716:	dc00      	bgt.n	800071a <__aeabi_dadd+0x2c2>
 8000718:	e6fc      	b.n	8000514 <__aeabi_dadd+0xbc>
 800071a:	3808      	subs	r0, #8
 800071c:	4084      	lsls	r4, r0
 800071e:	0027      	movs	r7, r4
 8000720:	2400      	movs	r4, #0
 8000722:	42b1      	cmp	r1, r6
 8000724:	db00      	blt.n	8000728 <__aeabi_dadd+0x2d0>
 8000726:	e6ff      	b.n	8000528 <__aeabi_dadd+0xd0>
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <__aeabi_dadd+0x36c>)
 800072a:	1a76      	subs	r6, r6, r1
 800072c:	4017      	ands	r7, r2
 800072e:	e70d      	b.n	800054c <__aeabi_dadd+0xf4>
 8000730:	2a00      	cmp	r2, #0
 8000732:	d02f      	beq.n	8000794 <__aeabi_dadd+0x33c>
 8000734:	464a      	mov	r2, r9
 8000736:	1b92      	subs	r2, r2, r6
 8000738:	4694      	mov	ip, r2
 800073a:	2e00      	cmp	r6, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x2e8>
 800073e:	e0ad      	b.n	800089c <__aeabi_dadd+0x444>
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <__aeabi_dadd+0x368>)
 8000742:	4591      	cmp	r9, r2
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x2f0>
 8000746:	e10f      	b.n	8000968 <__aeabi_dadd+0x510>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0412      	lsls	r2, r2, #16
 800074c:	4310      	orrs	r0, r2
 800074e:	4662      	mov	r2, ip
 8000750:	2a38      	cmp	r2, #56	; 0x38
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0x2fe>
 8000754:	e10f      	b.n	8000976 <__aeabi_dadd+0x51e>
 8000756:	2a1f      	cmp	r2, #31
 8000758:	dd00      	ble.n	800075c <__aeabi_dadd+0x304>
 800075a:	e180      	b.n	8000a5e <__aeabi_dadd+0x606>
 800075c:	4664      	mov	r4, ip
 800075e:	2220      	movs	r2, #32
 8000760:	001e      	movs	r6, r3
 8000762:	1b12      	subs	r2, r2, r4
 8000764:	4667      	mov	r7, ip
 8000766:	0004      	movs	r4, r0
 8000768:	4093      	lsls	r3, r2
 800076a:	4094      	lsls	r4, r2
 800076c:	40fe      	lsrs	r6, r7
 800076e:	1e5a      	subs	r2, r3, #1
 8000770:	4193      	sbcs	r3, r2
 8000772:	40f8      	lsrs	r0, r7
 8000774:	4334      	orrs	r4, r6
 8000776:	431c      	orrs	r4, r3
 8000778:	4480      	add	r8, r0
 800077a:	1864      	adds	r4, r4, r1
 800077c:	428c      	cmp	r4, r1
 800077e:	41bf      	sbcs	r7, r7
 8000780:	427f      	negs	r7, r7
 8000782:	464e      	mov	r6, r9
 8000784:	4447      	add	r7, r8
 8000786:	e7a6      	b.n	80006d6 <__aeabi_dadd+0x27e>
 8000788:	4642      	mov	r2, r8
 800078a:	430a      	orrs	r2, r1
 800078c:	0011      	movs	r1, r2
 800078e:	1e4a      	subs	r2, r1, #1
 8000790:	4191      	sbcs	r1, r2
 8000792:	e6ad      	b.n	80004f0 <__aeabi_dadd+0x98>
 8000794:	4c0c      	ldr	r4, [pc, #48]	; (80007c8 <__aeabi_dadd+0x370>)
 8000796:	1c72      	adds	r2, r6, #1
 8000798:	4222      	tst	r2, r4
 800079a:	d000      	beq.n	800079e <__aeabi_dadd+0x346>
 800079c:	e0a1      	b.n	80008e2 <__aeabi_dadd+0x48a>
 800079e:	0002      	movs	r2, r0
 80007a0:	431a      	orrs	r2, r3
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_dadd+0x350>
 80007a6:	e0fa      	b.n	800099e <__aeabi_dadd+0x546>
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x356>
 80007ac:	e145      	b.n	8000a3a <__aeabi_dadd+0x5e2>
 80007ae:	003a      	movs	r2, r7
 80007b0:	430a      	orrs	r2, r1
 80007b2:	d000      	beq.n	80007b6 <__aeabi_dadd+0x35e>
 80007b4:	e146      	b.n	8000a44 <__aeabi_dadd+0x5ec>
 80007b6:	0742      	lsls	r2, r0, #29
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	08c0      	lsrs	r0, r0, #3
 80007be:	e77b      	b.n	80006b8 <__aeabi_dadd+0x260>
 80007c0:	000007ff 	.word	0x000007ff
 80007c4:	ff7fffff 	.word	0xff7fffff
 80007c8:	000007fe 	.word	0x000007fe
 80007cc:	4647      	mov	r7, r8
 80007ce:	1a5c      	subs	r4, r3, r1
 80007d0:	1bc2      	subs	r2, r0, r7
 80007d2:	42a3      	cmp	r3, r4
 80007d4:	41bf      	sbcs	r7, r7
 80007d6:	427f      	negs	r7, r7
 80007d8:	46b9      	mov	r9, r7
 80007da:	0017      	movs	r7, r2
 80007dc:	464a      	mov	r2, r9
 80007de:	1abf      	subs	r7, r7, r2
 80007e0:	023a      	lsls	r2, r7, #8
 80007e2:	d500      	bpl.n	80007e6 <__aeabi_dadd+0x38e>
 80007e4:	e08d      	b.n	8000902 <__aeabi_dadd+0x4aa>
 80007e6:	0023      	movs	r3, r4
 80007e8:	433b      	orrs	r3, r7
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x396>
 80007ec:	e68a      	b.n	8000504 <__aeabi_dadd+0xac>
 80007ee:	2000      	movs	r0, #0
 80007f0:	2500      	movs	r5, #0
 80007f2:	e761      	b.n	80006b8 <__aeabi_dadd+0x260>
 80007f4:	4cb4      	ldr	r4, [pc, #720]	; (8000ac8 <__aeabi_dadd+0x670>)
 80007f6:	45a1      	cmp	r9, r4
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x3a4>
 80007fa:	e0ad      	b.n	8000958 <__aeabi_dadd+0x500>
 80007fc:	2480      	movs	r4, #128	; 0x80
 80007fe:	0424      	lsls	r4, r4, #16
 8000800:	4320      	orrs	r0, r4
 8000802:	4664      	mov	r4, ip
 8000804:	2c38      	cmp	r4, #56	; 0x38
 8000806:	dc3d      	bgt.n	8000884 <__aeabi_dadd+0x42c>
 8000808:	4662      	mov	r2, ip
 800080a:	2c1f      	cmp	r4, #31
 800080c:	dd00      	ble.n	8000810 <__aeabi_dadd+0x3b8>
 800080e:	e0b7      	b.n	8000980 <__aeabi_dadd+0x528>
 8000810:	2520      	movs	r5, #32
 8000812:	001e      	movs	r6, r3
 8000814:	1b2d      	subs	r5, r5, r4
 8000816:	0004      	movs	r4, r0
 8000818:	40ab      	lsls	r3, r5
 800081a:	40ac      	lsls	r4, r5
 800081c:	40d6      	lsrs	r6, r2
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4642      	mov	r2, r8
 8000822:	1e5d      	subs	r5, r3, #1
 8000824:	41ab      	sbcs	r3, r5
 8000826:	4334      	orrs	r4, r6
 8000828:	1a12      	subs	r2, r2, r0
 800082a:	4690      	mov	r8, r2
 800082c:	4323      	orrs	r3, r4
 800082e:	e02c      	b.n	800088a <__aeabi_dadd+0x432>
 8000830:	0742      	lsls	r2, r0, #29
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	4313      	orrs	r3, r2
 8000836:	08c0      	lsrs	r0, r0, #3
 8000838:	e73b      	b.n	80006b2 <__aeabi_dadd+0x25a>
 800083a:	185c      	adds	r4, r3, r1
 800083c:	429c      	cmp	r4, r3
 800083e:	419b      	sbcs	r3, r3
 8000840:	4440      	add	r0, r8
 8000842:	425b      	negs	r3, r3
 8000844:	18c7      	adds	r7, r0, r3
 8000846:	2601      	movs	r6, #1
 8000848:	023b      	lsls	r3, r7, #8
 800084a:	d400      	bmi.n	800084e <__aeabi_dadd+0x3f6>
 800084c:	e729      	b.n	80006a2 <__aeabi_dadd+0x24a>
 800084e:	2602      	movs	r6, #2
 8000850:	4a9e      	ldr	r2, [pc, #632]	; (8000acc <__aeabi_dadd+0x674>)
 8000852:	0863      	lsrs	r3, r4, #1
 8000854:	4017      	ands	r7, r2
 8000856:	2201      	movs	r2, #1
 8000858:	4014      	ands	r4, r2
 800085a:	431c      	orrs	r4, r3
 800085c:	07fb      	lsls	r3, r7, #31
 800085e:	431c      	orrs	r4, r3
 8000860:	087f      	lsrs	r7, r7, #1
 8000862:	e673      	b.n	800054c <__aeabi_dadd+0xf4>
 8000864:	4644      	mov	r4, r8
 8000866:	3a20      	subs	r2, #32
 8000868:	40d4      	lsrs	r4, r2
 800086a:	4662      	mov	r2, ip
 800086c:	2a20      	cmp	r2, #32
 800086e:	d005      	beq.n	800087c <__aeabi_dadd+0x424>
 8000870:	4667      	mov	r7, ip
 8000872:	2240      	movs	r2, #64	; 0x40
 8000874:	1bd2      	subs	r2, r2, r7
 8000876:	4647      	mov	r7, r8
 8000878:	4097      	lsls	r7, r2
 800087a:	4339      	orrs	r1, r7
 800087c:	1e4a      	subs	r2, r1, #1
 800087e:	4191      	sbcs	r1, r2
 8000880:	4321      	orrs	r1, r4
 8000882:	e635      	b.n	80004f0 <__aeabi_dadd+0x98>
 8000884:	4303      	orrs	r3, r0
 8000886:	1e58      	subs	r0, r3, #1
 8000888:	4183      	sbcs	r3, r0
 800088a:	1acc      	subs	r4, r1, r3
 800088c:	42a1      	cmp	r1, r4
 800088e:	41bf      	sbcs	r7, r7
 8000890:	4643      	mov	r3, r8
 8000892:	427f      	negs	r7, r7
 8000894:	4655      	mov	r5, sl
 8000896:	464e      	mov	r6, r9
 8000898:	1bdf      	subs	r7, r3, r7
 800089a:	e62e      	b.n	80004fa <__aeabi_dadd+0xa2>
 800089c:	0002      	movs	r2, r0
 800089e:	431a      	orrs	r2, r3
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x44c>
 80008a2:	e0bd      	b.n	8000a20 <__aeabi_dadd+0x5c8>
 80008a4:	4662      	mov	r2, ip
 80008a6:	4664      	mov	r4, ip
 80008a8:	3a01      	subs	r2, #1
 80008aa:	2c01      	cmp	r4, #1
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x458>
 80008ae:	e0e5      	b.n	8000a7c <__aeabi_dadd+0x624>
 80008b0:	4c85      	ldr	r4, [pc, #532]	; (8000ac8 <__aeabi_dadd+0x670>)
 80008b2:	45a4      	cmp	ip, r4
 80008b4:	d058      	beq.n	8000968 <__aeabi_dadd+0x510>
 80008b6:	4694      	mov	ip, r2
 80008b8:	e749      	b.n	800074e <__aeabi_dadd+0x2f6>
 80008ba:	4664      	mov	r4, ip
 80008bc:	2220      	movs	r2, #32
 80008be:	1b12      	subs	r2, r2, r4
 80008c0:	4644      	mov	r4, r8
 80008c2:	4094      	lsls	r4, r2
 80008c4:	000f      	movs	r7, r1
 80008c6:	46a1      	mov	r9, r4
 80008c8:	4664      	mov	r4, ip
 80008ca:	4091      	lsls	r1, r2
 80008cc:	40e7      	lsrs	r7, r4
 80008ce:	464c      	mov	r4, r9
 80008d0:	1e4a      	subs	r2, r1, #1
 80008d2:	4191      	sbcs	r1, r2
 80008d4:	433c      	orrs	r4, r7
 80008d6:	4642      	mov	r2, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	4661      	mov	r1, ip
 80008dc:	40ca      	lsrs	r2, r1
 80008de:	1880      	adds	r0, r0, r2
 80008e0:	e6f4      	b.n	80006cc <__aeabi_dadd+0x274>
 80008e2:	4c79      	ldr	r4, [pc, #484]	; (8000ac8 <__aeabi_dadd+0x670>)
 80008e4:	42a2      	cmp	r2, r4
 80008e6:	d100      	bne.n	80008ea <__aeabi_dadd+0x492>
 80008e8:	e6fd      	b.n	80006e6 <__aeabi_dadd+0x28e>
 80008ea:	1859      	adds	r1, r3, r1
 80008ec:	4299      	cmp	r1, r3
 80008ee:	419b      	sbcs	r3, r3
 80008f0:	4440      	add	r0, r8
 80008f2:	425f      	negs	r7, r3
 80008f4:	19c7      	adds	r7, r0, r7
 80008f6:	07fc      	lsls	r4, r7, #31
 80008f8:	0849      	lsrs	r1, r1, #1
 80008fa:	0016      	movs	r6, r2
 80008fc:	430c      	orrs	r4, r1
 80008fe:	087f      	lsrs	r7, r7, #1
 8000900:	e6cf      	b.n	80006a2 <__aeabi_dadd+0x24a>
 8000902:	1acc      	subs	r4, r1, r3
 8000904:	42a1      	cmp	r1, r4
 8000906:	41bf      	sbcs	r7, r7
 8000908:	4643      	mov	r3, r8
 800090a:	427f      	negs	r7, r7
 800090c:	1a18      	subs	r0, r3, r0
 800090e:	4655      	mov	r5, sl
 8000910:	1bc7      	subs	r7, r0, r7
 8000912:	e5f7      	b.n	8000504 <__aeabi_dadd+0xac>
 8000914:	08c9      	lsrs	r1, r1, #3
 8000916:	077b      	lsls	r3, r7, #29
 8000918:	4655      	mov	r5, sl
 800091a:	430b      	orrs	r3, r1
 800091c:	08f8      	lsrs	r0, r7, #3
 800091e:	e6c8      	b.n	80006b2 <__aeabi_dadd+0x25a>
 8000920:	2c00      	cmp	r4, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x4ce>
 8000924:	e081      	b.n	8000a2a <__aeabi_dadd+0x5d2>
 8000926:	4643      	mov	r3, r8
 8000928:	430b      	orrs	r3, r1
 800092a:	d115      	bne.n	8000958 <__aeabi_dadd+0x500>
 800092c:	2080      	movs	r0, #128	; 0x80
 800092e:	2500      	movs	r5, #0
 8000930:	0300      	lsls	r0, r0, #12
 8000932:	e6e3      	b.n	80006fc <__aeabi_dadd+0x2a4>
 8000934:	1a5c      	subs	r4, r3, r1
 8000936:	42a3      	cmp	r3, r4
 8000938:	419b      	sbcs	r3, r3
 800093a:	1bc7      	subs	r7, r0, r7
 800093c:	425b      	negs	r3, r3
 800093e:	2601      	movs	r6, #1
 8000940:	1aff      	subs	r7, r7, r3
 8000942:	e5da      	b.n	80004fa <__aeabi_dadd+0xa2>
 8000944:	0742      	lsls	r2, r0, #29
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	4313      	orrs	r3, r2
 800094a:	08c0      	lsrs	r0, r0, #3
 800094c:	e6d2      	b.n	80006f4 <__aeabi_dadd+0x29c>
 800094e:	0742      	lsls	r2, r0, #29
 8000950:	08db      	lsrs	r3, r3, #3
 8000952:	4313      	orrs	r3, r2
 8000954:	08c0      	lsrs	r0, r0, #3
 8000956:	e6ac      	b.n	80006b2 <__aeabi_dadd+0x25a>
 8000958:	4643      	mov	r3, r8
 800095a:	4642      	mov	r2, r8
 800095c:	08c9      	lsrs	r1, r1, #3
 800095e:	075b      	lsls	r3, r3, #29
 8000960:	4655      	mov	r5, sl
 8000962:	430b      	orrs	r3, r1
 8000964:	08d0      	lsrs	r0, r2, #3
 8000966:	e6c5      	b.n	80006f4 <__aeabi_dadd+0x29c>
 8000968:	4643      	mov	r3, r8
 800096a:	4642      	mov	r2, r8
 800096c:	075b      	lsls	r3, r3, #29
 800096e:	08c9      	lsrs	r1, r1, #3
 8000970:	430b      	orrs	r3, r1
 8000972:	08d0      	lsrs	r0, r2, #3
 8000974:	e6be      	b.n	80006f4 <__aeabi_dadd+0x29c>
 8000976:	4303      	orrs	r3, r0
 8000978:	001c      	movs	r4, r3
 800097a:	1e63      	subs	r3, r4, #1
 800097c:	419c      	sbcs	r4, r3
 800097e:	e6fc      	b.n	800077a <__aeabi_dadd+0x322>
 8000980:	0002      	movs	r2, r0
 8000982:	3c20      	subs	r4, #32
 8000984:	40e2      	lsrs	r2, r4
 8000986:	0014      	movs	r4, r2
 8000988:	4662      	mov	r2, ip
 800098a:	2a20      	cmp	r2, #32
 800098c:	d003      	beq.n	8000996 <__aeabi_dadd+0x53e>
 800098e:	2540      	movs	r5, #64	; 0x40
 8000990:	1aad      	subs	r5, r5, r2
 8000992:	40a8      	lsls	r0, r5
 8000994:	4303      	orrs	r3, r0
 8000996:	1e58      	subs	r0, r3, #1
 8000998:	4183      	sbcs	r3, r0
 800099a:	4323      	orrs	r3, r4
 800099c:	e775      	b.n	800088a <__aeabi_dadd+0x432>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d0e2      	beq.n	8000968 <__aeabi_dadd+0x510>
 80009a2:	003a      	movs	r2, r7
 80009a4:	430a      	orrs	r2, r1
 80009a6:	d0cd      	beq.n	8000944 <__aeabi_dadd+0x4ec>
 80009a8:	0742      	lsls	r2, r0, #29
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	08c0      	lsrs	r0, r0, #3
 80009b2:	0312      	lsls	r2, r2, #12
 80009b4:	4210      	tst	r0, r2
 80009b6:	d006      	beq.n	80009c6 <__aeabi_dadd+0x56e>
 80009b8:	08fc      	lsrs	r4, r7, #3
 80009ba:	4214      	tst	r4, r2
 80009bc:	d103      	bne.n	80009c6 <__aeabi_dadd+0x56e>
 80009be:	0020      	movs	r0, r4
 80009c0:	08cb      	lsrs	r3, r1, #3
 80009c2:	077a      	lsls	r2, r7, #29
 80009c4:	4313      	orrs	r3, r2
 80009c6:	0f5a      	lsrs	r2, r3, #29
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	0752      	lsls	r2, r2, #29
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	4313      	orrs	r3, r2
 80009d0:	e690      	b.n	80006f4 <__aeabi_dadd+0x29c>
 80009d2:	4643      	mov	r3, r8
 80009d4:	430b      	orrs	r3, r1
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x582>
 80009d8:	e709      	b.n	80007ee <__aeabi_dadd+0x396>
 80009da:	4643      	mov	r3, r8
 80009dc:	4642      	mov	r2, r8
 80009de:	08c9      	lsrs	r1, r1, #3
 80009e0:	075b      	lsls	r3, r3, #29
 80009e2:	4655      	mov	r5, sl
 80009e4:	430b      	orrs	r3, r1
 80009e6:	08d0      	lsrs	r0, r2, #3
 80009e8:	e666      	b.n	80006b8 <__aeabi_dadd+0x260>
 80009ea:	1acc      	subs	r4, r1, r3
 80009ec:	42a1      	cmp	r1, r4
 80009ee:	4189      	sbcs	r1, r1
 80009f0:	1a3f      	subs	r7, r7, r0
 80009f2:	4249      	negs	r1, r1
 80009f4:	4655      	mov	r5, sl
 80009f6:	2601      	movs	r6, #1
 80009f8:	1a7f      	subs	r7, r7, r1
 80009fa:	e57e      	b.n	80004fa <__aeabi_dadd+0xa2>
 80009fc:	4642      	mov	r2, r8
 80009fe:	1a5c      	subs	r4, r3, r1
 8000a00:	1a87      	subs	r7, r0, r2
 8000a02:	42a3      	cmp	r3, r4
 8000a04:	4192      	sbcs	r2, r2
 8000a06:	4252      	negs	r2, r2
 8000a08:	1abf      	subs	r7, r7, r2
 8000a0a:	023a      	lsls	r2, r7, #8
 8000a0c:	d53d      	bpl.n	8000a8a <__aeabi_dadd+0x632>
 8000a0e:	1acc      	subs	r4, r1, r3
 8000a10:	42a1      	cmp	r1, r4
 8000a12:	4189      	sbcs	r1, r1
 8000a14:	4643      	mov	r3, r8
 8000a16:	4249      	negs	r1, r1
 8000a18:	1a1f      	subs	r7, r3, r0
 8000a1a:	4655      	mov	r5, sl
 8000a1c:	1a7f      	subs	r7, r7, r1
 8000a1e:	e595      	b.n	800054c <__aeabi_dadd+0xf4>
 8000a20:	077b      	lsls	r3, r7, #29
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	430b      	orrs	r3, r1
 8000a26:	08f8      	lsrs	r0, r7, #3
 8000a28:	e643      	b.n	80006b2 <__aeabi_dadd+0x25a>
 8000a2a:	4644      	mov	r4, r8
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	430c      	orrs	r4, r1
 8000a30:	d130      	bne.n	8000a94 <__aeabi_dadd+0x63c>
 8000a32:	0742      	lsls	r2, r0, #29
 8000a34:	4313      	orrs	r3, r2
 8000a36:	08c0      	lsrs	r0, r0, #3
 8000a38:	e65c      	b.n	80006f4 <__aeabi_dadd+0x29c>
 8000a3a:	077b      	lsls	r3, r7, #29
 8000a3c:	08c9      	lsrs	r1, r1, #3
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	08f8      	lsrs	r0, r7, #3
 8000a42:	e639      	b.n	80006b8 <__aeabi_dadd+0x260>
 8000a44:	185c      	adds	r4, r3, r1
 8000a46:	429c      	cmp	r4, r3
 8000a48:	419b      	sbcs	r3, r3
 8000a4a:	4440      	add	r0, r8
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	18c7      	adds	r7, r0, r3
 8000a50:	023b      	lsls	r3, r7, #8
 8000a52:	d400      	bmi.n	8000a56 <__aeabi_dadd+0x5fe>
 8000a54:	e625      	b.n	80006a2 <__aeabi_dadd+0x24a>
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <__aeabi_dadd+0x674>)
 8000a58:	2601      	movs	r6, #1
 8000a5a:	401f      	ands	r7, r3
 8000a5c:	e621      	b.n	80006a2 <__aeabi_dadd+0x24a>
 8000a5e:	0004      	movs	r4, r0
 8000a60:	3a20      	subs	r2, #32
 8000a62:	40d4      	lsrs	r4, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	2a20      	cmp	r2, #32
 8000a68:	d004      	beq.n	8000a74 <__aeabi_dadd+0x61c>
 8000a6a:	2240      	movs	r2, #64	; 0x40
 8000a6c:	4666      	mov	r6, ip
 8000a6e:	1b92      	subs	r2, r2, r6
 8000a70:	4090      	lsls	r0, r2
 8000a72:	4303      	orrs	r3, r0
 8000a74:	1e5a      	subs	r2, r3, #1
 8000a76:	4193      	sbcs	r3, r2
 8000a78:	431c      	orrs	r4, r3
 8000a7a:	e67e      	b.n	800077a <__aeabi_dadd+0x322>
 8000a7c:	185c      	adds	r4, r3, r1
 8000a7e:	428c      	cmp	r4, r1
 8000a80:	4189      	sbcs	r1, r1
 8000a82:	4440      	add	r0, r8
 8000a84:	4249      	negs	r1, r1
 8000a86:	1847      	adds	r7, r0, r1
 8000a88:	e6dd      	b.n	8000846 <__aeabi_dadd+0x3ee>
 8000a8a:	0023      	movs	r3, r4
 8000a8c:	433b      	orrs	r3, r7
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x63a>
 8000a90:	e6ad      	b.n	80007ee <__aeabi_dadd+0x396>
 8000a92:	e606      	b.n	80006a2 <__aeabi_dadd+0x24a>
 8000a94:	0744      	lsls	r4, r0, #29
 8000a96:	4323      	orrs	r3, r4
 8000a98:	2480      	movs	r4, #128	; 0x80
 8000a9a:	08c0      	lsrs	r0, r0, #3
 8000a9c:	0324      	lsls	r4, r4, #12
 8000a9e:	4220      	tst	r0, r4
 8000aa0:	d008      	beq.n	8000ab4 <__aeabi_dadd+0x65c>
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	08d6      	lsrs	r6, r2, #3
 8000aa6:	4226      	tst	r6, r4
 8000aa8:	d104      	bne.n	8000ab4 <__aeabi_dadd+0x65c>
 8000aaa:	4655      	mov	r5, sl
 8000aac:	0030      	movs	r0, r6
 8000aae:	08cb      	lsrs	r3, r1, #3
 8000ab0:	0751      	lsls	r1, r2, #29
 8000ab2:	430b      	orrs	r3, r1
 8000ab4:	0f5a      	lsrs	r2, r3, #29
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	08db      	lsrs	r3, r3, #3
 8000aba:	0752      	lsls	r2, r2, #29
 8000abc:	4313      	orrs	r3, r2
 8000abe:	e619      	b.n	80006f4 <__aeabi_dadd+0x29c>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4a01      	ldr	r2, [pc, #4]	; (8000ac8 <__aeabi_dadd+0x670>)
 8000ac4:	001f      	movs	r7, r3
 8000ac6:	e55e      	b.n	8000586 <__aeabi_dadd+0x12e>
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	ff7fffff 	.word	0xff7fffff

08000ad0 <__aeabi_ddiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	4657      	mov	r7, sl
 8000ad4:	464e      	mov	r6, r9
 8000ad6:	4645      	mov	r5, r8
 8000ad8:	46de      	mov	lr, fp
 8000ada:	b5e0      	push	{r5, r6, r7, lr}
 8000adc:	4681      	mov	r9, r0
 8000ade:	0005      	movs	r5, r0
 8000ae0:	030c      	lsls	r4, r1, #12
 8000ae2:	0048      	lsls	r0, r1, #1
 8000ae4:	4692      	mov	sl, r2
 8000ae6:	001f      	movs	r7, r3
 8000ae8:	b085      	sub	sp, #20
 8000aea:	0b24      	lsrs	r4, r4, #12
 8000aec:	0d40      	lsrs	r0, r0, #21
 8000aee:	0fce      	lsrs	r6, r1, #31
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_ddiv+0x26>
 8000af4:	e156      	b.n	8000da4 <__aeabi_ddiv+0x2d4>
 8000af6:	4bd4      	ldr	r3, [pc, #848]	; (8000e48 <__aeabi_ddiv+0x378>)
 8000af8:	4298      	cmp	r0, r3
 8000afa:	d100      	bne.n	8000afe <__aeabi_ddiv+0x2e>
 8000afc:	e172      	b.n	8000de4 <__aeabi_ddiv+0x314>
 8000afe:	0f6b      	lsrs	r3, r5, #29
 8000b00:	00e4      	lsls	r4, r4, #3
 8000b02:	431c      	orrs	r4, r3
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	4323      	orrs	r3, r4
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	4bcf      	ldr	r3, [pc, #828]	; (8000e4c <__aeabi_ddiv+0x37c>)
 8000b0e:	00ed      	lsls	r5, r5, #3
 8000b10:	469b      	mov	fp, r3
 8000b12:	2300      	movs	r3, #0
 8000b14:	4699      	mov	r9, r3
 8000b16:	4483      	add	fp, r0
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	033c      	lsls	r4, r7, #12
 8000b1c:	007b      	lsls	r3, r7, #1
 8000b1e:	4650      	mov	r0, sl
 8000b20:	0b24      	lsrs	r4, r4, #12
 8000b22:	0d5b      	lsrs	r3, r3, #21
 8000b24:	0fff      	lsrs	r7, r7, #31
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x5c>
 8000b2a:	e11f      	b.n	8000d6c <__aeabi_ddiv+0x29c>
 8000b2c:	4ac6      	ldr	r2, [pc, #792]	; (8000e48 <__aeabi_ddiv+0x378>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x64>
 8000b32:	e162      	b.n	8000dfa <__aeabi_ddiv+0x32a>
 8000b34:	49c5      	ldr	r1, [pc, #788]	; (8000e4c <__aeabi_ddiv+0x37c>)
 8000b36:	0f42      	lsrs	r2, r0, #29
 8000b38:	468c      	mov	ip, r1
 8000b3a:	00e4      	lsls	r4, r4, #3
 8000b3c:	4659      	mov	r1, fp
 8000b3e:	4314      	orrs	r4, r2
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	4463      	add	r3, ip
 8000b44:	0412      	lsls	r2, r2, #16
 8000b46:	1acb      	subs	r3, r1, r3
 8000b48:	4314      	orrs	r4, r2
 8000b4a:	469b      	mov	fp, r3
 8000b4c:	00c2      	lsls	r2, r0, #3
 8000b4e:	2000      	movs	r0, #0
 8000b50:	0033      	movs	r3, r6
 8000b52:	407b      	eors	r3, r7
 8000b54:	469a      	mov	sl, r3
 8000b56:	464b      	mov	r3, r9
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d827      	bhi.n	8000bac <__aeabi_ddiv+0xdc>
 8000b5c:	49bc      	ldr	r1, [pc, #752]	; (8000e50 <__aeabi_ddiv+0x380>)
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	58cb      	ldr	r3, [r1, r3]
 8000b62:	469f      	mov	pc, r3
 8000b64:	46b2      	mov	sl, r6
 8000b66:	9b00      	ldr	r3, [sp, #0]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d016      	beq.n	8000b9a <__aeabi_ddiv+0xca>
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_ddiv+0xa2>
 8000b70:	e28e      	b.n	8001090 <__aeabi_ddiv+0x5c0>
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d000      	beq.n	8000b78 <__aeabi_ddiv+0xa8>
 8000b76:	e0d9      	b.n	8000d2c <__aeabi_ddiv+0x25c>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2400      	movs	r4, #0
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	4652      	mov	r2, sl
 8000b80:	051b      	lsls	r3, r3, #20
 8000b82:	4323      	orrs	r3, r4
 8000b84:	07d2      	lsls	r2, r2, #31
 8000b86:	4313      	orrs	r3, r2
 8000b88:	0028      	movs	r0, r5
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	b005      	add	sp, #20
 8000b8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b90:	46bb      	mov	fp, r7
 8000b92:	46b2      	mov	sl, r6
 8000b94:	46a9      	mov	r9, r5
 8000b96:	46a0      	mov	r8, r4
 8000b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b9a:	2400      	movs	r4, #0
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	4baa      	ldr	r3, [pc, #680]	; (8000e48 <__aeabi_ddiv+0x378>)
 8000ba0:	e7ed      	b.n	8000b7e <__aeabi_ddiv+0xae>
 8000ba2:	46ba      	mov	sl, r7
 8000ba4:	46a0      	mov	r8, r4
 8000ba6:	0015      	movs	r5, r2
 8000ba8:	9000      	str	r0, [sp, #0]
 8000baa:	e7dc      	b.n	8000b66 <__aeabi_ddiv+0x96>
 8000bac:	4544      	cmp	r4, r8
 8000bae:	d200      	bcs.n	8000bb2 <__aeabi_ddiv+0xe2>
 8000bb0:	e1c7      	b.n	8000f42 <__aeabi_ddiv+0x472>
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_ddiv+0xe6>
 8000bb4:	e1c2      	b.n	8000f3c <__aeabi_ddiv+0x46c>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	425b      	negs	r3, r3
 8000bba:	469c      	mov	ip, r3
 8000bbc:	002e      	movs	r6, r5
 8000bbe:	4640      	mov	r0, r8
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	44e3      	add	fp, ip
 8000bc4:	0223      	lsls	r3, r4, #8
 8000bc6:	0e14      	lsrs	r4, r2, #24
 8000bc8:	431c      	orrs	r4, r3
 8000bca:	0c1b      	lsrs	r3, r3, #16
 8000bcc:	4699      	mov	r9, r3
 8000bce:	0423      	lsls	r3, r4, #16
 8000bd0:	0c1f      	lsrs	r7, r3, #16
 8000bd2:	0212      	lsls	r2, r2, #8
 8000bd4:	4649      	mov	r1, r9
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	9701      	str	r7, [sp, #4]
 8000bda:	f7ff fb17 	bl	800020c <__aeabi_uidivmod>
 8000bde:	0002      	movs	r2, r0
 8000be0:	437a      	muls	r2, r7
 8000be2:	040b      	lsls	r3, r1, #16
 8000be4:	0c31      	lsrs	r1, r6, #16
 8000be6:	4680      	mov	r8, r0
 8000be8:	4319      	orrs	r1, r3
 8000bea:	428a      	cmp	r2, r1
 8000bec:	d907      	bls.n	8000bfe <__aeabi_ddiv+0x12e>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	425b      	negs	r3, r3
 8000bf2:	469c      	mov	ip, r3
 8000bf4:	1909      	adds	r1, r1, r4
 8000bf6:	44e0      	add	r8, ip
 8000bf8:	428c      	cmp	r4, r1
 8000bfa:	d800      	bhi.n	8000bfe <__aeabi_ddiv+0x12e>
 8000bfc:	e207      	b.n	800100e <__aeabi_ddiv+0x53e>
 8000bfe:	1a88      	subs	r0, r1, r2
 8000c00:	4649      	mov	r1, r9
 8000c02:	f7ff fb03 	bl	800020c <__aeabi_uidivmod>
 8000c06:	0409      	lsls	r1, r1, #16
 8000c08:	468c      	mov	ip, r1
 8000c0a:	0431      	lsls	r1, r6, #16
 8000c0c:	4666      	mov	r6, ip
 8000c0e:	9a01      	ldr	r2, [sp, #4]
 8000c10:	0c09      	lsrs	r1, r1, #16
 8000c12:	4342      	muls	r2, r0
 8000c14:	0003      	movs	r3, r0
 8000c16:	4331      	orrs	r1, r6
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	d904      	bls.n	8000c26 <__aeabi_ddiv+0x156>
 8000c1c:	1909      	adds	r1, r1, r4
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	428c      	cmp	r4, r1
 8000c22:	d800      	bhi.n	8000c26 <__aeabi_ddiv+0x156>
 8000c24:	e1ed      	b.n	8001002 <__aeabi_ddiv+0x532>
 8000c26:	1a88      	subs	r0, r1, r2
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0412      	lsls	r2, r2, #16
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	4690      	mov	r8, r2
 8000c30:	4641      	mov	r1, r8
 8000c32:	9b00      	ldr	r3, [sp, #0]
 8000c34:	040e      	lsls	r6, r1, #16
 8000c36:	0c1b      	lsrs	r3, r3, #16
 8000c38:	001f      	movs	r7, r3
 8000c3a:	9302      	str	r3, [sp, #8]
 8000c3c:	9b00      	ldr	r3, [sp, #0]
 8000c3e:	0c36      	lsrs	r6, r6, #16
 8000c40:	041b      	lsls	r3, r3, #16
 8000c42:	0c19      	lsrs	r1, r3, #16
 8000c44:	000b      	movs	r3, r1
 8000c46:	4373      	muls	r3, r6
 8000c48:	0c12      	lsrs	r2, r2, #16
 8000c4a:	437e      	muls	r6, r7
 8000c4c:	9103      	str	r1, [sp, #12]
 8000c4e:	4351      	muls	r1, r2
 8000c50:	437a      	muls	r2, r7
 8000c52:	0c1f      	lsrs	r7, r3, #16
 8000c54:	46bc      	mov	ip, r7
 8000c56:	1876      	adds	r6, r6, r1
 8000c58:	4466      	add	r6, ip
 8000c5a:	42b1      	cmp	r1, r6
 8000c5c:	d903      	bls.n	8000c66 <__aeabi_ddiv+0x196>
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0249      	lsls	r1, r1, #9
 8000c62:	468c      	mov	ip, r1
 8000c64:	4462      	add	r2, ip
 8000c66:	0c31      	lsrs	r1, r6, #16
 8000c68:	188a      	adds	r2, r1, r2
 8000c6a:	0431      	lsls	r1, r6, #16
 8000c6c:	041e      	lsls	r6, r3, #16
 8000c6e:	0c36      	lsrs	r6, r6, #16
 8000c70:	198e      	adds	r6, r1, r6
 8000c72:	4290      	cmp	r0, r2
 8000c74:	d302      	bcc.n	8000c7c <__aeabi_ddiv+0x1ac>
 8000c76:	d112      	bne.n	8000c9e <__aeabi_ddiv+0x1ce>
 8000c78:	42b5      	cmp	r5, r6
 8000c7a:	d210      	bcs.n	8000c9e <__aeabi_ddiv+0x1ce>
 8000c7c:	4643      	mov	r3, r8
 8000c7e:	1e59      	subs	r1, r3, #1
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	469c      	mov	ip, r3
 8000c84:	4465      	add	r5, ip
 8000c86:	001f      	movs	r7, r3
 8000c88:	429d      	cmp	r5, r3
 8000c8a:	419b      	sbcs	r3, r3
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	191b      	adds	r3, r3, r4
 8000c90:	18c0      	adds	r0, r0, r3
 8000c92:	4284      	cmp	r4, r0
 8000c94:	d200      	bcs.n	8000c98 <__aeabi_ddiv+0x1c8>
 8000c96:	e1a0      	b.n	8000fda <__aeabi_ddiv+0x50a>
 8000c98:	d100      	bne.n	8000c9c <__aeabi_ddiv+0x1cc>
 8000c9a:	e19b      	b.n	8000fd4 <__aeabi_ddiv+0x504>
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	1bae      	subs	r6, r5, r6
 8000ca0:	42b5      	cmp	r5, r6
 8000ca2:	41ad      	sbcs	r5, r5
 8000ca4:	1a80      	subs	r0, r0, r2
 8000ca6:	426d      	negs	r5, r5
 8000ca8:	1b40      	subs	r0, r0, r5
 8000caa:	4284      	cmp	r4, r0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x1e0>
 8000cae:	e1d5      	b.n	800105c <__aeabi_ddiv+0x58c>
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	f7ff faab 	bl	800020c <__aeabi_uidivmod>
 8000cb6:	9a01      	ldr	r2, [sp, #4]
 8000cb8:	040b      	lsls	r3, r1, #16
 8000cba:	4342      	muls	r2, r0
 8000cbc:	0c31      	lsrs	r1, r6, #16
 8000cbe:	0005      	movs	r5, r0
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	428a      	cmp	r2, r1
 8000cc4:	d900      	bls.n	8000cc8 <__aeabi_ddiv+0x1f8>
 8000cc6:	e16c      	b.n	8000fa2 <__aeabi_ddiv+0x4d2>
 8000cc8:	1a88      	subs	r0, r1, r2
 8000cca:	4649      	mov	r1, r9
 8000ccc:	f7ff fa9e 	bl	800020c <__aeabi_uidivmod>
 8000cd0:	9a01      	ldr	r2, [sp, #4]
 8000cd2:	0436      	lsls	r6, r6, #16
 8000cd4:	4342      	muls	r2, r0
 8000cd6:	0409      	lsls	r1, r1, #16
 8000cd8:	0c36      	lsrs	r6, r6, #16
 8000cda:	0003      	movs	r3, r0
 8000cdc:	430e      	orrs	r6, r1
 8000cde:	42b2      	cmp	r2, r6
 8000ce0:	d900      	bls.n	8000ce4 <__aeabi_ddiv+0x214>
 8000ce2:	e153      	b.n	8000f8c <__aeabi_ddiv+0x4bc>
 8000ce4:	9803      	ldr	r0, [sp, #12]
 8000ce6:	1ab6      	subs	r6, r6, r2
 8000ce8:	0002      	movs	r2, r0
 8000cea:	042d      	lsls	r5, r5, #16
 8000cec:	431d      	orrs	r5, r3
 8000cee:	9f02      	ldr	r7, [sp, #8]
 8000cf0:	042b      	lsls	r3, r5, #16
 8000cf2:	0c1b      	lsrs	r3, r3, #16
 8000cf4:	435a      	muls	r2, r3
 8000cf6:	437b      	muls	r3, r7
 8000cf8:	469c      	mov	ip, r3
 8000cfa:	0c29      	lsrs	r1, r5, #16
 8000cfc:	4348      	muls	r0, r1
 8000cfe:	0c13      	lsrs	r3, r2, #16
 8000d00:	4484      	add	ip, r0
 8000d02:	4463      	add	r3, ip
 8000d04:	4379      	muls	r1, r7
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d903      	bls.n	8000d12 <__aeabi_ddiv+0x242>
 8000d0a:	2080      	movs	r0, #128	; 0x80
 8000d0c:	0240      	lsls	r0, r0, #9
 8000d0e:	4684      	mov	ip, r0
 8000d10:	4461      	add	r1, ip
 8000d12:	0c18      	lsrs	r0, r3, #16
 8000d14:	0412      	lsls	r2, r2, #16
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	0c12      	lsrs	r2, r2, #16
 8000d1a:	1841      	adds	r1, r0, r1
 8000d1c:	189b      	adds	r3, r3, r2
 8000d1e:	428e      	cmp	r6, r1
 8000d20:	d200      	bcs.n	8000d24 <__aeabi_ddiv+0x254>
 8000d22:	e0ff      	b.n	8000f24 <__aeabi_ddiv+0x454>
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x258>
 8000d26:	e0fa      	b.n	8000f1e <__aeabi_ddiv+0x44e>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	431d      	orrs	r5, r3
 8000d2c:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <__aeabi_ddiv+0x384>)
 8000d2e:	445a      	add	r2, fp
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	dc00      	bgt.n	8000d36 <__aeabi_ddiv+0x266>
 8000d34:	e0aa      	b.n	8000e8c <__aeabi_ddiv+0x3bc>
 8000d36:	076b      	lsls	r3, r5, #29
 8000d38:	d000      	beq.n	8000d3c <__aeabi_ddiv+0x26c>
 8000d3a:	e13d      	b.n	8000fb8 <__aeabi_ddiv+0x4e8>
 8000d3c:	08ed      	lsrs	r5, r5, #3
 8000d3e:	4643      	mov	r3, r8
 8000d40:	01db      	lsls	r3, r3, #7
 8000d42:	d506      	bpl.n	8000d52 <__aeabi_ddiv+0x282>
 8000d44:	4642      	mov	r2, r8
 8000d46:	4b44      	ldr	r3, [pc, #272]	; (8000e58 <__aeabi_ddiv+0x388>)
 8000d48:	401a      	ands	r2, r3
 8000d4a:	4690      	mov	r8, r2
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	00d2      	lsls	r2, r2, #3
 8000d50:	445a      	add	r2, fp
 8000d52:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <__aeabi_ddiv+0x38c>)
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dd00      	ble.n	8000d5a <__aeabi_ddiv+0x28a>
 8000d58:	e71f      	b.n	8000b9a <__aeabi_ddiv+0xca>
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	075b      	lsls	r3, r3, #29
 8000d5e:	431d      	orrs	r5, r3
 8000d60:	4643      	mov	r3, r8
 8000d62:	0552      	lsls	r2, r2, #21
 8000d64:	025c      	lsls	r4, r3, #9
 8000d66:	0b24      	lsrs	r4, r4, #12
 8000d68:	0d53      	lsrs	r3, r2, #21
 8000d6a:	e708      	b.n	8000b7e <__aeabi_ddiv+0xae>
 8000d6c:	4652      	mov	r2, sl
 8000d6e:	4322      	orrs	r2, r4
 8000d70:	d100      	bne.n	8000d74 <__aeabi_ddiv+0x2a4>
 8000d72:	e07b      	b.n	8000e6c <__aeabi_ddiv+0x39c>
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2aa>
 8000d78:	e0fa      	b.n	8000f70 <__aeabi_ddiv+0x4a0>
 8000d7a:	0020      	movs	r0, r4
 8000d7c:	f001 f836 	bl	8001dec <__clzsi2>
 8000d80:	0002      	movs	r2, r0
 8000d82:	3a0b      	subs	r2, #11
 8000d84:	231d      	movs	r3, #29
 8000d86:	0001      	movs	r1, r0
 8000d88:	1a9b      	subs	r3, r3, r2
 8000d8a:	4652      	mov	r2, sl
 8000d8c:	3908      	subs	r1, #8
 8000d8e:	40da      	lsrs	r2, r3
 8000d90:	408c      	lsls	r4, r1
 8000d92:	4314      	orrs	r4, r2
 8000d94:	4652      	mov	r2, sl
 8000d96:	408a      	lsls	r2, r1
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <__aeabi_ddiv+0x390>)
 8000d9a:	4458      	add	r0, fp
 8000d9c:	469b      	mov	fp, r3
 8000d9e:	4483      	add	fp, r0
 8000da0:	2000      	movs	r0, #0
 8000da2:	e6d5      	b.n	8000b50 <__aeabi_ddiv+0x80>
 8000da4:	464b      	mov	r3, r9
 8000da6:	4323      	orrs	r3, r4
 8000da8:	4698      	mov	r8, r3
 8000daa:	d044      	beq.n	8000e36 <__aeabi_ddiv+0x366>
 8000dac:	2c00      	cmp	r4, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_ddiv+0x2e2>
 8000db0:	e0ce      	b.n	8000f50 <__aeabi_ddiv+0x480>
 8000db2:	0020      	movs	r0, r4
 8000db4:	f001 f81a 	bl	8001dec <__clzsi2>
 8000db8:	0001      	movs	r1, r0
 8000dba:	0002      	movs	r2, r0
 8000dbc:	390b      	subs	r1, #11
 8000dbe:	231d      	movs	r3, #29
 8000dc0:	1a5b      	subs	r3, r3, r1
 8000dc2:	4649      	mov	r1, r9
 8000dc4:	0010      	movs	r0, r2
 8000dc6:	40d9      	lsrs	r1, r3
 8000dc8:	3808      	subs	r0, #8
 8000dca:	4084      	lsls	r4, r0
 8000dcc:	000b      	movs	r3, r1
 8000dce:	464d      	mov	r5, r9
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	4085      	lsls	r5, r0
 8000dd6:	4823      	ldr	r0, [pc, #140]	; (8000e64 <__aeabi_ddiv+0x394>)
 8000dd8:	1a83      	subs	r3, r0, r2
 8000dda:	469b      	mov	fp, r3
 8000ddc:	2300      	movs	r3, #0
 8000dde:	4699      	mov	r9, r3
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	e69a      	b.n	8000b1a <__aeabi_ddiv+0x4a>
 8000de4:	464b      	mov	r3, r9
 8000de6:	4323      	orrs	r3, r4
 8000de8:	4698      	mov	r8, r3
 8000dea:	d11d      	bne.n	8000e28 <__aeabi_ddiv+0x358>
 8000dec:	2308      	movs	r3, #8
 8000dee:	4699      	mov	r9, r3
 8000df0:	3b06      	subs	r3, #6
 8000df2:	2500      	movs	r5, #0
 8000df4:	4683      	mov	fp, r0
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	e68f      	b.n	8000b1a <__aeabi_ddiv+0x4a>
 8000dfa:	4652      	mov	r2, sl
 8000dfc:	4322      	orrs	r2, r4
 8000dfe:	d109      	bne.n	8000e14 <__aeabi_ddiv+0x344>
 8000e00:	2302      	movs	r3, #2
 8000e02:	4649      	mov	r1, r9
 8000e04:	4319      	orrs	r1, r3
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <__aeabi_ddiv+0x398>)
 8000e08:	4689      	mov	r9, r1
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	2002      	movs	r0, #2
 8000e10:	44e3      	add	fp, ip
 8000e12:	e69d      	b.n	8000b50 <__aeabi_ddiv+0x80>
 8000e14:	2303      	movs	r3, #3
 8000e16:	464a      	mov	r2, r9
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <__aeabi_ddiv+0x398>)
 8000e1c:	4691      	mov	r9, r2
 8000e1e:	469c      	mov	ip, r3
 8000e20:	4652      	mov	r2, sl
 8000e22:	2003      	movs	r0, #3
 8000e24:	44e3      	add	fp, ip
 8000e26:	e693      	b.n	8000b50 <__aeabi_ddiv+0x80>
 8000e28:	230c      	movs	r3, #12
 8000e2a:	4699      	mov	r9, r3
 8000e2c:	3b09      	subs	r3, #9
 8000e2e:	46a0      	mov	r8, r4
 8000e30:	4683      	mov	fp, r0
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	e671      	b.n	8000b1a <__aeabi_ddiv+0x4a>
 8000e36:	2304      	movs	r3, #4
 8000e38:	4699      	mov	r9, r3
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	469b      	mov	fp, r3
 8000e3e:	3301      	adds	r3, #1
 8000e40:	2500      	movs	r5, #0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	e669      	b.n	8000b1a <__aeabi_ddiv+0x4a>
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	000007ff 	.word	0x000007ff
 8000e4c:	fffffc01 	.word	0xfffffc01
 8000e50:	08005568 	.word	0x08005568
 8000e54:	000003ff 	.word	0x000003ff
 8000e58:	feffffff 	.word	0xfeffffff
 8000e5c:	000007fe 	.word	0x000007fe
 8000e60:	000003f3 	.word	0x000003f3
 8000e64:	fffffc0d 	.word	0xfffffc0d
 8000e68:	fffff801 	.word	0xfffff801
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	2301      	movs	r3, #1
 8000e70:	4319      	orrs	r1, r3
 8000e72:	4689      	mov	r9, r1
 8000e74:	2400      	movs	r4, #0
 8000e76:	2001      	movs	r0, #1
 8000e78:	e66a      	b.n	8000b50 <__aeabi_ddiv+0x80>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2480      	movs	r4, #128	; 0x80
 8000e7e:	469a      	mov	sl, r3
 8000e80:	2500      	movs	r5, #0
 8000e82:	4b8a      	ldr	r3, [pc, #552]	; (80010ac <__aeabi_ddiv+0x5dc>)
 8000e84:	0324      	lsls	r4, r4, #12
 8000e86:	e67a      	b.n	8000b7e <__aeabi_ddiv+0xae>
 8000e88:	2501      	movs	r5, #1
 8000e8a:	426d      	negs	r5, r5
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	2b38      	cmp	r3, #56	; 0x38
 8000e92:	dd00      	ble.n	8000e96 <__aeabi_ddiv+0x3c6>
 8000e94:	e670      	b.n	8000b78 <__aeabi_ddiv+0xa8>
 8000e96:	2b1f      	cmp	r3, #31
 8000e98:	dc00      	bgt.n	8000e9c <__aeabi_ddiv+0x3cc>
 8000e9a:	e0bf      	b.n	800101c <__aeabi_ddiv+0x54c>
 8000e9c:	211f      	movs	r1, #31
 8000e9e:	4249      	negs	r1, r1
 8000ea0:	1a8a      	subs	r2, r1, r2
 8000ea2:	4641      	mov	r1, r8
 8000ea4:	40d1      	lsrs	r1, r2
 8000ea6:	000a      	movs	r2, r1
 8000ea8:	2b20      	cmp	r3, #32
 8000eaa:	d004      	beq.n	8000eb6 <__aeabi_ddiv+0x3e6>
 8000eac:	4641      	mov	r1, r8
 8000eae:	4b80      	ldr	r3, [pc, #512]	; (80010b0 <__aeabi_ddiv+0x5e0>)
 8000eb0:	445b      	add	r3, fp
 8000eb2:	4099      	lsls	r1, r3
 8000eb4:	430d      	orrs	r5, r1
 8000eb6:	1e6b      	subs	r3, r5, #1
 8000eb8:	419d      	sbcs	r5, r3
 8000eba:	2307      	movs	r3, #7
 8000ebc:	432a      	orrs	r2, r5
 8000ebe:	001d      	movs	r5, r3
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	4015      	ands	r5, r2
 8000ec4:	4213      	tst	r3, r2
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x3fa>
 8000ec8:	e0d4      	b.n	8001074 <__aeabi_ddiv+0x5a4>
 8000eca:	210f      	movs	r1, #15
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4011      	ands	r1, r2
 8000ed0:	2904      	cmp	r1, #4
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_ddiv+0x406>
 8000ed4:	e0cb      	b.n	800106e <__aeabi_ddiv+0x59e>
 8000ed6:	1d11      	adds	r1, r2, #4
 8000ed8:	4291      	cmp	r1, r2
 8000eda:	4192      	sbcs	r2, r2
 8000edc:	4252      	negs	r2, r2
 8000ede:	189b      	adds	r3, r3, r2
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	0219      	lsls	r1, r3, #8
 8000ee4:	d400      	bmi.n	8000ee8 <__aeabi_ddiv+0x418>
 8000ee6:	e0c2      	b.n	800106e <__aeabi_ddiv+0x59e>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2400      	movs	r4, #0
 8000eec:	2500      	movs	r5, #0
 8000eee:	e646      	b.n	8000b7e <__aeabi_ddiv+0xae>
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	031b      	lsls	r3, r3, #12
 8000ef6:	4219      	tst	r1, r3
 8000ef8:	d008      	beq.n	8000f0c <__aeabi_ddiv+0x43c>
 8000efa:	421c      	tst	r4, r3
 8000efc:	d106      	bne.n	8000f0c <__aeabi_ddiv+0x43c>
 8000efe:	431c      	orrs	r4, r3
 8000f00:	0324      	lsls	r4, r4, #12
 8000f02:	46ba      	mov	sl, r7
 8000f04:	0015      	movs	r5, r2
 8000f06:	4b69      	ldr	r3, [pc, #420]	; (80010ac <__aeabi_ddiv+0x5dc>)
 8000f08:	0b24      	lsrs	r4, r4, #12
 8000f0a:	e638      	b.n	8000b7e <__aeabi_ddiv+0xae>
 8000f0c:	2480      	movs	r4, #128	; 0x80
 8000f0e:	4643      	mov	r3, r8
 8000f10:	0324      	lsls	r4, r4, #12
 8000f12:	431c      	orrs	r4, r3
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	46b2      	mov	sl, r6
 8000f18:	4b64      	ldr	r3, [pc, #400]	; (80010ac <__aeabi_ddiv+0x5dc>)
 8000f1a:	0b24      	lsrs	r4, r4, #12
 8000f1c:	e62f      	b.n	8000b7e <__aeabi_ddiv+0xae>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0x454>
 8000f22:	e703      	b.n	8000d2c <__aeabi_ddiv+0x25c>
 8000f24:	19a6      	adds	r6, r4, r6
 8000f26:	1e68      	subs	r0, r5, #1
 8000f28:	42a6      	cmp	r6, r4
 8000f2a:	d200      	bcs.n	8000f2e <__aeabi_ddiv+0x45e>
 8000f2c:	e08d      	b.n	800104a <__aeabi_ddiv+0x57a>
 8000f2e:	428e      	cmp	r6, r1
 8000f30:	d200      	bcs.n	8000f34 <__aeabi_ddiv+0x464>
 8000f32:	e0a3      	b.n	800107c <__aeabi_ddiv+0x5ac>
 8000f34:	d100      	bne.n	8000f38 <__aeabi_ddiv+0x468>
 8000f36:	e0b3      	b.n	80010a0 <__aeabi_ddiv+0x5d0>
 8000f38:	0005      	movs	r5, r0
 8000f3a:	e6f5      	b.n	8000d28 <__aeabi_ddiv+0x258>
 8000f3c:	42aa      	cmp	r2, r5
 8000f3e:	d900      	bls.n	8000f42 <__aeabi_ddiv+0x472>
 8000f40:	e639      	b.n	8000bb6 <__aeabi_ddiv+0xe6>
 8000f42:	4643      	mov	r3, r8
 8000f44:	07de      	lsls	r6, r3, #31
 8000f46:	0858      	lsrs	r0, r3, #1
 8000f48:	086b      	lsrs	r3, r5, #1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	07ed      	lsls	r5, r5, #31
 8000f4e:	e639      	b.n	8000bc4 <__aeabi_ddiv+0xf4>
 8000f50:	4648      	mov	r0, r9
 8000f52:	f000 ff4b 	bl	8001dec <__clzsi2>
 8000f56:	0001      	movs	r1, r0
 8000f58:	0002      	movs	r2, r0
 8000f5a:	3115      	adds	r1, #21
 8000f5c:	3220      	adds	r2, #32
 8000f5e:	291c      	cmp	r1, #28
 8000f60:	dc00      	bgt.n	8000f64 <__aeabi_ddiv+0x494>
 8000f62:	e72c      	b.n	8000dbe <__aeabi_ddiv+0x2ee>
 8000f64:	464b      	mov	r3, r9
 8000f66:	3808      	subs	r0, #8
 8000f68:	4083      	lsls	r3, r0
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	4698      	mov	r8, r3
 8000f6e:	e732      	b.n	8000dd6 <__aeabi_ddiv+0x306>
 8000f70:	f000 ff3c 	bl	8001dec <__clzsi2>
 8000f74:	0003      	movs	r3, r0
 8000f76:	001a      	movs	r2, r3
 8000f78:	3215      	adds	r2, #21
 8000f7a:	3020      	adds	r0, #32
 8000f7c:	2a1c      	cmp	r2, #28
 8000f7e:	dc00      	bgt.n	8000f82 <__aeabi_ddiv+0x4b2>
 8000f80:	e700      	b.n	8000d84 <__aeabi_ddiv+0x2b4>
 8000f82:	4654      	mov	r4, sl
 8000f84:	3b08      	subs	r3, #8
 8000f86:	2200      	movs	r2, #0
 8000f88:	409c      	lsls	r4, r3
 8000f8a:	e705      	b.n	8000d98 <__aeabi_ddiv+0x2c8>
 8000f8c:	1936      	adds	r6, r6, r4
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	42b4      	cmp	r4, r6
 8000f92:	d900      	bls.n	8000f96 <__aeabi_ddiv+0x4c6>
 8000f94:	e6a6      	b.n	8000ce4 <__aeabi_ddiv+0x214>
 8000f96:	42b2      	cmp	r2, r6
 8000f98:	d800      	bhi.n	8000f9c <__aeabi_ddiv+0x4cc>
 8000f9a:	e6a3      	b.n	8000ce4 <__aeabi_ddiv+0x214>
 8000f9c:	1e83      	subs	r3, r0, #2
 8000f9e:	1936      	adds	r6, r6, r4
 8000fa0:	e6a0      	b.n	8000ce4 <__aeabi_ddiv+0x214>
 8000fa2:	1909      	adds	r1, r1, r4
 8000fa4:	3d01      	subs	r5, #1
 8000fa6:	428c      	cmp	r4, r1
 8000fa8:	d900      	bls.n	8000fac <__aeabi_ddiv+0x4dc>
 8000faa:	e68d      	b.n	8000cc8 <__aeabi_ddiv+0x1f8>
 8000fac:	428a      	cmp	r2, r1
 8000fae:	d800      	bhi.n	8000fb2 <__aeabi_ddiv+0x4e2>
 8000fb0:	e68a      	b.n	8000cc8 <__aeabi_ddiv+0x1f8>
 8000fb2:	1e85      	subs	r5, r0, #2
 8000fb4:	1909      	adds	r1, r1, r4
 8000fb6:	e687      	b.n	8000cc8 <__aeabi_ddiv+0x1f8>
 8000fb8:	230f      	movs	r3, #15
 8000fba:	402b      	ands	r3, r5
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x4f2>
 8000fc0:	e6bc      	b.n	8000d3c <__aeabi_ddiv+0x26c>
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	425b      	negs	r3, r3
 8000fc6:	42ab      	cmp	r3, r5
 8000fc8:	419b      	sbcs	r3, r3
 8000fca:	3504      	adds	r5, #4
 8000fcc:	425b      	negs	r3, r3
 8000fce:	08ed      	lsrs	r5, r5, #3
 8000fd0:	4498      	add	r8, r3
 8000fd2:	e6b4      	b.n	8000d3e <__aeabi_ddiv+0x26e>
 8000fd4:	42af      	cmp	r7, r5
 8000fd6:	d900      	bls.n	8000fda <__aeabi_ddiv+0x50a>
 8000fd8:	e660      	b.n	8000c9c <__aeabi_ddiv+0x1cc>
 8000fda:	4282      	cmp	r2, r0
 8000fdc:	d804      	bhi.n	8000fe8 <__aeabi_ddiv+0x518>
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_ddiv+0x512>
 8000fe0:	e65c      	b.n	8000c9c <__aeabi_ddiv+0x1cc>
 8000fe2:	42ae      	cmp	r6, r5
 8000fe4:	d800      	bhi.n	8000fe8 <__aeabi_ddiv+0x518>
 8000fe6:	e659      	b.n	8000c9c <__aeabi_ddiv+0x1cc>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	425b      	negs	r3, r3
 8000fec:	469c      	mov	ip, r3
 8000fee:	9b00      	ldr	r3, [sp, #0]
 8000ff0:	44e0      	add	r8, ip
 8000ff2:	469c      	mov	ip, r3
 8000ff4:	4465      	add	r5, ip
 8000ff6:	429d      	cmp	r5, r3
 8000ff8:	419b      	sbcs	r3, r3
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	191b      	adds	r3, r3, r4
 8000ffe:	18c0      	adds	r0, r0, r3
 8001000:	e64d      	b.n	8000c9e <__aeabi_ddiv+0x1ce>
 8001002:	428a      	cmp	r2, r1
 8001004:	d800      	bhi.n	8001008 <__aeabi_ddiv+0x538>
 8001006:	e60e      	b.n	8000c26 <__aeabi_ddiv+0x156>
 8001008:	1e83      	subs	r3, r0, #2
 800100a:	1909      	adds	r1, r1, r4
 800100c:	e60b      	b.n	8000c26 <__aeabi_ddiv+0x156>
 800100e:	428a      	cmp	r2, r1
 8001010:	d800      	bhi.n	8001014 <__aeabi_ddiv+0x544>
 8001012:	e5f4      	b.n	8000bfe <__aeabi_ddiv+0x12e>
 8001014:	1e83      	subs	r3, r0, #2
 8001016:	4698      	mov	r8, r3
 8001018:	1909      	adds	r1, r1, r4
 800101a:	e5f0      	b.n	8000bfe <__aeabi_ddiv+0x12e>
 800101c:	4925      	ldr	r1, [pc, #148]	; (80010b4 <__aeabi_ddiv+0x5e4>)
 800101e:	0028      	movs	r0, r5
 8001020:	4459      	add	r1, fp
 8001022:	408d      	lsls	r5, r1
 8001024:	4642      	mov	r2, r8
 8001026:	408a      	lsls	r2, r1
 8001028:	1e69      	subs	r1, r5, #1
 800102a:	418d      	sbcs	r5, r1
 800102c:	4641      	mov	r1, r8
 800102e:	40d8      	lsrs	r0, r3
 8001030:	40d9      	lsrs	r1, r3
 8001032:	4302      	orrs	r2, r0
 8001034:	432a      	orrs	r2, r5
 8001036:	000b      	movs	r3, r1
 8001038:	0751      	lsls	r1, r2, #29
 800103a:	d100      	bne.n	800103e <__aeabi_ddiv+0x56e>
 800103c:	e751      	b.n	8000ee2 <__aeabi_ddiv+0x412>
 800103e:	210f      	movs	r1, #15
 8001040:	4011      	ands	r1, r2
 8001042:	2904      	cmp	r1, #4
 8001044:	d000      	beq.n	8001048 <__aeabi_ddiv+0x578>
 8001046:	e746      	b.n	8000ed6 <__aeabi_ddiv+0x406>
 8001048:	e74b      	b.n	8000ee2 <__aeabi_ddiv+0x412>
 800104a:	0005      	movs	r5, r0
 800104c:	428e      	cmp	r6, r1
 800104e:	d000      	beq.n	8001052 <__aeabi_ddiv+0x582>
 8001050:	e66a      	b.n	8000d28 <__aeabi_ddiv+0x258>
 8001052:	9a00      	ldr	r2, [sp, #0]
 8001054:	4293      	cmp	r3, r2
 8001056:	d000      	beq.n	800105a <__aeabi_ddiv+0x58a>
 8001058:	e666      	b.n	8000d28 <__aeabi_ddiv+0x258>
 800105a:	e667      	b.n	8000d2c <__aeabi_ddiv+0x25c>
 800105c:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <__aeabi_ddiv+0x5e8>)
 800105e:	445a      	add	r2, fp
 8001060:	2a00      	cmp	r2, #0
 8001062:	dc00      	bgt.n	8001066 <__aeabi_ddiv+0x596>
 8001064:	e710      	b.n	8000e88 <__aeabi_ddiv+0x3b8>
 8001066:	2301      	movs	r3, #1
 8001068:	2500      	movs	r5, #0
 800106a:	4498      	add	r8, r3
 800106c:	e667      	b.n	8000d3e <__aeabi_ddiv+0x26e>
 800106e:	075d      	lsls	r5, r3, #29
 8001070:	025b      	lsls	r3, r3, #9
 8001072:	0b1c      	lsrs	r4, r3, #12
 8001074:	08d2      	lsrs	r2, r2, #3
 8001076:	2300      	movs	r3, #0
 8001078:	4315      	orrs	r5, r2
 800107a:	e580      	b.n	8000b7e <__aeabi_ddiv+0xae>
 800107c:	9800      	ldr	r0, [sp, #0]
 800107e:	3d02      	subs	r5, #2
 8001080:	0042      	lsls	r2, r0, #1
 8001082:	4282      	cmp	r2, r0
 8001084:	41bf      	sbcs	r7, r7
 8001086:	427f      	negs	r7, r7
 8001088:	193c      	adds	r4, r7, r4
 800108a:	1936      	adds	r6, r6, r4
 800108c:	9200      	str	r2, [sp, #0]
 800108e:	e7dd      	b.n	800104c <__aeabi_ddiv+0x57c>
 8001090:	2480      	movs	r4, #128	; 0x80
 8001092:	4643      	mov	r3, r8
 8001094:	0324      	lsls	r4, r4, #12
 8001096:	431c      	orrs	r4, r3
 8001098:	0324      	lsls	r4, r4, #12
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__aeabi_ddiv+0x5dc>)
 800109c:	0b24      	lsrs	r4, r4, #12
 800109e:	e56e      	b.n	8000b7e <__aeabi_ddiv+0xae>
 80010a0:	9a00      	ldr	r2, [sp, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3ea      	bcc.n	800107c <__aeabi_ddiv+0x5ac>
 80010a6:	0005      	movs	r5, r0
 80010a8:	e7d3      	b.n	8001052 <__aeabi_ddiv+0x582>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	000007ff 	.word	0x000007ff
 80010b0:	0000043e 	.word	0x0000043e
 80010b4:	0000041e 	.word	0x0000041e
 80010b8:	000003ff 	.word	0x000003ff

080010bc <__aeabi_dmul>:
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	4657      	mov	r7, sl
 80010c0:	464e      	mov	r6, r9
 80010c2:	4645      	mov	r5, r8
 80010c4:	46de      	mov	lr, fp
 80010c6:	b5e0      	push	{r5, r6, r7, lr}
 80010c8:	4698      	mov	r8, r3
 80010ca:	030c      	lsls	r4, r1, #12
 80010cc:	004b      	lsls	r3, r1, #1
 80010ce:	0006      	movs	r6, r0
 80010d0:	4692      	mov	sl, r2
 80010d2:	b087      	sub	sp, #28
 80010d4:	0b24      	lsrs	r4, r4, #12
 80010d6:	0d5b      	lsrs	r3, r3, #21
 80010d8:	0fcf      	lsrs	r7, r1, #31
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dmul+0x24>
 80010de:	e15c      	b.n	800139a <__aeabi_dmul+0x2de>
 80010e0:	4ad9      	ldr	r2, [pc, #868]	; (8001448 <__aeabi_dmul+0x38c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dmul+0x2c>
 80010e6:	e175      	b.n	80013d4 <__aeabi_dmul+0x318>
 80010e8:	0f42      	lsrs	r2, r0, #29
 80010ea:	00e4      	lsls	r4, r4, #3
 80010ec:	4314      	orrs	r4, r2
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	0412      	lsls	r2, r2, #16
 80010f2:	4314      	orrs	r4, r2
 80010f4:	4ad5      	ldr	r2, [pc, #852]	; (800144c <__aeabi_dmul+0x390>)
 80010f6:	00c5      	lsls	r5, r0, #3
 80010f8:	4694      	mov	ip, r2
 80010fa:	4463      	add	r3, ip
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	4699      	mov	r9, r3
 8001102:	469b      	mov	fp, r3
 8001104:	4643      	mov	r3, r8
 8001106:	4642      	mov	r2, r8
 8001108:	031e      	lsls	r6, r3, #12
 800110a:	0fd2      	lsrs	r2, r2, #31
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4650      	mov	r0, sl
 8001110:	4690      	mov	r8, r2
 8001112:	0b36      	lsrs	r6, r6, #12
 8001114:	0d5b      	lsrs	r3, r3, #21
 8001116:	d100      	bne.n	800111a <__aeabi_dmul+0x5e>
 8001118:	e120      	b.n	800135c <__aeabi_dmul+0x2a0>
 800111a:	4acb      	ldr	r2, [pc, #812]	; (8001448 <__aeabi_dmul+0x38c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d100      	bne.n	8001122 <__aeabi_dmul+0x66>
 8001120:	e162      	b.n	80013e8 <__aeabi_dmul+0x32c>
 8001122:	49ca      	ldr	r1, [pc, #808]	; (800144c <__aeabi_dmul+0x390>)
 8001124:	0f42      	lsrs	r2, r0, #29
 8001126:	468c      	mov	ip, r1
 8001128:	9900      	ldr	r1, [sp, #0]
 800112a:	4463      	add	r3, ip
 800112c:	00f6      	lsls	r6, r6, #3
 800112e:	468c      	mov	ip, r1
 8001130:	4316      	orrs	r6, r2
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	449c      	add	ip, r3
 8001136:	0412      	lsls	r2, r2, #16
 8001138:	4663      	mov	r3, ip
 800113a:	4316      	orrs	r6, r2
 800113c:	00c2      	lsls	r2, r0, #3
 800113e:	2000      	movs	r0, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	9900      	ldr	r1, [sp, #0]
 8001144:	4643      	mov	r3, r8
 8001146:	3101      	adds	r1, #1
 8001148:	468c      	mov	ip, r1
 800114a:	4649      	mov	r1, r9
 800114c:	407b      	eors	r3, r7
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	290f      	cmp	r1, #15
 8001152:	d826      	bhi.n	80011a2 <__aeabi_dmul+0xe6>
 8001154:	4bbe      	ldr	r3, [pc, #760]	; (8001450 <__aeabi_dmul+0x394>)
 8001156:	0089      	lsls	r1, r1, #2
 8001158:	5859      	ldr	r1, [r3, r1]
 800115a:	468f      	mov	pc, r1
 800115c:	4643      	mov	r3, r8
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	0034      	movs	r4, r6
 8001162:	0015      	movs	r5, r2
 8001164:	4683      	mov	fp, r0
 8001166:	465b      	mov	r3, fp
 8001168:	2b02      	cmp	r3, #2
 800116a:	d016      	beq.n	800119a <__aeabi_dmul+0xde>
 800116c:	2b03      	cmp	r3, #3
 800116e:	d100      	bne.n	8001172 <__aeabi_dmul+0xb6>
 8001170:	e203      	b.n	800157a <__aeabi_dmul+0x4be>
 8001172:	2b01      	cmp	r3, #1
 8001174:	d000      	beq.n	8001178 <__aeabi_dmul+0xbc>
 8001176:	e0cd      	b.n	8001314 <__aeabi_dmul+0x258>
 8001178:	2200      	movs	r2, #0
 800117a:	2400      	movs	r4, #0
 800117c:	2500      	movs	r5, #0
 800117e:	9b01      	ldr	r3, [sp, #4]
 8001180:	0512      	lsls	r2, r2, #20
 8001182:	4322      	orrs	r2, r4
 8001184:	07db      	lsls	r3, r3, #31
 8001186:	431a      	orrs	r2, r3
 8001188:	0028      	movs	r0, r5
 800118a:	0011      	movs	r1, r2
 800118c:	b007      	add	sp, #28
 800118e:	bcf0      	pop	{r4, r5, r6, r7}
 8001190:	46bb      	mov	fp, r7
 8001192:	46b2      	mov	sl, r6
 8001194:	46a9      	mov	r9, r5
 8001196:	46a0      	mov	r8, r4
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	2400      	movs	r4, #0
 800119c:	2500      	movs	r5, #0
 800119e:	4aaa      	ldr	r2, [pc, #680]	; (8001448 <__aeabi_dmul+0x38c>)
 80011a0:	e7ed      	b.n	800117e <__aeabi_dmul+0xc2>
 80011a2:	0c28      	lsrs	r0, r5, #16
 80011a4:	042d      	lsls	r5, r5, #16
 80011a6:	0c2d      	lsrs	r5, r5, #16
 80011a8:	002b      	movs	r3, r5
 80011aa:	0c11      	lsrs	r1, r2, #16
 80011ac:	0412      	lsls	r2, r2, #16
 80011ae:	0c12      	lsrs	r2, r2, #16
 80011b0:	4353      	muls	r3, r2
 80011b2:	4698      	mov	r8, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	002f      	movs	r7, r5
 80011b8:	4343      	muls	r3, r0
 80011ba:	4699      	mov	r9, r3
 80011bc:	434f      	muls	r7, r1
 80011be:	444f      	add	r7, r9
 80011c0:	46bb      	mov	fp, r7
 80011c2:	4647      	mov	r7, r8
 80011c4:	000b      	movs	r3, r1
 80011c6:	0c3f      	lsrs	r7, r7, #16
 80011c8:	46ba      	mov	sl, r7
 80011ca:	4343      	muls	r3, r0
 80011cc:	44da      	add	sl, fp
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	45d1      	cmp	r9, sl
 80011d2:	d904      	bls.n	80011de <__aeabi_dmul+0x122>
 80011d4:	2780      	movs	r7, #128	; 0x80
 80011d6:	027f      	lsls	r7, r7, #9
 80011d8:	46b9      	mov	r9, r7
 80011da:	444b      	add	r3, r9
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	4653      	mov	r3, sl
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	469b      	mov	fp, r3
 80011e4:	4653      	mov	r3, sl
 80011e6:	041f      	lsls	r7, r3, #16
 80011e8:	4643      	mov	r3, r8
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	4698      	mov	r8, r3
 80011f0:	003b      	movs	r3, r7
 80011f2:	4443      	add	r3, r8
 80011f4:	9304      	str	r3, [sp, #16]
 80011f6:	0c33      	lsrs	r3, r6, #16
 80011f8:	0436      	lsls	r6, r6, #16
 80011fa:	0c36      	lsrs	r6, r6, #16
 80011fc:	4698      	mov	r8, r3
 80011fe:	0033      	movs	r3, r6
 8001200:	4343      	muls	r3, r0
 8001202:	4699      	mov	r9, r3
 8001204:	4643      	mov	r3, r8
 8001206:	4343      	muls	r3, r0
 8001208:	002f      	movs	r7, r5
 800120a:	469a      	mov	sl, r3
 800120c:	4643      	mov	r3, r8
 800120e:	4377      	muls	r7, r6
 8001210:	435d      	muls	r5, r3
 8001212:	0c38      	lsrs	r0, r7, #16
 8001214:	444d      	add	r5, r9
 8001216:	1945      	adds	r5, r0, r5
 8001218:	45a9      	cmp	r9, r5
 800121a:	d903      	bls.n	8001224 <__aeabi_dmul+0x168>
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	025b      	lsls	r3, r3, #9
 8001220:	4699      	mov	r9, r3
 8001222:	44ca      	add	sl, r9
 8001224:	043f      	lsls	r7, r7, #16
 8001226:	0c28      	lsrs	r0, r5, #16
 8001228:	0c3f      	lsrs	r7, r7, #16
 800122a:	042d      	lsls	r5, r5, #16
 800122c:	19ed      	adds	r5, r5, r7
 800122e:	0c27      	lsrs	r7, r4, #16
 8001230:	0424      	lsls	r4, r4, #16
 8001232:	0c24      	lsrs	r4, r4, #16
 8001234:	0003      	movs	r3, r0
 8001236:	0020      	movs	r0, r4
 8001238:	4350      	muls	r0, r2
 800123a:	437a      	muls	r2, r7
 800123c:	4691      	mov	r9, r2
 800123e:	003a      	movs	r2, r7
 8001240:	4453      	add	r3, sl
 8001242:	9305      	str	r3, [sp, #20]
 8001244:	0c03      	lsrs	r3, r0, #16
 8001246:	469a      	mov	sl, r3
 8001248:	434a      	muls	r2, r1
 800124a:	4361      	muls	r1, r4
 800124c:	4449      	add	r1, r9
 800124e:	4451      	add	r1, sl
 8001250:	44ab      	add	fp, r5
 8001252:	4589      	cmp	r9, r1
 8001254:	d903      	bls.n	800125e <__aeabi_dmul+0x1a2>
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	025b      	lsls	r3, r3, #9
 800125a:	4699      	mov	r9, r3
 800125c:	444a      	add	r2, r9
 800125e:	0400      	lsls	r0, r0, #16
 8001260:	0c0b      	lsrs	r3, r1, #16
 8001262:	0c00      	lsrs	r0, r0, #16
 8001264:	0409      	lsls	r1, r1, #16
 8001266:	1809      	adds	r1, r1, r0
 8001268:	0020      	movs	r0, r4
 800126a:	4699      	mov	r9, r3
 800126c:	4643      	mov	r3, r8
 800126e:	4370      	muls	r0, r6
 8001270:	435c      	muls	r4, r3
 8001272:	437e      	muls	r6, r7
 8001274:	435f      	muls	r7, r3
 8001276:	0c03      	lsrs	r3, r0, #16
 8001278:	4698      	mov	r8, r3
 800127a:	19a4      	adds	r4, r4, r6
 800127c:	4444      	add	r4, r8
 800127e:	444a      	add	r2, r9
 8001280:	9703      	str	r7, [sp, #12]
 8001282:	42a6      	cmp	r6, r4
 8001284:	d904      	bls.n	8001290 <__aeabi_dmul+0x1d4>
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	025b      	lsls	r3, r3, #9
 800128a:	4698      	mov	r8, r3
 800128c:	4447      	add	r7, r8
 800128e:	9703      	str	r7, [sp, #12]
 8001290:	0423      	lsls	r3, r4, #16
 8001292:	9e02      	ldr	r6, [sp, #8]
 8001294:	469a      	mov	sl, r3
 8001296:	9b05      	ldr	r3, [sp, #20]
 8001298:	445e      	add	r6, fp
 800129a:	4698      	mov	r8, r3
 800129c:	42ae      	cmp	r6, r5
 800129e:	41ad      	sbcs	r5, r5
 80012a0:	1876      	adds	r6, r6, r1
 80012a2:	428e      	cmp	r6, r1
 80012a4:	4189      	sbcs	r1, r1
 80012a6:	0400      	lsls	r0, r0, #16
 80012a8:	0c00      	lsrs	r0, r0, #16
 80012aa:	4450      	add	r0, sl
 80012ac:	4440      	add	r0, r8
 80012ae:	426d      	negs	r5, r5
 80012b0:	1947      	adds	r7, r0, r5
 80012b2:	46b8      	mov	r8, r7
 80012b4:	4693      	mov	fp, r2
 80012b6:	4249      	negs	r1, r1
 80012b8:	4689      	mov	r9, r1
 80012ba:	44c3      	add	fp, r8
 80012bc:	44d9      	add	r9, fp
 80012be:	4298      	cmp	r0, r3
 80012c0:	4180      	sbcs	r0, r0
 80012c2:	45a8      	cmp	r8, r5
 80012c4:	41ad      	sbcs	r5, r5
 80012c6:	4593      	cmp	fp, r2
 80012c8:	4192      	sbcs	r2, r2
 80012ca:	4589      	cmp	r9, r1
 80012cc:	4189      	sbcs	r1, r1
 80012ce:	426d      	negs	r5, r5
 80012d0:	4240      	negs	r0, r0
 80012d2:	4328      	orrs	r0, r5
 80012d4:	0c24      	lsrs	r4, r4, #16
 80012d6:	4252      	negs	r2, r2
 80012d8:	4249      	negs	r1, r1
 80012da:	430a      	orrs	r2, r1
 80012dc:	9b03      	ldr	r3, [sp, #12]
 80012de:	1900      	adds	r0, r0, r4
 80012e0:	1880      	adds	r0, r0, r2
 80012e2:	18c7      	adds	r7, r0, r3
 80012e4:	464b      	mov	r3, r9
 80012e6:	0ddc      	lsrs	r4, r3, #23
 80012e8:	9b04      	ldr	r3, [sp, #16]
 80012ea:	0275      	lsls	r5, r6, #9
 80012ec:	431d      	orrs	r5, r3
 80012ee:	1e6a      	subs	r2, r5, #1
 80012f0:	4195      	sbcs	r5, r2
 80012f2:	464b      	mov	r3, r9
 80012f4:	0df6      	lsrs	r6, r6, #23
 80012f6:	027f      	lsls	r7, r7, #9
 80012f8:	4335      	orrs	r5, r6
 80012fa:	025a      	lsls	r2, r3, #9
 80012fc:	433c      	orrs	r4, r7
 80012fe:	4315      	orrs	r5, r2
 8001300:	01fb      	lsls	r3, r7, #7
 8001302:	d400      	bmi.n	8001306 <__aeabi_dmul+0x24a>
 8001304:	e11c      	b.n	8001540 <__aeabi_dmul+0x484>
 8001306:	2101      	movs	r1, #1
 8001308:	086a      	lsrs	r2, r5, #1
 800130a:	400d      	ands	r5, r1
 800130c:	4315      	orrs	r5, r2
 800130e:	07e2      	lsls	r2, r4, #31
 8001310:	4315      	orrs	r5, r2
 8001312:	0864      	lsrs	r4, r4, #1
 8001314:	494f      	ldr	r1, [pc, #316]	; (8001454 <__aeabi_dmul+0x398>)
 8001316:	4461      	add	r1, ip
 8001318:	2900      	cmp	r1, #0
 800131a:	dc00      	bgt.n	800131e <__aeabi_dmul+0x262>
 800131c:	e0b0      	b.n	8001480 <__aeabi_dmul+0x3c4>
 800131e:	076b      	lsls	r3, r5, #29
 8001320:	d009      	beq.n	8001336 <__aeabi_dmul+0x27a>
 8001322:	220f      	movs	r2, #15
 8001324:	402a      	ands	r2, r5
 8001326:	2a04      	cmp	r2, #4
 8001328:	d005      	beq.n	8001336 <__aeabi_dmul+0x27a>
 800132a:	1d2a      	adds	r2, r5, #4
 800132c:	42aa      	cmp	r2, r5
 800132e:	41ad      	sbcs	r5, r5
 8001330:	426d      	negs	r5, r5
 8001332:	1964      	adds	r4, r4, r5
 8001334:	0015      	movs	r5, r2
 8001336:	01e3      	lsls	r3, r4, #7
 8001338:	d504      	bpl.n	8001344 <__aeabi_dmul+0x288>
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	4a46      	ldr	r2, [pc, #280]	; (8001458 <__aeabi_dmul+0x39c>)
 800133e:	00c9      	lsls	r1, r1, #3
 8001340:	4014      	ands	r4, r2
 8001342:	4461      	add	r1, ip
 8001344:	4a45      	ldr	r2, [pc, #276]	; (800145c <__aeabi_dmul+0x3a0>)
 8001346:	4291      	cmp	r1, r2
 8001348:	dd00      	ble.n	800134c <__aeabi_dmul+0x290>
 800134a:	e726      	b.n	800119a <__aeabi_dmul+0xde>
 800134c:	0762      	lsls	r2, r4, #29
 800134e:	08ed      	lsrs	r5, r5, #3
 8001350:	0264      	lsls	r4, r4, #9
 8001352:	0549      	lsls	r1, r1, #21
 8001354:	4315      	orrs	r5, r2
 8001356:	0b24      	lsrs	r4, r4, #12
 8001358:	0d4a      	lsrs	r2, r1, #21
 800135a:	e710      	b.n	800117e <__aeabi_dmul+0xc2>
 800135c:	4652      	mov	r2, sl
 800135e:	4332      	orrs	r2, r6
 8001360:	d100      	bne.n	8001364 <__aeabi_dmul+0x2a8>
 8001362:	e07f      	b.n	8001464 <__aeabi_dmul+0x3a8>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d100      	bne.n	800136a <__aeabi_dmul+0x2ae>
 8001368:	e0dc      	b.n	8001524 <__aeabi_dmul+0x468>
 800136a:	0030      	movs	r0, r6
 800136c:	f000 fd3e 	bl	8001dec <__clzsi2>
 8001370:	0002      	movs	r2, r0
 8001372:	3a0b      	subs	r2, #11
 8001374:	231d      	movs	r3, #29
 8001376:	0001      	movs	r1, r0
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	4652      	mov	r2, sl
 800137c:	3908      	subs	r1, #8
 800137e:	40da      	lsrs	r2, r3
 8001380:	408e      	lsls	r6, r1
 8001382:	4316      	orrs	r6, r2
 8001384:	4652      	mov	r2, sl
 8001386:	408a      	lsls	r2, r1
 8001388:	9b00      	ldr	r3, [sp, #0]
 800138a:	4935      	ldr	r1, [pc, #212]	; (8001460 <__aeabi_dmul+0x3a4>)
 800138c:	1a18      	subs	r0, r3, r0
 800138e:	0003      	movs	r3, r0
 8001390:	468c      	mov	ip, r1
 8001392:	4463      	add	r3, ip
 8001394:	2000      	movs	r0, #0
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	e6d3      	b.n	8001142 <__aeabi_dmul+0x86>
 800139a:	0025      	movs	r5, r4
 800139c:	4305      	orrs	r5, r0
 800139e:	d04a      	beq.n	8001436 <__aeabi_dmul+0x37a>
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dmul+0x2ea>
 80013a4:	e0b0      	b.n	8001508 <__aeabi_dmul+0x44c>
 80013a6:	0020      	movs	r0, r4
 80013a8:	f000 fd20 	bl	8001dec <__clzsi2>
 80013ac:	0001      	movs	r1, r0
 80013ae:	0002      	movs	r2, r0
 80013b0:	390b      	subs	r1, #11
 80013b2:	231d      	movs	r3, #29
 80013b4:	0010      	movs	r0, r2
 80013b6:	1a5b      	subs	r3, r3, r1
 80013b8:	0031      	movs	r1, r6
 80013ba:	0035      	movs	r5, r6
 80013bc:	3808      	subs	r0, #8
 80013be:	4084      	lsls	r4, r0
 80013c0:	40d9      	lsrs	r1, r3
 80013c2:	4085      	lsls	r5, r0
 80013c4:	430c      	orrs	r4, r1
 80013c6:	4826      	ldr	r0, [pc, #152]	; (8001460 <__aeabi_dmul+0x3a4>)
 80013c8:	1a83      	subs	r3, r0, r2
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	4699      	mov	r9, r3
 80013d0:	469b      	mov	fp, r3
 80013d2:	e697      	b.n	8001104 <__aeabi_dmul+0x48>
 80013d4:	0005      	movs	r5, r0
 80013d6:	4325      	orrs	r5, r4
 80013d8:	d126      	bne.n	8001428 <__aeabi_dmul+0x36c>
 80013da:	2208      	movs	r2, #8
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2302      	movs	r3, #2
 80013e0:	2400      	movs	r4, #0
 80013e2:	4691      	mov	r9, r2
 80013e4:	469b      	mov	fp, r3
 80013e6:	e68d      	b.n	8001104 <__aeabi_dmul+0x48>
 80013e8:	4652      	mov	r2, sl
 80013ea:	9b00      	ldr	r3, [sp, #0]
 80013ec:	4332      	orrs	r2, r6
 80013ee:	d110      	bne.n	8001412 <__aeabi_dmul+0x356>
 80013f0:	4915      	ldr	r1, [pc, #84]	; (8001448 <__aeabi_dmul+0x38c>)
 80013f2:	2600      	movs	r6, #0
 80013f4:	468c      	mov	ip, r1
 80013f6:	4463      	add	r3, ip
 80013f8:	4649      	mov	r1, r9
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2302      	movs	r3, #2
 80013fe:	4319      	orrs	r1, r3
 8001400:	4689      	mov	r9, r1
 8001402:	2002      	movs	r0, #2
 8001404:	e69d      	b.n	8001142 <__aeabi_dmul+0x86>
 8001406:	465b      	mov	r3, fp
 8001408:	9701      	str	r7, [sp, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d000      	beq.n	8001410 <__aeabi_dmul+0x354>
 800140e:	e6ad      	b.n	800116c <__aeabi_dmul+0xb0>
 8001410:	e6c3      	b.n	800119a <__aeabi_dmul+0xde>
 8001412:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <__aeabi_dmul+0x38c>)
 8001414:	2003      	movs	r0, #3
 8001416:	4694      	mov	ip, r2
 8001418:	4463      	add	r3, ip
 800141a:	464a      	mov	r2, r9
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2303      	movs	r3, #3
 8001420:	431a      	orrs	r2, r3
 8001422:	4691      	mov	r9, r2
 8001424:	4652      	mov	r2, sl
 8001426:	e68c      	b.n	8001142 <__aeabi_dmul+0x86>
 8001428:	220c      	movs	r2, #12
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2303      	movs	r3, #3
 800142e:	0005      	movs	r5, r0
 8001430:	4691      	mov	r9, r2
 8001432:	469b      	mov	fp, r3
 8001434:	e666      	b.n	8001104 <__aeabi_dmul+0x48>
 8001436:	2304      	movs	r3, #4
 8001438:	4699      	mov	r9, r3
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	2400      	movs	r4, #0
 8001442:	469b      	mov	fp, r3
 8001444:	e65e      	b.n	8001104 <__aeabi_dmul+0x48>
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	000007ff 	.word	0x000007ff
 800144c:	fffffc01 	.word	0xfffffc01
 8001450:	080055a8 	.word	0x080055a8
 8001454:	000003ff 	.word	0x000003ff
 8001458:	feffffff 	.word	0xfeffffff
 800145c:	000007fe 	.word	0x000007fe
 8001460:	fffffc0d 	.word	0xfffffc0d
 8001464:	4649      	mov	r1, r9
 8001466:	2301      	movs	r3, #1
 8001468:	4319      	orrs	r1, r3
 800146a:	4689      	mov	r9, r1
 800146c:	2600      	movs	r6, #0
 800146e:	2001      	movs	r0, #1
 8001470:	e667      	b.n	8001142 <__aeabi_dmul+0x86>
 8001472:	2300      	movs	r3, #0
 8001474:	2480      	movs	r4, #128	; 0x80
 8001476:	2500      	movs	r5, #0
 8001478:	4a43      	ldr	r2, [pc, #268]	; (8001588 <__aeabi_dmul+0x4cc>)
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	e67e      	b.n	800117e <__aeabi_dmul+0xc2>
 8001480:	2001      	movs	r0, #1
 8001482:	1a40      	subs	r0, r0, r1
 8001484:	2838      	cmp	r0, #56	; 0x38
 8001486:	dd00      	ble.n	800148a <__aeabi_dmul+0x3ce>
 8001488:	e676      	b.n	8001178 <__aeabi_dmul+0xbc>
 800148a:	281f      	cmp	r0, #31
 800148c:	dd5b      	ble.n	8001546 <__aeabi_dmul+0x48a>
 800148e:	221f      	movs	r2, #31
 8001490:	0023      	movs	r3, r4
 8001492:	4252      	negs	r2, r2
 8001494:	1a51      	subs	r1, r2, r1
 8001496:	40cb      	lsrs	r3, r1
 8001498:	0019      	movs	r1, r3
 800149a:	2820      	cmp	r0, #32
 800149c:	d003      	beq.n	80014a6 <__aeabi_dmul+0x3ea>
 800149e:	4a3b      	ldr	r2, [pc, #236]	; (800158c <__aeabi_dmul+0x4d0>)
 80014a0:	4462      	add	r2, ip
 80014a2:	4094      	lsls	r4, r2
 80014a4:	4325      	orrs	r5, r4
 80014a6:	1e6a      	subs	r2, r5, #1
 80014a8:	4195      	sbcs	r5, r2
 80014aa:	002a      	movs	r2, r5
 80014ac:	430a      	orrs	r2, r1
 80014ae:	2107      	movs	r1, #7
 80014b0:	000d      	movs	r5, r1
 80014b2:	2400      	movs	r4, #0
 80014b4:	4015      	ands	r5, r2
 80014b6:	4211      	tst	r1, r2
 80014b8:	d05b      	beq.n	8001572 <__aeabi_dmul+0x4b6>
 80014ba:	210f      	movs	r1, #15
 80014bc:	2400      	movs	r4, #0
 80014be:	4011      	ands	r1, r2
 80014c0:	2904      	cmp	r1, #4
 80014c2:	d053      	beq.n	800156c <__aeabi_dmul+0x4b0>
 80014c4:	1d11      	adds	r1, r2, #4
 80014c6:	4291      	cmp	r1, r2
 80014c8:	4192      	sbcs	r2, r2
 80014ca:	4252      	negs	r2, r2
 80014cc:	18a4      	adds	r4, r4, r2
 80014ce:	000a      	movs	r2, r1
 80014d0:	0223      	lsls	r3, r4, #8
 80014d2:	d54b      	bpl.n	800156c <__aeabi_dmul+0x4b0>
 80014d4:	2201      	movs	r2, #1
 80014d6:	2400      	movs	r4, #0
 80014d8:	2500      	movs	r5, #0
 80014da:	e650      	b.n	800117e <__aeabi_dmul+0xc2>
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	031b      	lsls	r3, r3, #12
 80014e0:	421c      	tst	r4, r3
 80014e2:	d009      	beq.n	80014f8 <__aeabi_dmul+0x43c>
 80014e4:	421e      	tst	r6, r3
 80014e6:	d107      	bne.n	80014f8 <__aeabi_dmul+0x43c>
 80014e8:	4333      	orrs	r3, r6
 80014ea:	031c      	lsls	r4, r3, #12
 80014ec:	4643      	mov	r3, r8
 80014ee:	0015      	movs	r5, r2
 80014f0:	0b24      	lsrs	r4, r4, #12
 80014f2:	4a25      	ldr	r2, [pc, #148]	; (8001588 <__aeabi_dmul+0x4cc>)
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	e642      	b.n	800117e <__aeabi_dmul+0xc2>
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	0312      	lsls	r2, r2, #12
 80014fc:	4314      	orrs	r4, r2
 80014fe:	0324      	lsls	r4, r4, #12
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <__aeabi_dmul+0x4cc>)
 8001502:	0b24      	lsrs	r4, r4, #12
 8001504:	9701      	str	r7, [sp, #4]
 8001506:	e63a      	b.n	800117e <__aeabi_dmul+0xc2>
 8001508:	f000 fc70 	bl	8001dec <__clzsi2>
 800150c:	0001      	movs	r1, r0
 800150e:	0002      	movs	r2, r0
 8001510:	3115      	adds	r1, #21
 8001512:	3220      	adds	r2, #32
 8001514:	291c      	cmp	r1, #28
 8001516:	dc00      	bgt.n	800151a <__aeabi_dmul+0x45e>
 8001518:	e74b      	b.n	80013b2 <__aeabi_dmul+0x2f6>
 800151a:	0034      	movs	r4, r6
 800151c:	3808      	subs	r0, #8
 800151e:	2500      	movs	r5, #0
 8001520:	4084      	lsls	r4, r0
 8001522:	e750      	b.n	80013c6 <__aeabi_dmul+0x30a>
 8001524:	f000 fc62 	bl	8001dec <__clzsi2>
 8001528:	0003      	movs	r3, r0
 800152a:	001a      	movs	r2, r3
 800152c:	3215      	adds	r2, #21
 800152e:	3020      	adds	r0, #32
 8001530:	2a1c      	cmp	r2, #28
 8001532:	dc00      	bgt.n	8001536 <__aeabi_dmul+0x47a>
 8001534:	e71e      	b.n	8001374 <__aeabi_dmul+0x2b8>
 8001536:	4656      	mov	r6, sl
 8001538:	3b08      	subs	r3, #8
 800153a:	2200      	movs	r2, #0
 800153c:	409e      	lsls	r6, r3
 800153e:	e723      	b.n	8001388 <__aeabi_dmul+0x2cc>
 8001540:	9b00      	ldr	r3, [sp, #0]
 8001542:	469c      	mov	ip, r3
 8001544:	e6e6      	b.n	8001314 <__aeabi_dmul+0x258>
 8001546:	4912      	ldr	r1, [pc, #72]	; (8001590 <__aeabi_dmul+0x4d4>)
 8001548:	0022      	movs	r2, r4
 800154a:	4461      	add	r1, ip
 800154c:	002e      	movs	r6, r5
 800154e:	408d      	lsls	r5, r1
 8001550:	408a      	lsls	r2, r1
 8001552:	40c6      	lsrs	r6, r0
 8001554:	1e69      	subs	r1, r5, #1
 8001556:	418d      	sbcs	r5, r1
 8001558:	4332      	orrs	r2, r6
 800155a:	432a      	orrs	r2, r5
 800155c:	40c4      	lsrs	r4, r0
 800155e:	0753      	lsls	r3, r2, #29
 8001560:	d0b6      	beq.n	80014d0 <__aeabi_dmul+0x414>
 8001562:	210f      	movs	r1, #15
 8001564:	4011      	ands	r1, r2
 8001566:	2904      	cmp	r1, #4
 8001568:	d1ac      	bne.n	80014c4 <__aeabi_dmul+0x408>
 800156a:	e7b1      	b.n	80014d0 <__aeabi_dmul+0x414>
 800156c:	0765      	lsls	r5, r4, #29
 800156e:	0264      	lsls	r4, r4, #9
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	08d2      	lsrs	r2, r2, #3
 8001574:	4315      	orrs	r5, r2
 8001576:	2200      	movs	r2, #0
 8001578:	e601      	b.n	800117e <__aeabi_dmul+0xc2>
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	0312      	lsls	r2, r2, #12
 800157e:	4314      	orrs	r4, r2
 8001580:	0324      	lsls	r4, r4, #12
 8001582:	4a01      	ldr	r2, [pc, #4]	; (8001588 <__aeabi_dmul+0x4cc>)
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	e5fa      	b.n	800117e <__aeabi_dmul+0xc2>
 8001588:	000007ff 	.word	0x000007ff
 800158c:	0000043e 	.word	0x0000043e
 8001590:	0000041e 	.word	0x0000041e

08001594 <__aeabi_dsub>:
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	4657      	mov	r7, sl
 8001598:	464e      	mov	r6, r9
 800159a:	4645      	mov	r5, r8
 800159c:	46de      	mov	lr, fp
 800159e:	b5e0      	push	{r5, r6, r7, lr}
 80015a0:	001e      	movs	r6, r3
 80015a2:	0017      	movs	r7, r2
 80015a4:	004a      	lsls	r2, r1, #1
 80015a6:	030b      	lsls	r3, r1, #12
 80015a8:	0d52      	lsrs	r2, r2, #21
 80015aa:	0a5b      	lsrs	r3, r3, #9
 80015ac:	4690      	mov	r8, r2
 80015ae:	0f42      	lsrs	r2, r0, #29
 80015b0:	431a      	orrs	r2, r3
 80015b2:	0fcd      	lsrs	r5, r1, #31
 80015b4:	4ccd      	ldr	r4, [pc, #820]	; (80018ec <__aeabi_dsub+0x358>)
 80015b6:	0331      	lsls	r1, r6, #12
 80015b8:	00c3      	lsls	r3, r0, #3
 80015ba:	4694      	mov	ip, r2
 80015bc:	0070      	lsls	r0, r6, #1
 80015be:	0f7a      	lsrs	r2, r7, #29
 80015c0:	0a49      	lsrs	r1, r1, #9
 80015c2:	00ff      	lsls	r7, r7, #3
 80015c4:	469a      	mov	sl, r3
 80015c6:	46b9      	mov	r9, r7
 80015c8:	0d40      	lsrs	r0, r0, #21
 80015ca:	0ff6      	lsrs	r6, r6, #31
 80015cc:	4311      	orrs	r1, r2
 80015ce:	42a0      	cmp	r0, r4
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dsub+0x40>
 80015d2:	e0b1      	b.n	8001738 <__aeabi_dsub+0x1a4>
 80015d4:	2201      	movs	r2, #1
 80015d6:	4056      	eors	r6, r2
 80015d8:	46b3      	mov	fp, r6
 80015da:	42b5      	cmp	r5, r6
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dsub+0x4c>
 80015de:	e088      	b.n	80016f2 <__aeabi_dsub+0x15e>
 80015e0:	4642      	mov	r2, r8
 80015e2:	1a12      	subs	r2, r2, r0
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	dc00      	bgt.n	80015ea <__aeabi_dsub+0x56>
 80015e8:	e0ae      	b.n	8001748 <__aeabi_dsub+0x1b4>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dsub+0x5c>
 80015ee:	e0c1      	b.n	8001774 <__aeabi_dsub+0x1e0>
 80015f0:	48be      	ldr	r0, [pc, #760]	; (80018ec <__aeabi_dsub+0x358>)
 80015f2:	4580      	cmp	r8, r0
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dsub+0x64>
 80015f6:	e151      	b.n	800189c <__aeabi_dsub+0x308>
 80015f8:	2080      	movs	r0, #128	; 0x80
 80015fa:	0400      	lsls	r0, r0, #16
 80015fc:	4301      	orrs	r1, r0
 80015fe:	2a38      	cmp	r2, #56	; 0x38
 8001600:	dd00      	ble.n	8001604 <__aeabi_dsub+0x70>
 8001602:	e17b      	b.n	80018fc <__aeabi_dsub+0x368>
 8001604:	2a1f      	cmp	r2, #31
 8001606:	dd00      	ble.n	800160a <__aeabi_dsub+0x76>
 8001608:	e1ee      	b.n	80019e8 <__aeabi_dsub+0x454>
 800160a:	2020      	movs	r0, #32
 800160c:	003e      	movs	r6, r7
 800160e:	1a80      	subs	r0, r0, r2
 8001610:	000c      	movs	r4, r1
 8001612:	40d6      	lsrs	r6, r2
 8001614:	40d1      	lsrs	r1, r2
 8001616:	4087      	lsls	r7, r0
 8001618:	4662      	mov	r2, ip
 800161a:	4084      	lsls	r4, r0
 800161c:	1a52      	subs	r2, r2, r1
 800161e:	1e78      	subs	r0, r7, #1
 8001620:	4187      	sbcs	r7, r0
 8001622:	4694      	mov	ip, r2
 8001624:	4334      	orrs	r4, r6
 8001626:	4327      	orrs	r7, r4
 8001628:	1bdc      	subs	r4, r3, r7
 800162a:	42a3      	cmp	r3, r4
 800162c:	419b      	sbcs	r3, r3
 800162e:	4662      	mov	r2, ip
 8001630:	425b      	negs	r3, r3
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4699      	mov	r9, r3
 8001636:	464b      	mov	r3, r9
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	d400      	bmi.n	800163e <__aeabi_dsub+0xaa>
 800163c:	e118      	b.n	8001870 <__aeabi_dsub+0x2dc>
 800163e:	464b      	mov	r3, r9
 8001640:	0258      	lsls	r0, r3, #9
 8001642:	0a43      	lsrs	r3, r0, #9
 8001644:	4699      	mov	r9, r3
 8001646:	464b      	mov	r3, r9
 8001648:	2b00      	cmp	r3, #0
 800164a:	d100      	bne.n	800164e <__aeabi_dsub+0xba>
 800164c:	e137      	b.n	80018be <__aeabi_dsub+0x32a>
 800164e:	4648      	mov	r0, r9
 8001650:	f000 fbcc 	bl	8001dec <__clzsi2>
 8001654:	0001      	movs	r1, r0
 8001656:	3908      	subs	r1, #8
 8001658:	2320      	movs	r3, #32
 800165a:	0022      	movs	r2, r4
 800165c:	4648      	mov	r0, r9
 800165e:	1a5b      	subs	r3, r3, r1
 8001660:	40da      	lsrs	r2, r3
 8001662:	4088      	lsls	r0, r1
 8001664:	408c      	lsls	r4, r1
 8001666:	4643      	mov	r3, r8
 8001668:	4310      	orrs	r0, r2
 800166a:	4588      	cmp	r8, r1
 800166c:	dd00      	ble.n	8001670 <__aeabi_dsub+0xdc>
 800166e:	e136      	b.n	80018de <__aeabi_dsub+0x34a>
 8001670:	1ac9      	subs	r1, r1, r3
 8001672:	1c4b      	adds	r3, r1, #1
 8001674:	2b1f      	cmp	r3, #31
 8001676:	dd00      	ble.n	800167a <__aeabi_dsub+0xe6>
 8001678:	e0ea      	b.n	8001850 <__aeabi_dsub+0x2bc>
 800167a:	2220      	movs	r2, #32
 800167c:	0026      	movs	r6, r4
 800167e:	1ad2      	subs	r2, r2, r3
 8001680:	0001      	movs	r1, r0
 8001682:	4094      	lsls	r4, r2
 8001684:	40de      	lsrs	r6, r3
 8001686:	40d8      	lsrs	r0, r3
 8001688:	2300      	movs	r3, #0
 800168a:	4091      	lsls	r1, r2
 800168c:	1e62      	subs	r2, r4, #1
 800168e:	4194      	sbcs	r4, r2
 8001690:	4681      	mov	r9, r0
 8001692:	4698      	mov	r8, r3
 8001694:	4331      	orrs	r1, r6
 8001696:	430c      	orrs	r4, r1
 8001698:	0763      	lsls	r3, r4, #29
 800169a:	d009      	beq.n	80016b0 <__aeabi_dsub+0x11c>
 800169c:	230f      	movs	r3, #15
 800169e:	4023      	ands	r3, r4
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d005      	beq.n	80016b0 <__aeabi_dsub+0x11c>
 80016a4:	1d23      	adds	r3, r4, #4
 80016a6:	42a3      	cmp	r3, r4
 80016a8:	41a4      	sbcs	r4, r4
 80016aa:	4264      	negs	r4, r4
 80016ac:	44a1      	add	r9, r4
 80016ae:	001c      	movs	r4, r3
 80016b0:	464b      	mov	r3, r9
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	d400      	bmi.n	80016b8 <__aeabi_dsub+0x124>
 80016b6:	e0de      	b.n	8001876 <__aeabi_dsub+0x2e2>
 80016b8:	4641      	mov	r1, r8
 80016ba:	4b8c      	ldr	r3, [pc, #560]	; (80018ec <__aeabi_dsub+0x358>)
 80016bc:	3101      	adds	r1, #1
 80016be:	4299      	cmp	r1, r3
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dsub+0x130>
 80016c2:	e0e7      	b.n	8001894 <__aeabi_dsub+0x300>
 80016c4:	464b      	mov	r3, r9
 80016c6:	488a      	ldr	r0, [pc, #552]	; (80018f0 <__aeabi_dsub+0x35c>)
 80016c8:	08e4      	lsrs	r4, r4, #3
 80016ca:	4003      	ands	r3, r0
 80016cc:	0018      	movs	r0, r3
 80016ce:	0549      	lsls	r1, r1, #21
 80016d0:	075b      	lsls	r3, r3, #29
 80016d2:	0240      	lsls	r0, r0, #9
 80016d4:	4323      	orrs	r3, r4
 80016d6:	0d4a      	lsrs	r2, r1, #21
 80016d8:	0b04      	lsrs	r4, r0, #12
 80016da:	0512      	lsls	r2, r2, #20
 80016dc:	07ed      	lsls	r5, r5, #31
 80016de:	4322      	orrs	r2, r4
 80016e0:	432a      	orrs	r2, r5
 80016e2:	0018      	movs	r0, r3
 80016e4:	0011      	movs	r1, r2
 80016e6:	bcf0      	pop	{r4, r5, r6, r7}
 80016e8:	46bb      	mov	fp, r7
 80016ea:	46b2      	mov	sl, r6
 80016ec:	46a9      	mov	r9, r5
 80016ee:	46a0      	mov	r8, r4
 80016f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016f2:	4642      	mov	r2, r8
 80016f4:	1a12      	subs	r2, r2, r0
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	dd52      	ble.n	80017a0 <__aeabi_dsub+0x20c>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d100      	bne.n	8001700 <__aeabi_dsub+0x16c>
 80016fe:	e09c      	b.n	800183a <__aeabi_dsub+0x2a6>
 8001700:	45a0      	cmp	r8, r4
 8001702:	d100      	bne.n	8001706 <__aeabi_dsub+0x172>
 8001704:	e0ca      	b.n	800189c <__aeabi_dsub+0x308>
 8001706:	2080      	movs	r0, #128	; 0x80
 8001708:	0400      	lsls	r0, r0, #16
 800170a:	4301      	orrs	r1, r0
 800170c:	2a38      	cmp	r2, #56	; 0x38
 800170e:	dd00      	ble.n	8001712 <__aeabi_dsub+0x17e>
 8001710:	e149      	b.n	80019a6 <__aeabi_dsub+0x412>
 8001712:	2a1f      	cmp	r2, #31
 8001714:	dc00      	bgt.n	8001718 <__aeabi_dsub+0x184>
 8001716:	e197      	b.n	8001a48 <__aeabi_dsub+0x4b4>
 8001718:	0010      	movs	r0, r2
 800171a:	000e      	movs	r6, r1
 800171c:	3820      	subs	r0, #32
 800171e:	40c6      	lsrs	r6, r0
 8001720:	2a20      	cmp	r2, #32
 8001722:	d004      	beq.n	800172e <__aeabi_dsub+0x19a>
 8001724:	2040      	movs	r0, #64	; 0x40
 8001726:	1a82      	subs	r2, r0, r2
 8001728:	4091      	lsls	r1, r2
 800172a:	430f      	orrs	r7, r1
 800172c:	46b9      	mov	r9, r7
 800172e:	464c      	mov	r4, r9
 8001730:	1e62      	subs	r2, r4, #1
 8001732:	4194      	sbcs	r4, r2
 8001734:	4334      	orrs	r4, r6
 8001736:	e13a      	b.n	80019ae <__aeabi_dsub+0x41a>
 8001738:	000a      	movs	r2, r1
 800173a:	433a      	orrs	r2, r7
 800173c:	d028      	beq.n	8001790 <__aeabi_dsub+0x1fc>
 800173e:	46b3      	mov	fp, r6
 8001740:	42b5      	cmp	r5, r6
 8001742:	d02b      	beq.n	800179c <__aeabi_dsub+0x208>
 8001744:	4a6b      	ldr	r2, [pc, #428]	; (80018f4 <__aeabi_dsub+0x360>)
 8001746:	4442      	add	r2, r8
 8001748:	2a00      	cmp	r2, #0
 800174a:	d05d      	beq.n	8001808 <__aeabi_dsub+0x274>
 800174c:	4642      	mov	r2, r8
 800174e:	4644      	mov	r4, r8
 8001750:	1a82      	subs	r2, r0, r2
 8001752:	2c00      	cmp	r4, #0
 8001754:	d000      	beq.n	8001758 <__aeabi_dsub+0x1c4>
 8001756:	e0f5      	b.n	8001944 <__aeabi_dsub+0x3b0>
 8001758:	4665      	mov	r5, ip
 800175a:	431d      	orrs	r5, r3
 800175c:	d100      	bne.n	8001760 <__aeabi_dsub+0x1cc>
 800175e:	e19c      	b.n	8001a9a <__aeabi_dsub+0x506>
 8001760:	1e55      	subs	r5, r2, #1
 8001762:	2a01      	cmp	r2, #1
 8001764:	d100      	bne.n	8001768 <__aeabi_dsub+0x1d4>
 8001766:	e1fb      	b.n	8001b60 <__aeabi_dsub+0x5cc>
 8001768:	4c60      	ldr	r4, [pc, #384]	; (80018ec <__aeabi_dsub+0x358>)
 800176a:	42a2      	cmp	r2, r4
 800176c:	d100      	bne.n	8001770 <__aeabi_dsub+0x1dc>
 800176e:	e1bd      	b.n	8001aec <__aeabi_dsub+0x558>
 8001770:	002a      	movs	r2, r5
 8001772:	e0f0      	b.n	8001956 <__aeabi_dsub+0x3c2>
 8001774:	0008      	movs	r0, r1
 8001776:	4338      	orrs	r0, r7
 8001778:	d100      	bne.n	800177c <__aeabi_dsub+0x1e8>
 800177a:	e0c3      	b.n	8001904 <__aeabi_dsub+0x370>
 800177c:	1e50      	subs	r0, r2, #1
 800177e:	2a01      	cmp	r2, #1
 8001780:	d100      	bne.n	8001784 <__aeabi_dsub+0x1f0>
 8001782:	e1a8      	b.n	8001ad6 <__aeabi_dsub+0x542>
 8001784:	4c59      	ldr	r4, [pc, #356]	; (80018ec <__aeabi_dsub+0x358>)
 8001786:	42a2      	cmp	r2, r4
 8001788:	d100      	bne.n	800178c <__aeabi_dsub+0x1f8>
 800178a:	e087      	b.n	800189c <__aeabi_dsub+0x308>
 800178c:	0002      	movs	r2, r0
 800178e:	e736      	b.n	80015fe <__aeabi_dsub+0x6a>
 8001790:	2201      	movs	r2, #1
 8001792:	4056      	eors	r6, r2
 8001794:	46b3      	mov	fp, r6
 8001796:	42b5      	cmp	r5, r6
 8001798:	d000      	beq.n	800179c <__aeabi_dsub+0x208>
 800179a:	e721      	b.n	80015e0 <__aeabi_dsub+0x4c>
 800179c:	4a55      	ldr	r2, [pc, #340]	; (80018f4 <__aeabi_dsub+0x360>)
 800179e:	4442      	add	r2, r8
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dsub+0x212>
 80017a4:	e0b5      	b.n	8001912 <__aeabi_dsub+0x37e>
 80017a6:	4642      	mov	r2, r8
 80017a8:	4644      	mov	r4, r8
 80017aa:	1a82      	subs	r2, r0, r2
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dsub+0x21e>
 80017b0:	e138      	b.n	8001a24 <__aeabi_dsub+0x490>
 80017b2:	4e4e      	ldr	r6, [pc, #312]	; (80018ec <__aeabi_dsub+0x358>)
 80017b4:	42b0      	cmp	r0, r6
 80017b6:	d100      	bne.n	80017ba <__aeabi_dsub+0x226>
 80017b8:	e1de      	b.n	8001b78 <__aeabi_dsub+0x5e4>
 80017ba:	2680      	movs	r6, #128	; 0x80
 80017bc:	4664      	mov	r4, ip
 80017be:	0436      	lsls	r6, r6, #16
 80017c0:	4334      	orrs	r4, r6
 80017c2:	46a4      	mov	ip, r4
 80017c4:	2a38      	cmp	r2, #56	; 0x38
 80017c6:	dd00      	ble.n	80017ca <__aeabi_dsub+0x236>
 80017c8:	e196      	b.n	8001af8 <__aeabi_dsub+0x564>
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dsub+0x23c>
 80017ce:	e224      	b.n	8001c1a <__aeabi_dsub+0x686>
 80017d0:	2620      	movs	r6, #32
 80017d2:	1ab4      	subs	r4, r6, r2
 80017d4:	46a2      	mov	sl, r4
 80017d6:	4664      	mov	r4, ip
 80017d8:	4656      	mov	r6, sl
 80017da:	40b4      	lsls	r4, r6
 80017dc:	46a1      	mov	r9, r4
 80017de:	001c      	movs	r4, r3
 80017e0:	464e      	mov	r6, r9
 80017e2:	40d4      	lsrs	r4, r2
 80017e4:	4326      	orrs	r6, r4
 80017e6:	0034      	movs	r4, r6
 80017e8:	4656      	mov	r6, sl
 80017ea:	40b3      	lsls	r3, r6
 80017ec:	1e5e      	subs	r6, r3, #1
 80017ee:	41b3      	sbcs	r3, r6
 80017f0:	431c      	orrs	r4, r3
 80017f2:	4663      	mov	r3, ip
 80017f4:	40d3      	lsrs	r3, r2
 80017f6:	18c9      	adds	r1, r1, r3
 80017f8:	19e4      	adds	r4, r4, r7
 80017fa:	42bc      	cmp	r4, r7
 80017fc:	41bf      	sbcs	r7, r7
 80017fe:	427f      	negs	r7, r7
 8001800:	46b9      	mov	r9, r7
 8001802:	4680      	mov	r8, r0
 8001804:	4489      	add	r9, r1
 8001806:	e0d8      	b.n	80019ba <__aeabi_dsub+0x426>
 8001808:	4640      	mov	r0, r8
 800180a:	4c3b      	ldr	r4, [pc, #236]	; (80018f8 <__aeabi_dsub+0x364>)
 800180c:	3001      	adds	r0, #1
 800180e:	4220      	tst	r0, r4
 8001810:	d000      	beq.n	8001814 <__aeabi_dsub+0x280>
 8001812:	e0b4      	b.n	800197e <__aeabi_dsub+0x3ea>
 8001814:	4640      	mov	r0, r8
 8001816:	2800      	cmp	r0, #0
 8001818:	d000      	beq.n	800181c <__aeabi_dsub+0x288>
 800181a:	e144      	b.n	8001aa6 <__aeabi_dsub+0x512>
 800181c:	4660      	mov	r0, ip
 800181e:	4318      	orrs	r0, r3
 8001820:	d100      	bne.n	8001824 <__aeabi_dsub+0x290>
 8001822:	e190      	b.n	8001b46 <__aeabi_dsub+0x5b2>
 8001824:	0008      	movs	r0, r1
 8001826:	4338      	orrs	r0, r7
 8001828:	d000      	beq.n	800182c <__aeabi_dsub+0x298>
 800182a:	e1aa      	b.n	8001b82 <__aeabi_dsub+0x5ee>
 800182c:	4661      	mov	r1, ip
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	0749      	lsls	r1, r1, #29
 8001832:	430b      	orrs	r3, r1
 8001834:	4661      	mov	r1, ip
 8001836:	08cc      	lsrs	r4, r1, #3
 8001838:	e027      	b.n	800188a <__aeabi_dsub+0x2f6>
 800183a:	0008      	movs	r0, r1
 800183c:	4338      	orrs	r0, r7
 800183e:	d061      	beq.n	8001904 <__aeabi_dsub+0x370>
 8001840:	1e50      	subs	r0, r2, #1
 8001842:	2a01      	cmp	r2, #1
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x2b4>
 8001846:	e139      	b.n	8001abc <__aeabi_dsub+0x528>
 8001848:	42a2      	cmp	r2, r4
 800184a:	d027      	beq.n	800189c <__aeabi_dsub+0x308>
 800184c:	0002      	movs	r2, r0
 800184e:	e75d      	b.n	800170c <__aeabi_dsub+0x178>
 8001850:	0002      	movs	r2, r0
 8001852:	391f      	subs	r1, #31
 8001854:	40ca      	lsrs	r2, r1
 8001856:	0011      	movs	r1, r2
 8001858:	2b20      	cmp	r3, #32
 800185a:	d003      	beq.n	8001864 <__aeabi_dsub+0x2d0>
 800185c:	2240      	movs	r2, #64	; 0x40
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4098      	lsls	r0, r3
 8001862:	4304      	orrs	r4, r0
 8001864:	1e63      	subs	r3, r4, #1
 8001866:	419c      	sbcs	r4, r3
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	4698      	mov	r8, r3
 800186e:	430c      	orrs	r4, r1
 8001870:	0763      	lsls	r3, r4, #29
 8001872:	d000      	beq.n	8001876 <__aeabi_dsub+0x2e2>
 8001874:	e712      	b.n	800169c <__aeabi_dsub+0x108>
 8001876:	464b      	mov	r3, r9
 8001878:	464a      	mov	r2, r9
 800187a:	08e4      	lsrs	r4, r4, #3
 800187c:	075b      	lsls	r3, r3, #29
 800187e:	4323      	orrs	r3, r4
 8001880:	08d4      	lsrs	r4, r2, #3
 8001882:	4642      	mov	r2, r8
 8001884:	4919      	ldr	r1, [pc, #100]	; (80018ec <__aeabi_dsub+0x358>)
 8001886:	428a      	cmp	r2, r1
 8001888:	d00e      	beq.n	80018a8 <__aeabi_dsub+0x314>
 800188a:	0324      	lsls	r4, r4, #12
 800188c:	0552      	lsls	r2, r2, #21
 800188e:	0b24      	lsrs	r4, r4, #12
 8001890:	0d52      	lsrs	r2, r2, #21
 8001892:	e722      	b.n	80016da <__aeabi_dsub+0x146>
 8001894:	000a      	movs	r2, r1
 8001896:	2400      	movs	r4, #0
 8001898:	2300      	movs	r3, #0
 800189a:	e71e      	b.n	80016da <__aeabi_dsub+0x146>
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	4662      	mov	r2, ip
 80018a0:	0752      	lsls	r2, r2, #29
 80018a2:	4313      	orrs	r3, r2
 80018a4:	4662      	mov	r2, ip
 80018a6:	08d4      	lsrs	r4, r2, #3
 80018a8:	001a      	movs	r2, r3
 80018aa:	4322      	orrs	r2, r4
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dsub+0x31c>
 80018ae:	e1fc      	b.n	8001caa <__aeabi_dsub+0x716>
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	0312      	lsls	r2, r2, #12
 80018b4:	4314      	orrs	r4, r2
 80018b6:	0324      	lsls	r4, r4, #12
 80018b8:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <__aeabi_dsub+0x358>)
 80018ba:	0b24      	lsrs	r4, r4, #12
 80018bc:	e70d      	b.n	80016da <__aeabi_dsub+0x146>
 80018be:	0020      	movs	r0, r4
 80018c0:	f000 fa94 	bl	8001dec <__clzsi2>
 80018c4:	0001      	movs	r1, r0
 80018c6:	3118      	adds	r1, #24
 80018c8:	291f      	cmp	r1, #31
 80018ca:	dc00      	bgt.n	80018ce <__aeabi_dsub+0x33a>
 80018cc:	e6c4      	b.n	8001658 <__aeabi_dsub+0xc4>
 80018ce:	3808      	subs	r0, #8
 80018d0:	4084      	lsls	r4, r0
 80018d2:	4643      	mov	r3, r8
 80018d4:	0020      	movs	r0, r4
 80018d6:	2400      	movs	r4, #0
 80018d8:	4588      	cmp	r8, r1
 80018da:	dc00      	bgt.n	80018de <__aeabi_dsub+0x34a>
 80018dc:	e6c8      	b.n	8001670 <__aeabi_dsub+0xdc>
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__aeabi_dsub+0x35c>)
 80018e0:	1a5b      	subs	r3, r3, r1
 80018e2:	4010      	ands	r0, r2
 80018e4:	4698      	mov	r8, r3
 80018e6:	4681      	mov	r9, r0
 80018e8:	e6d6      	b.n	8001698 <__aeabi_dsub+0x104>
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	000007ff 	.word	0x000007ff
 80018f0:	ff7fffff 	.word	0xff7fffff
 80018f4:	fffff801 	.word	0xfffff801
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	430f      	orrs	r7, r1
 80018fe:	1e7a      	subs	r2, r7, #1
 8001900:	4197      	sbcs	r7, r2
 8001902:	e691      	b.n	8001628 <__aeabi_dsub+0x94>
 8001904:	4661      	mov	r1, ip
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	0749      	lsls	r1, r1, #29
 800190a:	430b      	orrs	r3, r1
 800190c:	4661      	mov	r1, ip
 800190e:	08cc      	lsrs	r4, r1, #3
 8001910:	e7b8      	b.n	8001884 <__aeabi_dsub+0x2f0>
 8001912:	4640      	mov	r0, r8
 8001914:	4cd3      	ldr	r4, [pc, #844]	; (8001c64 <__aeabi_dsub+0x6d0>)
 8001916:	3001      	adds	r0, #1
 8001918:	4220      	tst	r0, r4
 800191a:	d000      	beq.n	800191e <__aeabi_dsub+0x38a>
 800191c:	e0a2      	b.n	8001a64 <__aeabi_dsub+0x4d0>
 800191e:	4640      	mov	r0, r8
 8001920:	2800      	cmp	r0, #0
 8001922:	d000      	beq.n	8001926 <__aeabi_dsub+0x392>
 8001924:	e101      	b.n	8001b2a <__aeabi_dsub+0x596>
 8001926:	4660      	mov	r0, ip
 8001928:	4318      	orrs	r0, r3
 800192a:	d100      	bne.n	800192e <__aeabi_dsub+0x39a>
 800192c:	e15e      	b.n	8001bec <__aeabi_dsub+0x658>
 800192e:	0008      	movs	r0, r1
 8001930:	4338      	orrs	r0, r7
 8001932:	d000      	beq.n	8001936 <__aeabi_dsub+0x3a2>
 8001934:	e15f      	b.n	8001bf6 <__aeabi_dsub+0x662>
 8001936:	4661      	mov	r1, ip
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	0749      	lsls	r1, r1, #29
 800193c:	430b      	orrs	r3, r1
 800193e:	4661      	mov	r1, ip
 8001940:	08cc      	lsrs	r4, r1, #3
 8001942:	e7a2      	b.n	800188a <__aeabi_dsub+0x2f6>
 8001944:	4dc8      	ldr	r5, [pc, #800]	; (8001c68 <__aeabi_dsub+0x6d4>)
 8001946:	42a8      	cmp	r0, r5
 8001948:	d100      	bne.n	800194c <__aeabi_dsub+0x3b8>
 800194a:	e0cf      	b.n	8001aec <__aeabi_dsub+0x558>
 800194c:	2580      	movs	r5, #128	; 0x80
 800194e:	4664      	mov	r4, ip
 8001950:	042d      	lsls	r5, r5, #16
 8001952:	432c      	orrs	r4, r5
 8001954:	46a4      	mov	ip, r4
 8001956:	2a38      	cmp	r2, #56	; 0x38
 8001958:	dc56      	bgt.n	8001a08 <__aeabi_dsub+0x474>
 800195a:	2a1f      	cmp	r2, #31
 800195c:	dd00      	ble.n	8001960 <__aeabi_dsub+0x3cc>
 800195e:	e0d1      	b.n	8001b04 <__aeabi_dsub+0x570>
 8001960:	2520      	movs	r5, #32
 8001962:	001e      	movs	r6, r3
 8001964:	1aad      	subs	r5, r5, r2
 8001966:	4664      	mov	r4, ip
 8001968:	40ab      	lsls	r3, r5
 800196a:	40ac      	lsls	r4, r5
 800196c:	40d6      	lsrs	r6, r2
 800196e:	1e5d      	subs	r5, r3, #1
 8001970:	41ab      	sbcs	r3, r5
 8001972:	4334      	orrs	r4, r6
 8001974:	4323      	orrs	r3, r4
 8001976:	4664      	mov	r4, ip
 8001978:	40d4      	lsrs	r4, r2
 800197a:	1b09      	subs	r1, r1, r4
 800197c:	e049      	b.n	8001a12 <__aeabi_dsub+0x47e>
 800197e:	4660      	mov	r0, ip
 8001980:	1bdc      	subs	r4, r3, r7
 8001982:	1a46      	subs	r6, r0, r1
 8001984:	42a3      	cmp	r3, r4
 8001986:	4180      	sbcs	r0, r0
 8001988:	4240      	negs	r0, r0
 800198a:	4681      	mov	r9, r0
 800198c:	0030      	movs	r0, r6
 800198e:	464e      	mov	r6, r9
 8001990:	1b80      	subs	r0, r0, r6
 8001992:	4681      	mov	r9, r0
 8001994:	0200      	lsls	r0, r0, #8
 8001996:	d476      	bmi.n	8001a86 <__aeabi_dsub+0x4f2>
 8001998:	464b      	mov	r3, r9
 800199a:	4323      	orrs	r3, r4
 800199c:	d000      	beq.n	80019a0 <__aeabi_dsub+0x40c>
 800199e:	e652      	b.n	8001646 <__aeabi_dsub+0xb2>
 80019a0:	2400      	movs	r4, #0
 80019a2:	2500      	movs	r5, #0
 80019a4:	e771      	b.n	800188a <__aeabi_dsub+0x2f6>
 80019a6:	4339      	orrs	r1, r7
 80019a8:	000c      	movs	r4, r1
 80019aa:	1e62      	subs	r2, r4, #1
 80019ac:	4194      	sbcs	r4, r2
 80019ae:	18e4      	adds	r4, r4, r3
 80019b0:	429c      	cmp	r4, r3
 80019b2:	419b      	sbcs	r3, r3
 80019b4:	425b      	negs	r3, r3
 80019b6:	4463      	add	r3, ip
 80019b8:	4699      	mov	r9, r3
 80019ba:	464b      	mov	r3, r9
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	d400      	bmi.n	80019c2 <__aeabi_dsub+0x42e>
 80019c0:	e756      	b.n	8001870 <__aeabi_dsub+0x2dc>
 80019c2:	2301      	movs	r3, #1
 80019c4:	469c      	mov	ip, r3
 80019c6:	4ba8      	ldr	r3, [pc, #672]	; (8001c68 <__aeabi_dsub+0x6d4>)
 80019c8:	44e0      	add	r8, ip
 80019ca:	4598      	cmp	r8, r3
 80019cc:	d038      	beq.n	8001a40 <__aeabi_dsub+0x4ac>
 80019ce:	464b      	mov	r3, r9
 80019d0:	48a6      	ldr	r0, [pc, #664]	; (8001c6c <__aeabi_dsub+0x6d8>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	4003      	ands	r3, r0
 80019d6:	0018      	movs	r0, r3
 80019d8:	0863      	lsrs	r3, r4, #1
 80019da:	4014      	ands	r4, r2
 80019dc:	431c      	orrs	r4, r3
 80019de:	07c3      	lsls	r3, r0, #31
 80019e0:	431c      	orrs	r4, r3
 80019e2:	0843      	lsrs	r3, r0, #1
 80019e4:	4699      	mov	r9, r3
 80019e6:	e657      	b.n	8001698 <__aeabi_dsub+0x104>
 80019e8:	0010      	movs	r0, r2
 80019ea:	000e      	movs	r6, r1
 80019ec:	3820      	subs	r0, #32
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	2a20      	cmp	r2, #32
 80019f2:	d004      	beq.n	80019fe <__aeabi_dsub+0x46a>
 80019f4:	2040      	movs	r0, #64	; 0x40
 80019f6:	1a82      	subs	r2, r0, r2
 80019f8:	4091      	lsls	r1, r2
 80019fa:	430f      	orrs	r7, r1
 80019fc:	46b9      	mov	r9, r7
 80019fe:	464f      	mov	r7, r9
 8001a00:	1e7a      	subs	r2, r7, #1
 8001a02:	4197      	sbcs	r7, r2
 8001a04:	4337      	orrs	r7, r6
 8001a06:	e60f      	b.n	8001628 <__aeabi_dsub+0x94>
 8001a08:	4662      	mov	r2, ip
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	1e5a      	subs	r2, r3, #1
 8001a10:	4193      	sbcs	r3, r2
 8001a12:	1afc      	subs	r4, r7, r3
 8001a14:	42a7      	cmp	r7, r4
 8001a16:	41bf      	sbcs	r7, r7
 8001a18:	427f      	negs	r7, r7
 8001a1a:	1bcb      	subs	r3, r1, r7
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	465d      	mov	r5, fp
 8001a20:	4680      	mov	r8, r0
 8001a22:	e608      	b.n	8001636 <__aeabi_dsub+0xa2>
 8001a24:	4666      	mov	r6, ip
 8001a26:	431e      	orrs	r6, r3
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x498>
 8001a2a:	e0be      	b.n	8001baa <__aeabi_dsub+0x616>
 8001a2c:	1e56      	subs	r6, r2, #1
 8001a2e:	2a01      	cmp	r2, #1
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x4a0>
 8001a32:	e109      	b.n	8001c48 <__aeabi_dsub+0x6b4>
 8001a34:	4c8c      	ldr	r4, [pc, #560]	; (8001c68 <__aeabi_dsub+0x6d4>)
 8001a36:	42a2      	cmp	r2, r4
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x4a8>
 8001a3a:	e119      	b.n	8001c70 <__aeabi_dsub+0x6dc>
 8001a3c:	0032      	movs	r2, r6
 8001a3e:	e6c1      	b.n	80017c4 <__aeabi_dsub+0x230>
 8001a40:	4642      	mov	r2, r8
 8001a42:	2400      	movs	r4, #0
 8001a44:	2300      	movs	r3, #0
 8001a46:	e648      	b.n	80016da <__aeabi_dsub+0x146>
 8001a48:	2020      	movs	r0, #32
 8001a4a:	000c      	movs	r4, r1
 8001a4c:	1a80      	subs	r0, r0, r2
 8001a4e:	003e      	movs	r6, r7
 8001a50:	4087      	lsls	r7, r0
 8001a52:	4084      	lsls	r4, r0
 8001a54:	40d6      	lsrs	r6, r2
 8001a56:	1e78      	subs	r0, r7, #1
 8001a58:	4187      	sbcs	r7, r0
 8001a5a:	40d1      	lsrs	r1, r2
 8001a5c:	4334      	orrs	r4, r6
 8001a5e:	433c      	orrs	r4, r7
 8001a60:	448c      	add	ip, r1
 8001a62:	e7a4      	b.n	80019ae <__aeabi_dsub+0x41a>
 8001a64:	4a80      	ldr	r2, [pc, #512]	; (8001c68 <__aeabi_dsub+0x6d4>)
 8001a66:	4290      	cmp	r0, r2
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dsub+0x4d8>
 8001a6a:	e0e9      	b.n	8001c40 <__aeabi_dsub+0x6ac>
 8001a6c:	19df      	adds	r7, r3, r7
 8001a6e:	429f      	cmp	r7, r3
 8001a70:	419b      	sbcs	r3, r3
 8001a72:	4461      	add	r1, ip
 8001a74:	425b      	negs	r3, r3
 8001a76:	18c9      	adds	r1, r1, r3
 8001a78:	07cc      	lsls	r4, r1, #31
 8001a7a:	087f      	lsrs	r7, r7, #1
 8001a7c:	084b      	lsrs	r3, r1, #1
 8001a7e:	4699      	mov	r9, r3
 8001a80:	4680      	mov	r8, r0
 8001a82:	433c      	orrs	r4, r7
 8001a84:	e6f4      	b.n	8001870 <__aeabi_dsub+0x2dc>
 8001a86:	1afc      	subs	r4, r7, r3
 8001a88:	42a7      	cmp	r7, r4
 8001a8a:	41bf      	sbcs	r7, r7
 8001a8c:	4663      	mov	r3, ip
 8001a8e:	427f      	negs	r7, r7
 8001a90:	1ac9      	subs	r1, r1, r3
 8001a92:	1bcb      	subs	r3, r1, r7
 8001a94:	4699      	mov	r9, r3
 8001a96:	465d      	mov	r5, fp
 8001a98:	e5d5      	b.n	8001646 <__aeabi_dsub+0xb2>
 8001a9a:	08ff      	lsrs	r7, r7, #3
 8001a9c:	074b      	lsls	r3, r1, #29
 8001a9e:	465d      	mov	r5, fp
 8001aa0:	433b      	orrs	r3, r7
 8001aa2:	08cc      	lsrs	r4, r1, #3
 8001aa4:	e6ee      	b.n	8001884 <__aeabi_dsub+0x2f0>
 8001aa6:	4662      	mov	r2, ip
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	d000      	beq.n	8001aae <__aeabi_dsub+0x51a>
 8001aac:	e082      	b.n	8001bb4 <__aeabi_dsub+0x620>
 8001aae:	000b      	movs	r3, r1
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	d11b      	bne.n	8001aec <__aeabi_dsub+0x558>
 8001ab4:	2480      	movs	r4, #128	; 0x80
 8001ab6:	2500      	movs	r5, #0
 8001ab8:	0324      	lsls	r4, r4, #12
 8001aba:	e6f9      	b.n	80018b0 <__aeabi_dsub+0x31c>
 8001abc:	19dc      	adds	r4, r3, r7
 8001abe:	429c      	cmp	r4, r3
 8001ac0:	419b      	sbcs	r3, r3
 8001ac2:	4461      	add	r1, ip
 8001ac4:	4689      	mov	r9, r1
 8001ac6:	425b      	negs	r3, r3
 8001ac8:	4499      	add	r9, r3
 8001aca:	464b      	mov	r3, r9
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	d444      	bmi.n	8001b5a <__aeabi_dsub+0x5c6>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	4698      	mov	r8, r3
 8001ad4:	e6cc      	b.n	8001870 <__aeabi_dsub+0x2dc>
 8001ad6:	1bdc      	subs	r4, r3, r7
 8001ad8:	4662      	mov	r2, ip
 8001ada:	42a3      	cmp	r3, r4
 8001adc:	419b      	sbcs	r3, r3
 8001ade:	1a51      	subs	r1, r2, r1
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	1acb      	subs	r3, r1, r3
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4698      	mov	r8, r3
 8001aea:	e5a4      	b.n	8001636 <__aeabi_dsub+0xa2>
 8001aec:	08ff      	lsrs	r7, r7, #3
 8001aee:	074b      	lsls	r3, r1, #29
 8001af0:	465d      	mov	r5, fp
 8001af2:	433b      	orrs	r3, r7
 8001af4:	08cc      	lsrs	r4, r1, #3
 8001af6:	e6d7      	b.n	80018a8 <__aeabi_dsub+0x314>
 8001af8:	4662      	mov	r2, ip
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0014      	movs	r4, r2
 8001afe:	1e63      	subs	r3, r4, #1
 8001b00:	419c      	sbcs	r4, r3
 8001b02:	e679      	b.n	80017f8 <__aeabi_dsub+0x264>
 8001b04:	0015      	movs	r5, r2
 8001b06:	4664      	mov	r4, ip
 8001b08:	3d20      	subs	r5, #32
 8001b0a:	40ec      	lsrs	r4, r5
 8001b0c:	46a0      	mov	r8, r4
 8001b0e:	2a20      	cmp	r2, #32
 8001b10:	d005      	beq.n	8001b1e <__aeabi_dsub+0x58a>
 8001b12:	2540      	movs	r5, #64	; 0x40
 8001b14:	4664      	mov	r4, ip
 8001b16:	1aaa      	subs	r2, r5, r2
 8001b18:	4094      	lsls	r4, r2
 8001b1a:	4323      	orrs	r3, r4
 8001b1c:	469a      	mov	sl, r3
 8001b1e:	4654      	mov	r4, sl
 8001b20:	1e63      	subs	r3, r4, #1
 8001b22:	419c      	sbcs	r4, r3
 8001b24:	4643      	mov	r3, r8
 8001b26:	4323      	orrs	r3, r4
 8001b28:	e773      	b.n	8001a12 <__aeabi_dsub+0x47e>
 8001b2a:	4662      	mov	r2, ip
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	d023      	beq.n	8001b78 <__aeabi_dsub+0x5e4>
 8001b30:	000a      	movs	r2, r1
 8001b32:	433a      	orrs	r2, r7
 8001b34:	d000      	beq.n	8001b38 <__aeabi_dsub+0x5a4>
 8001b36:	e0a0      	b.n	8001c7a <__aeabi_dsub+0x6e6>
 8001b38:	4662      	mov	r2, ip
 8001b3a:	08db      	lsrs	r3, r3, #3
 8001b3c:	0752      	lsls	r2, r2, #29
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	4662      	mov	r2, ip
 8001b42:	08d4      	lsrs	r4, r2, #3
 8001b44:	e6b0      	b.n	80018a8 <__aeabi_dsub+0x314>
 8001b46:	000b      	movs	r3, r1
 8001b48:	433b      	orrs	r3, r7
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x5ba>
 8001b4c:	e728      	b.n	80019a0 <__aeabi_dsub+0x40c>
 8001b4e:	08ff      	lsrs	r7, r7, #3
 8001b50:	074b      	lsls	r3, r1, #29
 8001b52:	465d      	mov	r5, fp
 8001b54:	433b      	orrs	r3, r7
 8001b56:	08cc      	lsrs	r4, r1, #3
 8001b58:	e697      	b.n	800188a <__aeabi_dsub+0x2f6>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	e736      	b.n	80019ce <__aeabi_dsub+0x43a>
 8001b60:	1afc      	subs	r4, r7, r3
 8001b62:	42a7      	cmp	r7, r4
 8001b64:	41bf      	sbcs	r7, r7
 8001b66:	4663      	mov	r3, ip
 8001b68:	427f      	negs	r7, r7
 8001b6a:	1ac9      	subs	r1, r1, r3
 8001b6c:	1bcb      	subs	r3, r1, r7
 8001b6e:	4699      	mov	r9, r3
 8001b70:	2301      	movs	r3, #1
 8001b72:	465d      	mov	r5, fp
 8001b74:	4698      	mov	r8, r3
 8001b76:	e55e      	b.n	8001636 <__aeabi_dsub+0xa2>
 8001b78:	074b      	lsls	r3, r1, #29
 8001b7a:	08ff      	lsrs	r7, r7, #3
 8001b7c:	433b      	orrs	r3, r7
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e692      	b.n	80018a8 <__aeabi_dsub+0x314>
 8001b82:	1bdc      	subs	r4, r3, r7
 8001b84:	4660      	mov	r0, ip
 8001b86:	42a3      	cmp	r3, r4
 8001b88:	41b6      	sbcs	r6, r6
 8001b8a:	1a40      	subs	r0, r0, r1
 8001b8c:	4276      	negs	r6, r6
 8001b8e:	1b80      	subs	r0, r0, r6
 8001b90:	4681      	mov	r9, r0
 8001b92:	0200      	lsls	r0, r0, #8
 8001b94:	d560      	bpl.n	8001c58 <__aeabi_dsub+0x6c4>
 8001b96:	1afc      	subs	r4, r7, r3
 8001b98:	42a7      	cmp	r7, r4
 8001b9a:	41bf      	sbcs	r7, r7
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	427f      	negs	r7, r7
 8001ba0:	1ac9      	subs	r1, r1, r3
 8001ba2:	1bcb      	subs	r3, r1, r7
 8001ba4:	4699      	mov	r9, r3
 8001ba6:	465d      	mov	r5, fp
 8001ba8:	e576      	b.n	8001698 <__aeabi_dsub+0x104>
 8001baa:	08ff      	lsrs	r7, r7, #3
 8001bac:	074b      	lsls	r3, r1, #29
 8001bae:	433b      	orrs	r3, r7
 8001bb0:	08cc      	lsrs	r4, r1, #3
 8001bb2:	e667      	b.n	8001884 <__aeabi_dsub+0x2f0>
 8001bb4:	000a      	movs	r2, r1
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	433a      	orrs	r2, r7
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x62a>
 8001bbc:	e66f      	b.n	800189e <__aeabi_dsub+0x30a>
 8001bbe:	4662      	mov	r2, ip
 8001bc0:	0752      	lsls	r2, r2, #29
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	4662      	mov	r2, ip
 8001bc6:	08d4      	lsrs	r4, r2, #3
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	0312      	lsls	r2, r2, #12
 8001bcc:	4214      	tst	r4, r2
 8001bce:	d007      	beq.n	8001be0 <__aeabi_dsub+0x64c>
 8001bd0:	08c8      	lsrs	r0, r1, #3
 8001bd2:	4210      	tst	r0, r2
 8001bd4:	d104      	bne.n	8001be0 <__aeabi_dsub+0x64c>
 8001bd6:	465d      	mov	r5, fp
 8001bd8:	0004      	movs	r4, r0
 8001bda:	08fb      	lsrs	r3, r7, #3
 8001bdc:	0749      	lsls	r1, r1, #29
 8001bde:	430b      	orrs	r3, r1
 8001be0:	0f5a      	lsrs	r2, r3, #29
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	0752      	lsls	r2, r2, #29
 8001be8:	4313      	orrs	r3, r2
 8001bea:	e65d      	b.n	80018a8 <__aeabi_dsub+0x314>
 8001bec:	074b      	lsls	r3, r1, #29
 8001bee:	08ff      	lsrs	r7, r7, #3
 8001bf0:	433b      	orrs	r3, r7
 8001bf2:	08cc      	lsrs	r4, r1, #3
 8001bf4:	e649      	b.n	800188a <__aeabi_dsub+0x2f6>
 8001bf6:	19dc      	adds	r4, r3, r7
 8001bf8:	429c      	cmp	r4, r3
 8001bfa:	419b      	sbcs	r3, r3
 8001bfc:	4461      	add	r1, ip
 8001bfe:	4689      	mov	r9, r1
 8001c00:	425b      	negs	r3, r3
 8001c02:	4499      	add	r9, r3
 8001c04:	464b      	mov	r3, r9
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	d400      	bmi.n	8001c0c <__aeabi_dsub+0x678>
 8001c0a:	e631      	b.n	8001870 <__aeabi_dsub+0x2dc>
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <__aeabi_dsub+0x6d8>)
 8001c10:	401a      	ands	r2, r3
 8001c12:	2301      	movs	r3, #1
 8001c14:	4691      	mov	r9, r2
 8001c16:	4698      	mov	r8, r3
 8001c18:	e62a      	b.n	8001870 <__aeabi_dsub+0x2dc>
 8001c1a:	0016      	movs	r6, r2
 8001c1c:	4664      	mov	r4, ip
 8001c1e:	3e20      	subs	r6, #32
 8001c20:	40f4      	lsrs	r4, r6
 8001c22:	46a0      	mov	r8, r4
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d005      	beq.n	8001c34 <__aeabi_dsub+0x6a0>
 8001c28:	2640      	movs	r6, #64	; 0x40
 8001c2a:	4664      	mov	r4, ip
 8001c2c:	1ab2      	subs	r2, r6, r2
 8001c2e:	4094      	lsls	r4, r2
 8001c30:	4323      	orrs	r3, r4
 8001c32:	469a      	mov	sl, r3
 8001c34:	4654      	mov	r4, sl
 8001c36:	1e63      	subs	r3, r4, #1
 8001c38:	419c      	sbcs	r4, r3
 8001c3a:	4643      	mov	r3, r8
 8001c3c:	431c      	orrs	r4, r3
 8001c3e:	e5db      	b.n	80017f8 <__aeabi_dsub+0x264>
 8001c40:	0002      	movs	r2, r0
 8001c42:	2400      	movs	r4, #0
 8001c44:	2300      	movs	r3, #0
 8001c46:	e548      	b.n	80016da <__aeabi_dsub+0x146>
 8001c48:	19dc      	adds	r4, r3, r7
 8001c4a:	42bc      	cmp	r4, r7
 8001c4c:	41bf      	sbcs	r7, r7
 8001c4e:	4461      	add	r1, ip
 8001c50:	4689      	mov	r9, r1
 8001c52:	427f      	negs	r7, r7
 8001c54:	44b9      	add	r9, r7
 8001c56:	e738      	b.n	8001aca <__aeabi_dsub+0x536>
 8001c58:	464b      	mov	r3, r9
 8001c5a:	4323      	orrs	r3, r4
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x6cc>
 8001c5e:	e69f      	b.n	80019a0 <__aeabi_dsub+0x40c>
 8001c60:	e606      	b.n	8001870 <__aeabi_dsub+0x2dc>
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	000007fe 	.word	0x000007fe
 8001c68:	000007ff 	.word	0x000007ff
 8001c6c:	ff7fffff 	.word	0xff7fffff
 8001c70:	08ff      	lsrs	r7, r7, #3
 8001c72:	074b      	lsls	r3, r1, #29
 8001c74:	433b      	orrs	r3, r7
 8001c76:	08cc      	lsrs	r4, r1, #3
 8001c78:	e616      	b.n	80018a8 <__aeabi_dsub+0x314>
 8001c7a:	4662      	mov	r2, ip
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	0752      	lsls	r2, r2, #29
 8001c80:	4313      	orrs	r3, r2
 8001c82:	4662      	mov	r2, ip
 8001c84:	08d4      	lsrs	r4, r2, #3
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	0312      	lsls	r2, r2, #12
 8001c8a:	4214      	tst	r4, r2
 8001c8c:	d007      	beq.n	8001c9e <__aeabi_dsub+0x70a>
 8001c8e:	08c8      	lsrs	r0, r1, #3
 8001c90:	4210      	tst	r0, r2
 8001c92:	d104      	bne.n	8001c9e <__aeabi_dsub+0x70a>
 8001c94:	465d      	mov	r5, fp
 8001c96:	0004      	movs	r4, r0
 8001c98:	08fb      	lsrs	r3, r7, #3
 8001c9a:	0749      	lsls	r1, r1, #29
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	0f5a      	lsrs	r2, r3, #29
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	0752      	lsls	r2, r2, #29
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	e5fe      	b.n	80018a8 <__aeabi_dsub+0x314>
 8001caa:	2300      	movs	r3, #0
 8001cac:	4a01      	ldr	r2, [pc, #4]	; (8001cb4 <__aeabi_dsub+0x720>)
 8001cae:	001c      	movs	r4, r3
 8001cb0:	e513      	b.n	80016da <__aeabi_dsub+0x146>
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	000007ff 	.word	0x000007ff

08001cb8 <__aeabi_d2iz>:
 8001cb8:	000a      	movs	r2, r1
 8001cba:	b530      	push	{r4, r5, lr}
 8001cbc:	4c13      	ldr	r4, [pc, #76]	; (8001d0c <__aeabi_d2iz+0x54>)
 8001cbe:	0053      	lsls	r3, r2, #1
 8001cc0:	0309      	lsls	r1, r1, #12
 8001cc2:	0005      	movs	r5, r0
 8001cc4:	0b09      	lsrs	r1, r1, #12
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	0d5b      	lsrs	r3, r3, #21
 8001cca:	0fd2      	lsrs	r2, r2, #31
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	dd04      	ble.n	8001cda <__aeabi_d2iz+0x22>
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <__aeabi_d2iz+0x58>)
 8001cd2:	4283      	cmp	r3, r0
 8001cd4:	dd02      	ble.n	8001cdc <__aeabi_d2iz+0x24>
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <__aeabi_d2iz+0x5c>)
 8001cd8:	18d0      	adds	r0, r2, r3
 8001cda:	bd30      	pop	{r4, r5, pc}
 8001cdc:	2080      	movs	r0, #128	; 0x80
 8001cde:	0340      	lsls	r0, r0, #13
 8001ce0:	4301      	orrs	r1, r0
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <__aeabi_d2iz+0x60>)
 8001ce4:	1ac0      	subs	r0, r0, r3
 8001ce6:	281f      	cmp	r0, #31
 8001ce8:	dd08      	ble.n	8001cfc <__aeabi_d2iz+0x44>
 8001cea:	480c      	ldr	r0, [pc, #48]	; (8001d1c <__aeabi_d2iz+0x64>)
 8001cec:	1ac3      	subs	r3, r0, r3
 8001cee:	40d9      	lsrs	r1, r3
 8001cf0:	000b      	movs	r3, r1
 8001cf2:	4258      	negs	r0, r3
 8001cf4:	2a00      	cmp	r2, #0
 8001cf6:	d1f0      	bne.n	8001cda <__aeabi_d2iz+0x22>
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	e7ee      	b.n	8001cda <__aeabi_d2iz+0x22>
 8001cfc:	4c08      	ldr	r4, [pc, #32]	; (8001d20 <__aeabi_d2iz+0x68>)
 8001cfe:	40c5      	lsrs	r5, r0
 8001d00:	46a4      	mov	ip, r4
 8001d02:	4463      	add	r3, ip
 8001d04:	4099      	lsls	r1, r3
 8001d06:	000b      	movs	r3, r1
 8001d08:	432b      	orrs	r3, r5
 8001d0a:	e7f2      	b.n	8001cf2 <__aeabi_d2iz+0x3a>
 8001d0c:	000003fe 	.word	0x000003fe
 8001d10:	0000041d 	.word	0x0000041d
 8001d14:	7fffffff 	.word	0x7fffffff
 8001d18:	00000433 	.word	0x00000433
 8001d1c:	00000413 	.word	0x00000413
 8001d20:	fffffbed 	.word	0xfffffbed

08001d24 <__aeabi_ui2d>:
 8001d24:	b510      	push	{r4, lr}
 8001d26:	1e04      	subs	r4, r0, #0
 8001d28:	d010      	beq.n	8001d4c <__aeabi_ui2d+0x28>
 8001d2a:	f000 f85f 	bl	8001dec <__clzsi2>
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <__aeabi_ui2d+0x48>)
 8001d30:	1a1b      	subs	r3, r3, r0
 8001d32:	280a      	cmp	r0, #10
 8001d34:	dc11      	bgt.n	8001d5a <__aeabi_ui2d+0x36>
 8001d36:	220b      	movs	r2, #11
 8001d38:	0021      	movs	r1, r4
 8001d3a:	1a12      	subs	r2, r2, r0
 8001d3c:	40d1      	lsrs	r1, r2
 8001d3e:	3015      	adds	r0, #21
 8001d40:	030a      	lsls	r2, r1, #12
 8001d42:	055b      	lsls	r3, r3, #21
 8001d44:	4084      	lsls	r4, r0
 8001d46:	0b12      	lsrs	r2, r2, #12
 8001d48:	0d5b      	lsrs	r3, r3, #21
 8001d4a:	e001      	b.n	8001d50 <__aeabi_ui2d+0x2c>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2200      	movs	r2, #0
 8001d50:	051b      	lsls	r3, r3, #20
 8001d52:	4313      	orrs	r3, r2
 8001d54:	0020      	movs	r0, r4
 8001d56:	0019      	movs	r1, r3
 8001d58:	bd10      	pop	{r4, pc}
 8001d5a:	0022      	movs	r2, r4
 8001d5c:	380b      	subs	r0, #11
 8001d5e:	4082      	lsls	r2, r0
 8001d60:	055b      	lsls	r3, r3, #21
 8001d62:	0312      	lsls	r2, r2, #12
 8001d64:	2400      	movs	r4, #0
 8001d66:	0b12      	lsrs	r2, r2, #12
 8001d68:	0d5b      	lsrs	r3, r3, #21
 8001d6a:	e7f1      	b.n	8001d50 <__aeabi_ui2d+0x2c>
 8001d6c:	0000041e 	.word	0x0000041e

08001d70 <__aeabi_cdrcmple>:
 8001d70:	4684      	mov	ip, r0
 8001d72:	0010      	movs	r0, r2
 8001d74:	4662      	mov	r2, ip
 8001d76:	468c      	mov	ip, r1
 8001d78:	0019      	movs	r1, r3
 8001d7a:	4663      	mov	r3, ip
 8001d7c:	e000      	b.n	8001d80 <__aeabi_cdcmpeq>
 8001d7e:	46c0      	nop			; (mov r8, r8)

08001d80 <__aeabi_cdcmpeq>:
 8001d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d82:	f000 f905 	bl	8001f90 <__ledf2>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d401      	bmi.n	8001d8e <__aeabi_cdcmpeq+0xe>
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	42c8      	cmn	r0, r1
 8001d8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d90 <__aeabi_dcmpeq>:
 8001d90:	b510      	push	{r4, lr}
 8001d92:	f000 f855 	bl	8001e40 <__eqdf2>
 8001d96:	4240      	negs	r0, r0
 8001d98:	3001      	adds	r0, #1
 8001d9a:	bd10      	pop	{r4, pc}

08001d9c <__aeabi_dcmplt>:
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	f000 f8f7 	bl	8001f90 <__ledf2>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	db01      	blt.n	8001daa <__aeabi_dcmplt+0xe>
 8001da6:	2000      	movs	r0, #0
 8001da8:	bd10      	pop	{r4, pc}
 8001daa:	2001      	movs	r0, #1
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)

08001db0 <__aeabi_dcmple>:
 8001db0:	b510      	push	{r4, lr}
 8001db2:	f000 f8ed 	bl	8001f90 <__ledf2>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	dd01      	ble.n	8001dbe <__aeabi_dcmple+0xe>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)

08001dc4 <__aeabi_dcmpgt>:
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	f000 f87d 	bl	8001ec4 <__gedf2>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	dc01      	bgt.n	8001dd2 <__aeabi_dcmpgt+0xe>
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd10      	pop	{r4, pc}
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	bd10      	pop	{r4, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)

08001dd8 <__aeabi_dcmpge>:
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	f000 f873 	bl	8001ec4 <__gedf2>
 8001dde:	2800      	cmp	r0, #0
 8001de0:	da01      	bge.n	8001de6 <__aeabi_dcmpge+0xe>
 8001de2:	2000      	movs	r0, #0
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	2001      	movs	r0, #1
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)

08001dec <__clzsi2>:
 8001dec:	211c      	movs	r1, #28
 8001dee:	2301      	movs	r3, #1
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	4298      	cmp	r0, r3
 8001df4:	d301      	bcc.n	8001dfa <__clzsi2+0xe>
 8001df6:	0c00      	lsrs	r0, r0, #16
 8001df8:	3910      	subs	r1, #16
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	4298      	cmp	r0, r3
 8001dfe:	d301      	bcc.n	8001e04 <__clzsi2+0x18>
 8001e00:	0a00      	lsrs	r0, r0, #8
 8001e02:	3908      	subs	r1, #8
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	4298      	cmp	r0, r3
 8001e08:	d301      	bcc.n	8001e0e <__clzsi2+0x22>
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	3904      	subs	r1, #4
 8001e0e:	a202      	add	r2, pc, #8	; (adr r2, 8001e18 <__clzsi2+0x2c>)
 8001e10:	5c10      	ldrb	r0, [r2, r0]
 8001e12:	1840      	adds	r0, r0, r1
 8001e14:	4770      	bx	lr
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	02020304 	.word	0x02020304
 8001e1c:	01010101 	.word	0x01010101
	...

08001e28 <__clzdi2>:
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	2900      	cmp	r1, #0
 8001e2c:	d103      	bne.n	8001e36 <__clzdi2+0xe>
 8001e2e:	f7ff ffdd 	bl	8001dec <__clzsi2>
 8001e32:	3020      	adds	r0, #32
 8001e34:	e002      	b.n	8001e3c <__clzdi2+0x14>
 8001e36:	0008      	movs	r0, r1
 8001e38:	f7ff ffd8 	bl	8001dec <__clzsi2>
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)

08001e40 <__eqdf2>:
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	464e      	mov	r6, r9
 8001e44:	4645      	mov	r5, r8
 8001e46:	46de      	mov	lr, fp
 8001e48:	4657      	mov	r7, sl
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	b5e0      	push	{r5, r6, r7, lr}
 8001e4e:	0017      	movs	r7, r2
 8001e50:	031a      	lsls	r2, r3, #12
 8001e52:	0b12      	lsrs	r2, r2, #12
 8001e54:	0005      	movs	r5, r0
 8001e56:	4684      	mov	ip, r0
 8001e58:	4819      	ldr	r0, [pc, #100]	; (8001ec0 <__eqdf2+0x80>)
 8001e5a:	030e      	lsls	r6, r1, #12
 8001e5c:	004c      	lsls	r4, r1, #1
 8001e5e:	4691      	mov	r9, r2
 8001e60:	005a      	lsls	r2, r3, #1
 8001e62:	0fdb      	lsrs	r3, r3, #31
 8001e64:	469b      	mov	fp, r3
 8001e66:	0b36      	lsrs	r6, r6, #12
 8001e68:	0d64      	lsrs	r4, r4, #21
 8001e6a:	0fc9      	lsrs	r1, r1, #31
 8001e6c:	0d52      	lsrs	r2, r2, #21
 8001e6e:	4284      	cmp	r4, r0
 8001e70:	d019      	beq.n	8001ea6 <__eqdf2+0x66>
 8001e72:	4282      	cmp	r2, r0
 8001e74:	d010      	beq.n	8001e98 <__eqdf2+0x58>
 8001e76:	2001      	movs	r0, #1
 8001e78:	4294      	cmp	r4, r2
 8001e7a:	d10e      	bne.n	8001e9a <__eqdf2+0x5a>
 8001e7c:	454e      	cmp	r6, r9
 8001e7e:	d10c      	bne.n	8001e9a <__eqdf2+0x5a>
 8001e80:	2001      	movs	r0, #1
 8001e82:	45c4      	cmp	ip, r8
 8001e84:	d109      	bne.n	8001e9a <__eqdf2+0x5a>
 8001e86:	4559      	cmp	r1, fp
 8001e88:	d017      	beq.n	8001eba <__eqdf2+0x7a>
 8001e8a:	2c00      	cmp	r4, #0
 8001e8c:	d105      	bne.n	8001e9a <__eqdf2+0x5a>
 8001e8e:	0030      	movs	r0, r6
 8001e90:	4328      	orrs	r0, r5
 8001e92:	1e43      	subs	r3, r0, #1
 8001e94:	4198      	sbcs	r0, r3
 8001e96:	e000      	b.n	8001e9a <__eqdf2+0x5a>
 8001e98:	2001      	movs	r0, #1
 8001e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e9c:	46bb      	mov	fp, r7
 8001e9e:	46b2      	mov	sl, r6
 8001ea0:	46a9      	mov	r9, r5
 8001ea2:	46a0      	mov	r8, r4
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea6:	0033      	movs	r3, r6
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	432b      	orrs	r3, r5
 8001eac:	d1f5      	bne.n	8001e9a <__eqdf2+0x5a>
 8001eae:	42a2      	cmp	r2, r4
 8001eb0:	d1f3      	bne.n	8001e9a <__eqdf2+0x5a>
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	433b      	orrs	r3, r7
 8001eb6:	d1f0      	bne.n	8001e9a <__eqdf2+0x5a>
 8001eb8:	e7e2      	b.n	8001e80 <__eqdf2+0x40>
 8001eba:	2000      	movs	r0, #0
 8001ebc:	e7ed      	b.n	8001e9a <__eqdf2+0x5a>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	000007ff 	.word	0x000007ff

08001ec4 <__gedf2>:
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	4647      	mov	r7, r8
 8001ec8:	46ce      	mov	lr, r9
 8001eca:	0004      	movs	r4, r0
 8001ecc:	0018      	movs	r0, r3
 8001ece:	0016      	movs	r6, r2
 8001ed0:	031b      	lsls	r3, r3, #12
 8001ed2:	0b1b      	lsrs	r3, r3, #12
 8001ed4:	4d2d      	ldr	r5, [pc, #180]	; (8001f8c <__gedf2+0xc8>)
 8001ed6:	004a      	lsls	r2, r1, #1
 8001ed8:	4699      	mov	r9, r3
 8001eda:	b580      	push	{r7, lr}
 8001edc:	0043      	lsls	r3, r0, #1
 8001ede:	030f      	lsls	r7, r1, #12
 8001ee0:	46a4      	mov	ip, r4
 8001ee2:	46b0      	mov	r8, r6
 8001ee4:	0b3f      	lsrs	r7, r7, #12
 8001ee6:	0d52      	lsrs	r2, r2, #21
 8001ee8:	0fc9      	lsrs	r1, r1, #31
 8001eea:	0d5b      	lsrs	r3, r3, #21
 8001eec:	0fc0      	lsrs	r0, r0, #31
 8001eee:	42aa      	cmp	r2, r5
 8001ef0:	d021      	beq.n	8001f36 <__gedf2+0x72>
 8001ef2:	42ab      	cmp	r3, r5
 8001ef4:	d013      	beq.n	8001f1e <__gedf2+0x5a>
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d122      	bne.n	8001f40 <__gedf2+0x7c>
 8001efa:	433c      	orrs	r4, r7
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <__gedf2+0x42>
 8001f00:	464d      	mov	r5, r9
 8001f02:	432e      	orrs	r6, r5
 8001f04:	d022      	beq.n	8001f4c <__gedf2+0x88>
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d010      	beq.n	8001f2c <__gedf2+0x68>
 8001f0a:	4281      	cmp	r1, r0
 8001f0c:	d022      	beq.n	8001f54 <__gedf2+0x90>
 8001f0e:	2002      	movs	r0, #2
 8001f10:	3901      	subs	r1, #1
 8001f12:	4008      	ands	r0, r1
 8001f14:	3801      	subs	r0, #1
 8001f16:	bcc0      	pop	{r6, r7}
 8001f18:	46b9      	mov	r9, r7
 8001f1a:	46b0      	mov	r8, r6
 8001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1e:	464d      	mov	r5, r9
 8001f20:	432e      	orrs	r6, r5
 8001f22:	d129      	bne.n	8001f78 <__gedf2+0xb4>
 8001f24:	2a00      	cmp	r2, #0
 8001f26:	d1f0      	bne.n	8001f0a <__gedf2+0x46>
 8001f28:	433c      	orrs	r4, r7
 8001f2a:	d1ee      	bne.n	8001f0a <__gedf2+0x46>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d1f2      	bne.n	8001f16 <__gedf2+0x52>
 8001f30:	2001      	movs	r0, #1
 8001f32:	4240      	negs	r0, r0
 8001f34:	e7ef      	b.n	8001f16 <__gedf2+0x52>
 8001f36:	003d      	movs	r5, r7
 8001f38:	4325      	orrs	r5, r4
 8001f3a:	d11d      	bne.n	8001f78 <__gedf2+0xb4>
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d0ee      	beq.n	8001f1e <__gedf2+0x5a>
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e2      	bne.n	8001f0a <__gedf2+0x46>
 8001f44:	464c      	mov	r4, r9
 8001f46:	4326      	orrs	r6, r4
 8001f48:	d1df      	bne.n	8001f0a <__gedf2+0x46>
 8001f4a:	e7e0      	b.n	8001f0e <__gedf2+0x4a>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	2c00      	cmp	r4, #0
 8001f50:	d0e1      	beq.n	8001f16 <__gedf2+0x52>
 8001f52:	e7dc      	b.n	8001f0e <__gedf2+0x4a>
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dc0a      	bgt.n	8001f6e <__gedf2+0xaa>
 8001f58:	dbe8      	blt.n	8001f2c <__gedf2+0x68>
 8001f5a:	454f      	cmp	r7, r9
 8001f5c:	d8d7      	bhi.n	8001f0e <__gedf2+0x4a>
 8001f5e:	d00e      	beq.n	8001f7e <__gedf2+0xba>
 8001f60:	2000      	movs	r0, #0
 8001f62:	454f      	cmp	r7, r9
 8001f64:	d2d7      	bcs.n	8001f16 <__gedf2+0x52>
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d0e2      	beq.n	8001f30 <__gedf2+0x6c>
 8001f6a:	0008      	movs	r0, r1
 8001f6c:	e7d3      	b.n	8001f16 <__gedf2+0x52>
 8001f6e:	4243      	negs	r3, r0
 8001f70:	4158      	adcs	r0, r3
 8001f72:	0040      	lsls	r0, r0, #1
 8001f74:	3801      	subs	r0, #1
 8001f76:	e7ce      	b.n	8001f16 <__gedf2+0x52>
 8001f78:	2002      	movs	r0, #2
 8001f7a:	4240      	negs	r0, r0
 8001f7c:	e7cb      	b.n	8001f16 <__gedf2+0x52>
 8001f7e:	45c4      	cmp	ip, r8
 8001f80:	d8c5      	bhi.n	8001f0e <__gedf2+0x4a>
 8001f82:	2000      	movs	r0, #0
 8001f84:	45c4      	cmp	ip, r8
 8001f86:	d2c6      	bcs.n	8001f16 <__gedf2+0x52>
 8001f88:	e7ed      	b.n	8001f66 <__gedf2+0xa2>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__ledf2>:
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	4647      	mov	r7, r8
 8001f94:	46ce      	mov	lr, r9
 8001f96:	0004      	movs	r4, r0
 8001f98:	0018      	movs	r0, r3
 8001f9a:	0016      	movs	r6, r2
 8001f9c:	031b      	lsls	r3, r3, #12
 8001f9e:	0b1b      	lsrs	r3, r3, #12
 8001fa0:	4d2c      	ldr	r5, [pc, #176]	; (8002054 <__ledf2+0xc4>)
 8001fa2:	004a      	lsls	r2, r1, #1
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	0043      	lsls	r3, r0, #1
 8001faa:	030f      	lsls	r7, r1, #12
 8001fac:	46a4      	mov	ip, r4
 8001fae:	46b0      	mov	r8, r6
 8001fb0:	0b3f      	lsrs	r7, r7, #12
 8001fb2:	0d52      	lsrs	r2, r2, #21
 8001fb4:	0fc9      	lsrs	r1, r1, #31
 8001fb6:	0d5b      	lsrs	r3, r3, #21
 8001fb8:	0fc0      	lsrs	r0, r0, #31
 8001fba:	42aa      	cmp	r2, r5
 8001fbc:	d00d      	beq.n	8001fda <__ledf2+0x4a>
 8001fbe:	42ab      	cmp	r3, r5
 8001fc0:	d010      	beq.n	8001fe4 <__ledf2+0x54>
 8001fc2:	2a00      	cmp	r2, #0
 8001fc4:	d127      	bne.n	8002016 <__ledf2+0x86>
 8001fc6:	433c      	orrs	r4, r7
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d111      	bne.n	8001ff0 <__ledf2+0x60>
 8001fcc:	464d      	mov	r5, r9
 8001fce:	432e      	orrs	r6, r5
 8001fd0:	d10e      	bne.n	8001ff0 <__ledf2+0x60>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	2c00      	cmp	r4, #0
 8001fd6:	d015      	beq.n	8002004 <__ledf2+0x74>
 8001fd8:	e00e      	b.n	8001ff8 <__ledf2+0x68>
 8001fda:	003d      	movs	r5, r7
 8001fdc:	4325      	orrs	r5, r4
 8001fde:	d110      	bne.n	8002002 <__ledf2+0x72>
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d118      	bne.n	8002016 <__ledf2+0x86>
 8001fe4:	464d      	mov	r5, r9
 8001fe6:	432e      	orrs	r6, r5
 8001fe8:	d10b      	bne.n	8002002 <__ledf2+0x72>
 8001fea:	2a00      	cmp	r2, #0
 8001fec:	d102      	bne.n	8001ff4 <__ledf2+0x64>
 8001fee:	433c      	orrs	r4, r7
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	d00b      	beq.n	800200c <__ledf2+0x7c>
 8001ff4:	4281      	cmp	r1, r0
 8001ff6:	d014      	beq.n	8002022 <__ledf2+0x92>
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	3901      	subs	r1, #1
 8001ffc:	4008      	ands	r0, r1
 8001ffe:	3801      	subs	r0, #1
 8002000:	e000      	b.n	8002004 <__ledf2+0x74>
 8002002:	2002      	movs	r0, #2
 8002004:	bcc0      	pop	{r6, r7}
 8002006:	46b9      	mov	r9, r7
 8002008:	46b0      	mov	r8, r6
 800200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200c:	2800      	cmp	r0, #0
 800200e:	d1f9      	bne.n	8002004 <__ledf2+0x74>
 8002010:	2001      	movs	r0, #1
 8002012:	4240      	negs	r0, r0
 8002014:	e7f6      	b.n	8002004 <__ledf2+0x74>
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ec      	bne.n	8001ff4 <__ledf2+0x64>
 800201a:	464c      	mov	r4, r9
 800201c:	4326      	orrs	r6, r4
 800201e:	d1e9      	bne.n	8001ff4 <__ledf2+0x64>
 8002020:	e7ea      	b.n	8001ff8 <__ledf2+0x68>
 8002022:	429a      	cmp	r2, r3
 8002024:	dd04      	ble.n	8002030 <__ledf2+0xa0>
 8002026:	4243      	negs	r3, r0
 8002028:	4158      	adcs	r0, r3
 800202a:	0040      	lsls	r0, r0, #1
 800202c:	3801      	subs	r0, #1
 800202e:	e7e9      	b.n	8002004 <__ledf2+0x74>
 8002030:	429a      	cmp	r2, r3
 8002032:	dbeb      	blt.n	800200c <__ledf2+0x7c>
 8002034:	454f      	cmp	r7, r9
 8002036:	d8df      	bhi.n	8001ff8 <__ledf2+0x68>
 8002038:	d006      	beq.n	8002048 <__ledf2+0xb8>
 800203a:	2000      	movs	r0, #0
 800203c:	454f      	cmp	r7, r9
 800203e:	d2e1      	bcs.n	8002004 <__ledf2+0x74>
 8002040:	2900      	cmp	r1, #0
 8002042:	d0e5      	beq.n	8002010 <__ledf2+0x80>
 8002044:	0008      	movs	r0, r1
 8002046:	e7dd      	b.n	8002004 <__ledf2+0x74>
 8002048:	45c4      	cmp	ip, r8
 800204a:	d8d5      	bhi.n	8001ff8 <__ledf2+0x68>
 800204c:	2000      	movs	r0, #0
 800204e:	45c4      	cmp	ip, r8
 8002050:	d2d8      	bcs.n	8002004 <__ledf2+0x74>
 8002052:	e7f5      	b.n	8002040 <__ledf2+0xb0>
 8002054:	000007ff 	.word	0x000007ff

08002058 <i2c1MasterInit>:
		i2c->data_rx[i] = '\0';
	for (int i = 0; i < I2C_TX_BUFFER_SIZE; i++)
		i2c->data_tx[i] = '\0';
}

void i2c1MasterInit() {
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

	i2c1GpioInit();
 800205c:	f000 f83c 	bl	80020d8 <i2c1GpioInit>
	/* clock enable */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <i2c1MasterInit+0x6c>)
 8002062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <i2c1MasterInit+0x6c>)
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	0389      	lsls	r1, r1, #14
 800206a:	430a      	orrs	r2, r1
 800206c:	63da      	str	r2, [r3, #60]	; 0x3c
	/* peripherial disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <i2c1MasterInit+0x70>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <i2c1MasterInit+0x70>)
 8002074:	2101      	movs	r1, #1
 8002076:	438a      	bics	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
	/* set timing */
	I2C1->TIMINGR = 0x00303D5B;
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <i2c1MasterInit+0x70>)
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <i2c1MasterInit+0x74>)
 800207e:	611a      	str	r2, [r3, #16]
	/* */
	CLEAR_BIT(I2C2->OAR1, I2C_OAR1_OA1EN);
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <i2c1MasterInit+0x78>)
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <i2c1MasterInit+0x78>)
 8002086:	4913      	ldr	r1, [pc, #76]	; (80020d4 <i2c1MasterInit+0x7c>)
 8002088:	400a      	ands	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(I2C2->OAR2, I2C_OAR2_OA2EN);
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <i2c1MasterInit+0x78>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <i2c1MasterInit+0x78>)
 8002092:	4910      	ldr	r1, [pc, #64]	; (80020d4 <i2c1MasterInit+0x7c>)
 8002094:	400a      	ands	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

	/*tx and rx interrupt enable */
	SET_BIT(I2C2->CR1, I2C_CR1_RXIE);
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <i2c1MasterInit+0x78>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <i2c1MasterInit+0x78>)
 800209e:	2104      	movs	r1, #4
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C2->CR1, I2C_CR1_TXIE);
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <i2c1MasterInit+0x78>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <i2c1MasterInit+0x78>)
 80020aa:	2102      	movs	r1, #2
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

	/* peripherial enable */
	SET_BIT(I2C2->CR1, I2C_CR1_PE);
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <i2c1MasterInit+0x78>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <i2c1MasterInit+0x78>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40005400 	.word	0x40005400
 80020cc:	00303d5b 	.word	0x00303d5b
 80020d0:	40005800 	.word	0x40005800
 80020d4:	ffff7fff 	.word	0xffff7fff

080020d8 <i2c1GpioInit>:

void i2c1GpioInit() {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0

	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <i2c1GpioInit+0xb4>)
 80020de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <i2c1GpioInit+0xb4>)
 80020e2:	2102      	movs	r1, #2
 80020e4:	430a      	orrs	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34
	/* SCL PB6  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <i2c1GpioInit+0xb8>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b28      	ldr	r3, [pc, #160]	; (8002190 <i2c1GpioInit+0xb8>)
 80020ee:	4929      	ldr	r1, [pc, #164]	; (8002194 <i2c1GpioInit+0xbc>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 80020f4:	4b26      	ldr	r3, [pc, #152]	; (8002190 <i2c1GpioInit+0xb8>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <i2c1GpioInit+0xb8>)
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0189      	lsls	r1, r1, #6
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
	/* SDA PB7 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 8002102:	4b23      	ldr	r3, [pc, #140]	; (8002190 <i2c1GpioInit+0xb8>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <i2c1GpioInit+0xb8>)
 8002108:	4923      	ldr	r1, [pc, #140]	; (8002198 <i2c1GpioInit+0xc0>)
 800210a:	400a      	ands	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <i2c1GpioInit+0xb8>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <i2c1GpioInit+0xb8>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0209      	lsls	r1, r1, #8
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
	/* SCL PB6 High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED6_0);
	/* SDC PB7  High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_1 |GPIO_OSPEEDR_OSPEED7_0);

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6);
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <i2c1GpioInit+0xb8>)
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <i2c1GpioInit+0xb8>)
 8002122:	491e      	ldr	r1, [pc, #120]	; (800219c <i2c1GpioInit+0xc4>)
 8002124:	400a      	ands	r2, r1
 8002126:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6 << 1);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <i2c1GpioInit+0xb8>)
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <i2c1GpioInit+0xb8>)
 800212e:	21f0      	movs	r1, #240	; 0xf0
 8002130:	0549      	lsls	r1, r1, #21
 8002132:	430a      	orrs	r2, r1
 8002134:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<2);
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <i2c1GpioInit+0xb8>)
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <i2c1GpioInit+0xb8>)
 800213c:	21f0      	movs	r1, #240	; 0xf0
 800213e:	0589      	lsls	r1, r1, #22
 8002140:	430a      	orrs	r2, r1
 8002142:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<3);
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <i2c1GpioInit+0xb8>)
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <i2c1GpioInit+0xb8>)
 800214a:	4915      	ldr	r1, [pc, #84]	; (80021a0 <i2c1GpioInit+0xc8>)
 800214c:	400a      	ands	r2, r1
 800214e:	621a      	str	r2, [r3, #32]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7);
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <i2c1GpioInit+0xb8>)
 8002152:	6a1a      	ldr	r2, [r3, #32]
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <i2c1GpioInit+0xb8>)
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	0912      	lsrs	r2, r2, #4
 800215a:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<1);
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <i2c1GpioInit+0xb8>)
 800215e:	6a1a      	ldr	r2, [r3, #32]
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <i2c1GpioInit+0xb8>)
 8002162:	21e0      	movs	r1, #224	; 0xe0
 8002164:	0609      	lsls	r1, r1, #24
 8002166:	430a      	orrs	r2, r1
 8002168:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<2);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <i2c1GpioInit+0xb8>)
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <i2c1GpioInit+0xb8>)
 8002170:	21c0      	movs	r1, #192	; 0xc0
 8002172:	0609      	lsls	r1, r1, #24
 8002174:	430a      	orrs	r2, r1
 8002176:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<3);
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <i2c1GpioInit+0xb8>)
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <i2c1GpioInit+0xb8>)
 800217e:	0052      	lsls	r2, r2, #1
 8002180:	0852      	lsrs	r2, r2, #1
 8002182:	621a      	str	r2, [r3, #32]
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40021000 	.word	0x40021000
 8002190:	50000400 	.word	0x50000400
 8002194:	ffffefff 	.word	0xffffefff
 8002198:	ffffbfff 	.word	0xffffbfff
 800219c:	f0ffffff 	.word	0xf0ffffff
 80021a0:	87ffffff 	.word	0x87ffffff

080021a4 <i2c1MasterFrameRx>:
	SET_BIT(I2C2->ICR, I2C_ICR_STOPCF);

	return data;
}

void i2c1MasterFrameRx(char saddr, uint8_t *rcv, uint8_t N) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6039      	str	r1, [r7, #0]
 80021ac:	0011      	movs	r1, r2
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	1c02      	adds	r2, r0, #0
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	1dbb      	adds	r3, r7, #6
 80021b6:	1c0a      	adds	r2, r1, #0
 80021b8:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 80021ba:	f001 febd 	bl	8003f38 <HAL_GetTick>
 80021be:	0003      	movs	r3, r0
 80021c0:	613b      	str	r3, [r7, #16]
	bool timeout = false;
 80021c2:	230f      	movs	r3, #15
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, READ, N);
 80021ca:	1dbb      	adds	r3, r7, #6
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 f841 	bl	800225c <i2c1MasterStartTransfer>

	for (int i = 0; i < N; i++) {
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e027      	b.n	8002230 <i2c1MasterFrameRx+0x8c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 80021e0:	f001 feaa 	bl	8003f38 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b14      	cmp	r3, #20
 80021ec:	d906      	bls.n	80021fc <i2c1MasterFrameRx+0x58>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <i2c1MasterFrameRx+0xb4>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <i2c1MasterFrameRx+0xb4>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	438a      	bics	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
				return;
 80021fa:	e02a      	b.n	8002252 <i2c1MasterFrameRx+0xae>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <i2c1MasterFrameRx+0xb4>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2204      	movs	r2, #4
 8002202:	4013      	ands	r3, r2
 8002204:	425a      	negs	r2, r3
 8002206:	4153      	adcs	r3, r2
 8002208:	b2db      	uxtb	r3, r3
 800220a:	0019      	movs	r1, r3
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2201      	movs	r2, #1
 8002214:	4053      	eors	r3, r2
 8002216:	b2db      	uxtb	r3, r3
 8002218:	400b      	ands	r3, r1
 800221a:	d1e1      	bne.n	80021e0 <i2c1MasterFrameRx+0x3c>
			}
		}
		rcv[i] = READ_REG(I2C1->RXDR);
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <i2c1MasterFrameRx+0xb4>)
 800221e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	b2ca      	uxtb	r2, r1
 8002228:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	429a      	cmp	r2, r3
 8002238:	dbe0      	blt.n	80021fc <i2c1MasterFrameRx+0x58>

	}
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <i2c1MasterFrameRx+0xb4>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2220      	movs	r2, #32
 8002242:	4013      	ands	r3, r2
 8002244:	d0fa      	beq.n	800223c <i2c1MasterFrameRx+0x98>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <i2c1MasterFrameRx+0xb4>)
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <i2c1MasterFrameRx+0xb4>)
 800224c:	2120      	movs	r1, #32
 800224e:	430a      	orrs	r2, r1
 8002250:	61da      	str	r2, [r3, #28]
}
 8002252:	46bd      	mov	sp, r7
 8002254:	b006      	add	sp, #24
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40005400 	.word	0x40005400

0800225c <i2c1MasterStartTransfer>:

void i2c1MasterStartTransfer(char saddr, uint8_t transfer_request, uint8_t N) {
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	0004      	movs	r4, r0
 8002264:	0008      	movs	r0, r1
 8002266:	0011      	movs	r1, r2
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	1c22      	adds	r2, r4, #0
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	1dbb      	adds	r3, r7, #6
 8002270:	1c02      	adds	r2, r0, #0
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	1d7b      	adds	r3, r7, #5
 8002276:	1c0a      	adds	r2, r1, #0
 8002278:	701a      	strb	r2, [r3, #0]
	/* peripherial disable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
	/* set slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0a9b      	lsrs	r3, r3, #10
 800228c:	0299      	lsls	r1, r3, #10
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
	/* read N byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <i2c1MasterStartTransfer+0xa8>)
 800229e:	401a      	ands	r2, r3
 80022a0:	1d7b      	adds	r3, r7, #5
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0019      	movs	r1, r3
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0489      	lsls	r1, r1, #18
 80022b8:	430a      	orrs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */
	if (transfer_request == 1) {
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d107      	bne.n	80022d4 <i2c1MasterStartTransfer+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	00c9      	lsls	r1, r1, #3
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	e009      	b.n	80022e8 <i2c1MasterStartTransfer+0x8c>
	} else if (transfer_request == 0) {
 80022d4:	1dbb      	adds	r3, r7, #6
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <i2c1MasterStartTransfer+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022e2:	4909      	ldr	r1, [pc, #36]	; (8002308 <i2c1MasterStartTransfer+0xac>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <i2c1MasterStartTransfer+0xa4>)
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	0189      	lsls	r1, r1, #6
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]

}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b003      	add	sp, #12
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	40005400 	.word	0x40005400
 8002304:	ff00ffff 	.word	0xff00ffff
 8002308:	fffffbff 	.word	0xfffffbff

0800230c <i2c1MasterByteTx>:
		}
	}

}

void i2c1MasterByteTx(uint8_t saddr, uint8_t *data, uint8_t N) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6039      	str	r1, [r7, #0]
 8002314:	0011      	movs	r1, r2
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	1c02      	adds	r2, r0, #0
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	1dbb      	adds	r3, r7, #6
 800231e:	1c0a      	adds	r2, r1, #0
 8002320:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, WRITE, N);
 8002322:	1dbb      	adds	r3, r7, #6
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2100      	movs	r1, #0
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff ff95 	bl	800225c <i2c1MasterStartTransfer>
	uint32_t counter = HAL_GetTick();
 8002332:	f001 fe01 	bl	8003f38 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	e022      	b.n	8002386 <i2c1MasterByteTx+0x7a>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {

			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 8002340:	f001 fdfa 	bl	8003f38 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b14      	cmp	r3, #20
 800234c:	d906      	bls.n	800235c <i2c1MasterByteTx+0x50>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <i2c1MasterByteTx+0xa4>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <i2c1MasterByteTx+0xa4>)
 8002354:	2101      	movs	r1, #1
 8002356:	438a      	bics	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
				return;
 800235a:	e025      	b.n	80023a8 <i2c1MasterByteTx+0x9c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <i2c1MasterByteTx+0xa4>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d0ec      	beq.n	8002340 <i2c1MasterByteTx+0x34>
			}
		}
		MODIFY_REG(I2C1->TXDR, I2C_TXDR_TXDATA, data[i]);
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <i2c1MasterByteTx+0xa4>)
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	22ff      	movs	r2, #255	; 0xff
 800236c:	4393      	bics	r3, r2
 800236e:	001a      	movs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	18cb      	adds	r3, r1, r3
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	0019      	movs	r1, r3
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <i2c1MasterByteTx+0xa4>)
 800237c:	430a      	orrs	r2, r1
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	1dbb      	adds	r3, r7, #6
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbe5      	blt.n	800235c <i2c1MasterByteTx+0x50>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <i2c1MasterByteTx+0xa4>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2220      	movs	r2, #32
 8002398:	4013      	ands	r3, r2
 800239a:	d0fa      	beq.n	8002392 <i2c1MasterByteTx+0x86>
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <i2c1MasterByteTx+0xa4>)
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <i2c1MasterByteTx+0xa4>)
 80023a2:	2120      	movs	r1, #32
 80023a4:	430a      	orrs	r2, r1
 80023a6:	619a      	str	r2, [r3, #24]

}
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b004      	add	sp, #16
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40005400 	.word	0x40005400

080023b4 <led_init>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void led_init(LED_t *led) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A) as output SUMA CHANGING*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 80023bc:	23a0      	movs	r3, #160	; 0xa0
 80023be:	05db      	lsls	r3, r3, #23
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	23a0      	movs	r3, #160	; 0xa0
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	01c9      	lsls	r1, r1, #7
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 80023ce:	23a0      	movs	r3, #160	; 0xa0
 80023d0:	05db      	lsls	r3, r3, #23
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	23a0      	movs	r3, #160	; 0xa0
 80023d6:	05db      	lsls	r3, r3, #23
 80023d8:	4911      	ldr	r1, [pc, #68]	; (8002420 <led_init+0x6c>)
 80023da:	400a      	ands	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)  as output SUMA END*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <led_init+0x70>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <led_init+0x70>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <led_init+0x70>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <led_init+0x70>)
 80023f0:	2102      	movs	r1, #2
 80023f2:	438a      	bics	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR) as output SYSTEM R */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <led_init+0x70>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <led_init+0x70>)
 80023fc:	2104      	movs	r1, #4
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <led_init+0x70>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <led_init+0x70>)
 8002408:	2108      	movs	r1, #8
 800240a:	438a      	bics	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
	led_reset(led);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 f839 	bl	8002488 <led_reset>
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	ffff7fff 	.word	0xffff7fff
 8002424:	50000400 	.word	0x50000400

08002428 <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->ka_counter > LED_KA_STATE_TIMEOUT)
 8002430:	f001 fd82 	bl	8003f38 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	23fa      	movs	r3, #250	; 0xfa
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d905      	bls.n	8002450 <led_enable_kalive+0x28>
		l->ka_counter = HAL_GetTick();
 8002444:	f001 fd78 	bl	8003f38 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	601a      	str	r2, [r3, #0]
			sys_rp_led_off();
		else
			sys_rp_led_on();
	}

}
 800244e:	e014      	b.n	800247a <led_enable_kalive+0x52>
		if (HAL_GetTick() - l->ka_counter > LED_KA_ON_TIMEOUT)
 8002450:	f001 fd72 	bl	8003f38 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b32      	cmp	r3, #50	; 0x32
 800245e:	d906      	bls.n	800246e <led_enable_kalive+0x46>
			sys_rp_led_off();
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <led_enable_kalive+0x5c>)
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <led_enable_kalive+0x5c>)
 8002466:	2102      	movs	r1, #2
 8002468:	438a      	bics	r2, r1
 800246a:	615a      	str	r2, [r3, #20]
}
 800246c:	e005      	b.n	800247a <led_enable_kalive+0x52>
			sys_rp_led_on();
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <led_enable_kalive+0x5c>)
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <led_enable_kalive+0x5c>)
 8002474:	2102      	movs	r1, #2
 8002476:	430a      	orrs	r2, r1
 8002478:	615a      	str	r2, [r3, #20]
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	50000400 	.word	0x50000400

08002488 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	l->ch_counter = 0;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
	l->cl_counter = 0;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
	l->cn_counter = 0;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
	l->ka_counter = HAL_GetTick();
 80024a2:	f001 fd49 	bl	8003f38 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	601a      	str	r2, [r3, #0]
	l->sysrp_counter = 0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
	l->th_counter = 0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
	l->tok_counter = 0;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b002      	add	sp, #8
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <m24c64ReadNBytes>:

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
	i2c1MasterFrameRx(CHIP_ADDR, data, 32);
}

void m24c64ReadNBytes(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 80024c6:	b590      	push	{r4, r7, lr}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	0004      	movs	r4, r0
 80024ce:	6039      	str	r1, [r7, #0]
 80024d0:	0010      	movs	r0, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	1dfb      	adds	r3, r7, #7
 80024d6:	1c22      	adds	r2, r4, #0
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	1c02      	adds	r2, r0, #0
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	1d7b      	adds	r3, r7, #5
 80024e2:	1c0a      	adds	r2, r1, #0
 80024e4:	701a      	strb	r2, [r3, #0]
	uint8_t buff[2] = { 0 };
 80024e6:	210c      	movs	r1, #12
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	2200      	movs	r2, #0
 80024ec:	801a      	strh	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b21a      	sxth	r2, r3
 8002500:	200e      	movs	r0, #14
 8002502:	183b      	adds	r3, r7, r0
 8002504:	801a      	strh	r2, [r3, #0]

	buff[0] = MemAddress >> 8;
 8002506:	183b      	adds	r3, r7, r0
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b29b      	uxth	r3, r3
 800250e:	b2da      	uxtb	r2, r3
 8002510:	187b      	adds	r3, r7, r1
 8002512:	701a      	strb	r2, [r3, #0]
	buff[1] = MemAddress & 0xff;
 8002514:	183b      	adds	r3, r7, r0
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	187b      	adds	r3, r7, r1
 800251c:	705a      	strb	r2, [r3, #1]

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2202      	movs	r2, #2
 8002522:	0019      	movs	r1, r3
 8002524:	20a0      	movs	r0, #160	; 0xa0
 8002526:	f7ff fef1 	bl	800230c <i2c1MasterByteTx>
	HAL_Delay(5);
 800252a:	2005      	movs	r0, #5
 800252c:	f001 fd0e 	bl	8003f4c <HAL_Delay>
	i2c1MasterFrameRx(CHIP_ADDR, data, size);
 8002530:	1d7b      	adds	r3, r7, #5
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	0019      	movs	r1, r3
 8002538:	20a0      	movs	r0, #160	; 0xa0
 800253a:	f7ff fe33 	bl	80021a4 <i2c1MasterFrameRx>
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b005      	add	sp, #20
 8002544:	bd90      	pop	{r4, r7, pc}

08002546 <getFreqOutFromEeprom>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

MAX2871_t *ppl_ptr;

void getFreqOutFromEeprom(uint8_t buffer[10], MAX2871_t *ppl) {
 8002546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002548:	b087      	sub	sp, #28
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
	m24c64ReadNBytes(BASE_ADDR, buffer, FREQ_OUT_ADDR, FREQ_OUT_SIZE);
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	2308      	movs	r3, #8
 8002554:	2203      	movs	r2, #3
 8002556:	2003      	movs	r0, #3
 8002558:	f7ff ffb5 	bl	80024c6 <m24c64ReadNBytes>
	for (int i = FREQ_OUT_SIZE - 1; i >= 0; i--)
 800255c:	2307      	movs	r3, #7
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e01b      	b.n	800259a <getFreqOutFromEeprom+0x54>
		ppl->FreqOut |= (buffer[i] << (i * 8));
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	6979      	ldr	r1, [r7, #20]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	1841      	adds	r1, r0, r1
 800256e:	7809      	ldrb	r1, [r1, #0]
 8002570:	0008      	movs	r0, r1
 8002572:	6979      	ldr	r1, [r7, #20]
 8002574:	00c9      	lsls	r1, r1, #3
 8002576:	4088      	lsls	r0, r1
 8002578:	0001      	movs	r1, r0
 800257a:	6039      	str	r1, [r7, #0]
 800257c:	17c9      	asrs	r1, r1, #31
 800257e:	6079      	str	r1, [r7, #4]
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	0006      	movs	r6, r0
 8002586:	4316      	orrs	r6, r2
 8002588:	0034      	movs	r4, r6
 800258a:	4319      	orrs	r1, r3
 800258c:	000d      	movs	r5, r1
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	601c      	str	r4, [r3, #0]
 8002592:	605d      	str	r5, [r3, #4]
	for (int i = FREQ_OUT_SIZE - 1; i >= 0; i--)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3b01      	subs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	dae0      	bge.n	8002562 <getFreqOutFromEeprom+0x1c>
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b007      	add	sp, #28
 80025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025ac <getFreqOut>:

unsigned long getFreqOut(unsigned long FreqBase) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	 Valor_9 = HAL_GPIO_ReadPin(SW_9_GPIO_Port, SW_9_Pin) ? 0 : FREQ_STEP*512;

	 suma_read = (Valor_0) + (Valor_1) + (Valor_2) + (Valor_3) + (Valor_4)
	 + (Valor_5) + (Valor_6) + (Valor_7) + (Valor_8) + (Valor_9);
	 */
	suma_read = FreqBase;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) ? 0 : FREQ_STEP;
 80025b8:	4b4f      	ldr	r3, [pc, #316]	; (80026f8 <getFreqOut+0x14c>)
 80025ba:	2104      	movs	r1, #4
 80025bc:	0018      	movs	r0, r3
 80025be:	f001 ff01 	bl	80043c4 <HAL_GPIO_ReadPin>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d001      	beq.n	80025ca <getFreqOut+0x1e>
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <getFreqOut+0x20>
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <getFreqOut+0x150>)
 80025cc:	001a      	movs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	189b      	adds	r3, r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) ? 0 : FREQ_STEP * 2;
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	005a      	lsls	r2, r3, #1
 80025d8:	23a0      	movs	r3, #160	; 0xa0
 80025da:	05db      	lsls	r3, r3, #23
 80025dc:	0011      	movs	r1, r2
 80025de:	0018      	movs	r0, r3
 80025e0:	f001 fef0 	bl	80043c4 <HAL_GPIO_ReadPin>
 80025e4:	1e03      	subs	r3, r0, #0
 80025e6:	d001      	beq.n	80025ec <getFreqOut+0x40>
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <getFreqOut+0x42>
 80025ec:	4b44      	ldr	r3, [pc, #272]	; (8002700 <getFreqOut+0x154>)
 80025ee:	001a      	movs	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	189b      	adds	r3, r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) ? 0 : FREQ_STEP * 4;
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <getFreqOut+0x158>)
 80025f8:	2140      	movs	r1, #64	; 0x40
 80025fa:	0018      	movs	r0, r3
 80025fc:	f001 fee2 	bl	80043c4 <HAL_GPIO_ReadPin>
 8002600:	1e03      	subs	r3, r0, #0
 8002602:	d001      	beq.n	8002608 <getFreqOut+0x5c>
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <getFreqOut+0x5e>
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <getFreqOut+0x15c>)
 800260a:	001a      	movs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	189b      	adds	r3, r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) ? 0 : FREQ_STEP * 8;
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	011a      	lsls	r2, r3, #4
 8002616:	23a0      	movs	r3, #160	; 0xa0
 8002618:	05db      	lsls	r3, r3, #23
 800261a:	0011      	movs	r1, r2
 800261c:	0018      	movs	r0, r3
 800261e:	f001 fed1 	bl	80043c4 <HAL_GPIO_ReadPin>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d001      	beq.n	800262a <getFreqOut+0x7e>
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <getFreqOut+0x80>
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <getFreqOut+0x160>)
 800262c:	001a      	movs	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	189b      	adds	r3, r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_4_GPIO_Port, SW_4_Pin) ? 0 : FREQ_STEP * 16;
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	23a0      	movs	r3, #160	; 0xa0
 800263a:	05db      	lsls	r3, r3, #23
 800263c:	0011      	movs	r1, r2
 800263e:	0018      	movs	r0, r3
 8002640:	f001 fec0 	bl	80043c4 <HAL_GPIO_ReadPin>
 8002644:	1e03      	subs	r3, r0, #0
 8002646:	d001      	beq.n	800264c <getFreqOut+0xa0>
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <getFreqOut+0xa2>
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <getFreqOut+0x164>)
 800264e:	001a      	movs	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	189b      	adds	r3, r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin) ? 0 : FREQ_STEP * 32;
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	021a      	lsls	r2, r3, #8
 800265a:	23a0      	movs	r3, #160	; 0xa0
 800265c:	05db      	lsls	r3, r3, #23
 800265e:	0011      	movs	r1, r2
 8002660:	0018      	movs	r0, r3
 8002662:	f001 feaf 	bl	80043c4 <HAL_GPIO_ReadPin>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d001      	beq.n	800266e <getFreqOut+0xc2>
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <getFreqOut+0xc4>
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <getFreqOut+0x168>)
 8002670:	001a      	movs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	189b      	adds	r3, r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_6_GPIO_Port, SW_6_Pin) ? 0 : FREQ_STEP * 64;
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <getFreqOut+0x14c>)
 800267a:	2108      	movs	r1, #8
 800267c:	0018      	movs	r0, r3
 800267e:	f001 fea1 	bl	80043c4 <HAL_GPIO_ReadPin>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d001      	beq.n	800268a <getFreqOut+0xde>
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <getFreqOut+0xe0>
 800268a:	4b23      	ldr	r3, [pc, #140]	; (8002718 <getFreqOut+0x16c>)
 800268c:	001a      	movs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	189b      	adds	r3, r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_7_GPIO_Port, SW_7_Pin) ? 0 : FREQ_STEP * 128;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <getFreqOut+0x14c>)
 8002696:	2110      	movs	r1, #16
 8002698:	0018      	movs	r0, r3
 800269a:	f001 fe93 	bl	80043c4 <HAL_GPIO_ReadPin>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d001      	beq.n	80026a6 <getFreqOut+0xfa>
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <getFreqOut+0xfc>
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <getFreqOut+0x170>)
 80026a8:	001a      	movs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	189b      	adds	r3, r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_8_GPIO_Port, SW_8_Pin) ? 0 : FREQ_STEP * 256;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <getFreqOut+0x14c>)
 80026b2:	2120      	movs	r1, #32
 80026b4:	0018      	movs	r0, r3
 80026b6:	f001 fe85 	bl	80043c4 <HAL_GPIO_ReadPin>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <getFreqOut+0x116>
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <getFreqOut+0x118>
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <getFreqOut+0x174>)
 80026c4:	001a      	movs	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	189b      	adds	r3, r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_9_GPIO_Port, SW_9_Pin) ? 0 : FREQ_STEP * 512;
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <getFreqOut+0x14c>)
 80026d2:	0019      	movs	r1, r3
 80026d4:	0010      	movs	r0, r2
 80026d6:	f001 fe75 	bl	80043c4 <HAL_GPIO_ReadPin>
 80026da:	1e03      	subs	r3, r0, #0
 80026dc:	d001      	beq.n	80026e2 <getFreqOut+0x136>
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <getFreqOut+0x138>
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <getFreqOut+0x178>)
 80026e4:	001a      	movs	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
	return suma_read;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b004      	add	sp, #16
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	50000400 	.word	0x50000400
 80026fc:	000030d4 	.word	0x000030d4
 8002700:	000061a8 	.word	0x000061a8
 8002704:	50000800 	.word	0x50000800
 8002708:	0000c350 	.word	0x0000c350
 800270c:	000186a0 	.word	0x000186a0
 8002710:	00030d40 	.word	0x00030d40
 8002714:	00061a80 	.word	0x00061a80
 8002718:	000c3500 	.word	0x000c3500
 800271c:	00186a00 	.word	0x00186a00
 8002720:	0030d400 	.word	0x0030d400
 8002724:	0061a800 	.word	0x0061a800

08002728 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272a:	b0cb      	sub	sp, #300	; 0x12c
 800272c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	MAX2871_t ppl;
	ppl_ptr = &ppl;
 800272e:	4b67      	ldr	r3, [pc, #412]	; (80028cc <main+0x1a4>)
 8002730:	2628      	movs	r6, #40	; 0x28
 8002732:	19ba      	adds	r2, r7, r6
 8002734:	601a      	str	r2, [r3, #0]
	LED_t led;
	uint8_t buffer[10] = { 0 };
 8002736:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <main+0x1a8>)
 8002738:	2294      	movs	r2, #148	; 0x94
 800273a:	0052      	lsls	r2, r2, #1
 800273c:	189b      	adds	r3, r3, r2
 800273e:	19db      	adds	r3, r3, r7
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	3304      	adds	r3, #4
 8002746:	2206      	movs	r2, #6
 8002748:	2100      	movs	r1, #0
 800274a:	0018      	movs	r0, r3
 800274c:	f002 fef8 	bl	8005540 <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002750:	f001 fb76 	bl	8003e40 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002754:	f000 f8c6 	bl	80028e4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002758:	f000 f94c 	bl	80029f4 <MX_GPIO_Init>
	//MX_I2C1_Init();
	MX_SPI2_Init();
 800275c:	f000 f90a 	bl	8002974 <MX_SPI2_Init>
	//MX_USART1_UART_Init();
	//MX_CRC_Init();
	/* USER CODE BEGIN 2 */

	led_init(&led);
 8002760:	230c      	movs	r3, #12
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff fe25 	bl	80023b4 <led_init>
	max2871Init(&ppl);
 800276a:	19bb      	adds	r3, r7, r6
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fbbf 	bl	8002ef0 <max2871Init>
	max2871RegisterInit(&hspi2, &ppl);
 8002772:	19ba      	adds	r2, r7, r6
 8002774:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <main+0x1ac>)
 8002776:	0011      	movs	r1, r2
 8002778:	0018      	movs	r0, r3
 800277a:	f001 f9ab 	bl	8003ad4 <max2871RegisterInit>
	i2c1MasterInit();
 800277e:	f7ff fc6b 	bl	8002058 <i2c1MasterInit>
	getFreqOutFromEeprom(buffer, &ppl);
 8002782:	19ba      	adds	r2, r7, r6
 8002784:	003b      	movs	r3, r7
 8002786:	0011      	movs	r1, r2
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff fedc 	bl	8002546 <getFreqOutFromEeprom>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	unsigned long freqOutCurrent = -1;
 800278e:	2301      	movs	r3, #1
 8002790:	425b      	negs	r3, r3
 8002792:	2292      	movs	r2, #146	; 0x92
 8002794:	0052      	lsls	r2, r2, #1
 8002796:	18ba      	adds	r2, r7, r2
 8002798:	6013      	str	r3, [r2, #0]
	unsigned long freqOutRead;
	unsigned long freqOutNew = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	2290      	movs	r2, #144	; 0x90
 800279e:	0052      	lsls	r2, r2, #1
 80027a0:	18ba      	adds	r2, r7, r2
 80027a2:	6013      	str	r3, [r2, #0]
	unsigned long lastReadTick = HAL_GetTick();
 80027a4:	f001 fbc8 	bl	8003f38 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	228e      	movs	r2, #142	; 0x8e
 80027ac:	0052      	lsls	r2, r2, #1
 80027ae:	18ba      	adds	r2, r7, r2
 80027b0:	6013      	str	r3, [r2, #0]
	unsigned long FreqBase = 149500000;
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <main+0x1b0>)
 80027b4:	228c      	movs	r2, #140	; 0x8c
 80027b6:	0052      	lsls	r2, r2, #1
 80027b8:	18ba      	adds	r2, r7, r2
 80027ba:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 80027bc:	23a0      	movs	r3, #160	; 0xa0
 80027be:	05db      	lsls	r3, r3, #23
 80027c0:	2201      	movs	r2, #1
 80027c2:	2120      	movs	r1, #32
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 fe1a 	bl	80043fe <HAL_GPIO_WritePin>

	while (1) {

		led_enable_kalive(&led);
 80027ca:	230c      	movs	r3, #12
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7ff fe2a 	bl	8002428 <led_enable_kalive>
		freqOutRead = getFreqOut(FreqBase);
 80027d4:	238c      	movs	r3, #140	; 0x8c
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff fee5 	bl	80025ac <getFreqOut>
 80027e2:	0003      	movs	r3, r0
 80027e4:	268a      	movs	r6, #138	; 0x8a
 80027e6:	0076      	lsls	r6, r6, #1
 80027e8:	19ba      	adds	r2, r7, r6
 80027ea:	6013      	str	r3, [r2, #0]

		if (freqOutRead != freqOutNew) {
 80027ec:	19bb      	adds	r3, r7, r6
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2390      	movs	r3, #144	; 0x90
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	18f9      	adds	r1, r7, r3
 80027f6:	680b      	ldr	r3, [r1, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d021      	beq.n	8002840 <main+0x118>
			Change_end_off();
 80027fc:	23a0      	movs	r3, #160	; 0xa0
 80027fe:	05db      	lsls	r3, r3, #23
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	23a0      	movs	r3, #160	; 0xa0
 8002804:	05db      	lsls	r3, r3, #23
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	438a      	bics	r2, r1
 800280a:	615a      	str	r2, [r3, #20]
			lastReadTick = HAL_GetTick();
 800280c:	f001 fb94 	bl	8003f38 <HAL_GetTick>
 8002810:	0003      	movs	r3, r0
 8002812:	218e      	movs	r1, #142	; 0x8e
 8002814:	0049      	lsls	r1, r1, #1
 8002816:	1879      	adds	r1, r7, r1
 8002818:	600b      	str	r3, [r1, #0]
			HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_RESET);
 800281a:	23a0      	movs	r3, #160	; 0xa0
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	2200      	movs	r2, #0
 8002820:	2120      	movs	r1, #32
 8002822:	0018      	movs	r0, r3
 8002824:	f001 fdeb 	bl	80043fe <HAL_GPIO_WritePin>
			Freq_changing_on();
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <main+0x1b4>)
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <main+0x1b4>)
 800282e:	2101      	movs	r1, #1
 8002830:	430a      	orrs	r2, r1
 8002832:	615a      	str	r2, [r3, #20]
			freqOutNew = freqOutRead;
 8002834:	19b9      	adds	r1, r7, r6
 8002836:	680b      	ldr	r3, [r1, #0]
 8002838:	2290      	movs	r2, #144	; 0x90
 800283a:	0052      	lsls	r2, r2, #1
 800283c:	18ba      	adds	r2, r7, r2
 800283e:	6013      	str	r3, [r2, #0]
		}

		if ((HAL_GetTick() - lastReadTick) > 100) {
 8002840:	f001 fb7a 	bl	8003f38 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	238e      	movs	r3, #142	; 0x8e
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b64      	cmp	r3, #100	; 0x64
 8002852:	d9ba      	bls.n	80027ca <main+0xa2>
			if (freqOutNew != freqOutCurrent) {
 8002854:	2690      	movs	r6, #144	; 0x90
 8002856:	0076      	lsls	r6, r6, #1
 8002858:	19bb      	adds	r3, r7, r6
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2392      	movs	r3, #146	; 0x92
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	18f9      	adds	r1, r7, r3
 8002862:	680b      	ldr	r3, [r1, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d0b0      	beq.n	80027ca <main+0xa2>
				ppl.FreqOut = freqOutRead;
 8002868:	218a      	movs	r1, #138	; 0x8a
 800286a:	0049      	lsls	r1, r1, #1
 800286c:	1879      	adds	r1, r7, r1
 800286e:	680b      	ldr	r3, [r1, #0]
 8002870:	001c      	movs	r4, r3
 8002872:	2300      	movs	r3, #0
 8002874:	001d      	movs	r5, r3
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <main+0x1b8>)
 8002878:	2194      	movs	r1, #148	; 0x94
 800287a:	0049      	lsls	r1, r1, #1
 800287c:	1859      	adds	r1, r3, r1
 800287e:	19cb      	adds	r3, r1, r7
 8002880:	601c      	str	r4, [r3, #0]
 8002882:	605d      	str	r5, [r3, #4]
				max2871Program(&hspi2, &ppl);
 8002884:	2128      	movs	r1, #40	; 0x28
 8002886:	187a      	adds	r2, r7, r1
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <main+0x1ac>)
 800288a:	0011      	movs	r1, r2
 800288c:	0018      	movs	r0, r3
 800288e:	f001 f999 	bl	8003bc4 <max2871Program>
				HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 8002892:	23a0      	movs	r3, #160	; 0xa0
 8002894:	05db      	lsls	r3, r3, #23
 8002896:	2201      	movs	r2, #1
 8002898:	2120      	movs	r1, #32
 800289a:	0018      	movs	r0, r3
 800289c:	f001 fdaf 	bl	80043fe <HAL_GPIO_WritePin>
				Freq_changing_off();
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <main+0x1b4>)
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <main+0x1b4>)
 80028a6:	2101      	movs	r1, #1
 80028a8:	438a      	bics	r2, r1
 80028aa:	615a      	str	r2, [r3, #20]
				Change_end_on();
 80028ac:	23a0      	movs	r3, #160	; 0xa0
 80028ae:	05db      	lsls	r3, r3, #23
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	23a0      	movs	r3, #160	; 0xa0
 80028b4:	05db      	lsls	r3, r3, #23
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	430a      	orrs	r2, r1
 80028ba:	615a      	str	r2, [r3, #20]
				freqOutCurrent = freqOutNew;
 80028bc:	19b9      	adds	r1, r7, r6
 80028be:	680b      	ldr	r3, [r1, #0]
 80028c0:	2292      	movs	r2, #146	; 0x92
 80028c2:	0052      	lsls	r2, r2, #1
 80028c4:	18ba      	adds	r2, r7, r2
 80028c6:	6013      	str	r3, [r2, #0]
		led_enable_kalive(&led);
 80028c8:	e77f      	b.n	80027ca <main+0xa2>
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	2000008c 	.word	0x2000008c
 80028d0:	fffffed8 	.word	0xfffffed8
 80028d4:	20000028 	.word	0x20000028
 80028d8:	08e93060 	.word	0x08e93060
 80028dc:	50000400 	.word	0x50000400
 80028e0:	ffffff00 	.word	0xffffff00

080028e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b093      	sub	sp, #76	; 0x4c
 80028e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80028ea:	2414      	movs	r4, #20
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	0018      	movs	r0, r3
 80028f0:	2334      	movs	r3, #52	; 0x34
 80028f2:	001a      	movs	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f002 fe23 	bl	8005540 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	0018      	movs	r0, r3
 80028fe:	2310      	movs	r3, #16
 8002900:	001a      	movs	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f002 fe1c 	bl	8005540 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	0018      	movs	r0, r3
 800290e:	f001 fd93 	bl	8004438 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002912:	193b      	adds	r3, r7, r4
 8002914:	2202      	movs	r2, #2
 8002916:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002918:	193b      	adds	r3, r7, r4
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0052      	lsls	r2, r2, #1
 800291e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002920:	193b      	adds	r3, r7, r4
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002926:	193b      	adds	r3, r7, r4
 8002928:	2240      	movs	r2, #64	; 0x40
 800292a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800292c:	193b      	adds	r3, r7, r4
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002932:	193b      	adds	r3, r7, r4
 8002934:	0018      	movs	r0, r3
 8002936:	f001 fdbf 	bl	80044b8 <HAL_RCC_OscConfig>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <SystemClock_Config+0x5e>
		Error_Handler();
 800293e:	f000 f8fb 	bl	8002b38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	2100      	movs	r1, #0
 800295e:	0018      	movs	r0, r3
 8002960:	f002 f8ba 	bl	8004ad8 <HAL_RCC_ClockConfig>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d001      	beq.n	800296c <SystemClock_Config+0x88>
		Error_Handler();
 8002968:	f000 f8e6 	bl	8002b38 <Error_Handler>
	}
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b013      	add	sp, #76	; 0x4c
 8002972:	bd90      	pop	{r4, r7, pc}

08002974 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <MX_SPI2_Init+0x78>)
 800297a:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <MX_SPI2_Init+0x7c>)
 800297c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <MX_SPI2_Init+0x78>)
 8002980:	2282      	movs	r2, #130	; 0x82
 8002982:	0052      	lsls	r2, r2, #1
 8002984:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <MX_SPI2_Init+0x78>)
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	0212      	lsls	r2, r2, #8
 800298c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <MX_SPI2_Init+0x78>)
 8002990:	22e0      	movs	r2, #224	; 0xe0
 8002992:	00d2      	lsls	r2, r2, #3
 8002994:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <MX_SPI2_Init+0x78>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <MX_SPI2_Init+0x78>)
 800299e:	2200      	movs	r2, #0
 80029a0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <MX_SPI2_Init+0x78>)
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <MX_SPI2_Init+0x78>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_SPI2_Init+0x78>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <MX_SPI2_Init+0x78>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_SPI2_Init+0x78>)
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <MX_SPI2_Init+0x78>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_SPI2_Init+0x78>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <MX_SPI2_Init+0x78>)
 80029d0:	2208      	movs	r2, #8
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <MX_SPI2_Init+0x78>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f002 fa08 	bl	8004dec <HAL_SPI_Init>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <MX_SPI2_Init+0x70>
		Error_Handler();
 80029e0:	f000 f8aa 	bl	8002b38 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	20000028 	.word	0x20000028
 80029f0:	40003800 	.word	0x40003800

080029f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80029fa:	240c      	movs	r4, #12
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	0018      	movs	r0, r3
 8002a00:	2314      	movs	r3, #20
 8002a02:	001a      	movs	r2, r3
 8002a04:	2100      	movs	r1, #0
 8002a06:	f002 fd9b 	bl	8005540 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	4b45      	ldr	r3, [pc, #276]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a10:	2102      	movs	r1, #2
 8002a12:	430a      	orrs	r2, r1
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34
 8002a16:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a28:	2104      	movs	r1, #4
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	2204      	movs	r2, #4
 8002a34:	4013      	ands	r3, r2
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	430a      	orrs	r2, r1
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <MX_GPIO_Init+0x12c>)
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin,
 8002a52:	4934      	ldr	r1, [pc, #208]	; (8002b24 <MX_GPIO_Init+0x130>)
 8002a54:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <MX_GPIO_Init+0x134>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f001 fcd0 	bl	80043fe <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002a5e:	23a0      	movs	r3, #160	; 0xa0
 8002a60:	05db      	lsls	r3, r3, #23
 8002a62:	2200      	movs	r2, #0
 8002a64:	21ae      	movs	r1, #174	; 0xae
 8002a66:	0018      	movs	r0, r3
 8002a68:	f001 fcc9 	bl	80043fe <HAL_GPIO_WritePin>
			MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin | MAX_RF_ENABLE_Pin | LED_1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RS485_CTRL_Pin LED_2_Pin LED_3_Pin */
	GPIO_InitStruct.Pin = RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin;
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <MX_GPIO_Init+0x130>)
 8002a70:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	2201      	movs	r2, #1
 8002a76:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <MX_GPIO_Init+0x134>)
 8002a88:	0019      	movs	r1, r3
 8002a8a:	0010      	movs	r0, r2
 8002a8c:	f001 fb36 	bl	80040fc <HAL_GPIO_Init>

	/*Configure GPIO pins : TEST_INPUT_1_Pin TEST_INPUT_2_Pin SW_2_Pin */
	GPIO_InitStruct.Pin = TEST_INPUT_1_Pin | TEST_INPUT_2_Pin | SW_2_Pin;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	4a26      	ldr	r2, [pc, #152]	; (8002b2c <MX_GPIO_Init+0x138>)
 8002a94:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <MX_GPIO_Init+0x13c>)
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	f001 fb27 	bl	80040fc <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LE_Pin MAX_CE_Pin MAX_MUX_Pin MAX_RF_ENABLE_Pin
	 LED_1_Pin */
	GPIO_InitStruct.Pin = MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	22ae      	movs	r2, #174	; 0xae
 8002ab2:	601a      	str	r2, [r3, #0]
			| MAX_RF_ENABLE_Pin | LED_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	193a      	adds	r2, r7, r4
 8002ac8:	23a0      	movs	r3, #160	; 0xa0
 8002aca:	05db      	lsls	r3, r3, #23
 8002acc:	0011      	movs	r1, r2
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f001 fb14 	bl	80040fc <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LOCK_DETECTOR_Pin SW_1_Pin SW_3_Pin SW_4_Pin
	 SW_5_Pin */
	GPIO_InitStruct.Pin = MAX_LOCK_DETECTOR_Pin | SW_1_Pin | SW_3_Pin | SW_4_Pin
 8002ad4:	193b      	adds	r3, r7, r4
 8002ad6:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <MX_GPIO_Init+0x140>)
 8002ad8:	601a      	str	r2, [r3, #0]
			| SW_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ada:	193b      	adds	r3, r7, r4
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	193b      	adds	r3, r7, r4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	193a      	adds	r2, r7, r4
 8002ae8:	23a0      	movs	r3, #160	; 0xa0
 8002aea:	05db      	lsls	r3, r3, #23
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	f001 fb04 	bl	80040fc <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_0_Pin SW_6_Pin SW_7_Pin SW_8_Pin
	 SW_9_Pin */
	GPIO_InitStruct.Pin = SW_0_Pin | SW_6_Pin | SW_7_Pin | SW_8_Pin | SW_9_Pin;
 8002af4:	0021      	movs	r1, r4
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	229e      	movs	r2, #158	; 0x9e
 8002afa:	0052      	lsls	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2200      	movs	r2, #0
 8002b02:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <MX_GPIO_Init+0x134>)
 8002b0e:	0019      	movs	r1, r3
 8002b10:	0010      	movs	r0, r2
 8002b12:	f001 faf3 	bl	80040fc <HAL_GPIO_Init>

}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b009      	add	sp, #36	; 0x24
 8002b1c:	bd90      	pop	{r4, r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	40021000 	.word	0x40021000
 8002b24:	00000203 	.word	0x00000203
 8002b28:	50000400 	.word	0x50000400
 8002b2c:	0000c040 	.word	0x0000c040
 8002b30:	50000800 	.word	0x50000800
 8002b34:	00009940 	.word	0x00009940

08002b38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b3c:	b672      	cpsid	i
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b40:	e7fe      	b.n	8002b40 <Error_Handler+0x8>

08002b42 <getRegister0InitValue>:
 *      Author: artur
 */

#include "max2871.h"

unsigned long getRegister0InitValue(MAX2871_t *ppl) {
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]

	ppl->register0.INT = 0x0UL;   // Enables fractional-N mode
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	60da      	str	r2, [r3, #12]
	ppl->register0.NDIV = 0x0UL;  // Sets integer part (N-divider) of the feedback divider factor
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
	ppl->register0.FRAC = 0x0UL;  // Sets fractional value
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	615a      	str	r2, [r3, #20]
	ppl->register0.ADDR0 = 0x0UL; // Register address bits
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]

	return ppl->register0.INT << 31
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	07da      	lsls	r2, r3, #31
					| ppl->register0.NDIV << 15 | ppl->register0.FRAC << 3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	03db      	lsls	r3, r3, #15
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	431a      	orrs	r2, r3
					| ppl->register0.ADDR0;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4313      	orrs	r3, r2
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b002      	add	sp, #8
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <getRegister1InitValue>:

unsigned long getRegister1InitValue(MAX2871_t *ppl) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]

	ppl->register1.CPL = 0x3UL;        // Charge pump linearity 30%
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	61da      	str	r2, [r3, #28]
	ppl->register1.CPT = 0x00UL;       // Charge pump test mode  normal mode
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	621a      	str	r2, [r3, #32]
	ppl->register1.PHASE = 0x1UL;      // Phase Value (recommended)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24
	ppl->register1.MODULUS = 0xFA0UL;  // 4000 for max resolution
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	22fa      	movs	r2, #250	; 0xfa
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
	ppl->register1.ADDR1 = 0x1UL;      // Register address bits
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c

	return ppl->register1.CPL << 29
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	075a      	lsls	r2, r3, #29
					| ppl->register1.CPT << 27 | ppl->register1.PHASE << 15
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	06db      	lsls	r3, r3, #27
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	03db      	lsls	r3, r3, #15
 8002bc2:	431a      	orrs	r2, r3
					| ppl->register1.MODULUS << 3 | ppl->register1.ADDR1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	4313      	orrs	r3, r2
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <getRegister2InitValue>:

unsigned long getRegister2InitValue(MAX2871_t *ppl) {
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]

	ppl->register2.LDS = 0x1UL;    // 1 if fPFD > 32 MHz
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
	ppl->register2.SDN = 0x0UL;    // Noise mode  Low-noise mode
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
	ppl->register2.MUX = 0x6UL;    // MUX pin configuration  Digital lock detect
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2206      	movs	r2, #6
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
	ppl->register2.DBR = 0x0UL;    // Reference doubler is disabled
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c
	ppl->register2.RDIV2 = 0x0UL;  // Reference divide-by-2 is disabled
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
	ppl->register2.RCNT = 0x0UL;   // Reference divide Value is unused
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
	ppl->register2.REG4DB = 0x0UL; // Double buffer mode disabled
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	649a      	str	r2, [r3, #72]	; 0x48
	ppl->register2.CP = 0x00UL;    // Charge pump current  0.32 mA (1.36/RSET * (1 + CP[3:0]) RSET  5k1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	64da      	str	r2, [r3, #76]	; 0x4c
	ppl->register2.LDF = 0x0UL;    // Lock detect function  Frac-N lock detect
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	651a      	str	r2, [r3, #80]	; 0x50
	ppl->register2.LDP = 0x0UL;    // Lock detect precision  10ns
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
	ppl->register2.PDP = 0x1UL;    // Phase detector polarity set positive
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
	ppl->register2.SHDN = 0x0UL;   // Sets power-down mode.
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	65da      	str	r2, [r3, #92]	; 0x5c
	ppl->register2.TRI = 0x0UL;    // Sets charge-pump three-state mode
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	661a      	str	r2, [r3, #96]	; 0x60
	ppl->register2.RST = 0x0UL;    // Sets counter reset mode
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	665a      	str	r2, [r3, #100]	; 0x64
	ppl->register2.ADDR2 = 0x2UL;  // Register address bits
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	669a      	str	r2, [r3, #104]	; 0x68

	return ppl->register2.LDS << 31
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	07da      	lsls	r2, r3, #31
					| ppl->register2.SDN << 29 | ppl->register2.MUX << 26
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	075b      	lsls	r3, r3, #29
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	431a      	orrs	r2, r3
					| ppl->register2.DBR << 25 | ppl->register2.RDIV2 << 24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	065b      	lsls	r3, r3, #25
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	431a      	orrs	r2, r3
					| ppl->register2.RCNT << 14 | ppl->register2.REG4DB << 13
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	039b      	lsls	r3, r3, #14
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6e:	035b      	lsls	r3, r3, #13
 8002c70:	431a      	orrs	r2, r3
					| ppl->register2.CP << 9 | ppl->register2.LDF << 8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	025b      	lsls	r3, r3, #9
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	431a      	orrs	r2, r3
					| ppl->register2.LDP << 7 | ppl->register2.PDP << 6
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	01db      	lsls	r3, r3, #7
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	019b      	lsls	r3, r3, #6
 8002c90:	431a      	orrs	r2, r3
					| ppl->register2.SHDN << 5 | ppl->register2.TRI << 4
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	015b      	lsls	r3, r3, #5
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	431a      	orrs	r2, r3
					| ppl->register2.RST << 3 | ppl->register2.ADDR2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cae:	4313      	orrs	r3, r2
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <getRegister3InitValue>:

unsigned long getRegister3InitValue(MAX2871_t *ppl) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

	ppl->register3.VCO_MS = 0x0UL;   // VCO manual selection: unused
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	66da      	str	r2, [r3, #108]	; 0x6c
	ppl->register3.VAS_SHDN = 0x0UL; // VAS enabled
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	671a      	str	r2, [r3, #112]	; 0x70
	ppl->register3.RETUNE = 0x1UL;   // VAS temperature compensation enabled
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	675a      	str	r2, [r3, #116]	; 0x74
	ppl->register3.CSM = 0x0UL;      // Cycle slip mode disabled
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	679a      	str	r2, [r3, #120]	; 0x78
	ppl->register3.MUTEDEL = 0x0UL;  // Mute delay mode disabled
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	67da      	str	r2, [r3, #124]	; 0x7c
	ppl->register3.CDM = 0x1UL;      // Fast-lock mode enabled
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5099      	str	r1, [r3, r2]
	ppl->register3.CDIV = 0x0UL;     // Clock divider value unused
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2284      	movs	r2, #132	; 0x84
 8002cea:	2100      	movs	r1, #0
 8002cec:	5099      	str	r1, [r3, r2]
	ppl->register3.ADDR3 = 0x3UL;    // Register address bits
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2288      	movs	r2, #136	; 0x88
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	5099      	str	r1, [r3, r2]

	return ppl->register3.VCO_MS << 26
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfa:	069a      	lsls	r2, r3, #26
					| ppl->register3.VAS_SHDN << 25 | ppl->register3.RETUNE << 24
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	065b      	lsls	r3, r3, #25
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	431a      	orrs	r2, r3
					| ppl->register3.CSM << 18 | ppl->register3.MUTEDEL << 17
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d10:	049b      	lsls	r3, r3, #18
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d18:	045b      	lsls	r3, r3, #17
 8002d1a:	431a      	orrs	r2, r3
					| ppl->register3.CDM << 15 | ppl->register3.CDIV << 3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	585b      	ldr	r3, [r3, r1]
 8002d22:	03db      	lsls	r3, r3, #15
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2184      	movs	r1, #132	; 0x84
 8002d2a:	585b      	ldr	r3, [r3, r1]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	431a      	orrs	r2, r3
					| ppl->register3.ADDR3;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2188      	movs	r1, #136	; 0x88
 8002d34:	585b      	ldr	r3, [r3, r1]
 8002d36:	4313      	orrs	r3, r2
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <getRegister4InitValue>:

unsigned long getRegister4InitValue(MAX2871_t *ppl) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

	ppl->register4.RES = 0x3UL;    // Reserved
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	228c      	movs	r2, #140	; 0x8c
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	5099      	str	r1, [r3, r2]
	ppl->register4.SDLDO = 0x0UL;  // LDO enabled
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2290      	movs	r2, #144	; 0x90
 8002d54:	2100      	movs	r1, #0
 8002d56:	5099      	str	r1, [r3, r2]
	ppl->register4.SDDIV = 0x0UL;  // VCO Divider enabled
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2294      	movs	r2, #148	; 0x94
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5099      	str	r1, [r3, r2]
	ppl->register4.SDREF = 0x0UL;  // Reference input enabled
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2298      	movs	r2, #152	; 0x98
 8002d64:	2100      	movs	r1, #0
 8002d66:	5099      	str	r1, [r3, r2]
	ppl->register4.FB = 0x1UL;     // VCO to N counter mode is NOT divided
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	229c      	movs	r2, #156	; 0x9c
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	5099      	str	r1, [r3, r2]
	ppl->register4.BS = 0x30FFUL;  // Should be chosen so that fPFD/BS  50kH or less
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	22a0      	movs	r2, #160	; 0xa0
 8002d74:	4936      	ldr	r1, [pc, #216]	; (8002e50 <getRegister4InitValue+0x110>)
 8002d76:	5099      	str	r1, [r3, r2]
	ppl->register4.SDVCO = 0x0UL;  // VCO enabled
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	22a4      	movs	r2, #164	; 0xa4
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	5099      	str	r1, [r3, r2]
	ppl->register4.MTLD = 0x0UL;   // RFOUT Mute until Lock detect mode disabled
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	22a8      	movs	r2, #168	; 0xa8
 8002d84:	2100      	movs	r1, #0
 8002d86:	5099      	str	r1, [r3, r2]
	ppl->register4.BDIV = 0x0UL;   // RFOUTB is divided (so it's the same as RFOUTA)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	22ac      	movs	r2, #172	; 0xac
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5099      	str	r1, [r3, r2]
	ppl->register4.RFB_EN = 0x0UL; // RFOUTB disabled
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	22b0      	movs	r2, #176	; 0xb0
 8002d94:	2100      	movs	r1, #0
 8002d96:	5099      	str	r1, [r3, r2]
	ppl->register4.BPWR = 0x3UL;   // RFOUTB  5 dBm
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	22b4      	movs	r2, #180	; 0xb4
 8002d9c:	2103      	movs	r1, #3
 8002d9e:	5099      	str	r1, [r3, r2]
	ppl->register4.RFA_EN = 0x1UL; // RFOUTA enabled
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	22b8      	movs	r2, #184	; 0xb8
 8002da4:	2101      	movs	r1, #1
 8002da6:	5099      	str	r1, [r3, r2]
	ppl->register4.APWR = 0x2UL;   // RFOUTA  5dBm
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	22bc      	movs	r2, #188	; 0xbc
 8002dac:	2102      	movs	r1, #2
 8002dae:	5099      	str	r1, [r3, r2]
	ppl->register4.ADDR4 = 0x4UL;  // Register address bits
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	22c0      	movs	r2, #192	; 0xc0
 8002db4:	2104      	movs	r1, #4
 8002db6:	5099      	str	r1, [r3, r2]

	return 	ppl->register4.RES << 29
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	228c      	movs	r2, #140	; 0x8c
 8002dbc:	589b      	ldr	r3, [r3, r2]
 8002dbe:	075a      	lsls	r2, r3, #29
			| ppl->register4.SDLDO << 28 | ppl->register4.SDDIV << 27
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2190      	movs	r1, #144	; 0x90
 8002dc4:	585b      	ldr	r3, [r3, r1]
 8002dc6:	071b      	lsls	r3, r3, #28
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2194      	movs	r1, #148	; 0x94
 8002dce:	585b      	ldr	r3, [r3, r1]
 8002dd0:	06db      	lsls	r3, r3, #27
 8002dd2:	431a      	orrs	r2, r3
			| ppl->register4.SDREF << 26 | ppl->register4.FB << 23
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2198      	movs	r1, #152	; 0x98
 8002dd8:	585b      	ldr	r3, [r3, r1]
 8002dda:	069b      	lsls	r3, r3, #26
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	219c      	movs	r1, #156	; 0x9c
 8002de2:	585b      	ldr	r3, [r3, r1]
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	431a      	orrs	r2, r3
			| ppl->DIVA << 20 | ppl->register4.BS << 12
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	051b      	lsls	r3, r3, #20
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	21a0      	movs	r1, #160	; 0xa0
 8002df4:	585b      	ldr	r3, [r3, r1]
 8002df6:	031b      	lsls	r3, r3, #12
 8002df8:	431a      	orrs	r2, r3
			| ppl->register4.SDVCO << 11 | ppl->register4.MTLD << 10
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	21a4      	movs	r1, #164	; 0xa4
 8002dfe:	585b      	ldr	r3, [r3, r1]
 8002e00:	02db      	lsls	r3, r3, #11
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	21a8      	movs	r1, #168	; 0xa8
 8002e08:	585b      	ldr	r3, [r3, r1]
 8002e0a:	029b      	lsls	r3, r3, #10
 8002e0c:	431a      	orrs	r2, r3
			| ppl->register4.BDIV << 9 | ppl->register4.RFB_EN << 8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	21ac      	movs	r1, #172	; 0xac
 8002e12:	585b      	ldr	r3, [r3, r1]
 8002e14:	025b      	lsls	r3, r3, #9
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	21b0      	movs	r1, #176	; 0xb0
 8002e1c:	585b      	ldr	r3, [r3, r1]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	431a      	orrs	r2, r3
			| ppl->register4.BPWR << 6 | ppl->register4.RFA_EN << 5
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	21b4      	movs	r1, #180	; 0xb4
 8002e26:	585b      	ldr	r3, [r3, r1]
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	21b8      	movs	r1, #184	; 0xb8
 8002e30:	585b      	ldr	r3, [r3, r1]
 8002e32:	015b      	lsls	r3, r3, #5
 8002e34:	431a      	orrs	r2, r3
			| ppl->register4.APWR << 3 | ppl->register4.ADDR4;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	21bc      	movs	r1, #188	; 0xbc
 8002e3a:	585b      	ldr	r3, [r3, r1]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	21c0      	movs	r1, #192	; 0xc0
 8002e44:	585b      	ldr	r3, [r3, r1]
 8002e46:	4313      	orrs	r3, r2

}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	000030ff 	.word	0x000030ff

08002e54 <getRegister5InitValue>:

unsigned long getRegister5InitValue(MAX2871_t *ppl) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

	ppl->register5.VAS_DLY = 0x3UL;  // 0x0 if VAS_TEMP  0, 0x3 if VAS_TEMP  1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	22c4      	movs	r2, #196	; 0xc4
 8002e60:	2103      	movs	r1, #3
 8002e62:	5099      	str	r1, [r3, r2]
	ppl->register5.SDPLL = 0x0UL;    // PLL enabled
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	22c8      	movs	r2, #200	; 0xc8
 8002e68:	2100      	movs	r1, #0
 8002e6a:	5099      	str	r1, [r3, r2]
	ppl->register5.F01 = 0x1UL;      // If F  0 then int
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	22cc      	movs	r2, #204	; 0xcc
 8002e70:	2101      	movs	r1, #1
 8002e72:	5099      	str	r1, [r3, r2]
	ppl->register5.LD = 0x1UL;       // Lock-Detect pin function  HIGH
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	22d0      	movs	r2, #208	; 0xd0
 8002e78:	2101      	movs	r1, #1
 8002e7a:	5099      	str	r1, [r3, r2]
	ppl->register5.MUX_MSB = 0x0UL;  // MSB of MUX
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	22d4      	movs	r2, #212	; 0xd4
 8002e80:	2100      	movs	r1, #0
 8002e82:	5099      	str	r1, [r3, r2]
	ppl->register5.ADCS = 0x0UL;     // ADC normal operation (ADC isn't used)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	22d8      	movs	r2, #216	; 0xd8
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5099      	str	r1, [r3, r2]
	ppl->register5.ADCM = 0x0UL;     // ADC disabled
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	22dc      	movs	r2, #220	; 0xdc
 8002e90:	2100      	movs	r1, #0
 8002e92:	5099      	str	r1, [r3, r2]
	ppl->register5.ADDR5 = 0x5UL;    // Register address bits
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	22e0      	movs	r2, #224	; 0xe0
 8002e98:	2105      	movs	r1, #5
 8002e9a:	5099      	str	r1, [r3, r2]

	return ppl->register5.VAS_DLY << 29 | ppl->register5.SDPLL << 25
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	22c4      	movs	r2, #196	; 0xc4
 8002ea0:	589b      	ldr	r3, [r3, r2]
 8002ea2:	075a      	lsls	r2, r3, #29
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	21c8      	movs	r1, #200	; 0xc8
 8002ea8:	585b      	ldr	r3, [r3, r1]
 8002eaa:	065b      	lsls	r3, r3, #25
 8002eac:	431a      	orrs	r2, r3
			| ppl->register5.F01 << 24 | ppl->register5.LD << 22
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	21cc      	movs	r1, #204	; 0xcc
 8002eb2:	585b      	ldr	r3, [r3, r1]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	21d0      	movs	r1, #208	; 0xd0
 8002ebc:	585b      	ldr	r3, [r3, r1]
 8002ebe:	059b      	lsls	r3, r3, #22
 8002ec0:	431a      	orrs	r2, r3
			| ppl->register5.MUX_MSB << 18 | ppl->register5.ADCS << 6
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	21d4      	movs	r1, #212	; 0xd4
 8002ec6:	585b      	ldr	r3, [r3, r1]
 8002ec8:	049b      	lsls	r3, r3, #18
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	21d8      	movs	r1, #216	; 0xd8
 8002ed0:	585b      	ldr	r3, [r3, r1]
 8002ed2:	019b      	lsls	r3, r3, #6
 8002ed4:	431a      	orrs	r2, r3
			| ppl->register5.ADCM << 3 | ppl->register5.ADDR5;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	21dc      	movs	r1, #220	; 0xdc
 8002eda:	585b      	ldr	r3, [r3, r1]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	21e0      	movs	r1, #224	; 0xe0
 8002ee4:	585b      	ldr	r3, [r3, r1]
 8002ee6:	4313      	orrs	r3, r2
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <max2871Init>:

void max2871Init(MAX2871_t *ppl) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	// Composition of MAX2971 Registers
	ppl->FreqOut = 0;
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	2300      	movs	r3, #0
 8002efe:	600a      	str	r2, [r1, #0]
 8002f00:	604b      	str	r3, [r1, #4]
	ppl->DIVA = 0x0UL;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <max2871Write>:

void max2871Write(SPI_HandleTypeDef *hspi2, unsigned long data)
// Writes 32 Bit value to register of MAX2871
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4] = { 0 };
 8002f1a:	240c      	movs	r4, #12
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

	buffer[0] = (data & 0xFF000000) >> 24;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	0e1b      	lsrs	r3, r3, #24
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	701a      	strb	r2, [r3, #0]
	buffer[1] = (data & 0x00FF0000) >> 16;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	705a      	strb	r2, [r3, #1]
	buffer[2] = (data & 0x0000FF00) >> 8;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	193b      	adds	r3, r7, r4
 8002f3e:	709a      	strb	r2, [r3, #2]
	buffer[3] = (data & 0x000000FF);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_RESET);
 8002f48:	23a0      	movs	r3, #160	; 0xa0
 8002f4a:	05db      	lsls	r3, r3, #23
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2104      	movs	r1, #4
 8002f50:	0018      	movs	r0, r3
 8002f52:	f001 fa54 	bl	80043fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_RESET);
 8002f56:	23a0      	movs	r3, #160	; 0xa0
 8002f58:	05db      	lsls	r3, r3, #23
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f001 fa4d 	bl	80043fe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f000 fff1 	bl	8003f4c <HAL_Delay>
	HAL_SPI_Transmit(hspi2, buffer, 4, 100);
 8002f6a:	1939      	adds	r1, r7, r4
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	2364      	movs	r3, #100	; 0x64
 8002f70:	2204      	movs	r2, #4
 8002f72:	f001 fff3 	bl	8004f5c <HAL_SPI_Transmit>
	HAL_Delay(1);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f000 ffe8 	bl	8003f4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_SET);
 8002f7c:	23a0      	movs	r3, #160	; 0xa0
 8002f7e:	05db      	lsls	r3, r3, #23
 8002f80:	2201      	movs	r2, #1
 8002f82:	2104      	movs	r1, #4
 8002f84:	0018      	movs	r0, r3
 8002f86:	f001 fa3a 	bl	80043fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_SET);
 8002f8a:	23a0      	movs	r3, #160	; 0xa0
 8002f8c:	05db      	lsls	r3, r3, #23
 8002f8e:	2201      	movs	r2, #1
 8002f90:	2102      	movs	r1, #2
 8002f92:	0018      	movs	r0, r3
 8002f94:	f001 fa33 	bl	80043fe <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002f98:	2032      	movs	r0, #50	; 0x32
 8002f9a:	f000 ffd7 	bl	8003f4c <HAL_Delay>
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b005      	add	sp, #20
 8002fa4:	bd90      	pop	{r4, r7, pc}
	...

08002fa8 <max2871CalculateRegister0Values>:

void max2871CalculateRegister0Values(MAX2871_t *ppl) // Calculates values of NDIV, FRAC & DIVA
{
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b0bf      	sub	sp, #252	; 0xfc
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	22dc      	movs	r2, #220	; 0xdc
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	18d3      	adds	r3, r2, r3
 8002fb4:	19db      	adds	r3, r3, r7
 8002fb6:	6018      	str	r0, [r3, #0]
	double rest;
	unsigned long FreqRef = 50000000.0;  // FreqRef * 5
 8002fb8:	4b8d      	ldr	r3, [pc, #564]	; (80031f0 <max2871CalculateRegister0Values+0x248>)
 8002fba:	21ec      	movs	r1, #236	; 0xec
 8002fbc:	2008      	movs	r0, #8
 8002fbe:	1809      	adds	r1, r1, r0
 8002fc0:	19c9      	adds	r1, r1, r7
 8002fc2:	600b      	str	r3, [r1, #0]
	unsigned long Resol = 4000.0;
 8002fc4:	23fa      	movs	r3, #250	; 0xfa
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	21e8      	movs	r1, #232	; 0xe8
 8002fca:	2008      	movs	r0, #8
 8002fcc:	1809      	adds	r1, r1, r0
 8002fce:	19c9      	adds	r1, r1, r7
 8002fd0:	600b      	str	r3, [r1, #0]

	if (ppl->FreqOut >= 3000000000) {
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	18d3      	adds	r3, r2, r3
 8002fd6:	19db      	adds	r3, r3, r7
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <max2871CalculateRegister0Values+0x42>
 8002fe2:	d173      	bne.n	80030cc <max2871CalculateRegister0Values+0x124>
 8002fe4:	4983      	ldr	r1, [pc, #524]	; (80031f4 <max2871CalculateRegister0Values+0x24c>)
 8002fe6:	428a      	cmp	r2, r1
 8002fe8:	d970      	bls.n	80030cc <max2871CalculateRegister0Values+0x124>
		ppl->DIVA = 0;
 8002fea:	26dc      	movs	r6, #220	; 0xdc
 8002fec:	2308      	movs	r3, #8
 8002fee:	18f3      	adds	r3, r6, r3
 8002ff0:	19db      	adds	r3, r3, r7
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut / FreqRef;
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	18f3      	adds	r3, r6, r3
 8002ffc:	19db      	adds	r3, r3, r7
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	24ec      	movs	r4, #236	; 0xec
 8003006:	2308      	movs	r3, #8
 8003008:	18e3      	adds	r3, r4, r3
 800300a:	19db      	adds	r3, r3, r7
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	18ba      	adds	r2, r7, r2
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	2300      	movs	r3, #0
 8003016:	2284      	movs	r2, #132	; 0x84
 8003018:	18ba      	adds	r2, r7, r2
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f7fd f8f8 	bl	8000218 <__aeabi_uldivmod>
 8003028:	0002      	movs	r2, r0
 800302a:	000b      	movs	r3, r1
 800302c:	2308      	movs	r3, #8
 800302e:	18f3      	adds	r3, r6, r3
 8003030:	19db      	adds	r3, r3, r7
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut % FreqRef;
 8003036:	2308      	movs	r3, #8
 8003038:	18f3      	adds	r3, r6, r3
 800303a:	19db      	adds	r3, r3, r7
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	2308      	movs	r3, #8
 8003044:	18e3      	adds	r3, r4, r3
 8003046:	19db      	adds	r3, r3, r7
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	67bb      	str	r3, [r7, #120]	; 0x78
 800304c:	2300      	movs	r3, #0
 800304e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003050:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003054:	f7fd f8e0 	bl	8000218 <__aeabi_uldivmod>
 8003058:	0010      	movs	r0, r2
 800305a:	0019      	movs	r1, r3
 800305c:	f7fd f91a 	bl	8000294 <__aeabi_ul2d>
 8003060:	0002      	movs	r2, r0
 8003062:	000b      	movs	r3, r1
 8003064:	25e0      	movs	r5, #224	; 0xe0
 8003066:	2108      	movs	r1, #8
 8003068:	1869      	adds	r1, r5, r1
 800306a:	19c9      	adds	r1, r1, r7
 800306c:	600a      	str	r2, [r1, #0]
 800306e:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003070:	2308      	movs	r3, #8
 8003072:	18e3      	adds	r3, r4, r3
 8003074:	19db      	adds	r3, r3, r7
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	f7fe fe54 	bl	8001d24 <__aeabi_ui2d>
 800307c:	0002      	movs	r2, r0
 800307e:	000b      	movs	r3, r1
 8003080:	2108      	movs	r1, #8
 8003082:	1869      	adds	r1, r5, r1
 8003084:	19c9      	adds	r1, r1, r7
 8003086:	6808      	ldr	r0, [r1, #0]
 8003088:	6849      	ldr	r1, [r1, #4]
 800308a:	f7fd fd21 	bl	8000ad0 <__aeabi_ddiv>
 800308e:	0002      	movs	r2, r0
 8003090:	000b      	movs	r3, r1
 8003092:	0014      	movs	r4, r2
 8003094:	001d      	movs	r5, r3
 8003096:	23e8      	movs	r3, #232	; 0xe8
 8003098:	2208      	movs	r2, #8
 800309a:	189b      	adds	r3, r3, r2
 800309c:	19db      	adds	r3, r3, r7
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	f7fe fe40 	bl	8001d24 <__aeabi_ui2d>
 80030a4:	0002      	movs	r2, r0
 80030a6:	000b      	movs	r3, r1
 80030a8:	0020      	movs	r0, r4
 80030aa:	0029      	movs	r1, r5
 80030ac:	f7fe f806 	bl	80010bc <__aeabi_dmul>
 80030b0:	0002      	movs	r2, r0
 80030b2:	000b      	movs	r3, r1
 80030b4:	0010      	movs	r0, r2
 80030b6:	0019      	movs	r1, r3
 80030b8:	f7fd f8ce 	bl	8000258 <__aeabi_d2uiz>
 80030bc:	0002      	movs	r2, r0
 80030be:	2308      	movs	r3, #8
 80030c0:	18f3      	adds	r3, r6, r3
 80030c2:	19db      	adds	r3, r3, r7
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	615a      	str	r2, [r3, #20]
		ppl->DIVA = 7;
		ppl->register0.NDIV = ppl->FreqOut * 128 / FreqRef;
		rest = ppl->FreqOut * 128 % FreqRef;
		ppl->register0.FRAC = rest / FreqRef * Resol;
	}
}
 80030c8:	f000 fcfc 	bl	8003ac4 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 3000000000) && (ppl->FreqOut >= 1500000000)) {
 80030cc:	23dc      	movs	r3, #220	; 0xdc
 80030ce:	2208      	movs	r2, #8
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d000      	beq.n	80030e0 <max2871CalculateRegister0Values+0x138>
 80030de:	e08d      	b.n	80031fc <max2871CalculateRegister0Values+0x254>
 80030e0:	d103      	bne.n	80030ea <max2871CalculateRegister0Values+0x142>
 80030e2:	4944      	ldr	r1, [pc, #272]	; (80031f4 <max2871CalculateRegister0Values+0x24c>)
 80030e4:	428a      	cmp	r2, r1
 80030e6:	d900      	bls.n	80030ea <max2871CalculateRegister0Values+0x142>
 80030e8:	e088      	b.n	80031fc <max2871CalculateRegister0Values+0x254>
 80030ea:	23dc      	movs	r3, #220	; 0xdc
 80030ec:	2208      	movs	r2, #8
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	19db      	adds	r3, r3, r7
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <max2871CalculateRegister0Values+0x160>
 80030fc:	d000      	beq.n	8003100 <max2871CalculateRegister0Values+0x158>
 80030fe:	e07d      	b.n	80031fc <max2871CalculateRegister0Values+0x254>
 8003100:	493d      	ldr	r1, [pc, #244]	; (80031f8 <max2871CalculateRegister0Values+0x250>)
 8003102:	428a      	cmp	r2, r1
 8003104:	d800      	bhi.n	8003108 <max2871CalculateRegister0Values+0x160>
 8003106:	e079      	b.n	80031fc <max2871CalculateRegister0Values+0x254>
		ppl->DIVA = 1;
 8003108:	26dc      	movs	r6, #220	; 0xdc
 800310a:	2308      	movs	r3, #8
 800310c:	18f3      	adds	r3, r6, r3
 800310e:	19db      	adds	r3, r3, r7
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 2 / FreqRef;
 8003116:	2308      	movs	r3, #8
 8003118:	18f3      	adds	r3, r6, r3
 800311a:	19db      	adds	r3, r3, r7
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	1892      	adds	r2, r2, r2
 8003124:	415b      	adcs	r3, r3
 8003126:	0010      	movs	r0, r2
 8003128:	0019      	movs	r1, r3
 800312a:	24ec      	movs	r4, #236	; 0xec
 800312c:	2308      	movs	r3, #8
 800312e:	18e3      	adds	r3, r4, r3
 8003130:	19db      	adds	r3, r3, r7
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	673b      	str	r3, [r7, #112]	; 0x70
 8003136:	2300      	movs	r3, #0
 8003138:	677b      	str	r3, [r7, #116]	; 0x74
 800313a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800313c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313e:	f7fd f86b 	bl	8000218 <__aeabi_uldivmod>
 8003142:	0002      	movs	r2, r0
 8003144:	000b      	movs	r3, r1
 8003146:	2308      	movs	r3, #8
 8003148:	18f3      	adds	r3, r6, r3
 800314a:	19db      	adds	r3, r3, r7
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 2 % FreqRef;
 8003150:	2308      	movs	r3, #8
 8003152:	18f3      	adds	r3, r6, r3
 8003154:	19db      	adds	r3, r3, r7
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	1892      	adds	r2, r2, r2
 800315e:	415b      	adcs	r3, r3
 8003160:	0010      	movs	r0, r2
 8003162:	0019      	movs	r1, r3
 8003164:	2308      	movs	r3, #8
 8003166:	18e3      	adds	r3, r4, r3
 8003168:	19db      	adds	r3, r3, r7
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	66bb      	str	r3, [r7, #104]	; 0x68
 800316e:	2300      	movs	r3, #0
 8003170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003172:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003176:	f7fd f84f 	bl	8000218 <__aeabi_uldivmod>
 800317a:	0010      	movs	r0, r2
 800317c:	0019      	movs	r1, r3
 800317e:	f7fd f889 	bl	8000294 <__aeabi_ul2d>
 8003182:	0002      	movs	r2, r0
 8003184:	000b      	movs	r3, r1
 8003186:	25e0      	movs	r5, #224	; 0xe0
 8003188:	2108      	movs	r1, #8
 800318a:	1869      	adds	r1, r5, r1
 800318c:	19c9      	adds	r1, r1, r7
 800318e:	600a      	str	r2, [r1, #0]
 8003190:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003192:	2308      	movs	r3, #8
 8003194:	18e3      	adds	r3, r4, r3
 8003196:	19db      	adds	r3, r3, r7
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	f7fe fdc3 	bl	8001d24 <__aeabi_ui2d>
 800319e:	0002      	movs	r2, r0
 80031a0:	000b      	movs	r3, r1
 80031a2:	2108      	movs	r1, #8
 80031a4:	1869      	adds	r1, r5, r1
 80031a6:	19c9      	adds	r1, r1, r7
 80031a8:	6808      	ldr	r0, [r1, #0]
 80031aa:	6849      	ldr	r1, [r1, #4]
 80031ac:	f7fd fc90 	bl	8000ad0 <__aeabi_ddiv>
 80031b0:	0002      	movs	r2, r0
 80031b2:	000b      	movs	r3, r1
 80031b4:	0014      	movs	r4, r2
 80031b6:	001d      	movs	r5, r3
 80031b8:	23e8      	movs	r3, #232	; 0xe8
 80031ba:	2208      	movs	r2, #8
 80031bc:	189b      	adds	r3, r3, r2
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	f7fe fdaf 	bl	8001d24 <__aeabi_ui2d>
 80031c6:	0002      	movs	r2, r0
 80031c8:	000b      	movs	r3, r1
 80031ca:	0020      	movs	r0, r4
 80031cc:	0029      	movs	r1, r5
 80031ce:	f7fd ff75 	bl	80010bc <__aeabi_dmul>
 80031d2:	0002      	movs	r2, r0
 80031d4:	000b      	movs	r3, r1
 80031d6:	0010      	movs	r0, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	f7fd f83d 	bl	8000258 <__aeabi_d2uiz>
 80031de:	0002      	movs	r2, r0
 80031e0:	2308      	movs	r3, #8
 80031e2:	18f3      	adds	r3, r6, r3
 80031e4:	19db      	adds	r3, r3, r7
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	f000 fc6b 	bl	8003ac4 <max2871CalculateRegister0Values+0xb1c>
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	02faf080 	.word	0x02faf080
 80031f4:	b2d05dff 	.word	0xb2d05dff
 80031f8:	59682eff 	.word	0x59682eff
	} else if ((ppl->FreqOut < 1500000000) && (ppl->FreqOut >= 750000000)) {
 80031fc:	23dc      	movs	r3, #220	; 0xdc
 80031fe:	2208      	movs	r2, #8
 8003200:	189b      	adds	r3, r3, r2
 8003202:	19db      	adds	r3, r3, r7
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d000      	beq.n	8003210 <max2871CalculateRegister0Values+0x268>
 800320e:	e0aa      	b.n	8003366 <max2871CalculateRegister0Values+0x3be>
 8003210:	d103      	bne.n	800321a <max2871CalculateRegister0Values+0x272>
 8003212:	49b5      	ldr	r1, [pc, #724]	; (80034e8 <max2871CalculateRegister0Values+0x540>)
 8003214:	428a      	cmp	r2, r1
 8003216:	d900      	bls.n	800321a <max2871CalculateRegister0Values+0x272>
 8003218:	e0a5      	b.n	8003366 <max2871CalculateRegister0Values+0x3be>
 800321a:	23dc      	movs	r3, #220	; 0xdc
 800321c:	2208      	movs	r2, #8
 800321e:	189b      	adds	r3, r3, r2
 8003220:	19db      	adds	r3, r3, r7
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <max2871CalculateRegister0Values+0x290>
 800322c:	d000      	beq.n	8003230 <max2871CalculateRegister0Values+0x288>
 800322e:	e09a      	b.n	8003366 <max2871CalculateRegister0Values+0x3be>
 8003230:	49ae      	ldr	r1, [pc, #696]	; (80034ec <max2871CalculateRegister0Values+0x544>)
 8003232:	428a      	cmp	r2, r1
 8003234:	d800      	bhi.n	8003238 <max2871CalculateRegister0Values+0x290>
 8003236:	e096      	b.n	8003366 <max2871CalculateRegister0Values+0x3be>
		ppl->DIVA = 2;
 8003238:	26dc      	movs	r6, #220	; 0xdc
 800323a:	2308      	movs	r3, #8
 800323c:	18f3      	adds	r3, r6, r3
 800323e:	19db      	adds	r3, r3, r7
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2202      	movs	r2, #2
 8003244:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 4 / FreqRef;
 8003246:	2308      	movs	r3, #8
 8003248:	18f3      	adds	r3, r6, r3
 800324a:	19db      	adds	r3, r3, r7
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0f91      	lsrs	r1, r2, #30
 8003254:	0098      	lsls	r0, r3, #2
 8003256:	24d4      	movs	r4, #212	; 0xd4
 8003258:	2508      	movs	r5, #8
 800325a:	1965      	adds	r5, r4, r5
 800325c:	19ed      	adds	r5, r5, r7
 800325e:	6028      	str	r0, [r5, #0]
 8003260:	0020      	movs	r0, r4
 8003262:	0005      	movs	r5, r0
 8003264:	2408      	movs	r4, #8
 8003266:	1900      	adds	r0, r0, r4
 8003268:	19c4      	adds	r4, r0, r7
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	4308      	orrs	r0, r1
 800326e:	0029      	movs	r1, r5
 8003270:	2408      	movs	r4, #8
 8003272:	1909      	adds	r1, r1, r4
 8003274:	19c9      	adds	r1, r1, r7
 8003276:	6008      	str	r0, [r1, #0]
 8003278:	0093      	lsls	r3, r2, #2
 800327a:	21d0      	movs	r1, #208	; 0xd0
 800327c:	2208      	movs	r2, #8
 800327e:	188a      	adds	r2, r1, r2
 8003280:	19d2      	adds	r2, r2, r7
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	23ec      	movs	r3, #236	; 0xec
 8003286:	001c      	movs	r4, r3
 8003288:	2208      	movs	r2, #8
 800328a:	189b      	adds	r3, r3, r2
 800328c:	19da      	adds	r2, r3, r7
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	663b      	str	r3, [r7, #96]	; 0x60
 8003292:	2300      	movs	r3, #0
 8003294:	667b      	str	r3, [r7, #100]	; 0x64
 8003296:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329a:	2008      	movs	r0, #8
 800329c:	1809      	adds	r1, r1, r0
 800329e:	19c9      	adds	r1, r1, r7
 80032a0:	6808      	ldr	r0, [r1, #0]
 80032a2:	6849      	ldr	r1, [r1, #4]
 80032a4:	f7fc ffb8 	bl	8000218 <__aeabi_uldivmod>
 80032a8:	0002      	movs	r2, r0
 80032aa:	000b      	movs	r3, r1
 80032ac:	2308      	movs	r3, #8
 80032ae:	18f3      	adds	r3, r6, r3
 80032b0:	19d9      	adds	r1, r3, r7
 80032b2:	680b      	ldr	r3, [r1, #0]
 80032b4:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 4 % FreqRef;
 80032b6:	2308      	movs	r3, #8
 80032b8:	18f3      	adds	r3, r6, r3
 80032ba:	19da      	adds	r2, r3, r7
 80032bc:	6813      	ldr	r3, [r2, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0f91      	lsrs	r1, r2, #30
 80032c4:	0098      	lsls	r0, r3, #2
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4308      	orrs	r0, r1
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	0093      	lsls	r3, r2, #2
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	0023      	movs	r3, r4
 80032d4:	001d      	movs	r5, r3
 80032d6:	2208      	movs	r2, #8
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	19da      	adds	r2, r3, r7
 80032dc:	6813      	ldr	r3, [r2, #0]
 80032de:	65bb      	str	r3, [r7, #88]	; 0x58
 80032e0:	2300      	movs	r3, #0
 80032e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e8:	6838      	ldr	r0, [r7, #0]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	f7fc ff94 	bl	8000218 <__aeabi_uldivmod>
 80032f0:	0010      	movs	r0, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	f7fc ffce 	bl	8000294 <__aeabi_ul2d>
 80032f8:	0002      	movs	r2, r0
 80032fa:	000b      	movs	r3, r1
 80032fc:	24e0      	movs	r4, #224	; 0xe0
 80032fe:	2108      	movs	r1, #8
 8003300:	1861      	adds	r1, r4, r1
 8003302:	19c9      	adds	r1, r1, r7
 8003304:	600a      	str	r2, [r1, #0]
 8003306:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003308:	002b      	movs	r3, r5
 800330a:	2208      	movs	r2, #8
 800330c:	189b      	adds	r3, r3, r2
 800330e:	19db      	adds	r3, r3, r7
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	f7fe fd07 	bl	8001d24 <__aeabi_ui2d>
 8003316:	0002      	movs	r2, r0
 8003318:	000b      	movs	r3, r1
 800331a:	2108      	movs	r1, #8
 800331c:	1861      	adds	r1, r4, r1
 800331e:	19c9      	adds	r1, r1, r7
 8003320:	6808      	ldr	r0, [r1, #0]
 8003322:	6849      	ldr	r1, [r1, #4]
 8003324:	f7fd fbd4 	bl	8000ad0 <__aeabi_ddiv>
 8003328:	0002      	movs	r2, r0
 800332a:	000b      	movs	r3, r1
 800332c:	0014      	movs	r4, r2
 800332e:	001d      	movs	r5, r3
 8003330:	23e8      	movs	r3, #232	; 0xe8
 8003332:	2208      	movs	r2, #8
 8003334:	189b      	adds	r3, r3, r2
 8003336:	19db      	adds	r3, r3, r7
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	f7fe fcf3 	bl	8001d24 <__aeabi_ui2d>
 800333e:	0002      	movs	r2, r0
 8003340:	000b      	movs	r3, r1
 8003342:	0020      	movs	r0, r4
 8003344:	0029      	movs	r1, r5
 8003346:	f7fd feb9 	bl	80010bc <__aeabi_dmul>
 800334a:	0002      	movs	r2, r0
 800334c:	000b      	movs	r3, r1
 800334e:	0010      	movs	r0, r2
 8003350:	0019      	movs	r1, r3
 8003352:	f7fc ff81 	bl	8000258 <__aeabi_d2uiz>
 8003356:	0002      	movs	r2, r0
 8003358:	2308      	movs	r3, #8
 800335a:	18f3      	adds	r3, r6, r3
 800335c:	19db      	adds	r3, r3, r7
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	615a      	str	r2, [r3, #20]
 8003362:	f000 fbaf 	bl	8003ac4 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 750000000) && (ppl->FreqOut >= 375000000)) {
 8003366:	23dc      	movs	r3, #220	; 0xdc
 8003368:	2208      	movs	r2, #8
 800336a:	189b      	adds	r3, r3, r2
 800336c:	19db      	adds	r3, r3, r7
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d000      	beq.n	800337a <max2871CalculateRegister0Values+0x3d2>
 8003378:	e0bc      	b.n	80034f4 <max2871CalculateRegister0Values+0x54c>
 800337a:	d103      	bne.n	8003384 <max2871CalculateRegister0Values+0x3dc>
 800337c:	495b      	ldr	r1, [pc, #364]	; (80034ec <max2871CalculateRegister0Values+0x544>)
 800337e:	428a      	cmp	r2, r1
 8003380:	d900      	bls.n	8003384 <max2871CalculateRegister0Values+0x3dc>
 8003382:	e0b7      	b.n	80034f4 <max2871CalculateRegister0Values+0x54c>
 8003384:	23dc      	movs	r3, #220	; 0xdc
 8003386:	2208      	movs	r2, #8
 8003388:	189b      	adds	r3, r3, r2
 800338a:	19db      	adds	r3, r3, r7
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d105      	bne.n	80033a2 <max2871CalculateRegister0Values+0x3fa>
 8003396:	d000      	beq.n	800339a <max2871CalculateRegister0Values+0x3f2>
 8003398:	e0ac      	b.n	80034f4 <max2871CalculateRegister0Values+0x54c>
 800339a:	4955      	ldr	r1, [pc, #340]	; (80034f0 <max2871CalculateRegister0Values+0x548>)
 800339c:	428a      	cmp	r2, r1
 800339e:	d800      	bhi.n	80033a2 <max2871CalculateRegister0Values+0x3fa>
 80033a0:	e0a8      	b.n	80034f4 <max2871CalculateRegister0Values+0x54c>
		ppl->DIVA = 3;
 80033a2:	26dc      	movs	r6, #220	; 0xdc
 80033a4:	2308      	movs	r3, #8
 80033a6:	18f3      	adds	r3, r6, r3
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2203      	movs	r2, #3
 80033ae:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 8 / FreqRef;
 80033b0:	2308      	movs	r3, #8
 80033b2:	18f3      	adds	r3, r6, r3
 80033b4:	19db      	adds	r3, r3, r7
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0f51      	lsrs	r1, r2, #29
 80033be:	00d8      	lsls	r0, r3, #3
 80033c0:	24cc      	movs	r4, #204	; 0xcc
 80033c2:	2508      	movs	r5, #8
 80033c4:	1965      	adds	r5, r4, r5
 80033c6:	19ed      	adds	r5, r5, r7
 80033c8:	6028      	str	r0, [r5, #0]
 80033ca:	2008      	movs	r0, #8
 80033cc:	1820      	adds	r0, r4, r0
 80033ce:	19c0      	adds	r0, r0, r7
 80033d0:	6800      	ldr	r0, [r0, #0]
 80033d2:	4308      	orrs	r0, r1
 80033d4:	2108      	movs	r1, #8
 80033d6:	1861      	adds	r1, r4, r1
 80033d8:	19c9      	adds	r1, r1, r7
 80033da:	6008      	str	r0, [r1, #0]
 80033dc:	00d3      	lsls	r3, r2, #3
 80033de:	21c8      	movs	r1, #200	; 0xc8
 80033e0:	2208      	movs	r2, #8
 80033e2:	188a      	adds	r2, r1, r2
 80033e4:	19d2      	adds	r2, r2, r7
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	24ec      	movs	r4, #236	; 0xec
 80033ea:	2308      	movs	r3, #8
 80033ec:	18e3      	adds	r3, r4, r3
 80033ee:	19db      	adds	r3, r3, r7
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	653b      	str	r3, [r7, #80]	; 0x50
 80033f4:	2300      	movs	r3, #0
 80033f6:	657b      	str	r3, [r7, #84]	; 0x54
 80033f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fc:	2008      	movs	r0, #8
 80033fe:	1809      	adds	r1, r1, r0
 8003400:	19c9      	adds	r1, r1, r7
 8003402:	6808      	ldr	r0, [r1, #0]
 8003404:	6849      	ldr	r1, [r1, #4]
 8003406:	f7fc ff07 	bl	8000218 <__aeabi_uldivmod>
 800340a:	0002      	movs	r2, r0
 800340c:	000b      	movs	r3, r1
 800340e:	2308      	movs	r3, #8
 8003410:	18f3      	adds	r3, r6, r3
 8003412:	19db      	adds	r3, r3, r7
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 8 % FreqRef;
 8003418:	2308      	movs	r3, #8
 800341a:	18f3      	adds	r3, r6, r3
 800341c:	19db      	adds	r3, r3, r7
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0f51      	lsrs	r1, r2, #29
 8003426:	468c      	mov	ip, r1
 8003428:	00d8      	lsls	r0, r3, #3
 800342a:	25c4      	movs	r5, #196	; 0xc4
 800342c:	2108      	movs	r1, #8
 800342e:	1869      	adds	r1, r5, r1
 8003430:	19c9      	adds	r1, r1, r7
 8003432:	6008      	str	r0, [r1, #0]
 8003434:	2108      	movs	r1, #8
 8003436:	1869      	adds	r1, r5, r1
 8003438:	19c8      	adds	r0, r1, r7
 800343a:	6800      	ldr	r0, [r0, #0]
 800343c:	4661      	mov	r1, ip
 800343e:	4308      	orrs	r0, r1
 8003440:	2108      	movs	r1, #8
 8003442:	1869      	adds	r1, r5, r1
 8003444:	19c9      	adds	r1, r1, r7
 8003446:	6008      	str	r0, [r1, #0]
 8003448:	00d3      	lsls	r3, r2, #3
 800344a:	21c0      	movs	r1, #192	; 0xc0
 800344c:	2208      	movs	r2, #8
 800344e:	188a      	adds	r2, r1, r2
 8003450:	19d2      	adds	r2, r2, r7
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	2308      	movs	r3, #8
 8003456:	18e3      	adds	r3, r4, r3
 8003458:	19db      	adds	r3, r3, r7
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	64bb      	str	r3, [r7, #72]	; 0x48
 800345e:	2300      	movs	r3, #0
 8003460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003466:	2008      	movs	r0, #8
 8003468:	1809      	adds	r1, r1, r0
 800346a:	19c9      	adds	r1, r1, r7
 800346c:	6808      	ldr	r0, [r1, #0]
 800346e:	6849      	ldr	r1, [r1, #4]
 8003470:	f7fc fed2 	bl	8000218 <__aeabi_uldivmod>
 8003474:	0010      	movs	r0, r2
 8003476:	0019      	movs	r1, r3
 8003478:	f7fc ff0c 	bl	8000294 <__aeabi_ul2d>
 800347c:	0002      	movs	r2, r0
 800347e:	000b      	movs	r3, r1
 8003480:	25e0      	movs	r5, #224	; 0xe0
 8003482:	2108      	movs	r1, #8
 8003484:	1869      	adds	r1, r5, r1
 8003486:	19c9      	adds	r1, r1, r7
 8003488:	600a      	str	r2, [r1, #0]
 800348a:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 800348c:	2308      	movs	r3, #8
 800348e:	18e3      	adds	r3, r4, r3
 8003490:	19db      	adds	r3, r3, r7
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	f7fe fc46 	bl	8001d24 <__aeabi_ui2d>
 8003498:	0002      	movs	r2, r0
 800349a:	000b      	movs	r3, r1
 800349c:	2108      	movs	r1, #8
 800349e:	1869      	adds	r1, r5, r1
 80034a0:	19c9      	adds	r1, r1, r7
 80034a2:	6808      	ldr	r0, [r1, #0]
 80034a4:	6849      	ldr	r1, [r1, #4]
 80034a6:	f7fd fb13 	bl	8000ad0 <__aeabi_ddiv>
 80034aa:	0002      	movs	r2, r0
 80034ac:	000b      	movs	r3, r1
 80034ae:	0014      	movs	r4, r2
 80034b0:	001d      	movs	r5, r3
 80034b2:	23e8      	movs	r3, #232	; 0xe8
 80034b4:	2208      	movs	r2, #8
 80034b6:	189b      	adds	r3, r3, r2
 80034b8:	19db      	adds	r3, r3, r7
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	f7fe fc32 	bl	8001d24 <__aeabi_ui2d>
 80034c0:	0002      	movs	r2, r0
 80034c2:	000b      	movs	r3, r1
 80034c4:	0020      	movs	r0, r4
 80034c6:	0029      	movs	r1, r5
 80034c8:	f7fd fdf8 	bl	80010bc <__aeabi_dmul>
 80034cc:	0002      	movs	r2, r0
 80034ce:	000b      	movs	r3, r1
 80034d0:	0010      	movs	r0, r2
 80034d2:	0019      	movs	r1, r3
 80034d4:	f7fc fec0 	bl	8000258 <__aeabi_d2uiz>
 80034d8:	0002      	movs	r2, r0
 80034da:	2308      	movs	r3, #8
 80034dc:	18f3      	adds	r3, r6, r3
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	615a      	str	r2, [r3, #20]
 80034e4:	e2ee      	b.n	8003ac4 <max2871CalculateRegister0Values+0xb1c>
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	59682eff 	.word	0x59682eff
 80034ec:	2cb4177f 	.word	0x2cb4177f
 80034f0:	165a0bbf 	.word	0x165a0bbf
	} else if ((ppl->FreqOut < 375000000) && (ppl->FreqOut >= 187500000)) {
 80034f4:	23dc      	movs	r3, #220	; 0xdc
 80034f6:	2208      	movs	r2, #8
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	19db      	adds	r3, r3, r7
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d000      	beq.n	8003508 <max2871CalculateRegister0Values+0x560>
 8003506:	e0b5      	b.n	8003674 <max2871CalculateRegister0Values+0x6cc>
 8003508:	d103      	bne.n	8003512 <max2871CalculateRegister0Values+0x56a>
 800350a:	49ba      	ldr	r1, [pc, #744]	; (80037f4 <max2871CalculateRegister0Values+0x84c>)
 800350c:	428a      	cmp	r2, r1
 800350e:	d900      	bls.n	8003512 <max2871CalculateRegister0Values+0x56a>
 8003510:	e0b0      	b.n	8003674 <max2871CalculateRegister0Values+0x6cc>
 8003512:	23dc      	movs	r3, #220	; 0xdc
 8003514:	2208      	movs	r2, #8
 8003516:	189b      	adds	r3, r3, r2
 8003518:	19db      	adds	r3, r3, r7
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <max2871CalculateRegister0Values+0x588>
 8003524:	d000      	beq.n	8003528 <max2871CalculateRegister0Values+0x580>
 8003526:	e0a5      	b.n	8003674 <max2871CalculateRegister0Values+0x6cc>
 8003528:	49b3      	ldr	r1, [pc, #716]	; (80037f8 <max2871CalculateRegister0Values+0x850>)
 800352a:	428a      	cmp	r2, r1
 800352c:	d800      	bhi.n	8003530 <max2871CalculateRegister0Values+0x588>
 800352e:	e0a1      	b.n	8003674 <max2871CalculateRegister0Values+0x6cc>
		ppl->DIVA = 4;
 8003530:	26dc      	movs	r6, #220	; 0xdc
 8003532:	2308      	movs	r3, #8
 8003534:	18f3      	adds	r3, r6, r3
 8003536:	19db      	adds	r3, r3, r7
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2204      	movs	r2, #4
 800353c:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 16 / FreqRef;
 800353e:	2308      	movs	r3, #8
 8003540:	18f3      	adds	r3, r6, r3
 8003542:	19db      	adds	r3, r3, r7
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0f11      	lsrs	r1, r2, #28
 800354c:	0118      	lsls	r0, r3, #4
 800354e:	24bc      	movs	r4, #188	; 0xbc
 8003550:	2508      	movs	r5, #8
 8003552:	1965      	adds	r5, r4, r5
 8003554:	19ed      	adds	r5, r5, r7
 8003556:	6028      	str	r0, [r5, #0]
 8003558:	2008      	movs	r0, #8
 800355a:	1820      	adds	r0, r4, r0
 800355c:	19c0      	adds	r0, r0, r7
 800355e:	6800      	ldr	r0, [r0, #0]
 8003560:	4308      	orrs	r0, r1
 8003562:	2108      	movs	r1, #8
 8003564:	1861      	adds	r1, r4, r1
 8003566:	19c9      	adds	r1, r1, r7
 8003568:	6008      	str	r0, [r1, #0]
 800356a:	0113      	lsls	r3, r2, #4
 800356c:	21b8      	movs	r1, #184	; 0xb8
 800356e:	2208      	movs	r2, #8
 8003570:	188a      	adds	r2, r1, r2
 8003572:	19d2      	adds	r2, r2, r7
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	24ec      	movs	r4, #236	; 0xec
 8003578:	2308      	movs	r3, #8
 800357a:	18e3      	adds	r3, r4, r3
 800357c:	19db      	adds	r3, r3, r7
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
 8003582:	2300      	movs	r3, #0
 8003584:	647b      	str	r3, [r7, #68]	; 0x44
 8003586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358a:	2008      	movs	r0, #8
 800358c:	1809      	adds	r1, r1, r0
 800358e:	19c9      	adds	r1, r1, r7
 8003590:	6808      	ldr	r0, [r1, #0]
 8003592:	6849      	ldr	r1, [r1, #4]
 8003594:	f7fc fe40 	bl	8000218 <__aeabi_uldivmod>
 8003598:	0002      	movs	r2, r0
 800359a:	000b      	movs	r3, r1
 800359c:	2308      	movs	r3, #8
 800359e:	18f3      	adds	r3, r6, r3
 80035a0:	19db      	adds	r3, r3, r7
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 16 % FreqRef;
 80035a6:	2308      	movs	r3, #8
 80035a8:	18f3      	adds	r3, r6, r3
 80035aa:	19db      	adds	r3, r3, r7
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0f11      	lsrs	r1, r2, #28
 80035b4:	468c      	mov	ip, r1
 80035b6:	0118      	lsls	r0, r3, #4
 80035b8:	25b4      	movs	r5, #180	; 0xb4
 80035ba:	2108      	movs	r1, #8
 80035bc:	1869      	adds	r1, r5, r1
 80035be:	19c9      	adds	r1, r1, r7
 80035c0:	6008      	str	r0, [r1, #0]
 80035c2:	2108      	movs	r1, #8
 80035c4:	1869      	adds	r1, r5, r1
 80035c6:	19c8      	adds	r0, r1, r7
 80035c8:	6800      	ldr	r0, [r0, #0]
 80035ca:	4661      	mov	r1, ip
 80035cc:	4308      	orrs	r0, r1
 80035ce:	2108      	movs	r1, #8
 80035d0:	1869      	adds	r1, r5, r1
 80035d2:	19c9      	adds	r1, r1, r7
 80035d4:	6008      	str	r0, [r1, #0]
 80035d6:	0113      	lsls	r3, r2, #4
 80035d8:	21b0      	movs	r1, #176	; 0xb0
 80035da:	2208      	movs	r2, #8
 80035dc:	188a      	adds	r2, r1, r2
 80035de:	19d2      	adds	r2, r2, r7
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	2308      	movs	r3, #8
 80035e4:	18e3      	adds	r3, r4, r3
 80035e6:	19db      	adds	r3, r3, r7
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ec:	2300      	movs	r3, #0
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f4:	2008      	movs	r0, #8
 80035f6:	1809      	adds	r1, r1, r0
 80035f8:	19c9      	adds	r1, r1, r7
 80035fa:	6808      	ldr	r0, [r1, #0]
 80035fc:	6849      	ldr	r1, [r1, #4]
 80035fe:	f7fc fe0b 	bl	8000218 <__aeabi_uldivmod>
 8003602:	0010      	movs	r0, r2
 8003604:	0019      	movs	r1, r3
 8003606:	f7fc fe45 	bl	8000294 <__aeabi_ul2d>
 800360a:	0002      	movs	r2, r0
 800360c:	000b      	movs	r3, r1
 800360e:	25e0      	movs	r5, #224	; 0xe0
 8003610:	2108      	movs	r1, #8
 8003612:	1869      	adds	r1, r5, r1
 8003614:	19c9      	adds	r1, r1, r7
 8003616:	600a      	str	r2, [r1, #0]
 8003618:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 800361a:	2308      	movs	r3, #8
 800361c:	18e3      	adds	r3, r4, r3
 800361e:	19db      	adds	r3, r3, r7
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	f7fe fb7f 	bl	8001d24 <__aeabi_ui2d>
 8003626:	0002      	movs	r2, r0
 8003628:	000b      	movs	r3, r1
 800362a:	2108      	movs	r1, #8
 800362c:	1869      	adds	r1, r5, r1
 800362e:	19c9      	adds	r1, r1, r7
 8003630:	6808      	ldr	r0, [r1, #0]
 8003632:	6849      	ldr	r1, [r1, #4]
 8003634:	f7fd fa4c 	bl	8000ad0 <__aeabi_ddiv>
 8003638:	0002      	movs	r2, r0
 800363a:	000b      	movs	r3, r1
 800363c:	0014      	movs	r4, r2
 800363e:	001d      	movs	r5, r3
 8003640:	23e8      	movs	r3, #232	; 0xe8
 8003642:	2208      	movs	r2, #8
 8003644:	189b      	adds	r3, r3, r2
 8003646:	19db      	adds	r3, r3, r7
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f7fe fb6b 	bl	8001d24 <__aeabi_ui2d>
 800364e:	0002      	movs	r2, r0
 8003650:	000b      	movs	r3, r1
 8003652:	0020      	movs	r0, r4
 8003654:	0029      	movs	r1, r5
 8003656:	f7fd fd31 	bl	80010bc <__aeabi_dmul>
 800365a:	0002      	movs	r2, r0
 800365c:	000b      	movs	r3, r1
 800365e:	0010      	movs	r0, r2
 8003660:	0019      	movs	r1, r3
 8003662:	f7fc fdf9 	bl	8000258 <__aeabi_d2uiz>
 8003666:	0002      	movs	r2, r0
 8003668:	2308      	movs	r3, #8
 800366a:	18f3      	adds	r3, r6, r3
 800366c:	19db      	adds	r3, r3, r7
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	615a      	str	r2, [r3, #20]
 8003672:	e227      	b.n	8003ac4 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 187500000) && (ppl->FreqOut >= 93750000)) {
 8003674:	23dc      	movs	r3, #220	; 0xdc
 8003676:	2208      	movs	r2, #8
 8003678:	189b      	adds	r3, r3, r2
 800367a:	19db      	adds	r3, r3, r7
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d000      	beq.n	8003688 <max2871CalculateRegister0Values+0x6e0>
 8003686:	e0bb      	b.n	8003800 <max2871CalculateRegister0Values+0x858>
 8003688:	d103      	bne.n	8003692 <max2871CalculateRegister0Values+0x6ea>
 800368a:	495b      	ldr	r1, [pc, #364]	; (80037f8 <max2871CalculateRegister0Values+0x850>)
 800368c:	428a      	cmp	r2, r1
 800368e:	d900      	bls.n	8003692 <max2871CalculateRegister0Values+0x6ea>
 8003690:	e0b6      	b.n	8003800 <max2871CalculateRegister0Values+0x858>
 8003692:	23dc      	movs	r3, #220	; 0xdc
 8003694:	2208      	movs	r2, #8
 8003696:	189b      	adds	r3, r3, r2
 8003698:	19db      	adds	r3, r3, r7
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <max2871CalculateRegister0Values+0x708>
 80036a4:	d000      	beq.n	80036a8 <max2871CalculateRegister0Values+0x700>
 80036a6:	e0ab      	b.n	8003800 <max2871CalculateRegister0Values+0x858>
 80036a8:	4954      	ldr	r1, [pc, #336]	; (80037fc <max2871CalculateRegister0Values+0x854>)
 80036aa:	428a      	cmp	r2, r1
 80036ac:	d800      	bhi.n	80036b0 <max2871CalculateRegister0Values+0x708>
 80036ae:	e0a7      	b.n	8003800 <max2871CalculateRegister0Values+0x858>
		ppl->DIVA = 5;
 80036b0:	26dc      	movs	r6, #220	; 0xdc
 80036b2:	2308      	movs	r3, #8
 80036b4:	18f3      	adds	r3, r6, r3
 80036b6:	19db      	adds	r3, r3, r7
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2205      	movs	r2, #5
 80036bc:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 32 / FreqRef;
 80036be:	2308      	movs	r3, #8
 80036c0:	18f3      	adds	r3, r6, r3
 80036c2:	19db      	adds	r3, r3, r7
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0ed1      	lsrs	r1, r2, #27
 80036cc:	0158      	lsls	r0, r3, #5
 80036ce:	24ac      	movs	r4, #172	; 0xac
 80036d0:	2508      	movs	r5, #8
 80036d2:	1965      	adds	r5, r4, r5
 80036d4:	19ed      	adds	r5, r5, r7
 80036d6:	6028      	str	r0, [r5, #0]
 80036d8:	2008      	movs	r0, #8
 80036da:	1820      	adds	r0, r4, r0
 80036dc:	19c0      	adds	r0, r0, r7
 80036de:	6800      	ldr	r0, [r0, #0]
 80036e0:	4308      	orrs	r0, r1
 80036e2:	2108      	movs	r1, #8
 80036e4:	1861      	adds	r1, r4, r1
 80036e6:	19c9      	adds	r1, r1, r7
 80036e8:	6008      	str	r0, [r1, #0]
 80036ea:	0153      	lsls	r3, r2, #5
 80036ec:	21a8      	movs	r1, #168	; 0xa8
 80036ee:	2208      	movs	r2, #8
 80036f0:	188a      	adds	r2, r1, r2
 80036f2:	19d2      	adds	r2, r2, r7
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	24ec      	movs	r4, #236	; 0xec
 80036f8:	2308      	movs	r3, #8
 80036fa:	18e3      	adds	r3, r4, r3
 80036fc:	19db      	adds	r3, r3, r7
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
 8003702:	2300      	movs	r3, #0
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
 8003706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	2008      	movs	r0, #8
 800370c:	1809      	adds	r1, r1, r0
 800370e:	19c9      	adds	r1, r1, r7
 8003710:	6808      	ldr	r0, [r1, #0]
 8003712:	6849      	ldr	r1, [r1, #4]
 8003714:	f7fc fd80 	bl	8000218 <__aeabi_uldivmod>
 8003718:	0002      	movs	r2, r0
 800371a:	000b      	movs	r3, r1
 800371c:	2308      	movs	r3, #8
 800371e:	18f3      	adds	r3, r6, r3
 8003720:	19db      	adds	r3, r3, r7
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 32 % FreqRef;
 8003726:	2308      	movs	r3, #8
 8003728:	18f3      	adds	r3, r6, r3
 800372a:	19db      	adds	r3, r3, r7
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	0ed1      	lsrs	r1, r2, #27
 8003734:	468c      	mov	ip, r1
 8003736:	0158      	lsls	r0, r3, #5
 8003738:	25a4      	movs	r5, #164	; 0xa4
 800373a:	2108      	movs	r1, #8
 800373c:	1869      	adds	r1, r5, r1
 800373e:	19c9      	adds	r1, r1, r7
 8003740:	6008      	str	r0, [r1, #0]
 8003742:	2108      	movs	r1, #8
 8003744:	1869      	adds	r1, r5, r1
 8003746:	19c8      	adds	r0, r1, r7
 8003748:	6800      	ldr	r0, [r0, #0]
 800374a:	4661      	mov	r1, ip
 800374c:	4308      	orrs	r0, r1
 800374e:	2108      	movs	r1, #8
 8003750:	1869      	adds	r1, r5, r1
 8003752:	19c9      	adds	r1, r1, r7
 8003754:	6008      	str	r0, [r1, #0]
 8003756:	0153      	lsls	r3, r2, #5
 8003758:	21a0      	movs	r1, #160	; 0xa0
 800375a:	2208      	movs	r2, #8
 800375c:	188a      	adds	r2, r1, r2
 800375e:	19d2      	adds	r2, r2, r7
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	2308      	movs	r3, #8
 8003764:	18e3      	adds	r3, r4, r3
 8003766:	19db      	adds	r3, r3, r7
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
 800376c:	2300      	movs	r3, #0
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	2008      	movs	r0, #8
 8003776:	1809      	adds	r1, r1, r0
 8003778:	19c9      	adds	r1, r1, r7
 800377a:	6808      	ldr	r0, [r1, #0]
 800377c:	6849      	ldr	r1, [r1, #4]
 800377e:	f7fc fd4b 	bl	8000218 <__aeabi_uldivmod>
 8003782:	0010      	movs	r0, r2
 8003784:	0019      	movs	r1, r3
 8003786:	f7fc fd85 	bl	8000294 <__aeabi_ul2d>
 800378a:	0002      	movs	r2, r0
 800378c:	000b      	movs	r3, r1
 800378e:	25e0      	movs	r5, #224	; 0xe0
 8003790:	2108      	movs	r1, #8
 8003792:	1869      	adds	r1, r5, r1
 8003794:	19c9      	adds	r1, r1, r7
 8003796:	600a      	str	r2, [r1, #0]
 8003798:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 800379a:	2308      	movs	r3, #8
 800379c:	18e3      	adds	r3, r4, r3
 800379e:	19db      	adds	r3, r3, r7
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	f7fe fabf 	bl	8001d24 <__aeabi_ui2d>
 80037a6:	0002      	movs	r2, r0
 80037a8:	000b      	movs	r3, r1
 80037aa:	2108      	movs	r1, #8
 80037ac:	1869      	adds	r1, r5, r1
 80037ae:	19c9      	adds	r1, r1, r7
 80037b0:	6808      	ldr	r0, [r1, #0]
 80037b2:	6849      	ldr	r1, [r1, #4]
 80037b4:	f7fd f98c 	bl	8000ad0 <__aeabi_ddiv>
 80037b8:	0002      	movs	r2, r0
 80037ba:	000b      	movs	r3, r1
 80037bc:	0014      	movs	r4, r2
 80037be:	001d      	movs	r5, r3
 80037c0:	23e8      	movs	r3, #232	; 0xe8
 80037c2:	2208      	movs	r2, #8
 80037c4:	189b      	adds	r3, r3, r2
 80037c6:	19db      	adds	r3, r3, r7
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	f7fe faab 	bl	8001d24 <__aeabi_ui2d>
 80037ce:	0002      	movs	r2, r0
 80037d0:	000b      	movs	r3, r1
 80037d2:	0020      	movs	r0, r4
 80037d4:	0029      	movs	r1, r5
 80037d6:	f7fd fc71 	bl	80010bc <__aeabi_dmul>
 80037da:	0002      	movs	r2, r0
 80037dc:	000b      	movs	r3, r1
 80037de:	0010      	movs	r0, r2
 80037e0:	0019      	movs	r1, r3
 80037e2:	f7fc fd39 	bl	8000258 <__aeabi_d2uiz>
 80037e6:	0002      	movs	r2, r0
 80037e8:	2308      	movs	r3, #8
 80037ea:	18f3      	adds	r3, r6, r3
 80037ec:	19db      	adds	r3, r3, r7
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	615a      	str	r2, [r3, #20]
 80037f2:	e167      	b.n	8003ac4 <max2871CalculateRegister0Values+0xb1c>
 80037f4:	165a0bbf 	.word	0x165a0bbf
 80037f8:	0b2d05df 	.word	0x0b2d05df
 80037fc:	059682ef 	.word	0x059682ef
	} else if ((ppl->FreqOut < 93750000) && (ppl->FreqOut >= 46875000)) {
 8003800:	23dc      	movs	r3, #220	; 0xdc
 8003802:	2208      	movs	r2, #8
 8003804:	189b      	adds	r3, r3, r2
 8003806:	19db      	adds	r3, r3, r7
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d000      	beq.n	8003814 <max2871CalculateRegister0Values+0x86c>
 8003812:	e0b5      	b.n	8003980 <max2871CalculateRegister0Values+0x9d8>
 8003814:	d103      	bne.n	800381e <max2871CalculateRegister0Values+0x876>
 8003816:	49ad      	ldr	r1, [pc, #692]	; (8003acc <max2871CalculateRegister0Values+0xb24>)
 8003818:	428a      	cmp	r2, r1
 800381a:	d900      	bls.n	800381e <max2871CalculateRegister0Values+0x876>
 800381c:	e0b0      	b.n	8003980 <max2871CalculateRegister0Values+0x9d8>
 800381e:	23dc      	movs	r3, #220	; 0xdc
 8003820:	2208      	movs	r2, #8
 8003822:	189b      	adds	r3, r3, r2
 8003824:	19db      	adds	r3, r3, r7
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <max2871CalculateRegister0Values+0x894>
 8003830:	d000      	beq.n	8003834 <max2871CalculateRegister0Values+0x88c>
 8003832:	e0a5      	b.n	8003980 <max2871CalculateRegister0Values+0x9d8>
 8003834:	49a6      	ldr	r1, [pc, #664]	; (8003ad0 <max2871CalculateRegister0Values+0xb28>)
 8003836:	428a      	cmp	r2, r1
 8003838:	d800      	bhi.n	800383c <max2871CalculateRegister0Values+0x894>
 800383a:	e0a1      	b.n	8003980 <max2871CalculateRegister0Values+0x9d8>
		ppl->DIVA = 6;
 800383c:	26dc      	movs	r6, #220	; 0xdc
 800383e:	2308      	movs	r3, #8
 8003840:	18f3      	adds	r3, r6, r3
 8003842:	19db      	adds	r3, r3, r7
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2206      	movs	r2, #6
 8003848:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 64 / FreqRef;
 800384a:	2308      	movs	r3, #8
 800384c:	18f3      	adds	r3, r6, r3
 800384e:	19db      	adds	r3, r3, r7
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	0e91      	lsrs	r1, r2, #26
 8003858:	0198      	lsls	r0, r3, #6
 800385a:	249c      	movs	r4, #156	; 0x9c
 800385c:	2508      	movs	r5, #8
 800385e:	1965      	adds	r5, r4, r5
 8003860:	19ed      	adds	r5, r5, r7
 8003862:	6028      	str	r0, [r5, #0]
 8003864:	2008      	movs	r0, #8
 8003866:	1820      	adds	r0, r4, r0
 8003868:	19c0      	adds	r0, r0, r7
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	4308      	orrs	r0, r1
 800386e:	2108      	movs	r1, #8
 8003870:	1861      	adds	r1, r4, r1
 8003872:	19c9      	adds	r1, r1, r7
 8003874:	6008      	str	r0, [r1, #0]
 8003876:	0193      	lsls	r3, r2, #6
 8003878:	2198      	movs	r1, #152	; 0x98
 800387a:	2208      	movs	r2, #8
 800387c:	188a      	adds	r2, r1, r2
 800387e:	19d2      	adds	r2, r2, r7
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	24ec      	movs	r4, #236	; 0xec
 8003884:	2308      	movs	r3, #8
 8003886:	18e3      	adds	r3, r4, r3
 8003888:	19db      	adds	r3, r3, r7
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	2300      	movs	r3, #0
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	2008      	movs	r0, #8
 8003898:	1809      	adds	r1, r1, r0
 800389a:	19c9      	adds	r1, r1, r7
 800389c:	6808      	ldr	r0, [r1, #0]
 800389e:	6849      	ldr	r1, [r1, #4]
 80038a0:	f7fc fcba 	bl	8000218 <__aeabi_uldivmod>
 80038a4:	0002      	movs	r2, r0
 80038a6:	000b      	movs	r3, r1
 80038a8:	2308      	movs	r3, #8
 80038aa:	18f3      	adds	r3, r6, r3
 80038ac:	19db      	adds	r3, r3, r7
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 64 % FreqRef;
 80038b2:	2308      	movs	r3, #8
 80038b4:	18f3      	adds	r3, r6, r3
 80038b6:	19db      	adds	r3, r3, r7
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0e91      	lsrs	r1, r2, #26
 80038c0:	468c      	mov	ip, r1
 80038c2:	0198      	lsls	r0, r3, #6
 80038c4:	2594      	movs	r5, #148	; 0x94
 80038c6:	2108      	movs	r1, #8
 80038c8:	1869      	adds	r1, r5, r1
 80038ca:	19c9      	adds	r1, r1, r7
 80038cc:	6008      	str	r0, [r1, #0]
 80038ce:	2108      	movs	r1, #8
 80038d0:	1869      	adds	r1, r5, r1
 80038d2:	19c8      	adds	r0, r1, r7
 80038d4:	6800      	ldr	r0, [r0, #0]
 80038d6:	4661      	mov	r1, ip
 80038d8:	4308      	orrs	r0, r1
 80038da:	2108      	movs	r1, #8
 80038dc:	1869      	adds	r1, r5, r1
 80038de:	19c9      	adds	r1, r1, r7
 80038e0:	6008      	str	r0, [r1, #0]
 80038e2:	0193      	lsls	r3, r2, #6
 80038e4:	2190      	movs	r1, #144	; 0x90
 80038e6:	2208      	movs	r2, #8
 80038e8:	188a      	adds	r2, r1, r2
 80038ea:	19d2      	adds	r2, r2, r7
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	2308      	movs	r3, #8
 80038f0:	18e3      	adds	r3, r4, r3
 80038f2:	19db      	adds	r3, r3, r7
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2008      	movs	r0, #8
 8003902:	1809      	adds	r1, r1, r0
 8003904:	19c9      	adds	r1, r1, r7
 8003906:	6808      	ldr	r0, [r1, #0]
 8003908:	6849      	ldr	r1, [r1, #4]
 800390a:	f7fc fc85 	bl	8000218 <__aeabi_uldivmod>
 800390e:	0010      	movs	r0, r2
 8003910:	0019      	movs	r1, r3
 8003912:	f7fc fcbf 	bl	8000294 <__aeabi_ul2d>
 8003916:	0002      	movs	r2, r0
 8003918:	000b      	movs	r3, r1
 800391a:	25e0      	movs	r5, #224	; 0xe0
 800391c:	2108      	movs	r1, #8
 800391e:	1869      	adds	r1, r5, r1
 8003920:	19c9      	adds	r1, r1, r7
 8003922:	600a      	str	r2, [r1, #0]
 8003924:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003926:	2308      	movs	r3, #8
 8003928:	18e3      	adds	r3, r4, r3
 800392a:	19db      	adds	r3, r3, r7
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	f7fe f9f9 	bl	8001d24 <__aeabi_ui2d>
 8003932:	0002      	movs	r2, r0
 8003934:	000b      	movs	r3, r1
 8003936:	2108      	movs	r1, #8
 8003938:	1869      	adds	r1, r5, r1
 800393a:	19c9      	adds	r1, r1, r7
 800393c:	6808      	ldr	r0, [r1, #0]
 800393e:	6849      	ldr	r1, [r1, #4]
 8003940:	f7fd f8c6 	bl	8000ad0 <__aeabi_ddiv>
 8003944:	0002      	movs	r2, r0
 8003946:	000b      	movs	r3, r1
 8003948:	0014      	movs	r4, r2
 800394a:	001d      	movs	r5, r3
 800394c:	23e8      	movs	r3, #232	; 0xe8
 800394e:	2208      	movs	r2, #8
 8003950:	189b      	adds	r3, r3, r2
 8003952:	19db      	adds	r3, r3, r7
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	f7fe f9e5 	bl	8001d24 <__aeabi_ui2d>
 800395a:	0002      	movs	r2, r0
 800395c:	000b      	movs	r3, r1
 800395e:	0020      	movs	r0, r4
 8003960:	0029      	movs	r1, r5
 8003962:	f7fd fbab 	bl	80010bc <__aeabi_dmul>
 8003966:	0002      	movs	r2, r0
 8003968:	000b      	movs	r3, r1
 800396a:	0010      	movs	r0, r2
 800396c:	0019      	movs	r1, r3
 800396e:	f7fc fc73 	bl	8000258 <__aeabi_d2uiz>
 8003972:	0002      	movs	r2, r0
 8003974:	2308      	movs	r3, #8
 8003976:	18f3      	adds	r3, r6, r3
 8003978:	19db      	adds	r3, r3, r7
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	615a      	str	r2, [r3, #20]
 800397e:	e0a1      	b.n	8003ac4 <max2871CalculateRegister0Values+0xb1c>
		ppl->DIVA = 7;
 8003980:	26dc      	movs	r6, #220	; 0xdc
 8003982:	2308      	movs	r3, #8
 8003984:	18f3      	adds	r3, r6, r3
 8003986:	19db      	adds	r3, r3, r7
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2207      	movs	r2, #7
 800398c:	609a      	str	r2, [r3, #8]
		ppl->register0.NDIV = ppl->FreqOut * 128 / FreqRef;
 800398e:	2308      	movs	r3, #8
 8003990:	18f3      	adds	r3, r6, r3
 8003992:	19db      	adds	r3, r3, r7
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0e51      	lsrs	r1, r2, #25
 800399c:	01d8      	lsls	r0, r3, #7
 800399e:	248c      	movs	r4, #140	; 0x8c
 80039a0:	2508      	movs	r5, #8
 80039a2:	1965      	adds	r5, r4, r5
 80039a4:	19ed      	adds	r5, r5, r7
 80039a6:	6028      	str	r0, [r5, #0]
 80039a8:	2008      	movs	r0, #8
 80039aa:	1820      	adds	r0, r4, r0
 80039ac:	19c0      	adds	r0, r0, r7
 80039ae:	6800      	ldr	r0, [r0, #0]
 80039b0:	4308      	orrs	r0, r1
 80039b2:	2108      	movs	r1, #8
 80039b4:	1861      	adds	r1, r4, r1
 80039b6:	19c9      	adds	r1, r1, r7
 80039b8:	6008      	str	r0, [r1, #0]
 80039ba:	01d3      	lsls	r3, r2, #7
 80039bc:	2188      	movs	r1, #136	; 0x88
 80039be:	2208      	movs	r2, #8
 80039c0:	188a      	adds	r2, r1, r2
 80039c2:	19d2      	adds	r2, r2, r7
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	24ec      	movs	r4, #236	; 0xec
 80039c8:	2308      	movs	r3, #8
 80039ca:	18e3      	adds	r3, r4, r3
 80039cc:	19db      	adds	r3, r3, r7
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2008      	movs	r0, #8
 80039dc:	1809      	adds	r1, r1, r0
 80039de:	19c9      	adds	r1, r1, r7
 80039e0:	6808      	ldr	r0, [r1, #0]
 80039e2:	6849      	ldr	r1, [r1, #4]
 80039e4:	f7fc fc18 	bl	8000218 <__aeabi_uldivmod>
 80039e8:	0002      	movs	r2, r0
 80039ea:	000b      	movs	r3, r1
 80039ec:	2308      	movs	r3, #8
 80039ee:	18f3      	adds	r3, r6, r3
 80039f0:	19db      	adds	r3, r3, r7
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	611a      	str	r2, [r3, #16]
		rest = ppl->FreqOut * 128 % FreqRef;
 80039f6:	2308      	movs	r3, #8
 80039f8:	18f3      	adds	r3, r6, r3
 80039fa:	19db      	adds	r3, r3, r7
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0e51      	lsrs	r1, r2, #25
 8003a04:	468c      	mov	ip, r1
 8003a06:	01d8      	lsls	r0, r3, #7
 8003a08:	2584      	movs	r5, #132	; 0x84
 8003a0a:	2108      	movs	r1, #8
 8003a0c:	1869      	adds	r1, r5, r1
 8003a0e:	19c9      	adds	r1, r1, r7
 8003a10:	6008      	str	r0, [r1, #0]
 8003a12:	2108      	movs	r1, #8
 8003a14:	1869      	adds	r1, r5, r1
 8003a16:	19c8      	adds	r0, r1, r7
 8003a18:	6800      	ldr	r0, [r0, #0]
 8003a1a:	4661      	mov	r1, ip
 8003a1c:	4308      	orrs	r0, r1
 8003a1e:	2108      	movs	r1, #8
 8003a20:	1869      	adds	r1, r5, r1
 8003a22:	19c9      	adds	r1, r1, r7
 8003a24:	6008      	str	r0, [r1, #0]
 8003a26:	01d3      	lsls	r3, r2, #7
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	188a      	adds	r2, r1, r2
 8003a2e:	19d2      	adds	r2, r2, r7
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	2308      	movs	r3, #8
 8003a34:	18e3      	adds	r3, r4, r3
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2008      	movs	r0, #8
 8003a46:	1809      	adds	r1, r1, r0
 8003a48:	19c9      	adds	r1, r1, r7
 8003a4a:	6808      	ldr	r0, [r1, #0]
 8003a4c:	6849      	ldr	r1, [r1, #4]
 8003a4e:	f7fc fbe3 	bl	8000218 <__aeabi_uldivmod>
 8003a52:	0010      	movs	r0, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	f7fc fc1d 	bl	8000294 <__aeabi_ul2d>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	000b      	movs	r3, r1
 8003a5e:	25e0      	movs	r5, #224	; 0xe0
 8003a60:	2108      	movs	r1, #8
 8003a62:	1869      	adds	r1, r5, r1
 8003a64:	19c9      	adds	r1, r1, r7
 8003a66:	600a      	str	r2, [r1, #0]
 8003a68:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	18e3      	adds	r3, r4, r3
 8003a6e:	19db      	adds	r3, r3, r7
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	f7fe f957 	bl	8001d24 <__aeabi_ui2d>
 8003a76:	0002      	movs	r2, r0
 8003a78:	000b      	movs	r3, r1
 8003a7a:	2108      	movs	r1, #8
 8003a7c:	1869      	adds	r1, r5, r1
 8003a7e:	19c9      	adds	r1, r1, r7
 8003a80:	6808      	ldr	r0, [r1, #0]
 8003a82:	6849      	ldr	r1, [r1, #4]
 8003a84:	f7fd f824 	bl	8000ad0 <__aeabi_ddiv>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	000b      	movs	r3, r1
 8003a8c:	0014      	movs	r4, r2
 8003a8e:	001d      	movs	r5, r3
 8003a90:	23e8      	movs	r3, #232	; 0xe8
 8003a92:	2208      	movs	r2, #8
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	19db      	adds	r3, r3, r7
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f7fe f943 	bl	8001d24 <__aeabi_ui2d>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	000b      	movs	r3, r1
 8003aa2:	0020      	movs	r0, r4
 8003aa4:	0029      	movs	r1, r5
 8003aa6:	f7fd fb09 	bl	80010bc <__aeabi_dmul>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	000b      	movs	r3, r1
 8003aae:	0010      	movs	r0, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	f7fc fbd1 	bl	8000258 <__aeabi_d2uiz>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	2308      	movs	r3, #8
 8003aba:	18f3      	adds	r3, r6, r3
 8003abc:	19db      	adds	r3, r3, r7
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	615a      	str	r2, [r3, #20]
}
 8003ac2:	e7ff      	b.n	8003ac4 <max2871CalculateRegister0Values+0xb1c>
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b03f      	add	sp, #252	; 0xfc
 8003aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003acc:	059682ef 	.word	0x059682ef
 8003ad0:	02cb4177 	.word	0x02cb4177

08003ad4 <max2871RegisterInit>:

void max2871RegisterInit(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < 2; i++) {
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e041      	b.n	8003b68 <max2871RegisterInit+0x94>
		max2871Write(hspi2, getRegister5InitValue(ppl));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7ff f9b4 	bl	8002e54 <getRegister5InitValue>
 8003aec:	0002      	movs	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff fa0c 	bl	8002f10 <max2871Write>
		HAL_Delay(20);
 8003af8:	2014      	movs	r0, #20
 8003afa:	f000 fa27 	bl	8003f4c <HAL_Delay>
		max2871Write(hspi2, getRegister4InitValue(ppl));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7ff f91d 	bl	8002d40 <getRegister4InitValue>
 8003b06:	0002      	movs	r2, r0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7ff f9ff 	bl	8002f10 <max2871Write>
        max2871Write(hspi2, getRegister3InitValue(ppl));
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7ff f8cf 	bl	8002cb8 <getRegister3InitValue>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	0011      	movs	r1, r2
 8003b20:	0018      	movs	r0, r3
 8003b22:	f7ff f9f5 	bl	8002f10 <max2871Write>
		max2871Write(hspi2, getRegister2InitValue(ppl));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7ff f856 	bl	8002bda <getRegister2InitValue>
 8003b2e:	0002      	movs	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff f9eb 	bl	8002f10 <max2871Write>
		max2871Write(hspi2, getRegister1InitValue(ppl));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff f822 	bl	8002b86 <getRegister1InitValue>
 8003b42:	0002      	movs	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0011      	movs	r1, r2
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7ff f9e1 	bl	8002f10 <max2871Write>
		max2871Write(hspi2, getRegister0InitValue(ppl));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fe fff6 	bl	8002b42 <getRegister0InitValue>
 8003b56:	0002      	movs	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0011      	movs	r1, r2
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff f9d7 	bl	8002f10 <max2871Write>
	for (int i = 0; i < 2; i++) {
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3301      	adds	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	ddba      	ble.n	8003ae4 <max2871RegisterInit+0x10>
	}
}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <waitForLock>:

void waitForLock() {
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
	GPIO_PinState lock = GPIO_PIN_SET;
 8003b7e:	1dfb      	adds	r3, r7, #7
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
	unsigned long t_ini = HAL_GetTick();
 8003b84:	f000 f9d8 	bl	8003f38 <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	603b      	str	r3, [r7, #0]
	while (lock == GPIO_PIN_SET || (HAL_GetTick() - t_ini < 2000)) {
 8003b8c:	e008      	b.n	8003ba0 <waitForLock+0x28>
		lock = HAL_GPIO_ReadPin(MAX_LOCK_DETECTOR_GPIO_Port,
 8003b8e:	1dfc      	adds	r4, r7, #7
 8003b90:	23a0      	movs	r3, #160	; 0xa0
 8003b92:	05db      	lsls	r3, r3, #23
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 fc14 	bl	80043c4 <HAL_GPIO_ReadPin>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	7023      	strb	r3, [r4, #0]
	while (lock == GPIO_PIN_SET || (HAL_GetTick() - t_ini < 2000)) {
 8003ba0:	1dfb      	adds	r3, r7, #7
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d0f2      	beq.n	8003b8e <waitForLock+0x16>
 8003ba8:	f000 f9c6 	bl	8003f38 <HAL_GetTick>
 8003bac:	0002      	movs	r2, r0
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	1ad2      	subs	r2, r2, r3
 8003bb2:	23fa      	movs	r3, #250	; 0xfa
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3e9      	bcc.n	8003b8e <waitForLock+0x16>
				MAX_LOCK_DETECTOR_Pin);
	}
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b003      	add	sp, #12
 8003bc2:	bd90      	pop	{r4, r7, pc}

08003bc4 <max2871Program>:

void max2871Program(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) // Compose register value of register 0 and 4
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]

	unsigned long composedRegisterValue;
	max2871CalculateRegister0Values(ppl);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff f9e9 	bl	8002fa8 <max2871CalculateRegister0Values>

	composedRegisterValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	07da      	lsls	r2, r3, #31
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	03db      	lsls	r3, r3, #15
 8003be2:	431a      	orrs	r2, r3
			| ppl->register0.FRAC << 3 | ppl->register0.ADDR0;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	431a      	orrs	r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
	composedRegisterValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

	max2871Write(hspi2, composedRegisterValue);
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f7ff f988 	bl	8002f10 <max2871Write>

	waitForLock();
 8003c00:	f7ff ffba 	bl	8003b78 <waitForLock>

	composedRegisterValue = ppl->register4.RES << 29
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	228c      	movs	r2, #140	; 0x8c
 8003c08:	589b      	ldr	r3, [r3, r2]
 8003c0a:	075a      	lsls	r2, r3, #29
			| ppl->register4.SDLDO << 28 | ppl->register4.SDDIV << 27
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2190      	movs	r1, #144	; 0x90
 8003c10:	585b      	ldr	r3, [r3, r1]
 8003c12:	071b      	lsls	r3, r3, #28
 8003c14:	431a      	orrs	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2194      	movs	r1, #148	; 0x94
 8003c1a:	585b      	ldr	r3, [r3, r1]
 8003c1c:	06db      	lsls	r3, r3, #27
 8003c1e:	431a      	orrs	r2, r3
			| ppl->register4.SDREF << 26 | ppl->register4.FB << 23
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2198      	movs	r1, #152	; 0x98
 8003c24:	585b      	ldr	r3, [r3, r1]
 8003c26:	069b      	lsls	r3, r3, #26
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	219c      	movs	r1, #156	; 0x9c
 8003c2e:	585b      	ldr	r3, [r3, r1]
 8003c30:	05db      	lsls	r3, r3, #23
 8003c32:	431a      	orrs	r2, r3
			| ppl->DIVA << 20 | ppl->register4.BS << 12
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	051b      	lsls	r3, r3, #20
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	21a0      	movs	r1, #160	; 0xa0
 8003c40:	585b      	ldr	r3, [r3, r1]
 8003c42:	031b      	lsls	r3, r3, #12
 8003c44:	431a      	orrs	r2, r3
			| ppl->register4.SDVCO << 11 | ppl->register4.MTLD << 10
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	21a4      	movs	r1, #164	; 0xa4
 8003c4a:	585b      	ldr	r3, [r3, r1]
 8003c4c:	02db      	lsls	r3, r3, #11
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	21a8      	movs	r1, #168	; 0xa8
 8003c54:	585b      	ldr	r3, [r3, r1]
 8003c56:	029b      	lsls	r3, r3, #10
 8003c58:	431a      	orrs	r2, r3
			| ppl->register4.BDIV << 9 | ppl->register4.RFB_EN << 8
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	21ac      	movs	r1, #172	; 0xac
 8003c5e:	585b      	ldr	r3, [r3, r1]
 8003c60:	025b      	lsls	r3, r3, #9
 8003c62:	431a      	orrs	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	21b0      	movs	r1, #176	; 0xb0
 8003c68:	585b      	ldr	r3, [r3, r1]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	431a      	orrs	r2, r3
			| ppl->register4.BPWR << 6 | ppl->register4.RFA_EN << 5
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	21b4      	movs	r1, #180	; 0xb4
 8003c72:	585b      	ldr	r3, [r3, r1]
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	431a      	orrs	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	21b8      	movs	r1, #184	; 0xb8
 8003c7c:	585b      	ldr	r3, [r3, r1]
 8003c7e:	015b      	lsls	r3, r3, #5
 8003c80:	431a      	orrs	r2, r3
			| ppl->register4.APWR << 3 | ppl->register4.ADDR4;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	21bc      	movs	r1, #188	; 0xbc
 8003c86:	585b      	ldr	r3, [r3, r1]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	21c0      	movs	r1, #192	; 0xc0
 8003c90:	585b      	ldr	r3, [r3, r1]
	composedRegisterValue = ppl->register4.RES << 29
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

	max2871Write(hspi2, composedRegisterValue);
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff f937 	bl	8002f10 <max2871Write>
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b004      	add	sp, #16
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_MspInit+0x44>)
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <HAL_MspInit+0x44>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_MspInit+0x44>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	607b      	str	r3, [r7, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_MspInit+0x44>)
 8003ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_MspInit+0x44>)
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	0549      	lsls	r1, r1, #21
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_MspInit+0x44>)
 8003cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	055b      	lsls	r3, r3, #21
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	2414      	movs	r4, #20
 8003cfe:	193b      	adds	r3, r7, r4
 8003d00:	0018      	movs	r0, r3
 8003d02:	2314      	movs	r3, #20
 8003d04:	001a      	movs	r2, r3
 8003d06:	2100      	movs	r1, #0
 8003d08:	f001 fc1a 	bl	8005540 <memset>
  if(hspi->Instance==SPI2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <HAL_SPI_MspInit+0xb8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d146      	bne.n	8003da4 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d16:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <HAL_SPI_MspInit+0xbc>)
 8003d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_SPI_MspInit+0xbc>)
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	01c9      	lsls	r1, r1, #7
 8003d20:	430a      	orrs	r2, r1
 8003d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d24:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <HAL_SPI_MspInit+0xbc>)
 8003d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	01db      	lsls	r3, r3, #7
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	4b1f      	ldr	r3, [pc, #124]	; (8003db0 <HAL_SPI_MspInit+0xbc>)
 8003d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_SPI_MspInit+0xbc>)
 8003d38:	2101      	movs	r1, #1
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3e:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <HAL_SPI_MspInit+0xbc>)
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	2201      	movs	r2, #1
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MAX_SCK_Pin;
 8003d4a:	193b      	adds	r3, r7, r4
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	2202      	movs	r2, #2
 8003d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5c:	193b      	adds	r3, r7, r4
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003d62:	193b      	adds	r3, r7, r4
 8003d64:	2200      	movs	r2, #0
 8003d66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_SCK_GPIO_Port, &GPIO_InitStruct);
 8003d68:	193a      	adds	r2, r7, r4
 8003d6a:	23a0      	movs	r3, #160	; 0xa0
 8003d6c:	05db      	lsls	r3, r3, #23
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f9c3 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAX_DATA_Pin;
 8003d76:	0021      	movs	r1, r4
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	2202      	movs	r2, #2
 8003d82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	2201      	movs	r2, #1
 8003d94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_DATA_GPIO_Port, &GPIO_InitStruct);
 8003d96:	187a      	adds	r2, r7, r1
 8003d98:	23a0      	movs	r3, #160	; 0xa0
 8003d9a:	05db      	lsls	r3, r3, #23
 8003d9c:	0011      	movs	r1, r2
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 f9ac 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b00b      	add	sp, #44	; 0x2c
 8003daa:	bd90      	pop	{r4, r7, pc}
 8003dac:	40003800 	.word	0x40003800
 8003db0:	40021000 	.word	0x40021000

08003db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <NMI_Handler+0x4>

08003dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dbe:	e7fe      	b.n	8003dbe <HardFault_Handler+0x4>

08003dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd8:	f000 f89c 	bl	8003f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003dec:	480d      	ldr	r0, [pc, #52]	; (8003e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003dee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003df0:	f7ff fff7 	bl	8003de2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003df4:	480c      	ldr	r0, [pc, #48]	; (8003e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8003df6:	490d      	ldr	r1, [pc, #52]	; (8003e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003df8:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <LoopForever+0xe>)
  movs r3, #0
 8003dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dfc:	e002      	b.n	8003e04 <LoopCopyDataInit>

08003dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e02:	3304      	adds	r3, #4

08003e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e08:	d3f9      	bcc.n	8003dfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e0c:	4c0a      	ldr	r4, [pc, #40]	; (8003e38 <LoopForever+0x16>)
  movs r3, #0
 8003e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e10:	e001      	b.n	8003e16 <LoopFillZerobss>

08003e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e14:	3204      	adds	r2, #4

08003e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e18:	d3fb      	bcc.n	8003e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e1a:	f001 fb6d 	bl	80054f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003e1e:	f7fe fc83 	bl	8002728 <main>

08003e22 <LoopForever>:

LoopForever:
  b LoopForever
 8003e22:	e7fe      	b.n	8003e22 <LoopForever>
  ldr   r0, =_estack
 8003e24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003e30:	08005638 	.word	0x08005638
  ldr r2, =_sbss
 8003e34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003e38:	20000094 	.word	0x20000094

08003e3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e3c:	e7fe      	b.n	8003e3c <ADC1_IRQHandler>
	...

08003e40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e46:	1dfb      	adds	r3, r7, #7
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_Init+0x3c>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_Init+0x3c>)
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	0049      	lsls	r1, r1, #1
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e5a:	2003      	movs	r0, #3
 8003e5c:	f000 f810 	bl	8003e80 <HAL_InitTick>
 8003e60:	1e03      	subs	r3, r0, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003e64:	1dfb      	adds	r3, r7, #7
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e001      	b.n	8003e70 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003e6c:	f7ff ff1e 	bl	8003cac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	781b      	ldrb	r3, [r3, #0]
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40022000 	.word	0x40022000

08003e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e88:	230f      	movs	r3, #15
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003e90:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_InitTick+0x88>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02b      	beq.n	8003ef0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003e98:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <HAL_InitTick+0x8c>)
 8003e9a:	681c      	ldr	r4, [r3, #0]
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_InitTick+0x88>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	23fa      	movs	r3, #250	; 0xfa
 8003ea4:	0098      	lsls	r0, r3, #2
 8003ea6:	f7fc f92b 	bl	8000100 <__udivsi3>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	0019      	movs	r1, r3
 8003eae:	0020      	movs	r0, r4
 8003eb0:	f7fc f926 	bl	8000100 <__udivsi3>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f000 f913 	bl	80040e2 <HAL_SYSTICK_Config>
 8003ebc:	1e03      	subs	r3, r0, #0
 8003ebe:	d112      	bne.n	8003ee6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d80a      	bhi.n	8003edc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	425b      	negs	r3, r3
 8003ecc:	2200      	movs	r2, #0
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 f8f2 	bl	80040b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <HAL_InitTick+0x90>)
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e00d      	b.n	8003ef8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003edc:	230f      	movs	r3, #15
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e008      	b.n	8003ef8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ee6:	230f      	movs	r3, #15
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e003      	b.n	8003ef8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ef0:	230f      	movs	r3, #15
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003ef8:	230f      	movs	r3, #15
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	781b      	ldrb	r3, [r3, #0]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b005      	add	sp, #20
 8003f04:	bd90      	pop	{r4, r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	20000008 	.word	0x20000008
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	20000004 	.word	0x20000004

08003f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_IncTick+0x1c>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_IncTick+0x20>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	18d2      	adds	r2, r2, r3
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_IncTick+0x20>)
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	20000008 	.word	0x20000008
 8003f34:	20000090 	.word	0x20000090

08003f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f3c:	4b02      	ldr	r3, [pc, #8]	; (8003f48 <HAL_GetTick+0x10>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	20000090 	.word	0x20000090

08003f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f54:	f7ff fff0 	bl	8003f38 <HAL_GetTick>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3301      	adds	r3, #1
 8003f64:	d005      	beq.n	8003f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_Delay+0x44>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	189b      	adds	r3, r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	f7ff ffe0 	bl	8003f38 <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d8f7      	bhi.n	8003f74 <HAL_Delay+0x28>
  {
  }
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b004      	add	sp, #16
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	20000008 	.word	0x20000008

08003f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	1dfb      	adds	r3, r7, #7
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8003fa8:	d828      	bhi.n	8003ffc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003faa:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <__NVIC_SetPriority+0xd4>)
 8003fac:	1dfb      	adds	r3, r7, #7
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	33c0      	adds	r3, #192	; 0xc0
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	589b      	ldr	r3, [r3, r2]
 8003fba:	1dfa      	adds	r2, r7, #7
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	00d2      	lsls	r2, r2, #3
 8003fc6:	21ff      	movs	r1, #255	; 0xff
 8003fc8:	4091      	lsls	r1, r2
 8003fca:	000a      	movs	r2, r1
 8003fcc:	43d2      	mvns	r2, r2
 8003fce:	401a      	ands	r2, r3
 8003fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	019b      	lsls	r3, r3, #6
 8003fd6:	22ff      	movs	r2, #255	; 0xff
 8003fd8:	401a      	ands	r2, r3
 8003fda:	1dfb      	adds	r3, r7, #7
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	4003      	ands	r3, r0
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fe8:	481f      	ldr	r0, [pc, #124]	; (8004068 <__NVIC_SetPriority+0xd4>)
 8003fea:	1dfb      	adds	r3, r7, #7
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	33c0      	adds	r3, #192	; 0xc0
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ffa:	e031      	b.n	8004060 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	; (800406c <__NVIC_SetPriority+0xd8>)
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	0019      	movs	r1, r3
 8004004:	230f      	movs	r3, #15
 8004006:	400b      	ands	r3, r1
 8004008:	3b08      	subs	r3, #8
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3306      	adds	r3, #6
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	3304      	adds	r3, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	1dfa      	adds	r2, r7, #7
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	0011      	movs	r1, r2
 800401c:	2203      	movs	r2, #3
 800401e:	400a      	ands	r2, r1
 8004020:	00d2      	lsls	r2, r2, #3
 8004022:	21ff      	movs	r1, #255	; 0xff
 8004024:	4091      	lsls	r1, r2
 8004026:	000a      	movs	r2, r1
 8004028:	43d2      	mvns	r2, r2
 800402a:	401a      	ands	r2, r3
 800402c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	22ff      	movs	r2, #255	; 0xff
 8004034:	401a      	ands	r2, r3
 8004036:	1dfb      	adds	r3, r7, #7
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	0018      	movs	r0, r3
 800403c:	2303      	movs	r3, #3
 800403e:	4003      	ands	r3, r0
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004044:	4809      	ldr	r0, [pc, #36]	; (800406c <__NVIC_SetPriority+0xd8>)
 8004046:	1dfb      	adds	r3, r7, #7
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	001c      	movs	r4, r3
 800404c:	230f      	movs	r3, #15
 800404e:	4023      	ands	r3, r4
 8004050:	3b08      	subs	r3, #8
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	430a      	orrs	r2, r1
 8004056:	3306      	adds	r3, #6
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	18c3      	adds	r3, r0, r3
 800405c:	3304      	adds	r3, #4
 800405e:	601a      	str	r2, [r3, #0]
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b003      	add	sp, #12
 8004066:	bd90      	pop	{r4, r7, pc}
 8004068:	e000e100 	.word	0xe000e100
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1e5a      	subs	r2, r3, #1
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	045b      	lsls	r3, r3, #17
 8004080:	429a      	cmp	r2, r3
 8004082:	d301      	bcc.n	8004088 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004084:	2301      	movs	r3, #1
 8004086:	e010      	b.n	80040aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <SysTick_Config+0x44>)
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	3a01      	subs	r2, #1
 800408e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004090:	2301      	movs	r3, #1
 8004092:	425b      	negs	r3, r3
 8004094:	2103      	movs	r1, #3
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff ff7c 	bl	8003f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <SysTick_Config+0x44>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <SysTick_Config+0x44>)
 80040a4:	2207      	movs	r2, #7
 80040a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b002      	add	sp, #8
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	e000e010 	.word	0xe000e010

080040b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	210f      	movs	r1, #15
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	1c02      	adds	r2, r0, #0
 80040c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	0011      	movs	r1, r2
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff ff5d 	bl	8003f94 <__NVIC_SetPriority>
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7ff ffbf 	bl	8004070 <SysTick_Config>
 80040f2:	0003      	movs	r3, r0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800410a:	e147      	b.n	800439c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4091      	lsls	r1, r2
 8004116:	000a      	movs	r2, r1
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d100      	bne.n	8004124 <HAL_GPIO_Init+0x28>
 8004122:	e138      	b.n	8004396 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2203      	movs	r2, #3
 800412a:	4013      	ands	r3, r2
 800412c:	2b01      	cmp	r3, #1
 800412e:	d005      	beq.n	800413c <HAL_GPIO_Init+0x40>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2203      	movs	r2, #3
 8004136:	4013      	ands	r3, r2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d130      	bne.n	800419e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	409a      	lsls	r2, r3
 800414a:	0013      	movs	r3, r2
 800414c:	43da      	mvns	r2, r3
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4013      	ands	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	409a      	lsls	r2, r3
 800415e:	0013      	movs	r3, r2
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004172:	2201      	movs	r2, #1
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
 8004178:	0013      	movs	r3, r2
 800417a:	43da      	mvns	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	2201      	movs	r2, #1
 800418a:	401a      	ands	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	409a      	lsls	r2, r3
 8004190:	0013      	movs	r3, r2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2203      	movs	r2, #3
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d017      	beq.n	80041da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2203      	movs	r2, #3
 80041b6:	409a      	lsls	r2, r3
 80041b8:	0013      	movs	r3, r2
 80041ba:	43da      	mvns	r2, r3
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	409a      	lsls	r2, r3
 80041cc:	0013      	movs	r3, r2
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2203      	movs	r2, #3
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d123      	bne.n	800422e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	08da      	lsrs	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3208      	adds	r2, #8
 80041ee:	0092      	lsls	r2, r2, #2
 80041f0:	58d3      	ldr	r3, [r2, r3]
 80041f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2207      	movs	r2, #7
 80041f8:	4013      	ands	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	220f      	movs	r2, #15
 80041fe:	409a      	lsls	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	43da      	mvns	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2107      	movs	r1, #7
 8004212:	400b      	ands	r3, r1
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	409a      	lsls	r2, r3
 8004218:	0013      	movs	r3, r2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	08da      	lsrs	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3208      	adds	r2, #8
 8004228:	0092      	lsls	r2, r2, #2
 800422a:	6939      	ldr	r1, [r7, #16]
 800422c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	43da      	mvns	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2203      	movs	r2, #3
 800424c:	401a      	ands	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	409a      	lsls	r2, r3
 8004254:	0013      	movs	r3, r2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	23c0      	movs	r3, #192	; 0xc0
 8004268:	029b      	lsls	r3, r3, #10
 800426a:	4013      	ands	r3, r2
 800426c:	d100      	bne.n	8004270 <HAL_GPIO_Init+0x174>
 800426e:	e092      	b.n	8004396 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004270:	4a50      	ldr	r2, [pc, #320]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	3318      	adds	r3, #24
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	589b      	ldr	r3, [r3, r2]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2203      	movs	r2, #3
 8004282:	4013      	ands	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	220f      	movs	r2, #15
 8004288:	409a      	lsls	r2, r3
 800428a:	0013      	movs	r3, r2
 800428c:	43da      	mvns	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	23a0      	movs	r3, #160	; 0xa0
 8004298:	05db      	lsls	r3, r3, #23
 800429a:	429a      	cmp	r2, r3
 800429c:	d013      	beq.n	80042c6 <HAL_GPIO_Init+0x1ca>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a45      	ldr	r2, [pc, #276]	; (80043b8 <HAL_GPIO_Init+0x2bc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00d      	beq.n	80042c2 <HAL_GPIO_Init+0x1c6>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a44      	ldr	r2, [pc, #272]	; (80043bc <HAL_GPIO_Init+0x2c0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <HAL_GPIO_Init+0x1c2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a43      	ldr	r2, [pc, #268]	; (80043c0 <HAL_GPIO_Init+0x2c4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_GPIO_Init+0x1be>
 80042b6:	2303      	movs	r3, #3
 80042b8:	e006      	b.n	80042c8 <HAL_GPIO_Init+0x1cc>
 80042ba:	2305      	movs	r3, #5
 80042bc:	e004      	b.n	80042c8 <HAL_GPIO_Init+0x1cc>
 80042be:	2302      	movs	r3, #2
 80042c0:	e002      	b.n	80042c8 <HAL_GPIO_Init+0x1cc>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_GPIO_Init+0x1cc>
 80042c6:	2300      	movs	r3, #0
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	2103      	movs	r1, #3
 80042cc:	400a      	ands	r2, r1
 80042ce:	00d2      	lsls	r2, r2, #3
 80042d0:	4093      	lsls	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80042d8:	4936      	ldr	r1, [pc, #216]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	3318      	adds	r3, #24
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042e6:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	43da      	mvns	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4013      	ands	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	035b      	lsls	r3, r3, #13
 80042fe:	4013      	ands	r3, r2
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800430a:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004310:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	43da      	mvns	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	039b      	lsls	r3, r3, #14
 8004328:	4013      	ands	r3, r2
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004334:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 800433c:	2384      	movs	r3, #132	; 0x84
 800433e:	58d3      	ldr	r3, [r2, r3]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	43da      	mvns	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	029b      	lsls	r3, r3, #10
 8004354:	4013      	ands	r3, r2
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004360:	4914      	ldr	r1, [pc, #80]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 8004362:	2284      	movs	r2, #132	; 0x84
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004368:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	58d3      	ldr	r3, [r2, r3]
 800436e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	43da      	mvns	r2, r3
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	025b      	lsls	r3, r3, #9
 8004382:	4013      	ands	r3, r2
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800438e:	4909      	ldr	r1, [pc, #36]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	3301      	adds	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	40da      	lsrs	r2, r3
 80043a4:	1e13      	subs	r3, r2, #0
 80043a6:	d000      	beq.n	80043aa <HAL_GPIO_Init+0x2ae>
 80043a8:	e6b0      	b.n	800410c <HAL_GPIO_Init+0x10>
  }
}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b006      	add	sp, #24
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021800 	.word	0x40021800
 80043b8:	50000400 	.word	0x50000400
 80043bc:	50000800 	.word	0x50000800
 80043c0:	50000c00 	.word	0x50000c00

080043c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	000a      	movs	r2, r1
 80043ce:	1cbb      	adds	r3, r7, #2
 80043d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	1cba      	adds	r2, r7, #2
 80043d8:	8812      	ldrh	r2, [r2, #0]
 80043da:	4013      	ands	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80043de:	230f      	movs	r3, #15
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e003      	b.n	80043f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043e8:	230f      	movs	r3, #15
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80043f0:	230f      	movs	r3, #15
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	781b      	ldrb	r3, [r3, #0]
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b004      	add	sp, #16
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	0008      	movs	r0, r1
 8004408:	0011      	movs	r1, r2
 800440a:	1cbb      	adds	r3, r7, #2
 800440c:	1c02      	adds	r2, r0, #0
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	1c7b      	adds	r3, r7, #1
 8004412:	1c0a      	adds	r2, r1, #0
 8004414:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004416:	1c7b      	adds	r3, r7, #1
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800441e:	1cbb      	adds	r3, r7, #2
 8004420:	881a      	ldrh	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004426:	e003      	b.n	8004430 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004428:	1cbb      	adds	r3, r7, #2
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b002      	add	sp, #8
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004446:	4013      	ands	r3, r2
 8004448:	0019      	movs	r1, r3
 800444a:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	430a      	orrs	r2, r1
 8004450:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d11f      	bne.n	800449c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	0013      	movs	r3, r2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	189b      	adds	r3, r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4912      	ldr	r1, [pc, #72]	; (80044b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800446a:	0018      	movs	r0, r3
 800446c:	f7fb fe48 	bl	8000100 <__udivsi3>
 8004470:	0003      	movs	r3, r0
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004476:	e008      	b.n	800448a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3b01      	subs	r3, #1
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e001      	b.n	800448a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e009      	b.n	800449e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	401a      	ands	r2, r3
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	429a      	cmp	r2, r3
 800449a:	d0ed      	beq.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b004      	add	sp, #16
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	40007000 	.word	0x40007000
 80044ac:	fffff9ff 	.word	0xfffff9ff
 80044b0:	20000000 	.word	0x20000000
 80044b4:	000f4240 	.word	0x000f4240

080044b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e2f3      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	d100      	bne.n	80044d6 <HAL_RCC_OscConfig+0x1e>
 80044d4:	e07c      	b.n	80045d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d6:	4bc3      	ldr	r3, [pc, #780]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2238      	movs	r2, #56	; 0x38
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e0:	4bc0      	ldr	r3, [pc, #768]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2203      	movs	r2, #3
 80044e6:	4013      	ands	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d102      	bne.n	80044f6 <HAL_RCC_OscConfig+0x3e>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d10b      	bne.n	8004514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	4bb9      	ldr	r3, [pc, #740]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	4013      	ands	r3, r2
 8004506:	d062      	beq.n	80045ce <HAL_RCC_OscConfig+0x116>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d15e      	bne.n	80045ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e2ce      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	025b      	lsls	r3, r3, #9
 800451c:	429a      	cmp	r2, r3
 800451e:	d107      	bne.n	8004530 <HAL_RCC_OscConfig+0x78>
 8004520:	4bb0      	ldr	r3, [pc, #704]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4baf      	ldr	r3, [pc, #700]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	0249      	lsls	r1, r1, #9
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e020      	b.n	8004572 <HAL_RCC_OscConfig+0xba>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	23a0      	movs	r3, #160	; 0xa0
 8004536:	02db      	lsls	r3, r3, #11
 8004538:	429a      	cmp	r2, r3
 800453a:	d10e      	bne.n	800455a <HAL_RCC_OscConfig+0xa2>
 800453c:	4ba9      	ldr	r3, [pc, #676]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4ba8      	ldr	r3, [pc, #672]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	02c9      	lsls	r1, r1, #11
 8004546:	430a      	orrs	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	4ba6      	ldr	r3, [pc, #664]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4ba5      	ldr	r3, [pc, #660]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	0249      	lsls	r1, r1, #9
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e00b      	b.n	8004572 <HAL_RCC_OscConfig+0xba>
 800455a:	4ba2      	ldr	r3, [pc, #648]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4ba1      	ldr	r3, [pc, #644]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004560:	49a1      	ldr	r1, [pc, #644]	; (80047e8 <HAL_RCC_OscConfig+0x330>)
 8004562:	400a      	ands	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	4b9f      	ldr	r3, [pc, #636]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b9e      	ldr	r3, [pc, #632]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800456c:	499f      	ldr	r1, [pc, #636]	; (80047ec <HAL_RCC_OscConfig+0x334>)
 800456e:	400a      	ands	r2, r1
 8004570:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d014      	beq.n	80045a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7ff fcdd 	bl	8003f38 <HAL_GetTick>
 800457e:	0003      	movs	r3, r0
 8004580:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7ff fcd8 	bl	8003f38 <HAL_GetTick>
 8004588:	0002      	movs	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e28d      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004596:	4b93      	ldr	r3, [pc, #588]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	029b      	lsls	r3, r3, #10
 800459e:	4013      	ands	r3, r2
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0xcc>
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7ff fcc8 	bl	8003f38 <HAL_GetTick>
 80045a8:	0003      	movs	r3, r0
 80045aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ae:	f7ff fcc3 	bl	8003f38 <HAL_GetTick>
 80045b2:	0002      	movs	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b64      	cmp	r3, #100	; 0x64
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e278      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045c0:	4b88      	ldr	r3, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	029b      	lsls	r3, r3, #10
 80045c8:	4013      	ands	r3, r2
 80045ca:	d1f0      	bne.n	80045ae <HAL_RCC_OscConfig+0xf6>
 80045cc:	e000      	b.n	80045d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2202      	movs	r2, #2
 80045d6:	4013      	ands	r3, r2
 80045d8:	d100      	bne.n	80045dc <HAL_RCC_OscConfig+0x124>
 80045da:	e099      	b.n	8004710 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045dc:	4b81      	ldr	r3, [pc, #516]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2238      	movs	r2, #56	; 0x38
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045e6:	4b7f      	ldr	r3, [pc, #508]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2203      	movs	r2, #3
 80045ec:	4013      	ands	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d102      	bne.n	80045fc <HAL_RCC_OscConfig+0x144>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d002      	beq.n	8004602 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d135      	bne.n	800466e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004602:	4b78      	ldr	r3, [pc, #480]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4013      	ands	r3, r2
 800460c:	d005      	beq.n	800461a <HAL_RCC_OscConfig+0x162>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e24b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4a74      	ldr	r2, [pc, #464]	; (80047f0 <HAL_RCC_OscConfig+0x338>)
 8004620:	4013      	ands	r3, r2
 8004622:	0019      	movs	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	021a      	lsls	r2, r3, #8
 800462a:	4b6e      	ldr	r3, [pc, #440]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d112      	bne.n	800465c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004636:	4b6b      	ldr	r3, [pc, #428]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6e      	ldr	r2, [pc, #440]	; (80047f4 <HAL_RCC_OscConfig+0x33c>)
 800463c:	4013      	ands	r3, r2
 800463e:	0019      	movs	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	4b67      	ldr	r3, [pc, #412]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800464a:	4b66      	ldr	r3, [pc, #408]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0adb      	lsrs	r3, r3, #11
 8004650:	2207      	movs	r2, #7
 8004652:	4013      	ands	r3, r2
 8004654:	4a68      	ldr	r2, [pc, #416]	; (80047f8 <HAL_RCC_OscConfig+0x340>)
 8004656:	40da      	lsrs	r2, r3
 8004658:	4b68      	ldr	r3, [pc, #416]	; (80047fc <HAL_RCC_OscConfig+0x344>)
 800465a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCC_OscConfig+0x348>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	0018      	movs	r0, r3
 8004662:	f7ff fc0d 	bl	8003e80 <HAL_InitTick>
 8004666:	1e03      	subs	r3, r0, #0
 8004668:	d051      	beq.n	800470e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e221      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d030      	beq.n	80046d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004676:	4b5b      	ldr	r3, [pc, #364]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5e      	ldr	r2, [pc, #376]	; (80047f4 <HAL_RCC_OscConfig+0x33c>)
 800467c:	4013      	ands	r3, r2
 800467e:	0019      	movs	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800468a:	4b56      	ldr	r3, [pc, #344]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b55      	ldr	r3, [pc, #340]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	0049      	lsls	r1, r1, #1
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7ff fc4e 	bl	8003f38 <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a2:	f7ff fc49 	bl	8003f38 <HAL_GetTick>
 80046a6:	0002      	movs	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e1fe      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b4:	4b4b      	ldr	r3, [pc, #300]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4013      	ands	r3, r2
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c0:	4b48      	ldr	r3, [pc, #288]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a4a      	ldr	r2, [pc, #296]	; (80047f0 <HAL_RCC_OscConfig+0x338>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	4b44      	ldr	r3, [pc, #272]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	e01b      	b.n	8004710 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80046d8:	4b42      	ldr	r3, [pc, #264]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80046de:	4949      	ldr	r1, [pc, #292]	; (8004804 <HAL_RCC_OscConfig+0x34c>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7ff fc28 	bl	8003f38 <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ee:	f7ff fc23 	bl	8003f38 <HAL_GetTick>
 80046f2:	0002      	movs	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e1d8      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004700:	4b38      	ldr	r3, [pc, #224]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4013      	ands	r3, r2
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x236>
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800470e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	4013      	ands	r3, r2
 8004718:	d047      	beq.n	80047aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800471a:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2238      	movs	r2, #56	; 0x38
 8004720:	4013      	ands	r3, r2
 8004722:	2b18      	cmp	r3, #24
 8004724:	d10a      	bne.n	800473c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004726:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472a:	2202      	movs	r2, #2
 800472c:	4013      	ands	r3, r2
 800472e:	d03c      	beq.n	80047aa <HAL_RCC_OscConfig+0x2f2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d138      	bne.n	80047aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e1ba      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d019      	beq.n	8004778 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 8004746:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004748:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800474a:	2101      	movs	r1, #1
 800474c:	430a      	orrs	r2, r1
 800474e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7ff fbf2 	bl	8003f38 <HAL_GetTick>
 8004754:	0003      	movs	r3, r0
 8004756:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475a:	f7ff fbed 	bl	8003f38 <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e1a2      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476c:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004770:	2202      	movs	r2, #2
 8004772:	4013      	ands	r3, r2
 8004774:	d0f1      	beq.n	800475a <HAL_RCC_OscConfig+0x2a2>
 8004776:	e018      	b.n	80047aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004778:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800477a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 800477e:	2101      	movs	r1, #1
 8004780:	438a      	bics	r2, r1
 8004782:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7ff fbd8 	bl	8003f38 <HAL_GetTick>
 8004788:	0003      	movs	r3, r0
 800478a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478e:	f7ff fbd3 	bl	8003f38 <HAL_GetTick>
 8004792:	0002      	movs	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e188      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	2202      	movs	r2, #2
 80047a6:	4013      	ands	r3, r2
 80047a8:	d1f1      	bne.n	800478e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2204      	movs	r2, #4
 80047b0:	4013      	ands	r3, r2
 80047b2:	d100      	bne.n	80047b6 <HAL_RCC_OscConfig+0x2fe>
 80047b4:	e0c6      	b.n	8004944 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b6:	231f      	movs	r3, #31
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	2200      	movs	r2, #0
 80047bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2238      	movs	r2, #56	; 0x38
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d11e      	bne.n	8004808 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_OscConfig+0x32c>)
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	2202      	movs	r2, #2
 80047d0:	4013      	ands	r3, r2
 80047d2:	d100      	bne.n	80047d6 <HAL_RCC_OscConfig+0x31e>
 80047d4:	e0b6      	b.n	8004944 <HAL_RCC_OscConfig+0x48c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d000      	beq.n	80047e0 <HAL_RCC_OscConfig+0x328>
 80047de:	e0b1      	b.n	8004944 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e166      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
 80047e4:	40021000 	.word	0x40021000
 80047e8:	fffeffff 	.word	0xfffeffff
 80047ec:	fffbffff 	.word	0xfffbffff
 80047f0:	ffff80ff 	.word	0xffff80ff
 80047f4:	ffffc7ff 	.word	0xffffc7ff
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	20000000 	.word	0x20000000
 8004800:	20000004 	.word	0x20000004
 8004804:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004808:	4bac      	ldr	r3, [pc, #688]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 800480a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	055b      	lsls	r3, r3, #21
 8004810:	4013      	ands	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_RCC_OscConfig+0x360>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x362>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d011      	beq.n	8004842 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800481e:	4ba7      	ldr	r3, [pc, #668]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004822:	4ba6      	ldr	r3, [pc, #664]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	0549      	lsls	r1, r1, #21
 8004828:	430a      	orrs	r2, r1
 800482a:	63da      	str	r2, [r3, #60]	; 0x3c
 800482c:	4ba3      	ldr	r3, [pc, #652]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 800482e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	055b      	lsls	r3, r3, #21
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800483a:	231f      	movs	r3, #31
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	2201      	movs	r2, #1
 8004840:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004842:	4b9f      	ldr	r3, [pc, #636]	; (8004ac0 <HAL_RCC_OscConfig+0x608>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4013      	ands	r3, r2
 800484c:	d11a      	bne.n	8004884 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800484e:	4b9c      	ldr	r3, [pc, #624]	; (8004ac0 <HAL_RCC_OscConfig+0x608>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b9b      	ldr	r3, [pc, #620]	; (8004ac0 <HAL_RCC_OscConfig+0x608>)
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	0049      	lsls	r1, r1, #1
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800485c:	f7ff fb6c 	bl	8003f38 <HAL_GetTick>
 8004860:	0003      	movs	r3, r0
 8004862:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7ff fb67 	bl	8003f38 <HAL_GetTick>
 800486a:	0002      	movs	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e11c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004878:	4b91      	ldr	r3, [pc, #580]	; (8004ac0 <HAL_RCC_OscConfig+0x608>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4013      	ands	r3, r2
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0x3e2>
 800488c:	4b8b      	ldr	r3, [pc, #556]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 800488e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004890:	4b8a      	ldr	r3, [pc, #552]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004892:	2101      	movs	r1, #1
 8004894:	430a      	orrs	r2, r1
 8004896:	65da      	str	r2, [r3, #92]	; 0x5c
 8004898:	e01c      	b.n	80048d4 <HAL_RCC_OscConfig+0x41c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x404>
 80048a2:	4b86      	ldr	r3, [pc, #536]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048a6:	4b85      	ldr	r3, [pc, #532]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048a8:	2104      	movs	r1, #4
 80048aa:	430a      	orrs	r2, r1
 80048ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80048ae:	4b83      	ldr	r3, [pc, #524]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048b2:	4b82      	ldr	r3, [pc, #520]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048b4:	2101      	movs	r1, #1
 80048b6:	430a      	orrs	r2, r1
 80048b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0x41c>
 80048bc:	4b7f      	ldr	r3, [pc, #508]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048c0:	4b7e      	ldr	r3, [pc, #504]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	438a      	bics	r2, r1
 80048c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80048c8:	4b7c      	ldr	r3, [pc, #496]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048cc:	4b7b      	ldr	r3, [pc, #492]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048ce:	2104      	movs	r1, #4
 80048d0:	438a      	bics	r2, r1
 80048d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d014      	beq.n	8004906 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7ff fb2c 	bl	8003f38 <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e4:	e009      	b.n	80048fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7ff fb27 	bl	8003f38 <HAL_GetTick>
 80048ea:	0002      	movs	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	4a74      	ldr	r2, [pc, #464]	; (8004ac4 <HAL_RCC_OscConfig+0x60c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0db      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fa:	4b70      	ldr	r3, [pc, #448]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	2202      	movs	r2, #2
 8004900:	4013      	ands	r3, r2
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x42e>
 8004904:	e013      	b.n	800492e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7ff fb17 	bl	8003f38 <HAL_GetTick>
 800490a:	0003      	movs	r3, r0
 800490c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490e:	e009      	b.n	8004924 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7ff fb12 	bl	8003f38 <HAL_GetTick>
 8004914:	0002      	movs	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	4a6a      	ldr	r2, [pc, #424]	; (8004ac4 <HAL_RCC_OscConfig+0x60c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e0c6      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004924:	4b65      	ldr	r3, [pc, #404]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	2202      	movs	r2, #2
 800492a:	4013      	ands	r3, r2
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800492e:	231f      	movs	r3, #31
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b60      	ldr	r3, [pc, #384]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 800493a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800493c:	4b5f      	ldr	r3, [pc, #380]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 800493e:	4962      	ldr	r1, [pc, #392]	; (8004ac8 <HAL_RCC_OscConfig+0x610>)
 8004940:	400a      	ands	r2, r1
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d100      	bne.n	800494e <HAL_RCC_OscConfig+0x496>
 800494c:	e0b0      	b.n	8004ab0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800494e:	4b5b      	ldr	r3, [pc, #364]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2238      	movs	r2, #56	; 0x38
 8004954:	4013      	ands	r3, r2
 8004956:	2b10      	cmp	r3, #16
 8004958:	d100      	bne.n	800495c <HAL_RCC_OscConfig+0x4a4>
 800495a:	e078      	b.n	8004a4e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d153      	bne.n	8004a0c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004964:	4b55      	ldr	r3, [pc, #340]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b54      	ldr	r3, [pc, #336]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 800496a:	4958      	ldr	r1, [pc, #352]	; (8004acc <HAL_RCC_OscConfig+0x614>)
 800496c:	400a      	ands	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7ff fae2 	bl	8003f38 <HAL_GetTick>
 8004974:	0003      	movs	r3, r0
 8004976:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497a:	f7ff fadd 	bl	8003f38 <HAL_GetTick>
 800497e:	0002      	movs	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e092      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498c:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	049b      	lsls	r3, r3, #18
 8004994:	4013      	ands	r3, r2
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004998:	4b48      	ldr	r3, [pc, #288]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a4c      	ldr	r2, [pc, #304]	; (8004ad0 <HAL_RCC_OscConfig+0x618>)
 800499e:	4013      	ands	r3, r2
 80049a0:	0019      	movs	r1, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1a      	ldr	r2, [r3, #32]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	431a      	orrs	r2, r3
 80049c0:	4b3e      	ldr	r3, [pc, #248]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80049c2:	430a      	orrs	r2, r1
 80049c4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c6:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b3c      	ldr	r3, [pc, #240]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	0449      	lsls	r1, r1, #17
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80049d4:	4b39      	ldr	r3, [pc, #228]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	4b38      	ldr	r3, [pc, #224]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 80049da:	2180      	movs	r1, #128	; 0x80
 80049dc:	0549      	lsls	r1, r1, #21
 80049de:	430a      	orrs	r2, r1
 80049e0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7ff faa9 	bl	8003f38 <HAL_GetTick>
 80049e6:	0003      	movs	r3, r0
 80049e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7ff faa4 	bl	8003f38 <HAL_GetTick>
 80049f0:	0002      	movs	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e059      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	049b      	lsls	r3, r3, #18
 8004a06:	4013      	ands	r3, r2
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x534>
 8004a0a:	e051      	b.n	8004ab0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004a12:	492e      	ldr	r1, [pc, #184]	; (8004acc <HAL_RCC_OscConfig+0x614>)
 8004a14:	400a      	ands	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7ff fa8e 	bl	8003f38 <HAL_GetTick>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a22:	f7ff fa89 	bl	8003f38 <HAL_GetTick>
 8004a26:	0002      	movs	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e03e      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a34:	4b21      	ldr	r3, [pc, #132]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	049b      	lsls	r3, r3, #18
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004a46:	4923      	ldr	r1, [pc, #140]	; (8004ad4 <HAL_RCC_OscConfig+0x61c>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]
 8004a4c:	e030      	b.n	8004ab0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e02b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <HAL_RCC_OscConfig+0x604>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2203      	movs	r2, #3
 8004a64:	401a      	ands	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d11e      	bne.n	8004aac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2270      	movs	r2, #112	; 0x70
 8004a72:	401a      	ands	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d117      	bne.n	8004aac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	23fe      	movs	r3, #254	; 0xfe
 8004a80:	01db      	lsls	r3, r3, #7
 8004a82:	401a      	ands	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d10e      	bne.n	8004aac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	23f8      	movs	r3, #248	; 0xf8
 8004a92:	039b      	lsls	r3, r3, #14
 8004a94:	401a      	ands	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	0f5b      	lsrs	r3, r3, #29
 8004aa2:	075a      	lsls	r2, r3, #29
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b008      	add	sp, #32
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	00001388 	.word	0x00001388
 8004ac8:	efffffff 	.word	0xefffffff
 8004acc:	feffffff 	.word	0xfeffffff
 8004ad0:	1fc1808c 	.word	0x1fc1808c
 8004ad4:	effefffc 	.word	0xeffefffc

08004ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0e9      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aec:	4b76      	ldr	r3, [pc, #472]	; (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2207      	movs	r2, #7
 8004af2:	4013      	ands	r3, r2
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d91e      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b73      	ldr	r3, [pc, #460]	; (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2207      	movs	r2, #7
 8004b00:	4393      	bics	r3, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	4b70      	ldr	r3, [pc, #448]	; (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b0c:	f7ff fa14 	bl	8003f38 <HAL_GetTick>
 8004b10:	0003      	movs	r3, r0
 8004b12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b14:	e009      	b.n	8004b2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b16:	f7ff fa0f 	bl	8003f38 <HAL_GetTick>
 8004b1a:	0002      	movs	r2, r0
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	4a6a      	ldr	r2, [pc, #424]	; (8004ccc <HAL_RCC_ClockConfig+0x1f4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e0ca      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b2a:	4b67      	ldr	r3, [pc, #412]	; (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2207      	movs	r2, #7
 8004b30:	4013      	ands	r3, r2
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1ee      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d015      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2204      	movs	r2, #4
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d006      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b4c:	4b60      	ldr	r3, [pc, #384]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	4b5f      	ldr	r3, [pc, #380]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b52:	21e0      	movs	r1, #224	; 0xe0
 8004b54:	01c9      	lsls	r1, r1, #7
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b5a:	4b5d      	ldr	r3, [pc, #372]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	4a5d      	ldr	r2, [pc, #372]	; (8004cd4 <HAL_RCC_ClockConfig+0x1fc>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	4b59      	ldr	r3, [pc, #356]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	4013      	ands	r3, r2
 8004b76:	d057      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b80:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	029b      	lsls	r3, r3, #10
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d12b      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e097      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b98:	4b4d      	ldr	r3, [pc, #308]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	049b      	lsls	r3, r3, #18
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d11f      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e08b      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb0:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d113      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e07f      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d106      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bc8:	4b41      	ldr	r3, [pc, #260]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bcc:	2202      	movs	r2, #2
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d108      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e074      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd6:	4b3e      	ldr	r3, [pc, #248]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2202      	movs	r2, #2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e06d      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be4:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2207      	movs	r2, #7
 8004bea:	4393      	bics	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf8:	f7ff f99e 	bl	8003f38 <HAL_GetTick>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c00:	e009      	b.n	8004c16 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c02:	f7ff f999 	bl	8003f38 <HAL_GetTick>
 8004c06:	0002      	movs	r2, r0
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	4a2f      	ldr	r2, [pc, #188]	; (8004ccc <HAL_RCC_ClockConfig+0x1f4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e054      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2238      	movs	r2, #56	; 0x38
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d1ec      	bne.n	8004c02 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c28:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2207      	movs	r2, #7
 8004c2e:	4013      	ands	r3, r2
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d21e      	bcs.n	8004c74 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2207      	movs	r2, #7
 8004c3c:	4393      	bics	r3, r2
 8004c3e:	0019      	movs	r1, r3
 8004c40:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c48:	f7ff f976 	bl	8003f38 <HAL_GetTick>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c50:	e009      	b.n	8004c66 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c52:	f7ff f971 	bl	8003f38 <HAL_GetTick>
 8004c56:	0002      	movs	r2, r0
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <HAL_RCC_ClockConfig+0x1f4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e02c      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c66:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2207      	movs	r2, #7
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1ee      	bne.n	8004c52 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2204      	movs	r2, #4
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7e:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <HAL_RCC_ClockConfig+0x200>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c92:	f000 f829 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004c96:	0001      	movs	r1, r0
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	220f      	movs	r2, #15
 8004ca0:	401a      	ands	r2, r3
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <HAL_RCC_ClockConfig+0x204>)
 8004ca4:	0092      	lsls	r2, r2, #2
 8004ca6:	58d3      	ldr	r3, [r2, r3]
 8004ca8:	221f      	movs	r2, #31
 8004caa:	4013      	ands	r3, r2
 8004cac:	000a      	movs	r2, r1
 8004cae:	40da      	lsrs	r2, r3
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCC_ClockConfig+0x208>)
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCC_ClockConfig+0x20c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7ff f8e1 	bl	8003e80 <HAL_InitTick>
 8004cbe:	0003      	movs	r3, r0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	00001388 	.word	0x00001388
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	fffff0ff 	.word	0xfffff0ff
 8004cd8:	ffff8fff 	.word	0xffff8fff
 8004cdc:	080055e8 	.word	0x080055e8
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	20000004 	.word	0x20000004

08004ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cee:	4b3c      	ldr	r3, [pc, #240]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2238      	movs	r2, #56	; 0x38
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d10f      	bne.n	8004d18 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004cf8:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	0adb      	lsrs	r3, r3, #11
 8004cfe:	2207      	movs	r2, #7
 8004d00:	4013      	ands	r3, r2
 8004d02:	2201      	movs	r2, #1
 8004d04:	409a      	lsls	r2, r3
 8004d06:	0013      	movs	r3, r2
 8004d08:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	4835      	ldr	r0, [pc, #212]	; (8004de4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d0e:	f7fb f9f7 	bl	8000100 <__udivsi3>
 8004d12:	0003      	movs	r3, r0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e05d      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d18:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2238      	movs	r2, #56	; 0x38
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d102      	bne.n	8004d2a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d24:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	e054      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2238      	movs	r2, #56	; 0x38
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b10      	cmp	r3, #16
 8004d34:	d138      	bne.n	8004da8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d40:	4b27      	ldr	r3, [pc, #156]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	2207      	movs	r2, #7
 8004d48:	4013      	ands	r3, r2
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d10d      	bne.n	8004d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4824      	ldr	r0, [pc, #144]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d58:	f7fb f9d2 	bl	8000100 <__udivsi3>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	0019      	movs	r1, r3
 8004d60:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	0a1b      	lsrs	r3, r3, #8
 8004d66:	227f      	movs	r2, #127	; 0x7f
 8004d68:	4013      	ands	r3, r2
 8004d6a:	434b      	muls	r3, r1
 8004d6c:	617b      	str	r3, [r7, #20]
        break;
 8004d6e:	e00d      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	481c      	ldr	r0, [pc, #112]	; (8004de4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d74:	f7fb f9c4 	bl	8000100 <__udivsi3>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	0019      	movs	r1, r3
 8004d7c:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	0a1b      	lsrs	r3, r3, #8
 8004d82:	227f      	movs	r2, #127	; 0x7f
 8004d84:	4013      	ands	r3, r2
 8004d86:	434b      	muls	r3, r1
 8004d88:	617b      	str	r3, [r7, #20]
        break;
 8004d8a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004d8c:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	0f5b      	lsrs	r3, r3, #29
 8004d92:	2207      	movs	r2, #7
 8004d94:	4013      	ands	r3, r2
 8004d96:	3301      	adds	r3, #1
 8004d98:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	6978      	ldr	r0, [r7, #20]
 8004d9e:	f7fb f9af 	bl	8000100 <__udivsi3>
 8004da2:	0003      	movs	r3, r0
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	e015      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004da8:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2238      	movs	r2, #56	; 0x38
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d103      	bne.n	8004dbc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2238      	movs	r2, #56	; 0x38
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b18      	cmp	r3, #24
 8004dc6:	d103      	bne.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004dc8:	23fa      	movs	r3, #250	; 0xfa
 8004dca:	01db      	lsls	r3, r3, #7
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e001      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004dd4:	693b      	ldr	r3, [r7, #16]
}
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b006      	add	sp, #24
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	40021000 	.word	0x40021000
 8004de4:	00f42400 	.word	0x00f42400
 8004de8:	007a1200 	.word	0x007a1200

08004dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0a8      	b.n	8004f50 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	2382      	movs	r3, #130	; 0x82
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d009      	beq.n	8004e26 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	61da      	str	r2, [r3, #28]
 8004e18:	e005      	b.n	8004e26 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	225d      	movs	r2, #93	; 0x5d
 8004e30:	5c9b      	ldrb	r3, [r3, r2]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	225c      	movs	r2, #92	; 0x5c
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7fe ff56 	bl	8003cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	225d      	movs	r2, #93	; 0x5d
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2140      	movs	r1, #64	; 0x40
 8004e5c:	438a      	bics	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	23e0      	movs	r3, #224	; 0xe0
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d902      	bls.n	8004e72 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e002      	b.n	8004e78 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	015b      	lsls	r3, r3, #5
 8004e76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	23f0      	movs	r3, #240	; 0xf0
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d008      	beq.n	8004e96 <HAL_SPI_Init+0xaa>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	23e0      	movs	r3, #224	; 0xe0
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d002      	beq.n	8004e96 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	2382      	movs	r3, #130	; 0x82
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6899      	ldr	r1, [r3, #8]
 8004ea4:	2384      	movs	r3, #132	; 0x84
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	400b      	ands	r3, r1
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	400b      	ands	r3, r1
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6999      	ldr	r1, [r3, #24]
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	400b      	ands	r3, r1
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	2138      	movs	r1, #56	; 0x38
 8004ed2:	400b      	ands	r3, r1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	2180      	movs	r1, #128	; 0x80
 8004edc:	400b      	ands	r3, r1
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	0011      	movs	r1, r2
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	401a      	ands	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	2204      	movs	r2, #4
 8004efc:	401a      	ands	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	2110      	movs	r1, #16
 8004f04:	400b      	ands	r3, r1
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0c:	2108      	movs	r1, #8
 8004f0e:	400b      	ands	r3, r1
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68d9      	ldr	r1, [r3, #12]
 8004f16:	23f0      	movs	r3, #240	; 0xf0
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	0011      	movs	r1, r2
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	015b      	lsls	r3, r3, #5
 8004f26:	401a      	ands	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4907      	ldr	r1, [pc, #28]	; (8004f58 <HAL_SPI_Init+0x16c>)
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	225d      	movs	r2, #93	; 0x5d
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	0018      	movs	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b004      	add	sp, #16
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	fffff7ff 	.word	0xfffff7ff

08004f5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	1dbb      	adds	r3, r7, #6
 8004f6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f6c:	231f      	movs	r3, #31
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	225c      	movs	r2, #92	; 0x5c
 8004f78:	5c9b      	ldrb	r3, [r3, r2]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_Transmit+0x26>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e140      	b.n	8005204 <HAL_SPI_Transmit+0x2a8>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	225c      	movs	r2, #92	; 0x5c
 8004f86:	2101      	movs	r1, #1
 8004f88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f8a:	f7fe ffd5 	bl	8003f38 <HAL_GetTick>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f92:	2316      	movs	r3, #22
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	1dba      	adds	r2, r7, #6
 8004f98:	8812      	ldrh	r2, [r2, #0]
 8004f9a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	225d      	movs	r2, #93	; 0x5d
 8004fa0:	5c9b      	ldrb	r3, [r3, r2]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d004      	beq.n	8004fb2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004fa8:	231f      	movs	r3, #31
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	2202      	movs	r2, #2
 8004fae:	701a      	strb	r2, [r3, #0]
    goto error;
 8004fb0:	e11d      	b.n	80051ee <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_SPI_Transmit+0x64>
 8004fb8:	1dbb      	adds	r3, r7, #6
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004fc0:	231f      	movs	r3, #31
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
    goto error;
 8004fc8:	e111      	b.n	80051ee <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	225d      	movs	r2, #93	; 0x5d
 8004fce:	2103      	movs	r1, #3
 8004fd0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1dba      	adds	r2, r7, #6
 8004fe2:	8812      	ldrh	r2, [r2, #0]
 8004fe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1dba      	adds	r2, r7, #6
 8004fea:	8812      	ldrh	r2, [r2, #0]
 8004fec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2244      	movs	r2, #68	; 0x44
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2246      	movs	r2, #70	; 0x46
 8005000:	2100      	movs	r1, #0
 8005002:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	429a      	cmp	r2, r3
 800501a:	d110      	bne.n	800503e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2140      	movs	r1, #64	; 0x40
 8005028:	438a      	bics	r2, r1
 800502a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	01c9      	lsls	r1, r1, #7
 800503a:	430a      	orrs	r2, r1
 800503c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2240      	movs	r2, #64	; 0x40
 8005046:	4013      	ands	r3, r2
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d007      	beq.n	800505c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2140      	movs	r1, #64	; 0x40
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	23e0      	movs	r3, #224	; 0xe0
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	429a      	cmp	r2, r3
 8005066:	d94e      	bls.n	8005106 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <HAL_SPI_Transmit+0x11e>
 8005070:	2316      	movs	r3, #22
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d13f      	bne.n	80050fa <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	881a      	ldrh	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	1c9a      	adds	r2, r3, #2
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800509e:	e02c      	b.n	80050fa <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2202      	movs	r2, #2
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d112      	bne.n	80050d4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	881a      	ldrh	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	1c9a      	adds	r2, r3, #2
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050d2:	e012      	b.n	80050fa <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d4:	f7fe ff30 	bl	8003f38 <HAL_GetTick>
 80050d8:	0002      	movs	r2, r0
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d802      	bhi.n	80050ea <HAL_SPI_Transmit+0x18e>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	3301      	adds	r3, #1
 80050e8:	d102      	bne.n	80050f0 <HAL_SPI_Transmit+0x194>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80050f0:	231f      	movs	r3, #31
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	2203      	movs	r2, #3
 80050f6:	701a      	strb	r2, [r3, #0]
          goto error;
 80050f8:	e079      	b.n	80051ee <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1cd      	bne.n	80050a0 <HAL_SPI_Transmit+0x144>
 8005104:	e04f      	b.n	80051a6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <HAL_SPI_Transmit+0x1bc>
 800510e:	2316      	movs	r3, #22
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d141      	bne.n	800519c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	7812      	ldrb	r2, [r2, #0]
 8005124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800513e:	e02d      	b.n	800519c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2202      	movs	r2, #2
 8005148:	4013      	ands	r3, r2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d113      	bne.n	8005176 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	7812      	ldrb	r2, [r2, #0]
 800515a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005174:	e012      	b.n	800519c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005176:	f7fe fedf 	bl	8003f38 <HAL_GetTick>
 800517a:	0002      	movs	r2, r0
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d802      	bhi.n	800518c <HAL_SPI_Transmit+0x230>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	d102      	bne.n	8005192 <HAL_SPI_Transmit+0x236>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005192:	231f      	movs	r3, #31
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	2203      	movs	r2, #3
 8005198:	701a      	strb	r2, [r3, #0]
          goto error;
 800519a:	e028      	b.n	80051ee <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1cc      	bne.n	8005140 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 f95d 	bl	800546c <SPI_EndRxTxTransaction>
 80051b2:	1e03      	subs	r3, r0, #0
 80051b4:	d002      	beq.n	80051bc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80051e2:	231f      	movs	r3, #31
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e000      	b.n	80051ee <HAL_SPI_Transmit+0x292>
  }

error:
 80051ec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	225d      	movs	r2, #93	; 0x5d
 80051f2:	2101      	movs	r1, #1
 80051f4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	225c      	movs	r2, #92	; 0x5c
 80051fa:	2100      	movs	r1, #0
 80051fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80051fe:	231f      	movs	r3, #31
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	781b      	ldrb	r3, [r3, #0]
}
 8005204:	0018      	movs	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	b008      	add	sp, #32
 800520a:	bd80      	pop	{r7, pc}

0800520c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	1dfb      	adds	r3, r7, #7
 800521a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800521c:	f7fe fe8c 	bl	8003f38 <HAL_GetTick>
 8005220:	0002      	movs	r2, r0
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	18d3      	adds	r3, r2, r3
 800522a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800522c:	f7fe fe84 	bl	8003f38 <HAL_GetTick>
 8005230:	0003      	movs	r3, r0
 8005232:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005234:	4b3a      	ldr	r3, [pc, #232]	; (8005320 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	0d1b      	lsrs	r3, r3, #20
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	4353      	muls	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005242:	e058      	b.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	3301      	adds	r3, #1
 8005248:	d055      	beq.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800524a:	f7fe fe75 	bl	8003f38 <HAL_GetTick>
 800524e:	0002      	movs	r2, r0
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	429a      	cmp	r2, r3
 8005258:	d902      	bls.n	8005260 <SPI_WaitFlagStateUntilTimeout+0x54>
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d142      	bne.n	80052e6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	21e0      	movs	r1, #224	; 0xe0
 800526c:	438a      	bics	r2, r1
 800526e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	2382      	movs	r3, #130	; 0x82
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	429a      	cmp	r2, r3
 800527a:	d113      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	429a      	cmp	r2, r3
 8005286:	d005      	beq.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	429a      	cmp	r2, r3
 8005292:	d107      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2140      	movs	r1, #64	; 0x40
 80052a0:	438a      	bics	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	019b      	lsls	r3, r3, #6
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d110      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	491a      	ldr	r1, [pc, #104]	; (8005324 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80052bc:	400a      	ands	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2180      	movs	r1, #128	; 0x80
 80052cc:	0189      	lsls	r1, r1, #6
 80052ce:	430a      	orrs	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	225d      	movs	r2, #93	; 0x5d
 80052d6:	2101      	movs	r1, #1
 80052d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	225c      	movs	r2, #92	; 0x5c
 80052de:	2100      	movs	r1, #0
 80052e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e017      	b.n	8005316 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	425a      	negs	r2, r3
 8005306:	4153      	adcs	r3, r2
 8005308:	b2db      	uxtb	r3, r3
 800530a:	001a      	movs	r2, r3
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d197      	bne.n	8005244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	0018      	movs	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	b008      	add	sp, #32
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	20000000 	.word	0x20000000
 8005324:	ffffdfff 	.word	0xffffdfff

08005328 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005336:	2317      	movs	r3, #23
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800533e:	f7fe fdfb 	bl	8003f38 <HAL_GetTick>
 8005342:	0002      	movs	r2, r0
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	18d3      	adds	r3, r2, r3
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800534e:	f7fe fdf3 	bl	8003f38 <HAL_GetTick>
 8005352:	0003      	movs	r3, r0
 8005354:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800535e:	4b41      	ldr	r3, [pc, #260]	; (8005464 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	0013      	movs	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	189b      	adds	r3, r3, r2
 8005368:	00da      	lsls	r2, r3, #3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	0d1b      	lsrs	r3, r3, #20
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	4353      	muls	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005374:	e068      	b.n	8005448 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	23c0      	movs	r3, #192	; 0xc0
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	429a      	cmp	r2, r3
 800537e:	d10a      	bne.n	8005396 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d107      	bne.n	8005396 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	2117      	movs	r1, #23
 800538e:	187b      	adds	r3, r7, r1
 8005390:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005392:	187b      	adds	r3, r7, r1
 8005394:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	d055      	beq.n	8005448 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800539c:	f7fe fdcc 	bl	8003f38 <HAL_GetTick>
 80053a0:	0002      	movs	r2, r0
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d902      	bls.n	80053b2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d142      	bne.n	8005438 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	21e0      	movs	r1, #224	; 0xe0
 80053be:	438a      	bics	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	2382      	movs	r3, #130	; 0x82
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d113      	bne.n	80053f6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d005      	beq.n	80053e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d107      	bne.n	80053f6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2140      	movs	r1, #64	; 0x40
 80053f2:	438a      	bics	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	429a      	cmp	r2, r3
 8005400:	d110      	bne.n	8005424 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4916      	ldr	r1, [pc, #88]	; (8005468 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800540e:	400a      	ands	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	0189      	lsls	r1, r1, #6
 8005420:	430a      	orrs	r2, r1
 8005422:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	225d      	movs	r2, #93	; 0x5d
 8005428:	2101      	movs	r1, #1
 800542a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	225c      	movs	r2, #92	; 0x5c
 8005430:	2100      	movs	r1, #0
 8005432:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e010      	b.n	800545a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	3b01      	subs	r3, #1
 8005446:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	4013      	ands	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d18e      	bne.n	8005376 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	0018      	movs	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	b00a      	add	sp, #40	; 0x28
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	20000000 	.word	0x20000000
 8005468:	ffffdfff 	.word	0xffffdfff

0800546c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	23c0      	movs	r3, #192	; 0xc0
 800547c:	0159      	lsls	r1, r3, #5
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	0013      	movs	r3, r2
 8005486:	2200      	movs	r2, #0
 8005488:	f7ff ff4e 	bl	8005328 <SPI_WaitFifoStateUntilTimeout>
 800548c:	1e03      	subs	r3, r0, #0
 800548e:	d007      	beq.n	80054a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	2220      	movs	r2, #32
 8005496:	431a      	orrs	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e027      	b.n	80054f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	0013      	movs	r3, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	f7ff fead 	bl	800520c <SPI_WaitFlagStateUntilTimeout>
 80054b2:	1e03      	subs	r3, r0, #0
 80054b4:	d007      	beq.n	80054c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ba:	2220      	movs	r2, #32
 80054bc:	431a      	orrs	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e014      	b.n	80054f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	23c0      	movs	r3, #192	; 0xc0
 80054ca:	00d9      	lsls	r1, r3, #3
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	0013      	movs	r3, r2
 80054d4:	2200      	movs	r2, #0
 80054d6:	f7ff ff27 	bl	8005328 <SPI_WaitFifoStateUntilTimeout>
 80054da:	1e03      	subs	r3, r0, #0
 80054dc:	d007      	beq.n	80054ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	2220      	movs	r2, #32
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e000      	b.n	80054f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b004      	add	sp, #16
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	2600      	movs	r6, #0
 80054fc:	4d0c      	ldr	r5, [pc, #48]	; (8005530 <__libc_init_array+0x38>)
 80054fe:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 8005500:	1b64      	subs	r4, r4, r5
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	2600      	movs	r6, #0
 800550a:	f000 f821 	bl	8005550 <_init>
 800550e:	4d0a      	ldr	r5, [pc, #40]	; (8005538 <__libc_init_array+0x40>)
 8005510:	4c0a      	ldr	r4, [pc, #40]	; (800553c <__libc_init_array+0x44>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	00b3      	lsls	r3, r6, #2
 800551e:	58eb      	ldr	r3, [r5, r3]
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	00b3      	lsls	r3, r6, #2
 8005528:	58eb      	ldr	r3, [r5, r3]
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08005630 	.word	0x08005630
 8005534:	08005630 	.word	0x08005630
 8005538:	08005630 	.word	0x08005630
 800553c:	08005634 	.word	0x08005634

08005540 <memset>:
 8005540:	0003      	movs	r3, r0
 8005542:	1882      	adds	r2, r0, r2
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	7019      	strb	r1, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <_init>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr

0800555c <_fini>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr
