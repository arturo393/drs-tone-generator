
DRS_tone_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d84  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800708c  0800708c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007094  08007094  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800709c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000070  0800710c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  0800710c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b986  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b3  00000000  00000000  0002ba1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002ded8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016974  00000000  00000000  0002f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d58f  00000000  00000000  00045a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b9f  00000000  00000000  00052fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8b62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f4  00000000  00000000  000d8bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006e24 	.word	0x08006e24

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006e24 	.word	0x08006e24

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cdrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0010      	movs	r0, r2
 8000230:	4662      	mov	r2, ip
 8000232:	468c      	mov	ip, r1
 8000234:	0019      	movs	r1, r3
 8000236:	4663      	mov	r3, ip
 8000238:	e000      	b.n	800023c <__aeabi_cdcmpeq>
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_cdcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f001 f82d 	bl	800129c <__ledf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cdcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_dcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 ff7d 	bl	800114c <__eqdf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_dcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f001 f81f 	bl	800129c <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_dcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_dcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f001 f815 	bl	800129c <__ledf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_dcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_dcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 ffa5 	bl	80011d0 <__gedf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_dcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_dcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 ff9b 	bl	80011d0 <__gedf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_dcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	0008      	movs	r0, r1
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff5d 	.word	0xffffff5d
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f83a 	bl	8000350 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_d2uiz>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	2200      	movs	r2, #0
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <__aeabi_d2uiz+0x38>)
 80002ee:	0004      	movs	r4, r0
 80002f0:	000d      	movs	r5, r1
 80002f2:	f7ff ffcf 	bl	8000294 <__aeabi_dcmpge>
 80002f6:	2800      	cmp	r0, #0
 80002f8:	d104      	bne.n	8000304 <__aeabi_d2uiz+0x1c>
 80002fa:	0020      	movs	r0, r4
 80002fc:	0029      	movs	r1, r5
 80002fe:	f001 fe2f 	bl	8001f60 <__aeabi_d2iz>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <__aeabi_d2uiz+0x38>)
 8000306:	2200      	movs	r2, #0
 8000308:	0020      	movs	r0, r4
 800030a:	0029      	movs	r1, r5
 800030c:	f001 fa96 	bl	800183c <__aeabi_dsub>
 8000310:	f001 fe26 	bl	8001f60 <__aeabi_d2iz>
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	061b      	lsls	r3, r3, #24
 8000318:	469c      	mov	ip, r3
 800031a:	4460      	add	r0, ip
 800031c:	e7f1      	b.n	8000302 <__aeabi_d2uiz+0x1a>
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	41e00000 	.word	0x41e00000

08000324 <__aeabi_ul2d>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	0006      	movs	r6, r0
 8000328:	0008      	movs	r0, r1
 800032a:	f001 fe4f 	bl	8001fcc <__aeabi_ui2d>
 800032e:	2200      	movs	r2, #0
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <__aeabi_ul2d+0x28>)
 8000332:	f001 f817 	bl	8001364 <__aeabi_dmul>
 8000336:	000d      	movs	r5, r1
 8000338:	0004      	movs	r4, r0
 800033a:	0030      	movs	r0, r6
 800033c:	f001 fe46 	bl	8001fcc <__aeabi_ui2d>
 8000340:	002b      	movs	r3, r5
 8000342:	0022      	movs	r2, r4
 8000344:	f000 f8d0 	bl	80004e8 <__aeabi_dadd>
 8000348:	bd70      	pop	{r4, r5, r6, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	41f00000 	.word	0x41f00000

08000350 <__udivmoddi4>:
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	4657      	mov	r7, sl
 8000354:	464e      	mov	r6, r9
 8000356:	4645      	mov	r5, r8
 8000358:	46de      	mov	lr, fp
 800035a:	b5e0      	push	{r5, r6, r7, lr}
 800035c:	0004      	movs	r4, r0
 800035e:	000d      	movs	r5, r1
 8000360:	4692      	mov	sl, r2
 8000362:	4699      	mov	r9, r3
 8000364:	b083      	sub	sp, #12
 8000366:	428b      	cmp	r3, r1
 8000368:	d830      	bhi.n	80003cc <__udivmoddi4+0x7c>
 800036a:	d02d      	beq.n	80003c8 <__udivmoddi4+0x78>
 800036c:	4649      	mov	r1, r9
 800036e:	4650      	mov	r0, sl
 8000370:	f001 fe70 	bl	8002054 <__clzdi2>
 8000374:	0029      	movs	r1, r5
 8000376:	0006      	movs	r6, r0
 8000378:	0020      	movs	r0, r4
 800037a:	f001 fe6b 	bl	8002054 <__clzdi2>
 800037e:	1a33      	subs	r3, r6, r0
 8000380:	4698      	mov	r8, r3
 8000382:	3b20      	subs	r3, #32
 8000384:	469b      	mov	fp, r3
 8000386:	d433      	bmi.n	80003f0 <__udivmoddi4+0xa0>
 8000388:	465a      	mov	r2, fp
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	4642      	mov	r2, r8
 8000390:	001f      	movs	r7, r3
 8000392:	4653      	mov	r3, sl
 8000394:	4093      	lsls	r3, r2
 8000396:	001e      	movs	r6, r3
 8000398:	42af      	cmp	r7, r5
 800039a:	d83a      	bhi.n	8000412 <__udivmoddi4+0xc2>
 800039c:	42af      	cmp	r7, r5
 800039e:	d100      	bne.n	80003a2 <__udivmoddi4+0x52>
 80003a0:	e078      	b.n	8000494 <__udivmoddi4+0x144>
 80003a2:	465b      	mov	r3, fp
 80003a4:	1ba4      	subs	r4, r4, r6
 80003a6:	41bd      	sbcs	r5, r7
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	da00      	bge.n	80003ae <__udivmoddi4+0x5e>
 80003ac:	e075      	b.n	800049a <__udivmoddi4+0x14a>
 80003ae:	2200      	movs	r2, #0
 80003b0:	2300      	movs	r3, #0
 80003b2:	9200      	str	r2, [sp, #0]
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	2301      	movs	r3, #1
 80003b8:	465a      	mov	r2, fp
 80003ba:	4093      	lsls	r3, r2
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	2301      	movs	r3, #1
 80003c0:	4642      	mov	r2, r8
 80003c2:	4093      	lsls	r3, r2
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	e028      	b.n	800041a <__udivmoddi4+0xca>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	d9cf      	bls.n	800036c <__udivmoddi4+0x1c>
 80003cc:	2200      	movs	r2, #0
 80003ce:	2300      	movs	r3, #0
 80003d0:	9200      	str	r2, [sp, #0]
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <__udivmoddi4+0x8e>
 80003da:	601c      	str	r4, [r3, #0]
 80003dc:	605d      	str	r5, [r3, #4]
 80003de:	9800      	ldr	r0, [sp, #0]
 80003e0:	9901      	ldr	r1, [sp, #4]
 80003e2:	b003      	add	sp, #12
 80003e4:	bcf0      	pop	{r4, r5, r6, r7}
 80003e6:	46bb      	mov	fp, r7
 80003e8:	46b2      	mov	sl, r6
 80003ea:	46a9      	mov	r9, r5
 80003ec:	46a0      	mov	r8, r4
 80003ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f0:	4642      	mov	r2, r8
 80003f2:	2320      	movs	r3, #32
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	4652      	mov	r2, sl
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	4641      	mov	r1, r8
 80003fc:	0013      	movs	r3, r2
 80003fe:	464a      	mov	r2, r9
 8000400:	408a      	lsls	r2, r1
 8000402:	0017      	movs	r7, r2
 8000404:	4642      	mov	r2, r8
 8000406:	431f      	orrs	r7, r3
 8000408:	4653      	mov	r3, sl
 800040a:	4093      	lsls	r3, r2
 800040c:	001e      	movs	r6, r3
 800040e:	42af      	cmp	r7, r5
 8000410:	d9c4      	bls.n	800039c <__udivmoddi4+0x4c>
 8000412:	2200      	movs	r2, #0
 8000414:	2300      	movs	r3, #0
 8000416:	9200      	str	r2, [sp, #0]
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	4643      	mov	r3, r8
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0d9      	beq.n	80003d4 <__udivmoddi4+0x84>
 8000420:	07fb      	lsls	r3, r7, #31
 8000422:	0872      	lsrs	r2, r6, #1
 8000424:	431a      	orrs	r2, r3
 8000426:	4646      	mov	r6, r8
 8000428:	087b      	lsrs	r3, r7, #1
 800042a:	e00e      	b.n	800044a <__udivmoddi4+0xfa>
 800042c:	42ab      	cmp	r3, r5
 800042e:	d101      	bne.n	8000434 <__udivmoddi4+0xe4>
 8000430:	42a2      	cmp	r2, r4
 8000432:	d80c      	bhi.n	800044e <__udivmoddi4+0xfe>
 8000434:	1aa4      	subs	r4, r4, r2
 8000436:	419d      	sbcs	r5, r3
 8000438:	2001      	movs	r0, #1
 800043a:	1924      	adds	r4, r4, r4
 800043c:	416d      	adcs	r5, r5
 800043e:	2100      	movs	r1, #0
 8000440:	3e01      	subs	r6, #1
 8000442:	1824      	adds	r4, r4, r0
 8000444:	414d      	adcs	r5, r1
 8000446:	2e00      	cmp	r6, #0
 8000448:	d006      	beq.n	8000458 <__udivmoddi4+0x108>
 800044a:	42ab      	cmp	r3, r5
 800044c:	d9ee      	bls.n	800042c <__udivmoddi4+0xdc>
 800044e:	3e01      	subs	r6, #1
 8000450:	1924      	adds	r4, r4, r4
 8000452:	416d      	adcs	r5, r5
 8000454:	2e00      	cmp	r6, #0
 8000456:	d1f8      	bne.n	800044a <__udivmoddi4+0xfa>
 8000458:	9800      	ldr	r0, [sp, #0]
 800045a:	9901      	ldr	r1, [sp, #4]
 800045c:	465b      	mov	r3, fp
 800045e:	1900      	adds	r0, r0, r4
 8000460:	4169      	adcs	r1, r5
 8000462:	2b00      	cmp	r3, #0
 8000464:	db24      	blt.n	80004b0 <__udivmoddi4+0x160>
 8000466:	002b      	movs	r3, r5
 8000468:	465a      	mov	r2, fp
 800046a:	4644      	mov	r4, r8
 800046c:	40d3      	lsrs	r3, r2
 800046e:	002a      	movs	r2, r5
 8000470:	40e2      	lsrs	r2, r4
 8000472:	001c      	movs	r4, r3
 8000474:	465b      	mov	r3, fp
 8000476:	0015      	movs	r5, r2
 8000478:	2b00      	cmp	r3, #0
 800047a:	db2a      	blt.n	80004d2 <__udivmoddi4+0x182>
 800047c:	0026      	movs	r6, r4
 800047e:	409e      	lsls	r6, r3
 8000480:	0033      	movs	r3, r6
 8000482:	0026      	movs	r6, r4
 8000484:	4647      	mov	r7, r8
 8000486:	40be      	lsls	r6, r7
 8000488:	0032      	movs	r2, r6
 800048a:	1a80      	subs	r0, r0, r2
 800048c:	4199      	sbcs	r1, r3
 800048e:	9000      	str	r0, [sp, #0]
 8000490:	9101      	str	r1, [sp, #4]
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x84>
 8000494:	42a3      	cmp	r3, r4
 8000496:	d8bc      	bhi.n	8000412 <__udivmoddi4+0xc2>
 8000498:	e783      	b.n	80003a2 <__udivmoddi4+0x52>
 800049a:	4642      	mov	r2, r8
 800049c:	2320      	movs	r3, #32
 800049e:	2100      	movs	r1, #0
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	2200      	movs	r2, #0
 80004a4:	9100      	str	r1, [sp, #0]
 80004a6:	9201      	str	r2, [sp, #4]
 80004a8:	2201      	movs	r2, #1
 80004aa:	40da      	lsrs	r2, r3
 80004ac:	9201      	str	r2, [sp, #4]
 80004ae:	e786      	b.n	80003be <__udivmoddi4+0x6e>
 80004b0:	4642      	mov	r2, r8
 80004b2:	2320      	movs	r3, #32
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	002a      	movs	r2, r5
 80004b8:	4646      	mov	r6, r8
 80004ba:	409a      	lsls	r2, r3
 80004bc:	0023      	movs	r3, r4
 80004be:	40f3      	lsrs	r3, r6
 80004c0:	4644      	mov	r4, r8
 80004c2:	4313      	orrs	r3, r2
 80004c4:	002a      	movs	r2, r5
 80004c6:	40e2      	lsrs	r2, r4
 80004c8:	001c      	movs	r4, r3
 80004ca:	465b      	mov	r3, fp
 80004cc:	0015      	movs	r5, r2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	dad4      	bge.n	800047c <__udivmoddi4+0x12c>
 80004d2:	4642      	mov	r2, r8
 80004d4:	002f      	movs	r7, r5
 80004d6:	2320      	movs	r3, #32
 80004d8:	0026      	movs	r6, r4
 80004da:	4097      	lsls	r7, r2
 80004dc:	1a9b      	subs	r3, r3, r2
 80004de:	40de      	lsrs	r6, r3
 80004e0:	003b      	movs	r3, r7
 80004e2:	4333      	orrs	r3, r6
 80004e4:	e7cd      	b.n	8000482 <__udivmoddi4+0x132>
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_dadd>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	464f      	mov	r7, r9
 80004ec:	4646      	mov	r6, r8
 80004ee:	46d6      	mov	lr, sl
 80004f0:	000d      	movs	r5, r1
 80004f2:	0004      	movs	r4, r0
 80004f4:	b5c0      	push	{r6, r7, lr}
 80004f6:	001f      	movs	r7, r3
 80004f8:	0011      	movs	r1, r2
 80004fa:	0328      	lsls	r0, r5, #12
 80004fc:	0f62      	lsrs	r2, r4, #29
 80004fe:	0a40      	lsrs	r0, r0, #9
 8000500:	4310      	orrs	r0, r2
 8000502:	007a      	lsls	r2, r7, #1
 8000504:	0d52      	lsrs	r2, r2, #21
 8000506:	00e3      	lsls	r3, r4, #3
 8000508:	033c      	lsls	r4, r7, #12
 800050a:	4691      	mov	r9, r2
 800050c:	0a64      	lsrs	r4, r4, #9
 800050e:	0ffa      	lsrs	r2, r7, #31
 8000510:	0f4f      	lsrs	r7, r1, #29
 8000512:	006e      	lsls	r6, r5, #1
 8000514:	4327      	orrs	r7, r4
 8000516:	4692      	mov	sl, r2
 8000518:	46b8      	mov	r8, r7
 800051a:	0d76      	lsrs	r6, r6, #21
 800051c:	0fed      	lsrs	r5, r5, #31
 800051e:	00c9      	lsls	r1, r1, #3
 8000520:	4295      	cmp	r5, r2
 8000522:	d100      	bne.n	8000526 <__aeabi_dadd+0x3e>
 8000524:	e099      	b.n	800065a <__aeabi_dadd+0x172>
 8000526:	464c      	mov	r4, r9
 8000528:	1b34      	subs	r4, r6, r4
 800052a:	46a4      	mov	ip, r4
 800052c:	2c00      	cmp	r4, #0
 800052e:	dc00      	bgt.n	8000532 <__aeabi_dadd+0x4a>
 8000530:	e07c      	b.n	800062c <__aeabi_dadd+0x144>
 8000532:	464a      	mov	r2, r9
 8000534:	2a00      	cmp	r2, #0
 8000536:	d100      	bne.n	800053a <__aeabi_dadd+0x52>
 8000538:	e0b8      	b.n	80006ac <__aeabi_dadd+0x1c4>
 800053a:	4ac5      	ldr	r2, [pc, #788]	; (8000850 <__aeabi_dadd+0x368>)
 800053c:	4296      	cmp	r6, r2
 800053e:	d100      	bne.n	8000542 <__aeabi_dadd+0x5a>
 8000540:	e11c      	b.n	800077c <__aeabi_dadd+0x294>
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	003c      	movs	r4, r7
 8000546:	0412      	lsls	r2, r2, #16
 8000548:	4314      	orrs	r4, r2
 800054a:	46a0      	mov	r8, r4
 800054c:	4662      	mov	r2, ip
 800054e:	2a38      	cmp	r2, #56	; 0x38
 8000550:	dd00      	ble.n	8000554 <__aeabi_dadd+0x6c>
 8000552:	e161      	b.n	8000818 <__aeabi_dadd+0x330>
 8000554:	2a1f      	cmp	r2, #31
 8000556:	dd00      	ble.n	800055a <__aeabi_dadd+0x72>
 8000558:	e1cc      	b.n	80008f4 <__aeabi_dadd+0x40c>
 800055a:	4664      	mov	r4, ip
 800055c:	2220      	movs	r2, #32
 800055e:	1b12      	subs	r2, r2, r4
 8000560:	4644      	mov	r4, r8
 8000562:	4094      	lsls	r4, r2
 8000564:	000f      	movs	r7, r1
 8000566:	46a1      	mov	r9, r4
 8000568:	4664      	mov	r4, ip
 800056a:	4091      	lsls	r1, r2
 800056c:	40e7      	lsrs	r7, r4
 800056e:	464c      	mov	r4, r9
 8000570:	1e4a      	subs	r2, r1, #1
 8000572:	4191      	sbcs	r1, r2
 8000574:	433c      	orrs	r4, r7
 8000576:	4642      	mov	r2, r8
 8000578:	4321      	orrs	r1, r4
 800057a:	4664      	mov	r4, ip
 800057c:	40e2      	lsrs	r2, r4
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	1a5c      	subs	r4, r3, r1
 8000582:	42a3      	cmp	r3, r4
 8000584:	419b      	sbcs	r3, r3
 8000586:	425f      	negs	r7, r3
 8000588:	1bc7      	subs	r7, r0, r7
 800058a:	023b      	lsls	r3, r7, #8
 800058c:	d400      	bmi.n	8000590 <__aeabi_dadd+0xa8>
 800058e:	e0d0      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000590:	027f      	lsls	r7, r7, #9
 8000592:	0a7f      	lsrs	r7, r7, #9
 8000594:	2f00      	cmp	r7, #0
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0xb2>
 8000598:	e0ff      	b.n	800079a <__aeabi_dadd+0x2b2>
 800059a:	0038      	movs	r0, r7
 800059c:	f001 fd3c 	bl	8002018 <__clzsi2>
 80005a0:	0001      	movs	r1, r0
 80005a2:	3908      	subs	r1, #8
 80005a4:	2320      	movs	r3, #32
 80005a6:	0022      	movs	r2, r4
 80005a8:	1a5b      	subs	r3, r3, r1
 80005aa:	408f      	lsls	r7, r1
 80005ac:	40da      	lsrs	r2, r3
 80005ae:	408c      	lsls	r4, r1
 80005b0:	4317      	orrs	r7, r2
 80005b2:	42b1      	cmp	r1, r6
 80005b4:	da00      	bge.n	80005b8 <__aeabi_dadd+0xd0>
 80005b6:	e0ff      	b.n	80007b8 <__aeabi_dadd+0x2d0>
 80005b8:	1b89      	subs	r1, r1, r6
 80005ba:	1c4b      	adds	r3, r1, #1
 80005bc:	2b1f      	cmp	r3, #31
 80005be:	dd00      	ble.n	80005c2 <__aeabi_dadd+0xda>
 80005c0:	e0a8      	b.n	8000714 <__aeabi_dadd+0x22c>
 80005c2:	2220      	movs	r2, #32
 80005c4:	0039      	movs	r1, r7
 80005c6:	1ad2      	subs	r2, r2, r3
 80005c8:	0020      	movs	r0, r4
 80005ca:	4094      	lsls	r4, r2
 80005cc:	4091      	lsls	r1, r2
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	1e62      	subs	r2, r4, #1
 80005d2:	4194      	sbcs	r4, r2
 80005d4:	40df      	lsrs	r7, r3
 80005d6:	2600      	movs	r6, #0
 80005d8:	4301      	orrs	r1, r0
 80005da:	430c      	orrs	r4, r1
 80005dc:	0763      	lsls	r3, r4, #29
 80005de:	d009      	beq.n	80005f4 <__aeabi_dadd+0x10c>
 80005e0:	230f      	movs	r3, #15
 80005e2:	4023      	ands	r3, r4
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d005      	beq.n	80005f4 <__aeabi_dadd+0x10c>
 80005e8:	1d23      	adds	r3, r4, #4
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	41a4      	sbcs	r4, r4
 80005ee:	4264      	negs	r4, r4
 80005f0:	193f      	adds	r7, r7, r4
 80005f2:	001c      	movs	r4, r3
 80005f4:	023b      	lsls	r3, r7, #8
 80005f6:	d400      	bmi.n	80005fa <__aeabi_dadd+0x112>
 80005f8:	e09e      	b.n	8000738 <__aeabi_dadd+0x250>
 80005fa:	4b95      	ldr	r3, [pc, #596]	; (8000850 <__aeabi_dadd+0x368>)
 80005fc:	3601      	adds	r6, #1
 80005fe:	429e      	cmp	r6, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x11c>
 8000602:	e0b7      	b.n	8000774 <__aeabi_dadd+0x28c>
 8000604:	4a93      	ldr	r2, [pc, #588]	; (8000854 <__aeabi_dadd+0x36c>)
 8000606:	08e4      	lsrs	r4, r4, #3
 8000608:	4017      	ands	r7, r2
 800060a:	077b      	lsls	r3, r7, #29
 800060c:	0571      	lsls	r1, r6, #21
 800060e:	027f      	lsls	r7, r7, #9
 8000610:	4323      	orrs	r3, r4
 8000612:	0b3f      	lsrs	r7, r7, #12
 8000614:	0d4a      	lsrs	r2, r1, #21
 8000616:	0512      	lsls	r2, r2, #20
 8000618:	433a      	orrs	r2, r7
 800061a:	07ed      	lsls	r5, r5, #31
 800061c:	432a      	orrs	r2, r5
 800061e:	0018      	movs	r0, r3
 8000620:	0011      	movs	r1, r2
 8000622:	bce0      	pop	{r5, r6, r7}
 8000624:	46ba      	mov	sl, r7
 8000626:	46b1      	mov	r9, r6
 8000628:	46a8      	mov	r8, r5
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	2c00      	cmp	r4, #0
 800062e:	d04b      	beq.n	80006c8 <__aeabi_dadd+0x1e0>
 8000630:	464c      	mov	r4, r9
 8000632:	1ba4      	subs	r4, r4, r6
 8000634:	46a4      	mov	ip, r4
 8000636:	2e00      	cmp	r6, #0
 8000638:	d000      	beq.n	800063c <__aeabi_dadd+0x154>
 800063a:	e123      	b.n	8000884 <__aeabi_dadd+0x39c>
 800063c:	0004      	movs	r4, r0
 800063e:	431c      	orrs	r4, r3
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x15c>
 8000642:	e1af      	b.n	80009a4 <__aeabi_dadd+0x4bc>
 8000644:	4662      	mov	r2, ip
 8000646:	1e54      	subs	r4, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x166>
 800064c:	e215      	b.n	8000a7a <__aeabi_dadd+0x592>
 800064e:	4d80      	ldr	r5, [pc, #512]	; (8000850 <__aeabi_dadd+0x368>)
 8000650:	45ac      	cmp	ip, r5
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x16e>
 8000654:	e1c8      	b.n	80009e8 <__aeabi_dadd+0x500>
 8000656:	46a4      	mov	ip, r4
 8000658:	e11b      	b.n	8000892 <__aeabi_dadd+0x3aa>
 800065a:	464a      	mov	r2, r9
 800065c:	1ab2      	subs	r2, r6, r2
 800065e:	4694      	mov	ip, r2
 8000660:	2a00      	cmp	r2, #0
 8000662:	dc00      	bgt.n	8000666 <__aeabi_dadd+0x17e>
 8000664:	e0ac      	b.n	80007c0 <__aeabi_dadd+0x2d8>
 8000666:	464a      	mov	r2, r9
 8000668:	2a00      	cmp	r2, #0
 800066a:	d043      	beq.n	80006f4 <__aeabi_dadd+0x20c>
 800066c:	4a78      	ldr	r2, [pc, #480]	; (8000850 <__aeabi_dadd+0x368>)
 800066e:	4296      	cmp	r6, r2
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x18c>
 8000672:	e1af      	b.n	80009d4 <__aeabi_dadd+0x4ec>
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	003c      	movs	r4, r7
 8000678:	0412      	lsls	r2, r2, #16
 800067a:	4314      	orrs	r4, r2
 800067c:	46a0      	mov	r8, r4
 800067e:	4662      	mov	r2, ip
 8000680:	2a38      	cmp	r2, #56	; 0x38
 8000682:	dc67      	bgt.n	8000754 <__aeabi_dadd+0x26c>
 8000684:	2a1f      	cmp	r2, #31
 8000686:	dc00      	bgt.n	800068a <__aeabi_dadd+0x1a2>
 8000688:	e15f      	b.n	800094a <__aeabi_dadd+0x462>
 800068a:	4647      	mov	r7, r8
 800068c:	3a20      	subs	r2, #32
 800068e:	40d7      	lsrs	r7, r2
 8000690:	4662      	mov	r2, ip
 8000692:	2a20      	cmp	r2, #32
 8000694:	d005      	beq.n	80006a2 <__aeabi_dadd+0x1ba>
 8000696:	4664      	mov	r4, ip
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	1b12      	subs	r2, r2, r4
 800069c:	4644      	mov	r4, r8
 800069e:	4094      	lsls	r4, r2
 80006a0:	4321      	orrs	r1, r4
 80006a2:	1e4a      	subs	r2, r1, #1
 80006a4:	4191      	sbcs	r1, r2
 80006a6:	000c      	movs	r4, r1
 80006a8:	433c      	orrs	r4, r7
 80006aa:	e057      	b.n	800075c <__aeabi_dadd+0x274>
 80006ac:	003a      	movs	r2, r7
 80006ae:	430a      	orrs	r2, r1
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x1cc>
 80006b2:	e105      	b.n	80008c0 <__aeabi_dadd+0x3d8>
 80006b4:	0022      	movs	r2, r4
 80006b6:	3a01      	subs	r2, #1
 80006b8:	2c01      	cmp	r4, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x1d6>
 80006bc:	e182      	b.n	80009c4 <__aeabi_dadd+0x4dc>
 80006be:	4c64      	ldr	r4, [pc, #400]	; (8000850 <__aeabi_dadd+0x368>)
 80006c0:	45a4      	cmp	ip, r4
 80006c2:	d05b      	beq.n	800077c <__aeabi_dadd+0x294>
 80006c4:	4694      	mov	ip, r2
 80006c6:	e741      	b.n	800054c <__aeabi_dadd+0x64>
 80006c8:	4c63      	ldr	r4, [pc, #396]	; (8000858 <__aeabi_dadd+0x370>)
 80006ca:	1c77      	adds	r7, r6, #1
 80006cc:	4227      	tst	r7, r4
 80006ce:	d000      	beq.n	80006d2 <__aeabi_dadd+0x1ea>
 80006d0:	e0c4      	b.n	800085c <__aeabi_dadd+0x374>
 80006d2:	0004      	movs	r4, r0
 80006d4:	431c      	orrs	r4, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x1f4>
 80006da:	e169      	b.n	80009b0 <__aeabi_dadd+0x4c8>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x1fa>
 80006e0:	e1bf      	b.n	8000a62 <__aeabi_dadd+0x57a>
 80006e2:	4644      	mov	r4, r8
 80006e4:	430c      	orrs	r4, r1
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x202>
 80006e8:	e1d0      	b.n	8000a8c <__aeabi_dadd+0x5a4>
 80006ea:	0742      	lsls	r2, r0, #29
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	08c0      	lsrs	r0, r0, #3
 80006f2:	e029      	b.n	8000748 <__aeabi_dadd+0x260>
 80006f4:	003a      	movs	r2, r7
 80006f6:	430a      	orrs	r2, r1
 80006f8:	d100      	bne.n	80006fc <__aeabi_dadd+0x214>
 80006fa:	e170      	b.n	80009de <__aeabi_dadd+0x4f6>
 80006fc:	4662      	mov	r2, ip
 80006fe:	4664      	mov	r4, ip
 8000700:	3a01      	subs	r2, #1
 8000702:	2c01      	cmp	r4, #1
 8000704:	d100      	bne.n	8000708 <__aeabi_dadd+0x220>
 8000706:	e0e0      	b.n	80008ca <__aeabi_dadd+0x3e2>
 8000708:	4c51      	ldr	r4, [pc, #324]	; (8000850 <__aeabi_dadd+0x368>)
 800070a:	45a4      	cmp	ip, r4
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x228>
 800070e:	e161      	b.n	80009d4 <__aeabi_dadd+0x4ec>
 8000710:	4694      	mov	ip, r2
 8000712:	e7b4      	b.n	800067e <__aeabi_dadd+0x196>
 8000714:	003a      	movs	r2, r7
 8000716:	391f      	subs	r1, #31
 8000718:	40ca      	lsrs	r2, r1
 800071a:	0011      	movs	r1, r2
 800071c:	2b20      	cmp	r3, #32
 800071e:	d003      	beq.n	8000728 <__aeabi_dadd+0x240>
 8000720:	2240      	movs	r2, #64	; 0x40
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	409f      	lsls	r7, r3
 8000726:	433c      	orrs	r4, r7
 8000728:	1e63      	subs	r3, r4, #1
 800072a:	419c      	sbcs	r4, r3
 800072c:	2700      	movs	r7, #0
 800072e:	2600      	movs	r6, #0
 8000730:	430c      	orrs	r4, r1
 8000732:	0763      	lsls	r3, r4, #29
 8000734:	d000      	beq.n	8000738 <__aeabi_dadd+0x250>
 8000736:	e753      	b.n	80005e0 <__aeabi_dadd+0xf8>
 8000738:	46b4      	mov	ip, r6
 800073a:	08e4      	lsrs	r4, r4, #3
 800073c:	077b      	lsls	r3, r7, #29
 800073e:	4323      	orrs	r3, r4
 8000740:	08f8      	lsrs	r0, r7, #3
 8000742:	4a43      	ldr	r2, [pc, #268]	; (8000850 <__aeabi_dadd+0x368>)
 8000744:	4594      	cmp	ip, r2
 8000746:	d01d      	beq.n	8000784 <__aeabi_dadd+0x29c>
 8000748:	4662      	mov	r2, ip
 800074a:	0307      	lsls	r7, r0, #12
 800074c:	0552      	lsls	r2, r2, #21
 800074e:	0b3f      	lsrs	r7, r7, #12
 8000750:	0d52      	lsrs	r2, r2, #21
 8000752:	e760      	b.n	8000616 <__aeabi_dadd+0x12e>
 8000754:	4644      	mov	r4, r8
 8000756:	430c      	orrs	r4, r1
 8000758:	1e62      	subs	r2, r4, #1
 800075a:	4194      	sbcs	r4, r2
 800075c:	18e4      	adds	r4, r4, r3
 800075e:	429c      	cmp	r4, r3
 8000760:	419b      	sbcs	r3, r3
 8000762:	425f      	negs	r7, r3
 8000764:	183f      	adds	r7, r7, r0
 8000766:	023b      	lsls	r3, r7, #8
 8000768:	d5e3      	bpl.n	8000732 <__aeabi_dadd+0x24a>
 800076a:	4b39      	ldr	r3, [pc, #228]	; (8000850 <__aeabi_dadd+0x368>)
 800076c:	3601      	adds	r6, #1
 800076e:	429e      	cmp	r6, r3
 8000770:	d000      	beq.n	8000774 <__aeabi_dadd+0x28c>
 8000772:	e0b5      	b.n	80008e0 <__aeabi_dadd+0x3f8>
 8000774:	0032      	movs	r2, r6
 8000776:	2700      	movs	r7, #0
 8000778:	2300      	movs	r3, #0
 800077a:	e74c      	b.n	8000616 <__aeabi_dadd+0x12e>
 800077c:	0742      	lsls	r2, r0, #29
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	4313      	orrs	r3, r2
 8000782:	08c0      	lsrs	r0, r0, #3
 8000784:	001a      	movs	r2, r3
 8000786:	4302      	orrs	r2, r0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x2a4>
 800078a:	e1e1      	b.n	8000b50 <__aeabi_dadd+0x668>
 800078c:	2780      	movs	r7, #128	; 0x80
 800078e:	033f      	lsls	r7, r7, #12
 8000790:	4307      	orrs	r7, r0
 8000792:	033f      	lsls	r7, r7, #12
 8000794:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <__aeabi_dadd+0x368>)
 8000796:	0b3f      	lsrs	r7, r7, #12
 8000798:	e73d      	b.n	8000616 <__aeabi_dadd+0x12e>
 800079a:	0020      	movs	r0, r4
 800079c:	f001 fc3c 	bl	8002018 <__clzsi2>
 80007a0:	0001      	movs	r1, r0
 80007a2:	3118      	adds	r1, #24
 80007a4:	291f      	cmp	r1, #31
 80007a6:	dc00      	bgt.n	80007aa <__aeabi_dadd+0x2c2>
 80007a8:	e6fc      	b.n	80005a4 <__aeabi_dadd+0xbc>
 80007aa:	3808      	subs	r0, #8
 80007ac:	4084      	lsls	r4, r0
 80007ae:	0027      	movs	r7, r4
 80007b0:	2400      	movs	r4, #0
 80007b2:	42b1      	cmp	r1, r6
 80007b4:	db00      	blt.n	80007b8 <__aeabi_dadd+0x2d0>
 80007b6:	e6ff      	b.n	80005b8 <__aeabi_dadd+0xd0>
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <__aeabi_dadd+0x36c>)
 80007ba:	1a76      	subs	r6, r6, r1
 80007bc:	4017      	ands	r7, r2
 80007be:	e70d      	b.n	80005dc <__aeabi_dadd+0xf4>
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d02f      	beq.n	8000824 <__aeabi_dadd+0x33c>
 80007c4:	464a      	mov	r2, r9
 80007c6:	1b92      	subs	r2, r2, r6
 80007c8:	4694      	mov	ip, r2
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x2e8>
 80007ce:	e0ad      	b.n	800092c <__aeabi_dadd+0x444>
 80007d0:	4a1f      	ldr	r2, [pc, #124]	; (8000850 <__aeabi_dadd+0x368>)
 80007d2:	4591      	cmp	r9, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x2f0>
 80007d6:	e10f      	b.n	80009f8 <__aeabi_dadd+0x510>
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	0412      	lsls	r2, r2, #16
 80007dc:	4310      	orrs	r0, r2
 80007de:	4662      	mov	r2, ip
 80007e0:	2a38      	cmp	r2, #56	; 0x38
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_dadd+0x2fe>
 80007e4:	e10f      	b.n	8000a06 <__aeabi_dadd+0x51e>
 80007e6:	2a1f      	cmp	r2, #31
 80007e8:	dd00      	ble.n	80007ec <__aeabi_dadd+0x304>
 80007ea:	e180      	b.n	8000aee <__aeabi_dadd+0x606>
 80007ec:	4664      	mov	r4, ip
 80007ee:	2220      	movs	r2, #32
 80007f0:	001e      	movs	r6, r3
 80007f2:	1b12      	subs	r2, r2, r4
 80007f4:	4667      	mov	r7, ip
 80007f6:	0004      	movs	r4, r0
 80007f8:	4093      	lsls	r3, r2
 80007fa:	4094      	lsls	r4, r2
 80007fc:	40fe      	lsrs	r6, r7
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	4193      	sbcs	r3, r2
 8000802:	40f8      	lsrs	r0, r7
 8000804:	4334      	orrs	r4, r6
 8000806:	431c      	orrs	r4, r3
 8000808:	4480      	add	r8, r0
 800080a:	1864      	adds	r4, r4, r1
 800080c:	428c      	cmp	r4, r1
 800080e:	41bf      	sbcs	r7, r7
 8000810:	427f      	negs	r7, r7
 8000812:	464e      	mov	r6, r9
 8000814:	4447      	add	r7, r8
 8000816:	e7a6      	b.n	8000766 <__aeabi_dadd+0x27e>
 8000818:	4642      	mov	r2, r8
 800081a:	430a      	orrs	r2, r1
 800081c:	0011      	movs	r1, r2
 800081e:	1e4a      	subs	r2, r1, #1
 8000820:	4191      	sbcs	r1, r2
 8000822:	e6ad      	b.n	8000580 <__aeabi_dadd+0x98>
 8000824:	4c0c      	ldr	r4, [pc, #48]	; (8000858 <__aeabi_dadd+0x370>)
 8000826:	1c72      	adds	r2, r6, #1
 8000828:	4222      	tst	r2, r4
 800082a:	d000      	beq.n	800082e <__aeabi_dadd+0x346>
 800082c:	e0a1      	b.n	8000972 <__aeabi_dadd+0x48a>
 800082e:	0002      	movs	r2, r0
 8000830:	431a      	orrs	r2, r3
 8000832:	2e00      	cmp	r6, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_dadd+0x350>
 8000836:	e0fa      	b.n	8000a2e <__aeabi_dadd+0x546>
 8000838:	2a00      	cmp	r2, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x356>
 800083c:	e145      	b.n	8000aca <__aeabi_dadd+0x5e2>
 800083e:	003a      	movs	r2, r7
 8000840:	430a      	orrs	r2, r1
 8000842:	d000      	beq.n	8000846 <__aeabi_dadd+0x35e>
 8000844:	e146      	b.n	8000ad4 <__aeabi_dadd+0x5ec>
 8000846:	0742      	lsls	r2, r0, #29
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	4313      	orrs	r3, r2
 800084c:	08c0      	lsrs	r0, r0, #3
 800084e:	e77b      	b.n	8000748 <__aeabi_dadd+0x260>
 8000850:	000007ff 	.word	0x000007ff
 8000854:	ff7fffff 	.word	0xff7fffff
 8000858:	000007fe 	.word	0x000007fe
 800085c:	4647      	mov	r7, r8
 800085e:	1a5c      	subs	r4, r3, r1
 8000860:	1bc2      	subs	r2, r0, r7
 8000862:	42a3      	cmp	r3, r4
 8000864:	41bf      	sbcs	r7, r7
 8000866:	427f      	negs	r7, r7
 8000868:	46b9      	mov	r9, r7
 800086a:	0017      	movs	r7, r2
 800086c:	464a      	mov	r2, r9
 800086e:	1abf      	subs	r7, r7, r2
 8000870:	023a      	lsls	r2, r7, #8
 8000872:	d500      	bpl.n	8000876 <__aeabi_dadd+0x38e>
 8000874:	e08d      	b.n	8000992 <__aeabi_dadd+0x4aa>
 8000876:	0023      	movs	r3, r4
 8000878:	433b      	orrs	r3, r7
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x396>
 800087c:	e68a      	b.n	8000594 <__aeabi_dadd+0xac>
 800087e:	2000      	movs	r0, #0
 8000880:	2500      	movs	r5, #0
 8000882:	e761      	b.n	8000748 <__aeabi_dadd+0x260>
 8000884:	4cb4      	ldr	r4, [pc, #720]	; (8000b58 <__aeabi_dadd+0x670>)
 8000886:	45a1      	cmp	r9, r4
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x3a4>
 800088a:	e0ad      	b.n	80009e8 <__aeabi_dadd+0x500>
 800088c:	2480      	movs	r4, #128	; 0x80
 800088e:	0424      	lsls	r4, r4, #16
 8000890:	4320      	orrs	r0, r4
 8000892:	4664      	mov	r4, ip
 8000894:	2c38      	cmp	r4, #56	; 0x38
 8000896:	dc3d      	bgt.n	8000914 <__aeabi_dadd+0x42c>
 8000898:	4662      	mov	r2, ip
 800089a:	2c1f      	cmp	r4, #31
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dadd+0x3b8>
 800089e:	e0b7      	b.n	8000a10 <__aeabi_dadd+0x528>
 80008a0:	2520      	movs	r5, #32
 80008a2:	001e      	movs	r6, r3
 80008a4:	1b2d      	subs	r5, r5, r4
 80008a6:	0004      	movs	r4, r0
 80008a8:	40ab      	lsls	r3, r5
 80008aa:	40ac      	lsls	r4, r5
 80008ac:	40d6      	lsrs	r6, r2
 80008ae:	40d0      	lsrs	r0, r2
 80008b0:	4642      	mov	r2, r8
 80008b2:	1e5d      	subs	r5, r3, #1
 80008b4:	41ab      	sbcs	r3, r5
 80008b6:	4334      	orrs	r4, r6
 80008b8:	1a12      	subs	r2, r2, r0
 80008ba:	4690      	mov	r8, r2
 80008bc:	4323      	orrs	r3, r4
 80008be:	e02c      	b.n	800091a <__aeabi_dadd+0x432>
 80008c0:	0742      	lsls	r2, r0, #29
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	08c0      	lsrs	r0, r0, #3
 80008c8:	e73b      	b.n	8000742 <__aeabi_dadd+0x25a>
 80008ca:	185c      	adds	r4, r3, r1
 80008cc:	429c      	cmp	r4, r3
 80008ce:	419b      	sbcs	r3, r3
 80008d0:	4440      	add	r0, r8
 80008d2:	425b      	negs	r3, r3
 80008d4:	18c7      	adds	r7, r0, r3
 80008d6:	2601      	movs	r6, #1
 80008d8:	023b      	lsls	r3, r7, #8
 80008da:	d400      	bmi.n	80008de <__aeabi_dadd+0x3f6>
 80008dc:	e729      	b.n	8000732 <__aeabi_dadd+0x24a>
 80008de:	2602      	movs	r6, #2
 80008e0:	4a9e      	ldr	r2, [pc, #632]	; (8000b5c <__aeabi_dadd+0x674>)
 80008e2:	0863      	lsrs	r3, r4, #1
 80008e4:	4017      	ands	r7, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	4014      	ands	r4, r2
 80008ea:	431c      	orrs	r4, r3
 80008ec:	07fb      	lsls	r3, r7, #31
 80008ee:	431c      	orrs	r4, r3
 80008f0:	087f      	lsrs	r7, r7, #1
 80008f2:	e673      	b.n	80005dc <__aeabi_dadd+0xf4>
 80008f4:	4644      	mov	r4, r8
 80008f6:	3a20      	subs	r2, #32
 80008f8:	40d4      	lsrs	r4, r2
 80008fa:	4662      	mov	r2, ip
 80008fc:	2a20      	cmp	r2, #32
 80008fe:	d005      	beq.n	800090c <__aeabi_dadd+0x424>
 8000900:	4667      	mov	r7, ip
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	1bd2      	subs	r2, r2, r7
 8000906:	4647      	mov	r7, r8
 8000908:	4097      	lsls	r7, r2
 800090a:	4339      	orrs	r1, r7
 800090c:	1e4a      	subs	r2, r1, #1
 800090e:	4191      	sbcs	r1, r2
 8000910:	4321      	orrs	r1, r4
 8000912:	e635      	b.n	8000580 <__aeabi_dadd+0x98>
 8000914:	4303      	orrs	r3, r0
 8000916:	1e58      	subs	r0, r3, #1
 8000918:	4183      	sbcs	r3, r0
 800091a:	1acc      	subs	r4, r1, r3
 800091c:	42a1      	cmp	r1, r4
 800091e:	41bf      	sbcs	r7, r7
 8000920:	4643      	mov	r3, r8
 8000922:	427f      	negs	r7, r7
 8000924:	4655      	mov	r5, sl
 8000926:	464e      	mov	r6, r9
 8000928:	1bdf      	subs	r7, r3, r7
 800092a:	e62e      	b.n	800058a <__aeabi_dadd+0xa2>
 800092c:	0002      	movs	r2, r0
 800092e:	431a      	orrs	r2, r3
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x44c>
 8000932:	e0bd      	b.n	8000ab0 <__aeabi_dadd+0x5c8>
 8000934:	4662      	mov	r2, ip
 8000936:	4664      	mov	r4, ip
 8000938:	3a01      	subs	r2, #1
 800093a:	2c01      	cmp	r4, #1
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x458>
 800093e:	e0e5      	b.n	8000b0c <__aeabi_dadd+0x624>
 8000940:	4c85      	ldr	r4, [pc, #532]	; (8000b58 <__aeabi_dadd+0x670>)
 8000942:	45a4      	cmp	ip, r4
 8000944:	d058      	beq.n	80009f8 <__aeabi_dadd+0x510>
 8000946:	4694      	mov	ip, r2
 8000948:	e749      	b.n	80007de <__aeabi_dadd+0x2f6>
 800094a:	4664      	mov	r4, ip
 800094c:	2220      	movs	r2, #32
 800094e:	1b12      	subs	r2, r2, r4
 8000950:	4644      	mov	r4, r8
 8000952:	4094      	lsls	r4, r2
 8000954:	000f      	movs	r7, r1
 8000956:	46a1      	mov	r9, r4
 8000958:	4664      	mov	r4, ip
 800095a:	4091      	lsls	r1, r2
 800095c:	40e7      	lsrs	r7, r4
 800095e:	464c      	mov	r4, r9
 8000960:	1e4a      	subs	r2, r1, #1
 8000962:	4191      	sbcs	r1, r2
 8000964:	433c      	orrs	r4, r7
 8000966:	4642      	mov	r2, r8
 8000968:	430c      	orrs	r4, r1
 800096a:	4661      	mov	r1, ip
 800096c:	40ca      	lsrs	r2, r1
 800096e:	1880      	adds	r0, r0, r2
 8000970:	e6f4      	b.n	800075c <__aeabi_dadd+0x274>
 8000972:	4c79      	ldr	r4, [pc, #484]	; (8000b58 <__aeabi_dadd+0x670>)
 8000974:	42a2      	cmp	r2, r4
 8000976:	d100      	bne.n	800097a <__aeabi_dadd+0x492>
 8000978:	e6fd      	b.n	8000776 <__aeabi_dadd+0x28e>
 800097a:	1859      	adds	r1, r3, r1
 800097c:	4299      	cmp	r1, r3
 800097e:	419b      	sbcs	r3, r3
 8000980:	4440      	add	r0, r8
 8000982:	425f      	negs	r7, r3
 8000984:	19c7      	adds	r7, r0, r7
 8000986:	07fc      	lsls	r4, r7, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	0016      	movs	r6, r2
 800098c:	430c      	orrs	r4, r1
 800098e:	087f      	lsrs	r7, r7, #1
 8000990:	e6cf      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000992:	1acc      	subs	r4, r1, r3
 8000994:	42a1      	cmp	r1, r4
 8000996:	41bf      	sbcs	r7, r7
 8000998:	4643      	mov	r3, r8
 800099a:	427f      	negs	r7, r7
 800099c:	1a18      	subs	r0, r3, r0
 800099e:	4655      	mov	r5, sl
 80009a0:	1bc7      	subs	r7, r0, r7
 80009a2:	e5f7      	b.n	8000594 <__aeabi_dadd+0xac>
 80009a4:	08c9      	lsrs	r1, r1, #3
 80009a6:	077b      	lsls	r3, r7, #29
 80009a8:	4655      	mov	r5, sl
 80009aa:	430b      	orrs	r3, r1
 80009ac:	08f8      	lsrs	r0, r7, #3
 80009ae:	e6c8      	b.n	8000742 <__aeabi_dadd+0x25a>
 80009b0:	2c00      	cmp	r4, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_dadd+0x4ce>
 80009b4:	e081      	b.n	8000aba <__aeabi_dadd+0x5d2>
 80009b6:	4643      	mov	r3, r8
 80009b8:	430b      	orrs	r3, r1
 80009ba:	d115      	bne.n	80009e8 <__aeabi_dadd+0x500>
 80009bc:	2080      	movs	r0, #128	; 0x80
 80009be:	2500      	movs	r5, #0
 80009c0:	0300      	lsls	r0, r0, #12
 80009c2:	e6e3      	b.n	800078c <__aeabi_dadd+0x2a4>
 80009c4:	1a5c      	subs	r4, r3, r1
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	419b      	sbcs	r3, r3
 80009ca:	1bc7      	subs	r7, r0, r7
 80009cc:	425b      	negs	r3, r3
 80009ce:	2601      	movs	r6, #1
 80009d0:	1aff      	subs	r7, r7, r3
 80009d2:	e5da      	b.n	800058a <__aeabi_dadd+0xa2>
 80009d4:	0742      	lsls	r2, r0, #29
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	4313      	orrs	r3, r2
 80009da:	08c0      	lsrs	r0, r0, #3
 80009dc:	e6d2      	b.n	8000784 <__aeabi_dadd+0x29c>
 80009de:	0742      	lsls	r2, r0, #29
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	08c0      	lsrs	r0, r0, #3
 80009e6:	e6ac      	b.n	8000742 <__aeabi_dadd+0x25a>
 80009e8:	4643      	mov	r3, r8
 80009ea:	4642      	mov	r2, r8
 80009ec:	08c9      	lsrs	r1, r1, #3
 80009ee:	075b      	lsls	r3, r3, #29
 80009f0:	4655      	mov	r5, sl
 80009f2:	430b      	orrs	r3, r1
 80009f4:	08d0      	lsrs	r0, r2, #3
 80009f6:	e6c5      	b.n	8000784 <__aeabi_dadd+0x29c>
 80009f8:	4643      	mov	r3, r8
 80009fa:	4642      	mov	r2, r8
 80009fc:	075b      	lsls	r3, r3, #29
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	430b      	orrs	r3, r1
 8000a02:	08d0      	lsrs	r0, r2, #3
 8000a04:	e6be      	b.n	8000784 <__aeabi_dadd+0x29c>
 8000a06:	4303      	orrs	r3, r0
 8000a08:	001c      	movs	r4, r3
 8000a0a:	1e63      	subs	r3, r4, #1
 8000a0c:	419c      	sbcs	r4, r3
 8000a0e:	e6fc      	b.n	800080a <__aeabi_dadd+0x322>
 8000a10:	0002      	movs	r2, r0
 8000a12:	3c20      	subs	r4, #32
 8000a14:	40e2      	lsrs	r2, r4
 8000a16:	0014      	movs	r4, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	2a20      	cmp	r2, #32
 8000a1c:	d003      	beq.n	8000a26 <__aeabi_dadd+0x53e>
 8000a1e:	2540      	movs	r5, #64	; 0x40
 8000a20:	1aad      	subs	r5, r5, r2
 8000a22:	40a8      	lsls	r0, r5
 8000a24:	4303      	orrs	r3, r0
 8000a26:	1e58      	subs	r0, r3, #1
 8000a28:	4183      	sbcs	r3, r0
 8000a2a:	4323      	orrs	r3, r4
 8000a2c:	e775      	b.n	800091a <__aeabi_dadd+0x432>
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	d0e2      	beq.n	80009f8 <__aeabi_dadd+0x510>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d0cd      	beq.n	80009d4 <__aeabi_dadd+0x4ec>
 8000a38:	0742      	lsls	r2, r0, #29
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	0312      	lsls	r2, r2, #12
 8000a44:	4210      	tst	r0, r2
 8000a46:	d006      	beq.n	8000a56 <__aeabi_dadd+0x56e>
 8000a48:	08fc      	lsrs	r4, r7, #3
 8000a4a:	4214      	tst	r4, r2
 8000a4c:	d103      	bne.n	8000a56 <__aeabi_dadd+0x56e>
 8000a4e:	0020      	movs	r0, r4
 8000a50:	08cb      	lsrs	r3, r1, #3
 8000a52:	077a      	lsls	r2, r7, #29
 8000a54:	4313      	orrs	r3, r2
 8000a56:	0f5a      	lsrs	r2, r3, #29
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	0752      	lsls	r2, r2, #29
 8000a5c:	08db      	lsrs	r3, r3, #3
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	e690      	b.n	8000784 <__aeabi_dadd+0x29c>
 8000a62:	4643      	mov	r3, r8
 8000a64:	430b      	orrs	r3, r1
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x582>
 8000a68:	e709      	b.n	800087e <__aeabi_dadd+0x396>
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	08c9      	lsrs	r1, r1, #3
 8000a70:	075b      	lsls	r3, r3, #29
 8000a72:	4655      	mov	r5, sl
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08d0      	lsrs	r0, r2, #3
 8000a78:	e666      	b.n	8000748 <__aeabi_dadd+0x260>
 8000a7a:	1acc      	subs	r4, r1, r3
 8000a7c:	42a1      	cmp	r1, r4
 8000a7e:	4189      	sbcs	r1, r1
 8000a80:	1a3f      	subs	r7, r7, r0
 8000a82:	4249      	negs	r1, r1
 8000a84:	4655      	mov	r5, sl
 8000a86:	2601      	movs	r6, #1
 8000a88:	1a7f      	subs	r7, r7, r1
 8000a8a:	e57e      	b.n	800058a <__aeabi_dadd+0xa2>
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	1a5c      	subs	r4, r3, r1
 8000a90:	1a87      	subs	r7, r0, r2
 8000a92:	42a3      	cmp	r3, r4
 8000a94:	4192      	sbcs	r2, r2
 8000a96:	4252      	negs	r2, r2
 8000a98:	1abf      	subs	r7, r7, r2
 8000a9a:	023a      	lsls	r2, r7, #8
 8000a9c:	d53d      	bpl.n	8000b1a <__aeabi_dadd+0x632>
 8000a9e:	1acc      	subs	r4, r1, r3
 8000aa0:	42a1      	cmp	r1, r4
 8000aa2:	4189      	sbcs	r1, r1
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	1a1f      	subs	r7, r3, r0
 8000aaa:	4655      	mov	r5, sl
 8000aac:	1a7f      	subs	r7, r7, r1
 8000aae:	e595      	b.n	80005dc <__aeabi_dadd+0xf4>
 8000ab0:	077b      	lsls	r3, r7, #29
 8000ab2:	08c9      	lsrs	r1, r1, #3
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	08f8      	lsrs	r0, r7, #3
 8000ab8:	e643      	b.n	8000742 <__aeabi_dadd+0x25a>
 8000aba:	4644      	mov	r4, r8
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	430c      	orrs	r4, r1
 8000ac0:	d130      	bne.n	8000b24 <__aeabi_dadd+0x63c>
 8000ac2:	0742      	lsls	r2, r0, #29
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	08c0      	lsrs	r0, r0, #3
 8000ac8:	e65c      	b.n	8000784 <__aeabi_dadd+0x29c>
 8000aca:	077b      	lsls	r3, r7, #29
 8000acc:	08c9      	lsrs	r1, r1, #3
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	08f8      	lsrs	r0, r7, #3
 8000ad2:	e639      	b.n	8000748 <__aeabi_dadd+0x260>
 8000ad4:	185c      	adds	r4, r3, r1
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	419b      	sbcs	r3, r3
 8000ada:	4440      	add	r0, r8
 8000adc:	425b      	negs	r3, r3
 8000ade:	18c7      	adds	r7, r0, r3
 8000ae0:	023b      	lsls	r3, r7, #8
 8000ae2:	d400      	bmi.n	8000ae6 <__aeabi_dadd+0x5fe>
 8000ae4:	e625      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <__aeabi_dadd+0x674>)
 8000ae8:	2601      	movs	r6, #1
 8000aea:	401f      	ands	r7, r3
 8000aec:	e621      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000aee:	0004      	movs	r4, r0
 8000af0:	3a20      	subs	r2, #32
 8000af2:	40d4      	lsrs	r4, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	2a20      	cmp	r2, #32
 8000af8:	d004      	beq.n	8000b04 <__aeabi_dadd+0x61c>
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	4666      	mov	r6, ip
 8000afe:	1b92      	subs	r2, r2, r6
 8000b00:	4090      	lsls	r0, r2
 8000b02:	4303      	orrs	r3, r0
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	4193      	sbcs	r3, r2
 8000b08:	431c      	orrs	r4, r3
 8000b0a:	e67e      	b.n	800080a <__aeabi_dadd+0x322>
 8000b0c:	185c      	adds	r4, r3, r1
 8000b0e:	428c      	cmp	r4, r1
 8000b10:	4189      	sbcs	r1, r1
 8000b12:	4440      	add	r0, r8
 8000b14:	4249      	negs	r1, r1
 8000b16:	1847      	adds	r7, r0, r1
 8000b18:	e6dd      	b.n	80008d6 <__aeabi_dadd+0x3ee>
 8000b1a:	0023      	movs	r3, r4
 8000b1c:	433b      	orrs	r3, r7
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x63a>
 8000b20:	e6ad      	b.n	800087e <__aeabi_dadd+0x396>
 8000b22:	e606      	b.n	8000732 <__aeabi_dadd+0x24a>
 8000b24:	0744      	lsls	r4, r0, #29
 8000b26:	4323      	orrs	r3, r4
 8000b28:	2480      	movs	r4, #128	; 0x80
 8000b2a:	08c0      	lsrs	r0, r0, #3
 8000b2c:	0324      	lsls	r4, r4, #12
 8000b2e:	4220      	tst	r0, r4
 8000b30:	d008      	beq.n	8000b44 <__aeabi_dadd+0x65c>
 8000b32:	4642      	mov	r2, r8
 8000b34:	08d6      	lsrs	r6, r2, #3
 8000b36:	4226      	tst	r6, r4
 8000b38:	d104      	bne.n	8000b44 <__aeabi_dadd+0x65c>
 8000b3a:	4655      	mov	r5, sl
 8000b3c:	0030      	movs	r0, r6
 8000b3e:	08cb      	lsrs	r3, r1, #3
 8000b40:	0751      	lsls	r1, r2, #29
 8000b42:	430b      	orrs	r3, r1
 8000b44:	0f5a      	lsrs	r2, r3, #29
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	0752      	lsls	r2, r2, #29
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	e619      	b.n	8000784 <__aeabi_dadd+0x29c>
 8000b50:	2300      	movs	r3, #0
 8000b52:	4a01      	ldr	r2, [pc, #4]	; (8000b58 <__aeabi_dadd+0x670>)
 8000b54:	001f      	movs	r7, r3
 8000b56:	e55e      	b.n	8000616 <__aeabi_dadd+0x12e>
 8000b58:	000007ff 	.word	0x000007ff
 8000b5c:	ff7fffff 	.word	0xff7fffff

08000b60 <__aeabi_ddiv>:
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	4657      	mov	r7, sl
 8000b64:	464e      	mov	r6, r9
 8000b66:	4645      	mov	r5, r8
 8000b68:	46de      	mov	lr, fp
 8000b6a:	b5e0      	push	{r5, r6, r7, lr}
 8000b6c:	4681      	mov	r9, r0
 8000b6e:	0005      	movs	r5, r0
 8000b70:	030c      	lsls	r4, r1, #12
 8000b72:	0048      	lsls	r0, r1, #1
 8000b74:	4692      	mov	sl, r2
 8000b76:	001f      	movs	r7, r3
 8000b78:	b085      	sub	sp, #20
 8000b7a:	0b24      	lsrs	r4, r4, #12
 8000b7c:	0d40      	lsrs	r0, r0, #21
 8000b7e:	0fce      	lsrs	r6, r1, #31
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_ddiv+0x26>
 8000b84:	e156      	b.n	8000e34 <__aeabi_ddiv+0x2d4>
 8000b86:	4bd4      	ldr	r3, [pc, #848]	; (8000ed8 <__aeabi_ddiv+0x378>)
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0x2e>
 8000b8c:	e172      	b.n	8000e74 <__aeabi_ddiv+0x314>
 8000b8e:	0f6b      	lsrs	r3, r5, #29
 8000b90:	00e4      	lsls	r4, r4, #3
 8000b92:	431c      	orrs	r4, r3
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	041b      	lsls	r3, r3, #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	4bcf      	ldr	r3, [pc, #828]	; (8000edc <__aeabi_ddiv+0x37c>)
 8000b9e:	00ed      	lsls	r5, r5, #3
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	4483      	add	fp, r0
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	033c      	lsls	r4, r7, #12
 8000bac:	007b      	lsls	r3, r7, #1
 8000bae:	4650      	mov	r0, sl
 8000bb0:	0b24      	lsrs	r4, r4, #12
 8000bb2:	0d5b      	lsrs	r3, r3, #21
 8000bb4:	0fff      	lsrs	r7, r7, #31
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_ddiv+0x5c>
 8000bba:	e11f      	b.n	8000dfc <__aeabi_ddiv+0x29c>
 8000bbc:	4ac6      	ldr	r2, [pc, #792]	; (8000ed8 <__aeabi_ddiv+0x378>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x64>
 8000bc2:	e162      	b.n	8000e8a <__aeabi_ddiv+0x32a>
 8000bc4:	49c5      	ldr	r1, [pc, #788]	; (8000edc <__aeabi_ddiv+0x37c>)
 8000bc6:	0f42      	lsrs	r2, r0, #29
 8000bc8:	468c      	mov	ip, r1
 8000bca:	00e4      	lsls	r4, r4, #3
 8000bcc:	4659      	mov	r1, fp
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	4463      	add	r3, ip
 8000bd4:	0412      	lsls	r2, r2, #16
 8000bd6:	1acb      	subs	r3, r1, r3
 8000bd8:	4314      	orrs	r4, r2
 8000bda:	469b      	mov	fp, r3
 8000bdc:	00c2      	lsls	r2, r0, #3
 8000bde:	2000      	movs	r0, #0
 8000be0:	0033      	movs	r3, r6
 8000be2:	407b      	eors	r3, r7
 8000be4:	469a      	mov	sl, r3
 8000be6:	464b      	mov	r3, r9
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d827      	bhi.n	8000c3c <__aeabi_ddiv+0xdc>
 8000bec:	49bc      	ldr	r1, [pc, #752]	; (8000ee0 <__aeabi_ddiv+0x380>)
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	58cb      	ldr	r3, [r1, r3]
 8000bf2:	469f      	mov	pc, r3
 8000bf4:	46b2      	mov	sl, r6
 8000bf6:	9b00      	ldr	r3, [sp, #0]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d016      	beq.n	8000c2a <__aeabi_ddiv+0xca>
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_ddiv+0xa2>
 8000c00:	e28e      	b.n	8001120 <__aeabi_ddiv+0x5c0>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d000      	beq.n	8000c08 <__aeabi_ddiv+0xa8>
 8000c06:	e0d9      	b.n	8000dbc <__aeabi_ddiv+0x25c>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2400      	movs	r4, #0
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	4652      	mov	r2, sl
 8000c10:	051b      	lsls	r3, r3, #20
 8000c12:	4323      	orrs	r3, r4
 8000c14:	07d2      	lsls	r2, r2, #31
 8000c16:	4313      	orrs	r3, r2
 8000c18:	0028      	movs	r0, r5
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	b005      	add	sp, #20
 8000c1e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c20:	46bb      	mov	fp, r7
 8000c22:	46b2      	mov	sl, r6
 8000c24:	46a9      	mov	r9, r5
 8000c26:	46a0      	mov	r8, r4
 8000c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	4baa      	ldr	r3, [pc, #680]	; (8000ed8 <__aeabi_ddiv+0x378>)
 8000c30:	e7ed      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000c32:	46ba      	mov	sl, r7
 8000c34:	46a0      	mov	r8, r4
 8000c36:	0015      	movs	r5, r2
 8000c38:	9000      	str	r0, [sp, #0]
 8000c3a:	e7dc      	b.n	8000bf6 <__aeabi_ddiv+0x96>
 8000c3c:	4544      	cmp	r4, r8
 8000c3e:	d200      	bcs.n	8000c42 <__aeabi_ddiv+0xe2>
 8000c40:	e1c7      	b.n	8000fd2 <__aeabi_ddiv+0x472>
 8000c42:	d100      	bne.n	8000c46 <__aeabi_ddiv+0xe6>
 8000c44:	e1c2      	b.n	8000fcc <__aeabi_ddiv+0x46c>
 8000c46:	2301      	movs	r3, #1
 8000c48:	425b      	negs	r3, r3
 8000c4a:	469c      	mov	ip, r3
 8000c4c:	002e      	movs	r6, r5
 8000c4e:	4640      	mov	r0, r8
 8000c50:	2500      	movs	r5, #0
 8000c52:	44e3      	add	fp, ip
 8000c54:	0223      	lsls	r3, r4, #8
 8000c56:	0e14      	lsrs	r4, r2, #24
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	0c1b      	lsrs	r3, r3, #16
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	0423      	lsls	r3, r4, #16
 8000c60:	0c1f      	lsrs	r7, r3, #16
 8000c62:	0212      	lsls	r2, r2, #8
 8000c64:	4649      	mov	r1, r9
 8000c66:	9200      	str	r2, [sp, #0]
 8000c68:	9701      	str	r7, [sp, #4]
 8000c6a:	f7ff fad9 	bl	8000220 <__aeabi_uidivmod>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	437a      	muls	r2, r7
 8000c72:	040b      	lsls	r3, r1, #16
 8000c74:	0c31      	lsrs	r1, r6, #16
 8000c76:	4680      	mov	r8, r0
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	d907      	bls.n	8000c8e <__aeabi_ddiv+0x12e>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	469c      	mov	ip, r3
 8000c84:	1909      	adds	r1, r1, r4
 8000c86:	44e0      	add	r8, ip
 8000c88:	428c      	cmp	r4, r1
 8000c8a:	d800      	bhi.n	8000c8e <__aeabi_ddiv+0x12e>
 8000c8c:	e207      	b.n	800109e <__aeabi_ddiv+0x53e>
 8000c8e:	1a88      	subs	r0, r1, r2
 8000c90:	4649      	mov	r1, r9
 8000c92:	f7ff fac5 	bl	8000220 <__aeabi_uidivmod>
 8000c96:	0409      	lsls	r1, r1, #16
 8000c98:	468c      	mov	ip, r1
 8000c9a:	0431      	lsls	r1, r6, #16
 8000c9c:	4666      	mov	r6, ip
 8000c9e:	9a01      	ldr	r2, [sp, #4]
 8000ca0:	0c09      	lsrs	r1, r1, #16
 8000ca2:	4342      	muls	r2, r0
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	4331      	orrs	r1, r6
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	d904      	bls.n	8000cb6 <__aeabi_ddiv+0x156>
 8000cac:	1909      	adds	r1, r1, r4
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	428c      	cmp	r4, r1
 8000cb2:	d800      	bhi.n	8000cb6 <__aeabi_ddiv+0x156>
 8000cb4:	e1ed      	b.n	8001092 <__aeabi_ddiv+0x532>
 8000cb6:	1a88      	subs	r0, r1, r2
 8000cb8:	4642      	mov	r2, r8
 8000cba:	0412      	lsls	r2, r2, #16
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	4641      	mov	r1, r8
 8000cc2:	9b00      	ldr	r3, [sp, #0]
 8000cc4:	040e      	lsls	r6, r1, #16
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	001f      	movs	r7, r3
 8000cca:	9302      	str	r3, [sp, #8]
 8000ccc:	9b00      	ldr	r3, [sp, #0]
 8000cce:	0c36      	lsrs	r6, r6, #16
 8000cd0:	041b      	lsls	r3, r3, #16
 8000cd2:	0c19      	lsrs	r1, r3, #16
 8000cd4:	000b      	movs	r3, r1
 8000cd6:	4373      	muls	r3, r6
 8000cd8:	0c12      	lsrs	r2, r2, #16
 8000cda:	437e      	muls	r6, r7
 8000cdc:	9103      	str	r1, [sp, #12]
 8000cde:	4351      	muls	r1, r2
 8000ce0:	437a      	muls	r2, r7
 8000ce2:	0c1f      	lsrs	r7, r3, #16
 8000ce4:	46bc      	mov	ip, r7
 8000ce6:	1876      	adds	r6, r6, r1
 8000ce8:	4466      	add	r6, ip
 8000cea:	42b1      	cmp	r1, r6
 8000cec:	d903      	bls.n	8000cf6 <__aeabi_ddiv+0x196>
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	468c      	mov	ip, r1
 8000cf4:	4462      	add	r2, ip
 8000cf6:	0c31      	lsrs	r1, r6, #16
 8000cf8:	188a      	adds	r2, r1, r2
 8000cfa:	0431      	lsls	r1, r6, #16
 8000cfc:	041e      	lsls	r6, r3, #16
 8000cfe:	0c36      	lsrs	r6, r6, #16
 8000d00:	198e      	adds	r6, r1, r6
 8000d02:	4290      	cmp	r0, r2
 8000d04:	d302      	bcc.n	8000d0c <__aeabi_ddiv+0x1ac>
 8000d06:	d112      	bne.n	8000d2e <__aeabi_ddiv+0x1ce>
 8000d08:	42b5      	cmp	r5, r6
 8000d0a:	d210      	bcs.n	8000d2e <__aeabi_ddiv+0x1ce>
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	1e59      	subs	r1, r3, #1
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	469c      	mov	ip, r3
 8000d14:	4465      	add	r5, ip
 8000d16:	001f      	movs	r7, r3
 8000d18:	429d      	cmp	r5, r3
 8000d1a:	419b      	sbcs	r3, r3
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	191b      	adds	r3, r3, r4
 8000d20:	18c0      	adds	r0, r0, r3
 8000d22:	4284      	cmp	r4, r0
 8000d24:	d200      	bcs.n	8000d28 <__aeabi_ddiv+0x1c8>
 8000d26:	e1a0      	b.n	800106a <__aeabi_ddiv+0x50a>
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x1cc>
 8000d2a:	e19b      	b.n	8001064 <__aeabi_ddiv+0x504>
 8000d2c:	4688      	mov	r8, r1
 8000d2e:	1bae      	subs	r6, r5, r6
 8000d30:	42b5      	cmp	r5, r6
 8000d32:	41ad      	sbcs	r5, r5
 8000d34:	1a80      	subs	r0, r0, r2
 8000d36:	426d      	negs	r5, r5
 8000d38:	1b40      	subs	r0, r0, r5
 8000d3a:	4284      	cmp	r4, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x1e0>
 8000d3e:	e1d5      	b.n	80010ec <__aeabi_ddiv+0x58c>
 8000d40:	4649      	mov	r1, r9
 8000d42:	f7ff fa6d 	bl	8000220 <__aeabi_uidivmod>
 8000d46:	9a01      	ldr	r2, [sp, #4]
 8000d48:	040b      	lsls	r3, r1, #16
 8000d4a:	4342      	muls	r2, r0
 8000d4c:	0c31      	lsrs	r1, r6, #16
 8000d4e:	0005      	movs	r5, r0
 8000d50:	4319      	orrs	r1, r3
 8000d52:	428a      	cmp	r2, r1
 8000d54:	d900      	bls.n	8000d58 <__aeabi_ddiv+0x1f8>
 8000d56:	e16c      	b.n	8001032 <__aeabi_ddiv+0x4d2>
 8000d58:	1a88      	subs	r0, r1, r2
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	f7ff fa60 	bl	8000220 <__aeabi_uidivmod>
 8000d60:	9a01      	ldr	r2, [sp, #4]
 8000d62:	0436      	lsls	r6, r6, #16
 8000d64:	4342      	muls	r2, r0
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	0c36      	lsrs	r6, r6, #16
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	430e      	orrs	r6, r1
 8000d6e:	42b2      	cmp	r2, r6
 8000d70:	d900      	bls.n	8000d74 <__aeabi_ddiv+0x214>
 8000d72:	e153      	b.n	800101c <__aeabi_ddiv+0x4bc>
 8000d74:	9803      	ldr	r0, [sp, #12]
 8000d76:	1ab6      	subs	r6, r6, r2
 8000d78:	0002      	movs	r2, r0
 8000d7a:	042d      	lsls	r5, r5, #16
 8000d7c:	431d      	orrs	r5, r3
 8000d7e:	9f02      	ldr	r7, [sp, #8]
 8000d80:	042b      	lsls	r3, r5, #16
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	435a      	muls	r2, r3
 8000d86:	437b      	muls	r3, r7
 8000d88:	469c      	mov	ip, r3
 8000d8a:	0c29      	lsrs	r1, r5, #16
 8000d8c:	4348      	muls	r0, r1
 8000d8e:	0c13      	lsrs	r3, r2, #16
 8000d90:	4484      	add	ip, r0
 8000d92:	4463      	add	r3, ip
 8000d94:	4379      	muls	r1, r7
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d903      	bls.n	8000da2 <__aeabi_ddiv+0x242>
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	0240      	lsls	r0, r0, #9
 8000d9e:	4684      	mov	ip, r0
 8000da0:	4461      	add	r1, ip
 8000da2:	0c18      	lsrs	r0, r3, #16
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c12      	lsrs	r2, r2, #16
 8000daa:	1841      	adds	r1, r0, r1
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	428e      	cmp	r6, r1
 8000db0:	d200      	bcs.n	8000db4 <__aeabi_ddiv+0x254>
 8000db2:	e0ff      	b.n	8000fb4 <__aeabi_ddiv+0x454>
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x258>
 8000db6:	e0fa      	b.n	8000fae <__aeabi_ddiv+0x44e>
 8000db8:	2301      	movs	r3, #1
 8000dba:	431d      	orrs	r5, r3
 8000dbc:	4a49      	ldr	r2, [pc, #292]	; (8000ee4 <__aeabi_ddiv+0x384>)
 8000dbe:	445a      	add	r2, fp
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_ddiv+0x266>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_ddiv+0x3bc>
 8000dc6:	076b      	lsls	r3, r5, #29
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_ddiv+0x26c>
 8000dca:	e13d      	b.n	8001048 <__aeabi_ddiv+0x4e8>
 8000dcc:	08ed      	lsrs	r5, r5, #3
 8000dce:	4643      	mov	r3, r8
 8000dd0:	01db      	lsls	r3, r3, #7
 8000dd2:	d506      	bpl.n	8000de2 <__aeabi_ddiv+0x282>
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <__aeabi_ddiv+0x388>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	4690      	mov	r8, r2
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	00d2      	lsls	r2, r2, #3
 8000de0:	445a      	add	r2, fp
 8000de2:	4b42      	ldr	r3, [pc, #264]	; (8000eec <__aeabi_ddiv+0x38c>)
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dd00      	ble.n	8000dea <__aeabi_ddiv+0x28a>
 8000de8:	e71f      	b.n	8000c2a <__aeabi_ddiv+0xca>
 8000dea:	4643      	mov	r3, r8
 8000dec:	075b      	lsls	r3, r3, #29
 8000dee:	431d      	orrs	r5, r3
 8000df0:	4643      	mov	r3, r8
 8000df2:	0552      	lsls	r2, r2, #21
 8000df4:	025c      	lsls	r4, r3, #9
 8000df6:	0b24      	lsrs	r4, r4, #12
 8000df8:	0d53      	lsrs	r3, r2, #21
 8000dfa:	e708      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000dfc:	4652      	mov	r2, sl
 8000dfe:	4322      	orrs	r2, r4
 8000e00:	d100      	bne.n	8000e04 <__aeabi_ddiv+0x2a4>
 8000e02:	e07b      	b.n	8000efc <__aeabi_ddiv+0x39c>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_ddiv+0x2aa>
 8000e08:	e0fa      	b.n	8001000 <__aeabi_ddiv+0x4a0>
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f001 f904 	bl	8002018 <__clzsi2>
 8000e10:	0002      	movs	r2, r0
 8000e12:	3a0b      	subs	r2, #11
 8000e14:	231d      	movs	r3, #29
 8000e16:	0001      	movs	r1, r0
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	4652      	mov	r2, sl
 8000e1c:	3908      	subs	r1, #8
 8000e1e:	40da      	lsrs	r2, r3
 8000e20:	408c      	lsls	r4, r1
 8000e22:	4314      	orrs	r4, r2
 8000e24:	4652      	mov	r2, sl
 8000e26:	408a      	lsls	r2, r1
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <__aeabi_ddiv+0x390>)
 8000e2a:	4458      	add	r0, fp
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	4483      	add	fp, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	e6d5      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d044      	beq.n	8000ec6 <__aeabi_ddiv+0x366>
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x2e2>
 8000e40:	e0ce      	b.n	8000fe0 <__aeabi_ddiv+0x480>
 8000e42:	0020      	movs	r0, r4
 8000e44:	f001 f8e8 	bl	8002018 <__clzsi2>
 8000e48:	0001      	movs	r1, r0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	390b      	subs	r1, #11
 8000e4e:	231d      	movs	r3, #29
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	4649      	mov	r1, r9
 8000e54:	0010      	movs	r0, r2
 8000e56:	40d9      	lsrs	r1, r3
 8000e58:	3808      	subs	r0, #8
 8000e5a:	4084      	lsls	r4, r0
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	464d      	mov	r5, r9
 8000e60:	4323      	orrs	r3, r4
 8000e62:	4698      	mov	r8, r3
 8000e64:	4085      	lsls	r5, r0
 8000e66:	4823      	ldr	r0, [pc, #140]	; (8000ef4 <__aeabi_ddiv+0x394>)
 8000e68:	1a83      	subs	r3, r0, r2
 8000e6a:	469b      	mov	fp, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	e69a      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000e74:	464b      	mov	r3, r9
 8000e76:	4323      	orrs	r3, r4
 8000e78:	4698      	mov	r8, r3
 8000e7a:	d11d      	bne.n	8000eb8 <__aeabi_ddiv+0x358>
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	4699      	mov	r9, r3
 8000e80:	3b06      	subs	r3, #6
 8000e82:	2500      	movs	r5, #0
 8000e84:	4683      	mov	fp, r0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e68f      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000e8a:	4652      	mov	r2, sl
 8000e8c:	4322      	orrs	r2, r4
 8000e8e:	d109      	bne.n	8000ea4 <__aeabi_ddiv+0x344>
 8000e90:	2302      	movs	r3, #2
 8000e92:	4649      	mov	r1, r9
 8000e94:	4319      	orrs	r1, r3
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <__aeabi_ddiv+0x398>)
 8000e98:	4689      	mov	r9, r1
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	44e3      	add	fp, ip
 8000ea2:	e69d      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <__aeabi_ddiv+0x398>)
 8000eac:	4691      	mov	r9, r2
 8000eae:	469c      	mov	ip, r3
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	44e3      	add	fp, ip
 8000eb6:	e693      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000eb8:	230c      	movs	r3, #12
 8000eba:	4699      	mov	r9, r3
 8000ebc:	3b09      	subs	r3, #9
 8000ebe:	46a0      	mov	r8, r4
 8000ec0:	4683      	mov	fp, r0
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	e671      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	4699      	mov	r9, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	469b      	mov	fp, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	e669      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	08006f70 	.word	0x08006f70
 8000ee4:	000003ff 	.word	0x000003ff
 8000ee8:	feffffff 	.word	0xfeffffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	000003f3 	.word	0x000003f3
 8000ef4:	fffffc0d 	.word	0xfffffc0d
 8000ef8:	fffff801 	.word	0xfffff801
 8000efc:	4649      	mov	r1, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	4319      	orrs	r1, r3
 8000f02:	4689      	mov	r9, r1
 8000f04:	2400      	movs	r4, #0
 8000f06:	2001      	movs	r0, #1
 8000f08:	e66a      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2480      	movs	r4, #128	; 0x80
 8000f0e:	469a      	mov	sl, r3
 8000f10:	2500      	movs	r5, #0
 8000f12:	4b8a      	ldr	r3, [pc, #552]	; (800113c <__aeabi_ddiv+0x5dc>)
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	e67a      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f18:	2501      	movs	r5, #1
 8000f1a:	426d      	negs	r5, r5
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	2b38      	cmp	r3, #56	; 0x38
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_ddiv+0x3c6>
 8000f24:	e670      	b.n	8000c08 <__aeabi_ddiv+0xa8>
 8000f26:	2b1f      	cmp	r3, #31
 8000f28:	dc00      	bgt.n	8000f2c <__aeabi_ddiv+0x3cc>
 8000f2a:	e0bf      	b.n	80010ac <__aeabi_ddiv+0x54c>
 8000f2c:	211f      	movs	r1, #31
 8000f2e:	4249      	negs	r1, r1
 8000f30:	1a8a      	subs	r2, r1, r2
 8000f32:	4641      	mov	r1, r8
 8000f34:	40d1      	lsrs	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	2b20      	cmp	r3, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_ddiv+0x3e6>
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4b80      	ldr	r3, [pc, #512]	; (8001140 <__aeabi_ddiv+0x5e0>)
 8000f40:	445b      	add	r3, fp
 8000f42:	4099      	lsls	r1, r3
 8000f44:	430d      	orrs	r5, r1
 8000f46:	1e6b      	subs	r3, r5, #1
 8000f48:	419d      	sbcs	r5, r3
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	432a      	orrs	r2, r5
 8000f4e:	001d      	movs	r5, r3
 8000f50:	2400      	movs	r4, #0
 8000f52:	4015      	ands	r5, r2
 8000f54:	4213      	tst	r3, r2
 8000f56:	d100      	bne.n	8000f5a <__aeabi_ddiv+0x3fa>
 8000f58:	e0d4      	b.n	8001104 <__aeabi_ddiv+0x5a4>
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4011      	ands	r1, r2
 8000f60:	2904      	cmp	r1, #4
 8000f62:	d100      	bne.n	8000f66 <__aeabi_ddiv+0x406>
 8000f64:	e0cb      	b.n	80010fe <__aeabi_ddiv+0x59e>
 8000f66:	1d11      	adds	r1, r2, #4
 8000f68:	4291      	cmp	r1, r2
 8000f6a:	4192      	sbcs	r2, r2
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	189b      	adds	r3, r3, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	0219      	lsls	r1, r3, #8
 8000f74:	d400      	bmi.n	8000f78 <__aeabi_ddiv+0x418>
 8000f76:	e0c2      	b.n	80010fe <__aeabi_ddiv+0x59e>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	2500      	movs	r5, #0
 8000f7e:	e646      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	4641      	mov	r1, r8
 8000f84:	031b      	lsls	r3, r3, #12
 8000f86:	4219      	tst	r1, r3
 8000f88:	d008      	beq.n	8000f9c <__aeabi_ddiv+0x43c>
 8000f8a:	421c      	tst	r4, r3
 8000f8c:	d106      	bne.n	8000f9c <__aeabi_ddiv+0x43c>
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	0324      	lsls	r4, r4, #12
 8000f92:	46ba      	mov	sl, r7
 8000f94:	0015      	movs	r5, r2
 8000f96:	4b69      	ldr	r3, [pc, #420]	; (800113c <__aeabi_ddiv+0x5dc>)
 8000f98:	0b24      	lsrs	r4, r4, #12
 8000f9a:	e638      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	431c      	orrs	r4, r3
 8000fa4:	0324      	lsls	r4, r4, #12
 8000fa6:	46b2      	mov	sl, r6
 8000fa8:	4b64      	ldr	r3, [pc, #400]	; (800113c <__aeabi_ddiv+0x5dc>)
 8000faa:	0b24      	lsrs	r4, r4, #12
 8000fac:	e62f      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_ddiv+0x454>
 8000fb2:	e703      	b.n	8000dbc <__aeabi_ddiv+0x25c>
 8000fb4:	19a6      	adds	r6, r4, r6
 8000fb6:	1e68      	subs	r0, r5, #1
 8000fb8:	42a6      	cmp	r6, r4
 8000fba:	d200      	bcs.n	8000fbe <__aeabi_ddiv+0x45e>
 8000fbc:	e08d      	b.n	80010da <__aeabi_ddiv+0x57a>
 8000fbe:	428e      	cmp	r6, r1
 8000fc0:	d200      	bcs.n	8000fc4 <__aeabi_ddiv+0x464>
 8000fc2:	e0a3      	b.n	800110c <__aeabi_ddiv+0x5ac>
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_ddiv+0x468>
 8000fc6:	e0b3      	b.n	8001130 <__aeabi_ddiv+0x5d0>
 8000fc8:	0005      	movs	r5, r0
 8000fca:	e6f5      	b.n	8000db8 <__aeabi_ddiv+0x258>
 8000fcc:	42aa      	cmp	r2, r5
 8000fce:	d900      	bls.n	8000fd2 <__aeabi_ddiv+0x472>
 8000fd0:	e639      	b.n	8000c46 <__aeabi_ddiv+0xe6>
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	07de      	lsls	r6, r3, #31
 8000fd6:	0858      	lsrs	r0, r3, #1
 8000fd8:	086b      	lsrs	r3, r5, #1
 8000fda:	431e      	orrs	r6, r3
 8000fdc:	07ed      	lsls	r5, r5, #31
 8000fde:	e639      	b.n	8000c54 <__aeabi_ddiv+0xf4>
 8000fe0:	4648      	mov	r0, r9
 8000fe2:	f001 f819 	bl	8002018 <__clzsi2>
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	0002      	movs	r2, r0
 8000fea:	3115      	adds	r1, #21
 8000fec:	3220      	adds	r2, #32
 8000fee:	291c      	cmp	r1, #28
 8000ff0:	dc00      	bgt.n	8000ff4 <__aeabi_ddiv+0x494>
 8000ff2:	e72c      	b.n	8000e4e <__aeabi_ddiv+0x2ee>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4083      	lsls	r3, r0
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	e732      	b.n	8000e66 <__aeabi_ddiv+0x306>
 8001000:	f001 f80a 	bl	8002018 <__clzsi2>
 8001004:	0003      	movs	r3, r0
 8001006:	001a      	movs	r2, r3
 8001008:	3215      	adds	r2, #21
 800100a:	3020      	adds	r0, #32
 800100c:	2a1c      	cmp	r2, #28
 800100e:	dc00      	bgt.n	8001012 <__aeabi_ddiv+0x4b2>
 8001010:	e700      	b.n	8000e14 <__aeabi_ddiv+0x2b4>
 8001012:	4654      	mov	r4, sl
 8001014:	3b08      	subs	r3, #8
 8001016:	2200      	movs	r2, #0
 8001018:	409c      	lsls	r4, r3
 800101a:	e705      	b.n	8000e28 <__aeabi_ddiv+0x2c8>
 800101c:	1936      	adds	r6, r6, r4
 800101e:	3b01      	subs	r3, #1
 8001020:	42b4      	cmp	r4, r6
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x4c6>
 8001024:	e6a6      	b.n	8000d74 <__aeabi_ddiv+0x214>
 8001026:	42b2      	cmp	r2, r6
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x4cc>
 800102a:	e6a3      	b.n	8000d74 <__aeabi_ddiv+0x214>
 800102c:	1e83      	subs	r3, r0, #2
 800102e:	1936      	adds	r6, r6, r4
 8001030:	e6a0      	b.n	8000d74 <__aeabi_ddiv+0x214>
 8001032:	1909      	adds	r1, r1, r4
 8001034:	3d01      	subs	r5, #1
 8001036:	428c      	cmp	r4, r1
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x4dc>
 800103a:	e68d      	b.n	8000d58 <__aeabi_ddiv+0x1f8>
 800103c:	428a      	cmp	r2, r1
 800103e:	d800      	bhi.n	8001042 <__aeabi_ddiv+0x4e2>
 8001040:	e68a      	b.n	8000d58 <__aeabi_ddiv+0x1f8>
 8001042:	1e85      	subs	r5, r0, #2
 8001044:	1909      	adds	r1, r1, r4
 8001046:	e687      	b.n	8000d58 <__aeabi_ddiv+0x1f8>
 8001048:	230f      	movs	r3, #15
 800104a:	402b      	ands	r3, r5
 800104c:	2b04      	cmp	r3, #4
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x4f2>
 8001050:	e6bc      	b.n	8000dcc <__aeabi_ddiv+0x26c>
 8001052:	2305      	movs	r3, #5
 8001054:	425b      	negs	r3, r3
 8001056:	42ab      	cmp	r3, r5
 8001058:	419b      	sbcs	r3, r3
 800105a:	3504      	adds	r5, #4
 800105c:	425b      	negs	r3, r3
 800105e:	08ed      	lsrs	r5, r5, #3
 8001060:	4498      	add	r8, r3
 8001062:	e6b4      	b.n	8000dce <__aeabi_ddiv+0x26e>
 8001064:	42af      	cmp	r7, r5
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x50a>
 8001068:	e660      	b.n	8000d2c <__aeabi_ddiv+0x1cc>
 800106a:	4282      	cmp	r2, r0
 800106c:	d804      	bhi.n	8001078 <__aeabi_ddiv+0x518>
 800106e:	d000      	beq.n	8001072 <__aeabi_ddiv+0x512>
 8001070:	e65c      	b.n	8000d2c <__aeabi_ddiv+0x1cc>
 8001072:	42ae      	cmp	r6, r5
 8001074:	d800      	bhi.n	8001078 <__aeabi_ddiv+0x518>
 8001076:	e659      	b.n	8000d2c <__aeabi_ddiv+0x1cc>
 8001078:	2302      	movs	r3, #2
 800107a:	425b      	negs	r3, r3
 800107c:	469c      	mov	ip, r3
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	44e0      	add	r8, ip
 8001082:	469c      	mov	ip, r3
 8001084:	4465      	add	r5, ip
 8001086:	429d      	cmp	r5, r3
 8001088:	419b      	sbcs	r3, r3
 800108a:	425b      	negs	r3, r3
 800108c:	191b      	adds	r3, r3, r4
 800108e:	18c0      	adds	r0, r0, r3
 8001090:	e64d      	b.n	8000d2e <__aeabi_ddiv+0x1ce>
 8001092:	428a      	cmp	r2, r1
 8001094:	d800      	bhi.n	8001098 <__aeabi_ddiv+0x538>
 8001096:	e60e      	b.n	8000cb6 <__aeabi_ddiv+0x156>
 8001098:	1e83      	subs	r3, r0, #2
 800109a:	1909      	adds	r1, r1, r4
 800109c:	e60b      	b.n	8000cb6 <__aeabi_ddiv+0x156>
 800109e:	428a      	cmp	r2, r1
 80010a0:	d800      	bhi.n	80010a4 <__aeabi_ddiv+0x544>
 80010a2:	e5f4      	b.n	8000c8e <__aeabi_ddiv+0x12e>
 80010a4:	1e83      	subs	r3, r0, #2
 80010a6:	4698      	mov	r8, r3
 80010a8:	1909      	adds	r1, r1, r4
 80010aa:	e5f0      	b.n	8000c8e <__aeabi_ddiv+0x12e>
 80010ac:	4925      	ldr	r1, [pc, #148]	; (8001144 <__aeabi_ddiv+0x5e4>)
 80010ae:	0028      	movs	r0, r5
 80010b0:	4459      	add	r1, fp
 80010b2:	408d      	lsls	r5, r1
 80010b4:	4642      	mov	r2, r8
 80010b6:	408a      	lsls	r2, r1
 80010b8:	1e69      	subs	r1, r5, #1
 80010ba:	418d      	sbcs	r5, r1
 80010bc:	4641      	mov	r1, r8
 80010be:	40d8      	lsrs	r0, r3
 80010c0:	40d9      	lsrs	r1, r3
 80010c2:	4302      	orrs	r2, r0
 80010c4:	432a      	orrs	r2, r5
 80010c6:	000b      	movs	r3, r1
 80010c8:	0751      	lsls	r1, r2, #29
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x56e>
 80010cc:	e751      	b.n	8000f72 <__aeabi_ddiv+0x412>
 80010ce:	210f      	movs	r1, #15
 80010d0:	4011      	ands	r1, r2
 80010d2:	2904      	cmp	r1, #4
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x578>
 80010d6:	e746      	b.n	8000f66 <__aeabi_ddiv+0x406>
 80010d8:	e74b      	b.n	8000f72 <__aeabi_ddiv+0x412>
 80010da:	0005      	movs	r5, r0
 80010dc:	428e      	cmp	r6, r1
 80010de:	d000      	beq.n	80010e2 <__aeabi_ddiv+0x582>
 80010e0:	e66a      	b.n	8000db8 <__aeabi_ddiv+0x258>
 80010e2:	9a00      	ldr	r2, [sp, #0]
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d000      	beq.n	80010ea <__aeabi_ddiv+0x58a>
 80010e8:	e666      	b.n	8000db8 <__aeabi_ddiv+0x258>
 80010ea:	e667      	b.n	8000dbc <__aeabi_ddiv+0x25c>
 80010ec:	4a16      	ldr	r2, [pc, #88]	; (8001148 <__aeabi_ddiv+0x5e8>)
 80010ee:	445a      	add	r2, fp
 80010f0:	2a00      	cmp	r2, #0
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_ddiv+0x596>
 80010f4:	e710      	b.n	8000f18 <__aeabi_ddiv+0x3b8>
 80010f6:	2301      	movs	r3, #1
 80010f8:	2500      	movs	r5, #0
 80010fa:	4498      	add	r8, r3
 80010fc:	e667      	b.n	8000dce <__aeabi_ddiv+0x26e>
 80010fe:	075d      	lsls	r5, r3, #29
 8001100:	025b      	lsls	r3, r3, #9
 8001102:	0b1c      	lsrs	r4, r3, #12
 8001104:	08d2      	lsrs	r2, r2, #3
 8001106:	2300      	movs	r3, #0
 8001108:	4315      	orrs	r5, r2
 800110a:	e580      	b.n	8000c0e <__aeabi_ddiv+0xae>
 800110c:	9800      	ldr	r0, [sp, #0]
 800110e:	3d02      	subs	r5, #2
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	4282      	cmp	r2, r0
 8001114:	41bf      	sbcs	r7, r7
 8001116:	427f      	negs	r7, r7
 8001118:	193c      	adds	r4, r7, r4
 800111a:	1936      	adds	r6, r6, r4
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	e7dd      	b.n	80010dc <__aeabi_ddiv+0x57c>
 8001120:	2480      	movs	r4, #128	; 0x80
 8001122:	4643      	mov	r3, r8
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	431c      	orrs	r4, r3
 8001128:	0324      	lsls	r4, r4, #12
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <__aeabi_ddiv+0x5dc>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e56e      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8001130:	9a00      	ldr	r2, [sp, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3ea      	bcc.n	800110c <__aeabi_ddiv+0x5ac>
 8001136:	0005      	movs	r5, r0
 8001138:	e7d3      	b.n	80010e2 <__aeabi_ddiv+0x582>
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	000007ff 	.word	0x000007ff
 8001140:	0000043e 	.word	0x0000043e
 8001144:	0000041e 	.word	0x0000041e
 8001148:	000003ff 	.word	0x000003ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464e      	mov	r6, r9
 8001150:	4645      	mov	r5, r8
 8001152:	46de      	mov	lr, fp
 8001154:	4657      	mov	r7, sl
 8001156:	4690      	mov	r8, r2
 8001158:	b5e0      	push	{r5, r6, r7, lr}
 800115a:	0017      	movs	r7, r2
 800115c:	031a      	lsls	r2, r3, #12
 800115e:	0b12      	lsrs	r2, r2, #12
 8001160:	0005      	movs	r5, r0
 8001162:	4684      	mov	ip, r0
 8001164:	4819      	ldr	r0, [pc, #100]	; (80011cc <__eqdf2+0x80>)
 8001166:	030e      	lsls	r6, r1, #12
 8001168:	004c      	lsls	r4, r1, #1
 800116a:	4691      	mov	r9, r2
 800116c:	005a      	lsls	r2, r3, #1
 800116e:	0fdb      	lsrs	r3, r3, #31
 8001170:	469b      	mov	fp, r3
 8001172:	0b36      	lsrs	r6, r6, #12
 8001174:	0d64      	lsrs	r4, r4, #21
 8001176:	0fc9      	lsrs	r1, r1, #31
 8001178:	0d52      	lsrs	r2, r2, #21
 800117a:	4284      	cmp	r4, r0
 800117c:	d019      	beq.n	80011b2 <__eqdf2+0x66>
 800117e:	4282      	cmp	r2, r0
 8001180:	d010      	beq.n	80011a4 <__eqdf2+0x58>
 8001182:	2001      	movs	r0, #1
 8001184:	4294      	cmp	r4, r2
 8001186:	d10e      	bne.n	80011a6 <__eqdf2+0x5a>
 8001188:	454e      	cmp	r6, r9
 800118a:	d10c      	bne.n	80011a6 <__eqdf2+0x5a>
 800118c:	2001      	movs	r0, #1
 800118e:	45c4      	cmp	ip, r8
 8001190:	d109      	bne.n	80011a6 <__eqdf2+0x5a>
 8001192:	4559      	cmp	r1, fp
 8001194:	d017      	beq.n	80011c6 <__eqdf2+0x7a>
 8001196:	2c00      	cmp	r4, #0
 8001198:	d105      	bne.n	80011a6 <__eqdf2+0x5a>
 800119a:	0030      	movs	r0, r6
 800119c:	4328      	orrs	r0, r5
 800119e:	1e43      	subs	r3, r0, #1
 80011a0:	4198      	sbcs	r0, r3
 80011a2:	e000      	b.n	80011a6 <__eqdf2+0x5a>
 80011a4:	2001      	movs	r0, #1
 80011a6:	bcf0      	pop	{r4, r5, r6, r7}
 80011a8:	46bb      	mov	fp, r7
 80011aa:	46b2      	mov	sl, r6
 80011ac:	46a9      	mov	r9, r5
 80011ae:	46a0      	mov	r8, r4
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b2:	0033      	movs	r3, r6
 80011b4:	2001      	movs	r0, #1
 80011b6:	432b      	orrs	r3, r5
 80011b8:	d1f5      	bne.n	80011a6 <__eqdf2+0x5a>
 80011ba:	42a2      	cmp	r2, r4
 80011bc:	d1f3      	bne.n	80011a6 <__eqdf2+0x5a>
 80011be:	464b      	mov	r3, r9
 80011c0:	433b      	orrs	r3, r7
 80011c2:	d1f0      	bne.n	80011a6 <__eqdf2+0x5a>
 80011c4:	e7e2      	b.n	800118c <__eqdf2+0x40>
 80011c6:	2000      	movs	r0, #0
 80011c8:	e7ed      	b.n	80011a6 <__eqdf2+0x5a>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	000007ff 	.word	0x000007ff

080011d0 <__gedf2>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	4647      	mov	r7, r8
 80011d4:	46ce      	mov	lr, r9
 80011d6:	0004      	movs	r4, r0
 80011d8:	0018      	movs	r0, r3
 80011da:	0016      	movs	r6, r2
 80011dc:	031b      	lsls	r3, r3, #12
 80011de:	0b1b      	lsrs	r3, r3, #12
 80011e0:	4d2d      	ldr	r5, [pc, #180]	; (8001298 <__gedf2+0xc8>)
 80011e2:	004a      	lsls	r2, r1, #1
 80011e4:	4699      	mov	r9, r3
 80011e6:	b580      	push	{r7, lr}
 80011e8:	0043      	lsls	r3, r0, #1
 80011ea:	030f      	lsls	r7, r1, #12
 80011ec:	46a4      	mov	ip, r4
 80011ee:	46b0      	mov	r8, r6
 80011f0:	0b3f      	lsrs	r7, r7, #12
 80011f2:	0d52      	lsrs	r2, r2, #21
 80011f4:	0fc9      	lsrs	r1, r1, #31
 80011f6:	0d5b      	lsrs	r3, r3, #21
 80011f8:	0fc0      	lsrs	r0, r0, #31
 80011fa:	42aa      	cmp	r2, r5
 80011fc:	d021      	beq.n	8001242 <__gedf2+0x72>
 80011fe:	42ab      	cmp	r3, r5
 8001200:	d013      	beq.n	800122a <__gedf2+0x5a>
 8001202:	2a00      	cmp	r2, #0
 8001204:	d122      	bne.n	800124c <__gedf2+0x7c>
 8001206:	433c      	orrs	r4, r7
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <__gedf2+0x42>
 800120c:	464d      	mov	r5, r9
 800120e:	432e      	orrs	r6, r5
 8001210:	d022      	beq.n	8001258 <__gedf2+0x88>
 8001212:	2c00      	cmp	r4, #0
 8001214:	d010      	beq.n	8001238 <__gedf2+0x68>
 8001216:	4281      	cmp	r1, r0
 8001218:	d022      	beq.n	8001260 <__gedf2+0x90>
 800121a:	2002      	movs	r0, #2
 800121c:	3901      	subs	r1, #1
 800121e:	4008      	ands	r0, r1
 8001220:	3801      	subs	r0, #1
 8001222:	bcc0      	pop	{r6, r7}
 8001224:	46b9      	mov	r9, r7
 8001226:	46b0      	mov	r8, r6
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122a:	464d      	mov	r5, r9
 800122c:	432e      	orrs	r6, r5
 800122e:	d129      	bne.n	8001284 <__gedf2+0xb4>
 8001230:	2a00      	cmp	r2, #0
 8001232:	d1f0      	bne.n	8001216 <__gedf2+0x46>
 8001234:	433c      	orrs	r4, r7
 8001236:	d1ee      	bne.n	8001216 <__gedf2+0x46>
 8001238:	2800      	cmp	r0, #0
 800123a:	d1f2      	bne.n	8001222 <__gedf2+0x52>
 800123c:	2001      	movs	r0, #1
 800123e:	4240      	negs	r0, r0
 8001240:	e7ef      	b.n	8001222 <__gedf2+0x52>
 8001242:	003d      	movs	r5, r7
 8001244:	4325      	orrs	r5, r4
 8001246:	d11d      	bne.n	8001284 <__gedf2+0xb4>
 8001248:	4293      	cmp	r3, r2
 800124a:	d0ee      	beq.n	800122a <__gedf2+0x5a>
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e2      	bne.n	8001216 <__gedf2+0x46>
 8001250:	464c      	mov	r4, r9
 8001252:	4326      	orrs	r6, r4
 8001254:	d1df      	bne.n	8001216 <__gedf2+0x46>
 8001256:	e7e0      	b.n	800121a <__gedf2+0x4a>
 8001258:	2000      	movs	r0, #0
 800125a:	2c00      	cmp	r4, #0
 800125c:	d0e1      	beq.n	8001222 <__gedf2+0x52>
 800125e:	e7dc      	b.n	800121a <__gedf2+0x4a>
 8001260:	429a      	cmp	r2, r3
 8001262:	dc0a      	bgt.n	800127a <__gedf2+0xaa>
 8001264:	dbe8      	blt.n	8001238 <__gedf2+0x68>
 8001266:	454f      	cmp	r7, r9
 8001268:	d8d7      	bhi.n	800121a <__gedf2+0x4a>
 800126a:	d00e      	beq.n	800128a <__gedf2+0xba>
 800126c:	2000      	movs	r0, #0
 800126e:	454f      	cmp	r7, r9
 8001270:	d2d7      	bcs.n	8001222 <__gedf2+0x52>
 8001272:	2900      	cmp	r1, #0
 8001274:	d0e2      	beq.n	800123c <__gedf2+0x6c>
 8001276:	0008      	movs	r0, r1
 8001278:	e7d3      	b.n	8001222 <__gedf2+0x52>
 800127a:	4243      	negs	r3, r0
 800127c:	4158      	adcs	r0, r3
 800127e:	0040      	lsls	r0, r0, #1
 8001280:	3801      	subs	r0, #1
 8001282:	e7ce      	b.n	8001222 <__gedf2+0x52>
 8001284:	2002      	movs	r0, #2
 8001286:	4240      	negs	r0, r0
 8001288:	e7cb      	b.n	8001222 <__gedf2+0x52>
 800128a:	45c4      	cmp	ip, r8
 800128c:	d8c5      	bhi.n	800121a <__gedf2+0x4a>
 800128e:	2000      	movs	r0, #0
 8001290:	45c4      	cmp	ip, r8
 8001292:	d2c6      	bcs.n	8001222 <__gedf2+0x52>
 8001294:	e7ed      	b.n	8001272 <__gedf2+0xa2>
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	000007ff 	.word	0x000007ff

0800129c <__ledf2>:
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	4647      	mov	r7, r8
 80012a0:	46ce      	mov	lr, r9
 80012a2:	0004      	movs	r4, r0
 80012a4:	0018      	movs	r0, r3
 80012a6:	0016      	movs	r6, r2
 80012a8:	031b      	lsls	r3, r3, #12
 80012aa:	0b1b      	lsrs	r3, r3, #12
 80012ac:	4d2c      	ldr	r5, [pc, #176]	; (8001360 <__ledf2+0xc4>)
 80012ae:	004a      	lsls	r2, r1, #1
 80012b0:	4699      	mov	r9, r3
 80012b2:	b580      	push	{r7, lr}
 80012b4:	0043      	lsls	r3, r0, #1
 80012b6:	030f      	lsls	r7, r1, #12
 80012b8:	46a4      	mov	ip, r4
 80012ba:	46b0      	mov	r8, r6
 80012bc:	0b3f      	lsrs	r7, r7, #12
 80012be:	0d52      	lsrs	r2, r2, #21
 80012c0:	0fc9      	lsrs	r1, r1, #31
 80012c2:	0d5b      	lsrs	r3, r3, #21
 80012c4:	0fc0      	lsrs	r0, r0, #31
 80012c6:	42aa      	cmp	r2, r5
 80012c8:	d00d      	beq.n	80012e6 <__ledf2+0x4a>
 80012ca:	42ab      	cmp	r3, r5
 80012cc:	d010      	beq.n	80012f0 <__ledf2+0x54>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d127      	bne.n	8001322 <__ledf2+0x86>
 80012d2:	433c      	orrs	r4, r7
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d111      	bne.n	80012fc <__ledf2+0x60>
 80012d8:	464d      	mov	r5, r9
 80012da:	432e      	orrs	r6, r5
 80012dc:	d10e      	bne.n	80012fc <__ledf2+0x60>
 80012de:	2000      	movs	r0, #0
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d015      	beq.n	8001310 <__ledf2+0x74>
 80012e4:	e00e      	b.n	8001304 <__ledf2+0x68>
 80012e6:	003d      	movs	r5, r7
 80012e8:	4325      	orrs	r5, r4
 80012ea:	d110      	bne.n	800130e <__ledf2+0x72>
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d118      	bne.n	8001322 <__ledf2+0x86>
 80012f0:	464d      	mov	r5, r9
 80012f2:	432e      	orrs	r6, r5
 80012f4:	d10b      	bne.n	800130e <__ledf2+0x72>
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d102      	bne.n	8001300 <__ledf2+0x64>
 80012fa:	433c      	orrs	r4, r7
 80012fc:	2c00      	cmp	r4, #0
 80012fe:	d00b      	beq.n	8001318 <__ledf2+0x7c>
 8001300:	4281      	cmp	r1, r0
 8001302:	d014      	beq.n	800132e <__ledf2+0x92>
 8001304:	2002      	movs	r0, #2
 8001306:	3901      	subs	r1, #1
 8001308:	4008      	ands	r0, r1
 800130a:	3801      	subs	r0, #1
 800130c:	e000      	b.n	8001310 <__ledf2+0x74>
 800130e:	2002      	movs	r0, #2
 8001310:	bcc0      	pop	{r6, r7}
 8001312:	46b9      	mov	r9, r7
 8001314:	46b0      	mov	r8, r6
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001318:	2800      	cmp	r0, #0
 800131a:	d1f9      	bne.n	8001310 <__ledf2+0x74>
 800131c:	2001      	movs	r0, #1
 800131e:	4240      	negs	r0, r0
 8001320:	e7f6      	b.n	8001310 <__ledf2+0x74>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1ec      	bne.n	8001300 <__ledf2+0x64>
 8001326:	464c      	mov	r4, r9
 8001328:	4326      	orrs	r6, r4
 800132a:	d1e9      	bne.n	8001300 <__ledf2+0x64>
 800132c:	e7ea      	b.n	8001304 <__ledf2+0x68>
 800132e:	429a      	cmp	r2, r3
 8001330:	dd04      	ble.n	800133c <__ledf2+0xa0>
 8001332:	4243      	negs	r3, r0
 8001334:	4158      	adcs	r0, r3
 8001336:	0040      	lsls	r0, r0, #1
 8001338:	3801      	subs	r0, #1
 800133a:	e7e9      	b.n	8001310 <__ledf2+0x74>
 800133c:	429a      	cmp	r2, r3
 800133e:	dbeb      	blt.n	8001318 <__ledf2+0x7c>
 8001340:	454f      	cmp	r7, r9
 8001342:	d8df      	bhi.n	8001304 <__ledf2+0x68>
 8001344:	d006      	beq.n	8001354 <__ledf2+0xb8>
 8001346:	2000      	movs	r0, #0
 8001348:	454f      	cmp	r7, r9
 800134a:	d2e1      	bcs.n	8001310 <__ledf2+0x74>
 800134c:	2900      	cmp	r1, #0
 800134e:	d0e5      	beq.n	800131c <__ledf2+0x80>
 8001350:	0008      	movs	r0, r1
 8001352:	e7dd      	b.n	8001310 <__ledf2+0x74>
 8001354:	45c4      	cmp	ip, r8
 8001356:	d8d5      	bhi.n	8001304 <__ledf2+0x68>
 8001358:	2000      	movs	r0, #0
 800135a:	45c4      	cmp	ip, r8
 800135c:	d2d8      	bcs.n	8001310 <__ledf2+0x74>
 800135e:	e7f5      	b.n	800134c <__ledf2+0xb0>
 8001360:	000007ff 	.word	0x000007ff

08001364 <__aeabi_dmul>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4657      	mov	r7, sl
 8001368:	464e      	mov	r6, r9
 800136a:	4645      	mov	r5, r8
 800136c:	46de      	mov	lr, fp
 800136e:	b5e0      	push	{r5, r6, r7, lr}
 8001370:	4698      	mov	r8, r3
 8001372:	030c      	lsls	r4, r1, #12
 8001374:	004b      	lsls	r3, r1, #1
 8001376:	0006      	movs	r6, r0
 8001378:	4692      	mov	sl, r2
 800137a:	b087      	sub	sp, #28
 800137c:	0b24      	lsrs	r4, r4, #12
 800137e:	0d5b      	lsrs	r3, r3, #21
 8001380:	0fcf      	lsrs	r7, r1, #31
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_dmul+0x24>
 8001386:	e15c      	b.n	8001642 <__aeabi_dmul+0x2de>
 8001388:	4ad9      	ldr	r2, [pc, #868]	; (80016f0 <__aeabi_dmul+0x38c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d100      	bne.n	8001390 <__aeabi_dmul+0x2c>
 800138e:	e175      	b.n	800167c <__aeabi_dmul+0x318>
 8001390:	0f42      	lsrs	r2, r0, #29
 8001392:	00e4      	lsls	r4, r4, #3
 8001394:	4314      	orrs	r4, r2
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	0412      	lsls	r2, r2, #16
 800139a:	4314      	orrs	r4, r2
 800139c:	4ad5      	ldr	r2, [pc, #852]	; (80016f4 <__aeabi_dmul+0x390>)
 800139e:	00c5      	lsls	r5, r0, #3
 80013a0:	4694      	mov	ip, r2
 80013a2:	4463      	add	r3, ip
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	4699      	mov	r9, r3
 80013aa:	469b      	mov	fp, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	4642      	mov	r2, r8
 80013b0:	031e      	lsls	r6, r3, #12
 80013b2:	0fd2      	lsrs	r2, r2, #31
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4650      	mov	r0, sl
 80013b8:	4690      	mov	r8, r2
 80013ba:	0b36      	lsrs	r6, r6, #12
 80013bc:	0d5b      	lsrs	r3, r3, #21
 80013be:	d100      	bne.n	80013c2 <__aeabi_dmul+0x5e>
 80013c0:	e120      	b.n	8001604 <__aeabi_dmul+0x2a0>
 80013c2:	4acb      	ldr	r2, [pc, #812]	; (80016f0 <__aeabi_dmul+0x38c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d100      	bne.n	80013ca <__aeabi_dmul+0x66>
 80013c8:	e162      	b.n	8001690 <__aeabi_dmul+0x32c>
 80013ca:	49ca      	ldr	r1, [pc, #808]	; (80016f4 <__aeabi_dmul+0x390>)
 80013cc:	0f42      	lsrs	r2, r0, #29
 80013ce:	468c      	mov	ip, r1
 80013d0:	9900      	ldr	r1, [sp, #0]
 80013d2:	4463      	add	r3, ip
 80013d4:	00f6      	lsls	r6, r6, #3
 80013d6:	468c      	mov	ip, r1
 80013d8:	4316      	orrs	r6, r2
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	449c      	add	ip, r3
 80013de:	0412      	lsls	r2, r2, #16
 80013e0:	4663      	mov	r3, ip
 80013e2:	4316      	orrs	r6, r2
 80013e4:	00c2      	lsls	r2, r0, #3
 80013e6:	2000      	movs	r0, #0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	9900      	ldr	r1, [sp, #0]
 80013ec:	4643      	mov	r3, r8
 80013ee:	3101      	adds	r1, #1
 80013f0:	468c      	mov	ip, r1
 80013f2:	4649      	mov	r1, r9
 80013f4:	407b      	eors	r3, r7
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	290f      	cmp	r1, #15
 80013fa:	d826      	bhi.n	800144a <__aeabi_dmul+0xe6>
 80013fc:	4bbe      	ldr	r3, [pc, #760]	; (80016f8 <__aeabi_dmul+0x394>)
 80013fe:	0089      	lsls	r1, r1, #2
 8001400:	5859      	ldr	r1, [r3, r1]
 8001402:	468f      	mov	pc, r1
 8001404:	4643      	mov	r3, r8
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	0034      	movs	r4, r6
 800140a:	0015      	movs	r5, r2
 800140c:	4683      	mov	fp, r0
 800140e:	465b      	mov	r3, fp
 8001410:	2b02      	cmp	r3, #2
 8001412:	d016      	beq.n	8001442 <__aeabi_dmul+0xde>
 8001414:	2b03      	cmp	r3, #3
 8001416:	d100      	bne.n	800141a <__aeabi_dmul+0xb6>
 8001418:	e203      	b.n	8001822 <__aeabi_dmul+0x4be>
 800141a:	2b01      	cmp	r3, #1
 800141c:	d000      	beq.n	8001420 <__aeabi_dmul+0xbc>
 800141e:	e0cd      	b.n	80015bc <__aeabi_dmul+0x258>
 8001420:	2200      	movs	r2, #0
 8001422:	2400      	movs	r4, #0
 8001424:	2500      	movs	r5, #0
 8001426:	9b01      	ldr	r3, [sp, #4]
 8001428:	0512      	lsls	r2, r2, #20
 800142a:	4322      	orrs	r2, r4
 800142c:	07db      	lsls	r3, r3, #31
 800142e:	431a      	orrs	r2, r3
 8001430:	0028      	movs	r0, r5
 8001432:	0011      	movs	r1, r2
 8001434:	b007      	add	sp, #28
 8001436:	bcf0      	pop	{r4, r5, r6, r7}
 8001438:	46bb      	mov	fp, r7
 800143a:	46b2      	mov	sl, r6
 800143c:	46a9      	mov	r9, r5
 800143e:	46a0      	mov	r8, r4
 8001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001442:	2400      	movs	r4, #0
 8001444:	2500      	movs	r5, #0
 8001446:	4aaa      	ldr	r2, [pc, #680]	; (80016f0 <__aeabi_dmul+0x38c>)
 8001448:	e7ed      	b.n	8001426 <__aeabi_dmul+0xc2>
 800144a:	0c28      	lsrs	r0, r5, #16
 800144c:	042d      	lsls	r5, r5, #16
 800144e:	0c2d      	lsrs	r5, r5, #16
 8001450:	002b      	movs	r3, r5
 8001452:	0c11      	lsrs	r1, r2, #16
 8001454:	0412      	lsls	r2, r2, #16
 8001456:	0c12      	lsrs	r2, r2, #16
 8001458:	4353      	muls	r3, r2
 800145a:	4698      	mov	r8, r3
 800145c:	0013      	movs	r3, r2
 800145e:	002f      	movs	r7, r5
 8001460:	4343      	muls	r3, r0
 8001462:	4699      	mov	r9, r3
 8001464:	434f      	muls	r7, r1
 8001466:	444f      	add	r7, r9
 8001468:	46bb      	mov	fp, r7
 800146a:	4647      	mov	r7, r8
 800146c:	000b      	movs	r3, r1
 800146e:	0c3f      	lsrs	r7, r7, #16
 8001470:	46ba      	mov	sl, r7
 8001472:	4343      	muls	r3, r0
 8001474:	44da      	add	sl, fp
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	45d1      	cmp	r9, sl
 800147a:	d904      	bls.n	8001486 <__aeabi_dmul+0x122>
 800147c:	2780      	movs	r7, #128	; 0x80
 800147e:	027f      	lsls	r7, r7, #9
 8001480:	46b9      	mov	r9, r7
 8001482:	444b      	add	r3, r9
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	4653      	mov	r3, sl
 8001488:	0c1b      	lsrs	r3, r3, #16
 800148a:	469b      	mov	fp, r3
 800148c:	4653      	mov	r3, sl
 800148e:	041f      	lsls	r7, r3, #16
 8001490:	4643      	mov	r3, r8
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	4698      	mov	r8, r3
 8001498:	003b      	movs	r3, r7
 800149a:	4443      	add	r3, r8
 800149c:	9304      	str	r3, [sp, #16]
 800149e:	0c33      	lsrs	r3, r6, #16
 80014a0:	0436      	lsls	r6, r6, #16
 80014a2:	0c36      	lsrs	r6, r6, #16
 80014a4:	4698      	mov	r8, r3
 80014a6:	0033      	movs	r3, r6
 80014a8:	4343      	muls	r3, r0
 80014aa:	4699      	mov	r9, r3
 80014ac:	4643      	mov	r3, r8
 80014ae:	4343      	muls	r3, r0
 80014b0:	002f      	movs	r7, r5
 80014b2:	469a      	mov	sl, r3
 80014b4:	4643      	mov	r3, r8
 80014b6:	4377      	muls	r7, r6
 80014b8:	435d      	muls	r5, r3
 80014ba:	0c38      	lsrs	r0, r7, #16
 80014bc:	444d      	add	r5, r9
 80014be:	1945      	adds	r5, r0, r5
 80014c0:	45a9      	cmp	r9, r5
 80014c2:	d903      	bls.n	80014cc <__aeabi_dmul+0x168>
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	4699      	mov	r9, r3
 80014ca:	44ca      	add	sl, r9
 80014cc:	043f      	lsls	r7, r7, #16
 80014ce:	0c28      	lsrs	r0, r5, #16
 80014d0:	0c3f      	lsrs	r7, r7, #16
 80014d2:	042d      	lsls	r5, r5, #16
 80014d4:	19ed      	adds	r5, r5, r7
 80014d6:	0c27      	lsrs	r7, r4, #16
 80014d8:	0424      	lsls	r4, r4, #16
 80014da:	0c24      	lsrs	r4, r4, #16
 80014dc:	0003      	movs	r3, r0
 80014de:	0020      	movs	r0, r4
 80014e0:	4350      	muls	r0, r2
 80014e2:	437a      	muls	r2, r7
 80014e4:	4691      	mov	r9, r2
 80014e6:	003a      	movs	r2, r7
 80014e8:	4453      	add	r3, sl
 80014ea:	9305      	str	r3, [sp, #20]
 80014ec:	0c03      	lsrs	r3, r0, #16
 80014ee:	469a      	mov	sl, r3
 80014f0:	434a      	muls	r2, r1
 80014f2:	4361      	muls	r1, r4
 80014f4:	4449      	add	r1, r9
 80014f6:	4451      	add	r1, sl
 80014f8:	44ab      	add	fp, r5
 80014fa:	4589      	cmp	r9, r1
 80014fc:	d903      	bls.n	8001506 <__aeabi_dmul+0x1a2>
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	4699      	mov	r9, r3
 8001504:	444a      	add	r2, r9
 8001506:	0400      	lsls	r0, r0, #16
 8001508:	0c0b      	lsrs	r3, r1, #16
 800150a:	0c00      	lsrs	r0, r0, #16
 800150c:	0409      	lsls	r1, r1, #16
 800150e:	1809      	adds	r1, r1, r0
 8001510:	0020      	movs	r0, r4
 8001512:	4699      	mov	r9, r3
 8001514:	4643      	mov	r3, r8
 8001516:	4370      	muls	r0, r6
 8001518:	435c      	muls	r4, r3
 800151a:	437e      	muls	r6, r7
 800151c:	435f      	muls	r7, r3
 800151e:	0c03      	lsrs	r3, r0, #16
 8001520:	4698      	mov	r8, r3
 8001522:	19a4      	adds	r4, r4, r6
 8001524:	4444      	add	r4, r8
 8001526:	444a      	add	r2, r9
 8001528:	9703      	str	r7, [sp, #12]
 800152a:	42a6      	cmp	r6, r4
 800152c:	d904      	bls.n	8001538 <__aeabi_dmul+0x1d4>
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4698      	mov	r8, r3
 8001534:	4447      	add	r7, r8
 8001536:	9703      	str	r7, [sp, #12]
 8001538:	0423      	lsls	r3, r4, #16
 800153a:	9e02      	ldr	r6, [sp, #8]
 800153c:	469a      	mov	sl, r3
 800153e:	9b05      	ldr	r3, [sp, #20]
 8001540:	445e      	add	r6, fp
 8001542:	4698      	mov	r8, r3
 8001544:	42ae      	cmp	r6, r5
 8001546:	41ad      	sbcs	r5, r5
 8001548:	1876      	adds	r6, r6, r1
 800154a:	428e      	cmp	r6, r1
 800154c:	4189      	sbcs	r1, r1
 800154e:	0400      	lsls	r0, r0, #16
 8001550:	0c00      	lsrs	r0, r0, #16
 8001552:	4450      	add	r0, sl
 8001554:	4440      	add	r0, r8
 8001556:	426d      	negs	r5, r5
 8001558:	1947      	adds	r7, r0, r5
 800155a:	46b8      	mov	r8, r7
 800155c:	4693      	mov	fp, r2
 800155e:	4249      	negs	r1, r1
 8001560:	4689      	mov	r9, r1
 8001562:	44c3      	add	fp, r8
 8001564:	44d9      	add	r9, fp
 8001566:	4298      	cmp	r0, r3
 8001568:	4180      	sbcs	r0, r0
 800156a:	45a8      	cmp	r8, r5
 800156c:	41ad      	sbcs	r5, r5
 800156e:	4593      	cmp	fp, r2
 8001570:	4192      	sbcs	r2, r2
 8001572:	4589      	cmp	r9, r1
 8001574:	4189      	sbcs	r1, r1
 8001576:	426d      	negs	r5, r5
 8001578:	4240      	negs	r0, r0
 800157a:	4328      	orrs	r0, r5
 800157c:	0c24      	lsrs	r4, r4, #16
 800157e:	4252      	negs	r2, r2
 8001580:	4249      	negs	r1, r1
 8001582:	430a      	orrs	r2, r1
 8001584:	9b03      	ldr	r3, [sp, #12]
 8001586:	1900      	adds	r0, r0, r4
 8001588:	1880      	adds	r0, r0, r2
 800158a:	18c7      	adds	r7, r0, r3
 800158c:	464b      	mov	r3, r9
 800158e:	0ddc      	lsrs	r4, r3, #23
 8001590:	9b04      	ldr	r3, [sp, #16]
 8001592:	0275      	lsls	r5, r6, #9
 8001594:	431d      	orrs	r5, r3
 8001596:	1e6a      	subs	r2, r5, #1
 8001598:	4195      	sbcs	r5, r2
 800159a:	464b      	mov	r3, r9
 800159c:	0df6      	lsrs	r6, r6, #23
 800159e:	027f      	lsls	r7, r7, #9
 80015a0:	4335      	orrs	r5, r6
 80015a2:	025a      	lsls	r2, r3, #9
 80015a4:	433c      	orrs	r4, r7
 80015a6:	4315      	orrs	r5, r2
 80015a8:	01fb      	lsls	r3, r7, #7
 80015aa:	d400      	bmi.n	80015ae <__aeabi_dmul+0x24a>
 80015ac:	e11c      	b.n	80017e8 <__aeabi_dmul+0x484>
 80015ae:	2101      	movs	r1, #1
 80015b0:	086a      	lsrs	r2, r5, #1
 80015b2:	400d      	ands	r5, r1
 80015b4:	4315      	orrs	r5, r2
 80015b6:	07e2      	lsls	r2, r4, #31
 80015b8:	4315      	orrs	r5, r2
 80015ba:	0864      	lsrs	r4, r4, #1
 80015bc:	494f      	ldr	r1, [pc, #316]	; (80016fc <__aeabi_dmul+0x398>)
 80015be:	4461      	add	r1, ip
 80015c0:	2900      	cmp	r1, #0
 80015c2:	dc00      	bgt.n	80015c6 <__aeabi_dmul+0x262>
 80015c4:	e0b0      	b.n	8001728 <__aeabi_dmul+0x3c4>
 80015c6:	076b      	lsls	r3, r5, #29
 80015c8:	d009      	beq.n	80015de <__aeabi_dmul+0x27a>
 80015ca:	220f      	movs	r2, #15
 80015cc:	402a      	ands	r2, r5
 80015ce:	2a04      	cmp	r2, #4
 80015d0:	d005      	beq.n	80015de <__aeabi_dmul+0x27a>
 80015d2:	1d2a      	adds	r2, r5, #4
 80015d4:	42aa      	cmp	r2, r5
 80015d6:	41ad      	sbcs	r5, r5
 80015d8:	426d      	negs	r5, r5
 80015da:	1964      	adds	r4, r4, r5
 80015dc:	0015      	movs	r5, r2
 80015de:	01e3      	lsls	r3, r4, #7
 80015e0:	d504      	bpl.n	80015ec <__aeabi_dmul+0x288>
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	4a46      	ldr	r2, [pc, #280]	; (8001700 <__aeabi_dmul+0x39c>)
 80015e6:	00c9      	lsls	r1, r1, #3
 80015e8:	4014      	ands	r4, r2
 80015ea:	4461      	add	r1, ip
 80015ec:	4a45      	ldr	r2, [pc, #276]	; (8001704 <__aeabi_dmul+0x3a0>)
 80015ee:	4291      	cmp	r1, r2
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0x290>
 80015f2:	e726      	b.n	8001442 <__aeabi_dmul+0xde>
 80015f4:	0762      	lsls	r2, r4, #29
 80015f6:	08ed      	lsrs	r5, r5, #3
 80015f8:	0264      	lsls	r4, r4, #9
 80015fa:	0549      	lsls	r1, r1, #21
 80015fc:	4315      	orrs	r5, r2
 80015fe:	0b24      	lsrs	r4, r4, #12
 8001600:	0d4a      	lsrs	r2, r1, #21
 8001602:	e710      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001604:	4652      	mov	r2, sl
 8001606:	4332      	orrs	r2, r6
 8001608:	d100      	bne.n	800160c <__aeabi_dmul+0x2a8>
 800160a:	e07f      	b.n	800170c <__aeabi_dmul+0x3a8>
 800160c:	2e00      	cmp	r6, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dmul+0x2ae>
 8001610:	e0dc      	b.n	80017cc <__aeabi_dmul+0x468>
 8001612:	0030      	movs	r0, r6
 8001614:	f000 fd00 	bl	8002018 <__clzsi2>
 8001618:	0002      	movs	r2, r0
 800161a:	3a0b      	subs	r2, #11
 800161c:	231d      	movs	r3, #29
 800161e:	0001      	movs	r1, r0
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4652      	mov	r2, sl
 8001624:	3908      	subs	r1, #8
 8001626:	40da      	lsrs	r2, r3
 8001628:	408e      	lsls	r6, r1
 800162a:	4316      	orrs	r6, r2
 800162c:	4652      	mov	r2, sl
 800162e:	408a      	lsls	r2, r1
 8001630:	9b00      	ldr	r3, [sp, #0]
 8001632:	4935      	ldr	r1, [pc, #212]	; (8001708 <__aeabi_dmul+0x3a4>)
 8001634:	1a18      	subs	r0, r3, r0
 8001636:	0003      	movs	r3, r0
 8001638:	468c      	mov	ip, r1
 800163a:	4463      	add	r3, ip
 800163c:	2000      	movs	r0, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	e6d3      	b.n	80013ea <__aeabi_dmul+0x86>
 8001642:	0025      	movs	r5, r4
 8001644:	4305      	orrs	r5, r0
 8001646:	d04a      	beq.n	80016de <__aeabi_dmul+0x37a>
 8001648:	2c00      	cmp	r4, #0
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0x2ea>
 800164c:	e0b0      	b.n	80017b0 <__aeabi_dmul+0x44c>
 800164e:	0020      	movs	r0, r4
 8001650:	f000 fce2 	bl	8002018 <__clzsi2>
 8001654:	0001      	movs	r1, r0
 8001656:	0002      	movs	r2, r0
 8001658:	390b      	subs	r1, #11
 800165a:	231d      	movs	r3, #29
 800165c:	0010      	movs	r0, r2
 800165e:	1a5b      	subs	r3, r3, r1
 8001660:	0031      	movs	r1, r6
 8001662:	0035      	movs	r5, r6
 8001664:	3808      	subs	r0, #8
 8001666:	4084      	lsls	r4, r0
 8001668:	40d9      	lsrs	r1, r3
 800166a:	4085      	lsls	r5, r0
 800166c:	430c      	orrs	r4, r1
 800166e:	4826      	ldr	r0, [pc, #152]	; (8001708 <__aeabi_dmul+0x3a4>)
 8001670:	1a83      	subs	r3, r0, r2
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	4699      	mov	r9, r3
 8001678:	469b      	mov	fp, r3
 800167a:	e697      	b.n	80013ac <__aeabi_dmul+0x48>
 800167c:	0005      	movs	r5, r0
 800167e:	4325      	orrs	r5, r4
 8001680:	d126      	bne.n	80016d0 <__aeabi_dmul+0x36c>
 8001682:	2208      	movs	r2, #8
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2302      	movs	r3, #2
 8001688:	2400      	movs	r4, #0
 800168a:	4691      	mov	r9, r2
 800168c:	469b      	mov	fp, r3
 800168e:	e68d      	b.n	80013ac <__aeabi_dmul+0x48>
 8001690:	4652      	mov	r2, sl
 8001692:	9b00      	ldr	r3, [sp, #0]
 8001694:	4332      	orrs	r2, r6
 8001696:	d110      	bne.n	80016ba <__aeabi_dmul+0x356>
 8001698:	4915      	ldr	r1, [pc, #84]	; (80016f0 <__aeabi_dmul+0x38c>)
 800169a:	2600      	movs	r6, #0
 800169c:	468c      	mov	ip, r1
 800169e:	4463      	add	r3, ip
 80016a0:	4649      	mov	r1, r9
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2302      	movs	r3, #2
 80016a6:	4319      	orrs	r1, r3
 80016a8:	4689      	mov	r9, r1
 80016aa:	2002      	movs	r0, #2
 80016ac:	e69d      	b.n	80013ea <__aeabi_dmul+0x86>
 80016ae:	465b      	mov	r3, fp
 80016b0:	9701      	str	r7, [sp, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d000      	beq.n	80016b8 <__aeabi_dmul+0x354>
 80016b6:	e6ad      	b.n	8001414 <__aeabi_dmul+0xb0>
 80016b8:	e6c3      	b.n	8001442 <__aeabi_dmul+0xde>
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <__aeabi_dmul+0x38c>)
 80016bc:	2003      	movs	r0, #3
 80016be:	4694      	mov	ip, r2
 80016c0:	4463      	add	r3, ip
 80016c2:	464a      	mov	r2, r9
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2303      	movs	r3, #3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	4691      	mov	r9, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	e68c      	b.n	80013ea <__aeabi_dmul+0x86>
 80016d0:	220c      	movs	r2, #12
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2303      	movs	r3, #3
 80016d6:	0005      	movs	r5, r0
 80016d8:	4691      	mov	r9, r2
 80016da:	469b      	mov	fp, r3
 80016dc:	e666      	b.n	80013ac <__aeabi_dmul+0x48>
 80016de:	2304      	movs	r3, #4
 80016e0:	4699      	mov	r9, r3
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	2400      	movs	r4, #0
 80016ea:	469b      	mov	fp, r3
 80016ec:	e65e      	b.n	80013ac <__aeabi_dmul+0x48>
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	000007ff 	.word	0x000007ff
 80016f4:	fffffc01 	.word	0xfffffc01
 80016f8:	08006fb0 	.word	0x08006fb0
 80016fc:	000003ff 	.word	0x000003ff
 8001700:	feffffff 	.word	0xfeffffff
 8001704:	000007fe 	.word	0x000007fe
 8001708:	fffffc0d 	.word	0xfffffc0d
 800170c:	4649      	mov	r1, r9
 800170e:	2301      	movs	r3, #1
 8001710:	4319      	orrs	r1, r3
 8001712:	4689      	mov	r9, r1
 8001714:	2600      	movs	r6, #0
 8001716:	2001      	movs	r0, #1
 8001718:	e667      	b.n	80013ea <__aeabi_dmul+0x86>
 800171a:	2300      	movs	r3, #0
 800171c:	2480      	movs	r4, #128	; 0x80
 800171e:	2500      	movs	r5, #0
 8001720:	4a43      	ldr	r2, [pc, #268]	; (8001830 <__aeabi_dmul+0x4cc>)
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	0324      	lsls	r4, r4, #12
 8001726:	e67e      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001728:	2001      	movs	r0, #1
 800172a:	1a40      	subs	r0, r0, r1
 800172c:	2838      	cmp	r0, #56	; 0x38
 800172e:	dd00      	ble.n	8001732 <__aeabi_dmul+0x3ce>
 8001730:	e676      	b.n	8001420 <__aeabi_dmul+0xbc>
 8001732:	281f      	cmp	r0, #31
 8001734:	dd5b      	ble.n	80017ee <__aeabi_dmul+0x48a>
 8001736:	221f      	movs	r2, #31
 8001738:	0023      	movs	r3, r4
 800173a:	4252      	negs	r2, r2
 800173c:	1a51      	subs	r1, r2, r1
 800173e:	40cb      	lsrs	r3, r1
 8001740:	0019      	movs	r1, r3
 8001742:	2820      	cmp	r0, #32
 8001744:	d003      	beq.n	800174e <__aeabi_dmul+0x3ea>
 8001746:	4a3b      	ldr	r2, [pc, #236]	; (8001834 <__aeabi_dmul+0x4d0>)
 8001748:	4462      	add	r2, ip
 800174a:	4094      	lsls	r4, r2
 800174c:	4325      	orrs	r5, r4
 800174e:	1e6a      	subs	r2, r5, #1
 8001750:	4195      	sbcs	r5, r2
 8001752:	002a      	movs	r2, r5
 8001754:	430a      	orrs	r2, r1
 8001756:	2107      	movs	r1, #7
 8001758:	000d      	movs	r5, r1
 800175a:	2400      	movs	r4, #0
 800175c:	4015      	ands	r5, r2
 800175e:	4211      	tst	r1, r2
 8001760:	d05b      	beq.n	800181a <__aeabi_dmul+0x4b6>
 8001762:	210f      	movs	r1, #15
 8001764:	2400      	movs	r4, #0
 8001766:	4011      	ands	r1, r2
 8001768:	2904      	cmp	r1, #4
 800176a:	d053      	beq.n	8001814 <__aeabi_dmul+0x4b0>
 800176c:	1d11      	adds	r1, r2, #4
 800176e:	4291      	cmp	r1, r2
 8001770:	4192      	sbcs	r2, r2
 8001772:	4252      	negs	r2, r2
 8001774:	18a4      	adds	r4, r4, r2
 8001776:	000a      	movs	r2, r1
 8001778:	0223      	lsls	r3, r4, #8
 800177a:	d54b      	bpl.n	8001814 <__aeabi_dmul+0x4b0>
 800177c:	2201      	movs	r2, #1
 800177e:	2400      	movs	r4, #0
 8001780:	2500      	movs	r5, #0
 8001782:	e650      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	031b      	lsls	r3, r3, #12
 8001788:	421c      	tst	r4, r3
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x43c>
 800178c:	421e      	tst	r6, r3
 800178e:	d107      	bne.n	80017a0 <__aeabi_dmul+0x43c>
 8001790:	4333      	orrs	r3, r6
 8001792:	031c      	lsls	r4, r3, #12
 8001794:	4643      	mov	r3, r8
 8001796:	0015      	movs	r5, r2
 8001798:	0b24      	lsrs	r4, r4, #12
 800179a:	4a25      	ldr	r2, [pc, #148]	; (8001830 <__aeabi_dmul+0x4cc>)
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	e642      	b.n	8001426 <__aeabi_dmul+0xc2>
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	0312      	lsls	r2, r2, #12
 80017a4:	4314      	orrs	r4, r2
 80017a6:	0324      	lsls	r4, r4, #12
 80017a8:	4a21      	ldr	r2, [pc, #132]	; (8001830 <__aeabi_dmul+0x4cc>)
 80017aa:	0b24      	lsrs	r4, r4, #12
 80017ac:	9701      	str	r7, [sp, #4]
 80017ae:	e63a      	b.n	8001426 <__aeabi_dmul+0xc2>
 80017b0:	f000 fc32 	bl	8002018 <__clzsi2>
 80017b4:	0001      	movs	r1, r0
 80017b6:	0002      	movs	r2, r0
 80017b8:	3115      	adds	r1, #21
 80017ba:	3220      	adds	r2, #32
 80017bc:	291c      	cmp	r1, #28
 80017be:	dc00      	bgt.n	80017c2 <__aeabi_dmul+0x45e>
 80017c0:	e74b      	b.n	800165a <__aeabi_dmul+0x2f6>
 80017c2:	0034      	movs	r4, r6
 80017c4:	3808      	subs	r0, #8
 80017c6:	2500      	movs	r5, #0
 80017c8:	4084      	lsls	r4, r0
 80017ca:	e750      	b.n	800166e <__aeabi_dmul+0x30a>
 80017cc:	f000 fc24 	bl	8002018 <__clzsi2>
 80017d0:	0003      	movs	r3, r0
 80017d2:	001a      	movs	r2, r3
 80017d4:	3215      	adds	r2, #21
 80017d6:	3020      	adds	r0, #32
 80017d8:	2a1c      	cmp	r2, #28
 80017da:	dc00      	bgt.n	80017de <__aeabi_dmul+0x47a>
 80017dc:	e71e      	b.n	800161c <__aeabi_dmul+0x2b8>
 80017de:	4656      	mov	r6, sl
 80017e0:	3b08      	subs	r3, #8
 80017e2:	2200      	movs	r2, #0
 80017e4:	409e      	lsls	r6, r3
 80017e6:	e723      	b.n	8001630 <__aeabi_dmul+0x2cc>
 80017e8:	9b00      	ldr	r3, [sp, #0]
 80017ea:	469c      	mov	ip, r3
 80017ec:	e6e6      	b.n	80015bc <__aeabi_dmul+0x258>
 80017ee:	4912      	ldr	r1, [pc, #72]	; (8001838 <__aeabi_dmul+0x4d4>)
 80017f0:	0022      	movs	r2, r4
 80017f2:	4461      	add	r1, ip
 80017f4:	002e      	movs	r6, r5
 80017f6:	408d      	lsls	r5, r1
 80017f8:	408a      	lsls	r2, r1
 80017fa:	40c6      	lsrs	r6, r0
 80017fc:	1e69      	subs	r1, r5, #1
 80017fe:	418d      	sbcs	r5, r1
 8001800:	4332      	orrs	r2, r6
 8001802:	432a      	orrs	r2, r5
 8001804:	40c4      	lsrs	r4, r0
 8001806:	0753      	lsls	r3, r2, #29
 8001808:	d0b6      	beq.n	8001778 <__aeabi_dmul+0x414>
 800180a:	210f      	movs	r1, #15
 800180c:	4011      	ands	r1, r2
 800180e:	2904      	cmp	r1, #4
 8001810:	d1ac      	bne.n	800176c <__aeabi_dmul+0x408>
 8001812:	e7b1      	b.n	8001778 <__aeabi_dmul+0x414>
 8001814:	0765      	lsls	r5, r4, #29
 8001816:	0264      	lsls	r4, r4, #9
 8001818:	0b24      	lsrs	r4, r4, #12
 800181a:	08d2      	lsrs	r2, r2, #3
 800181c:	4315      	orrs	r5, r2
 800181e:	2200      	movs	r2, #0
 8001820:	e601      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	0312      	lsls	r2, r2, #12
 8001826:	4314      	orrs	r4, r2
 8001828:	0324      	lsls	r4, r4, #12
 800182a:	4a01      	ldr	r2, [pc, #4]	; (8001830 <__aeabi_dmul+0x4cc>)
 800182c:	0b24      	lsrs	r4, r4, #12
 800182e:	e5fa      	b.n	8001426 <__aeabi_dmul+0xc2>
 8001830:	000007ff 	.word	0x000007ff
 8001834:	0000043e 	.word	0x0000043e
 8001838:	0000041e 	.word	0x0000041e

0800183c <__aeabi_dsub>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	4657      	mov	r7, sl
 8001840:	464e      	mov	r6, r9
 8001842:	4645      	mov	r5, r8
 8001844:	46de      	mov	lr, fp
 8001846:	b5e0      	push	{r5, r6, r7, lr}
 8001848:	001e      	movs	r6, r3
 800184a:	0017      	movs	r7, r2
 800184c:	004a      	lsls	r2, r1, #1
 800184e:	030b      	lsls	r3, r1, #12
 8001850:	0d52      	lsrs	r2, r2, #21
 8001852:	0a5b      	lsrs	r3, r3, #9
 8001854:	4690      	mov	r8, r2
 8001856:	0f42      	lsrs	r2, r0, #29
 8001858:	431a      	orrs	r2, r3
 800185a:	0fcd      	lsrs	r5, r1, #31
 800185c:	4ccd      	ldr	r4, [pc, #820]	; (8001b94 <__aeabi_dsub+0x358>)
 800185e:	0331      	lsls	r1, r6, #12
 8001860:	00c3      	lsls	r3, r0, #3
 8001862:	4694      	mov	ip, r2
 8001864:	0070      	lsls	r0, r6, #1
 8001866:	0f7a      	lsrs	r2, r7, #29
 8001868:	0a49      	lsrs	r1, r1, #9
 800186a:	00ff      	lsls	r7, r7, #3
 800186c:	469a      	mov	sl, r3
 800186e:	46b9      	mov	r9, r7
 8001870:	0d40      	lsrs	r0, r0, #21
 8001872:	0ff6      	lsrs	r6, r6, #31
 8001874:	4311      	orrs	r1, r2
 8001876:	42a0      	cmp	r0, r4
 8001878:	d100      	bne.n	800187c <__aeabi_dsub+0x40>
 800187a:	e0b1      	b.n	80019e0 <__aeabi_dsub+0x1a4>
 800187c:	2201      	movs	r2, #1
 800187e:	4056      	eors	r6, r2
 8001880:	46b3      	mov	fp, r6
 8001882:	42b5      	cmp	r5, r6
 8001884:	d100      	bne.n	8001888 <__aeabi_dsub+0x4c>
 8001886:	e088      	b.n	800199a <__aeabi_dsub+0x15e>
 8001888:	4642      	mov	r2, r8
 800188a:	1a12      	subs	r2, r2, r0
 800188c:	2a00      	cmp	r2, #0
 800188e:	dc00      	bgt.n	8001892 <__aeabi_dsub+0x56>
 8001890:	e0ae      	b.n	80019f0 <__aeabi_dsub+0x1b4>
 8001892:	2800      	cmp	r0, #0
 8001894:	d100      	bne.n	8001898 <__aeabi_dsub+0x5c>
 8001896:	e0c1      	b.n	8001a1c <__aeabi_dsub+0x1e0>
 8001898:	48be      	ldr	r0, [pc, #760]	; (8001b94 <__aeabi_dsub+0x358>)
 800189a:	4580      	cmp	r8, r0
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x64>
 800189e:	e151      	b.n	8001b44 <__aeabi_dsub+0x308>
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	0400      	lsls	r0, r0, #16
 80018a4:	4301      	orrs	r1, r0
 80018a6:	2a38      	cmp	r2, #56	; 0x38
 80018a8:	dd00      	ble.n	80018ac <__aeabi_dsub+0x70>
 80018aa:	e17b      	b.n	8001ba4 <__aeabi_dsub+0x368>
 80018ac:	2a1f      	cmp	r2, #31
 80018ae:	dd00      	ble.n	80018b2 <__aeabi_dsub+0x76>
 80018b0:	e1ee      	b.n	8001c90 <__aeabi_dsub+0x454>
 80018b2:	2020      	movs	r0, #32
 80018b4:	003e      	movs	r6, r7
 80018b6:	1a80      	subs	r0, r0, r2
 80018b8:	000c      	movs	r4, r1
 80018ba:	40d6      	lsrs	r6, r2
 80018bc:	40d1      	lsrs	r1, r2
 80018be:	4087      	lsls	r7, r0
 80018c0:	4662      	mov	r2, ip
 80018c2:	4084      	lsls	r4, r0
 80018c4:	1a52      	subs	r2, r2, r1
 80018c6:	1e78      	subs	r0, r7, #1
 80018c8:	4187      	sbcs	r7, r0
 80018ca:	4694      	mov	ip, r2
 80018cc:	4334      	orrs	r4, r6
 80018ce:	4327      	orrs	r7, r4
 80018d0:	1bdc      	subs	r4, r3, r7
 80018d2:	42a3      	cmp	r3, r4
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	4662      	mov	r2, ip
 80018d8:	425b      	negs	r3, r3
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4699      	mov	r9, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	d400      	bmi.n	80018e6 <__aeabi_dsub+0xaa>
 80018e4:	e118      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 80018e6:	464b      	mov	r3, r9
 80018e8:	0258      	lsls	r0, r3, #9
 80018ea:	0a43      	lsrs	r3, r0, #9
 80018ec:	4699      	mov	r9, r3
 80018ee:	464b      	mov	r3, r9
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dsub+0xba>
 80018f4:	e137      	b.n	8001b66 <__aeabi_dsub+0x32a>
 80018f6:	4648      	mov	r0, r9
 80018f8:	f000 fb8e 	bl	8002018 <__clzsi2>
 80018fc:	0001      	movs	r1, r0
 80018fe:	3908      	subs	r1, #8
 8001900:	2320      	movs	r3, #32
 8001902:	0022      	movs	r2, r4
 8001904:	4648      	mov	r0, r9
 8001906:	1a5b      	subs	r3, r3, r1
 8001908:	40da      	lsrs	r2, r3
 800190a:	4088      	lsls	r0, r1
 800190c:	408c      	lsls	r4, r1
 800190e:	4643      	mov	r3, r8
 8001910:	4310      	orrs	r0, r2
 8001912:	4588      	cmp	r8, r1
 8001914:	dd00      	ble.n	8001918 <__aeabi_dsub+0xdc>
 8001916:	e136      	b.n	8001b86 <__aeabi_dsub+0x34a>
 8001918:	1ac9      	subs	r1, r1, r3
 800191a:	1c4b      	adds	r3, r1, #1
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dd00      	ble.n	8001922 <__aeabi_dsub+0xe6>
 8001920:	e0ea      	b.n	8001af8 <__aeabi_dsub+0x2bc>
 8001922:	2220      	movs	r2, #32
 8001924:	0026      	movs	r6, r4
 8001926:	1ad2      	subs	r2, r2, r3
 8001928:	0001      	movs	r1, r0
 800192a:	4094      	lsls	r4, r2
 800192c:	40de      	lsrs	r6, r3
 800192e:	40d8      	lsrs	r0, r3
 8001930:	2300      	movs	r3, #0
 8001932:	4091      	lsls	r1, r2
 8001934:	1e62      	subs	r2, r4, #1
 8001936:	4194      	sbcs	r4, r2
 8001938:	4681      	mov	r9, r0
 800193a:	4698      	mov	r8, r3
 800193c:	4331      	orrs	r1, r6
 800193e:	430c      	orrs	r4, r1
 8001940:	0763      	lsls	r3, r4, #29
 8001942:	d009      	beq.n	8001958 <__aeabi_dsub+0x11c>
 8001944:	230f      	movs	r3, #15
 8001946:	4023      	ands	r3, r4
 8001948:	2b04      	cmp	r3, #4
 800194a:	d005      	beq.n	8001958 <__aeabi_dsub+0x11c>
 800194c:	1d23      	adds	r3, r4, #4
 800194e:	42a3      	cmp	r3, r4
 8001950:	41a4      	sbcs	r4, r4
 8001952:	4264      	negs	r4, r4
 8001954:	44a1      	add	r9, r4
 8001956:	001c      	movs	r4, r3
 8001958:	464b      	mov	r3, r9
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	d400      	bmi.n	8001960 <__aeabi_dsub+0x124>
 800195e:	e0de      	b.n	8001b1e <__aeabi_dsub+0x2e2>
 8001960:	4641      	mov	r1, r8
 8001962:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <__aeabi_dsub+0x358>)
 8001964:	3101      	adds	r1, #1
 8001966:	4299      	cmp	r1, r3
 8001968:	d100      	bne.n	800196c <__aeabi_dsub+0x130>
 800196a:	e0e7      	b.n	8001b3c <__aeabi_dsub+0x300>
 800196c:	464b      	mov	r3, r9
 800196e:	488a      	ldr	r0, [pc, #552]	; (8001b98 <__aeabi_dsub+0x35c>)
 8001970:	08e4      	lsrs	r4, r4, #3
 8001972:	4003      	ands	r3, r0
 8001974:	0018      	movs	r0, r3
 8001976:	0549      	lsls	r1, r1, #21
 8001978:	075b      	lsls	r3, r3, #29
 800197a:	0240      	lsls	r0, r0, #9
 800197c:	4323      	orrs	r3, r4
 800197e:	0d4a      	lsrs	r2, r1, #21
 8001980:	0b04      	lsrs	r4, r0, #12
 8001982:	0512      	lsls	r2, r2, #20
 8001984:	07ed      	lsls	r5, r5, #31
 8001986:	4322      	orrs	r2, r4
 8001988:	432a      	orrs	r2, r5
 800198a:	0018      	movs	r0, r3
 800198c:	0011      	movs	r1, r2
 800198e:	bcf0      	pop	{r4, r5, r6, r7}
 8001990:	46bb      	mov	fp, r7
 8001992:	46b2      	mov	sl, r6
 8001994:	46a9      	mov	r9, r5
 8001996:	46a0      	mov	r8, r4
 8001998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800199a:	4642      	mov	r2, r8
 800199c:	1a12      	subs	r2, r2, r0
 800199e:	2a00      	cmp	r2, #0
 80019a0:	dd52      	ble.n	8001a48 <__aeabi_dsub+0x20c>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0x16c>
 80019a6:	e09c      	b.n	8001ae2 <__aeabi_dsub+0x2a6>
 80019a8:	45a0      	cmp	r8, r4
 80019aa:	d100      	bne.n	80019ae <__aeabi_dsub+0x172>
 80019ac:	e0ca      	b.n	8001b44 <__aeabi_dsub+0x308>
 80019ae:	2080      	movs	r0, #128	; 0x80
 80019b0:	0400      	lsls	r0, r0, #16
 80019b2:	4301      	orrs	r1, r0
 80019b4:	2a38      	cmp	r2, #56	; 0x38
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dsub+0x17e>
 80019b8:	e149      	b.n	8001c4e <__aeabi_dsub+0x412>
 80019ba:	2a1f      	cmp	r2, #31
 80019bc:	dc00      	bgt.n	80019c0 <__aeabi_dsub+0x184>
 80019be:	e197      	b.n	8001cf0 <__aeabi_dsub+0x4b4>
 80019c0:	0010      	movs	r0, r2
 80019c2:	000e      	movs	r6, r1
 80019c4:	3820      	subs	r0, #32
 80019c6:	40c6      	lsrs	r6, r0
 80019c8:	2a20      	cmp	r2, #32
 80019ca:	d004      	beq.n	80019d6 <__aeabi_dsub+0x19a>
 80019cc:	2040      	movs	r0, #64	; 0x40
 80019ce:	1a82      	subs	r2, r0, r2
 80019d0:	4091      	lsls	r1, r2
 80019d2:	430f      	orrs	r7, r1
 80019d4:	46b9      	mov	r9, r7
 80019d6:	464c      	mov	r4, r9
 80019d8:	1e62      	subs	r2, r4, #1
 80019da:	4194      	sbcs	r4, r2
 80019dc:	4334      	orrs	r4, r6
 80019de:	e13a      	b.n	8001c56 <__aeabi_dsub+0x41a>
 80019e0:	000a      	movs	r2, r1
 80019e2:	433a      	orrs	r2, r7
 80019e4:	d028      	beq.n	8001a38 <__aeabi_dsub+0x1fc>
 80019e6:	46b3      	mov	fp, r6
 80019e8:	42b5      	cmp	r5, r6
 80019ea:	d02b      	beq.n	8001a44 <__aeabi_dsub+0x208>
 80019ec:	4a6b      	ldr	r2, [pc, #428]	; (8001b9c <__aeabi_dsub+0x360>)
 80019ee:	4442      	add	r2, r8
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d05d      	beq.n	8001ab0 <__aeabi_dsub+0x274>
 80019f4:	4642      	mov	r2, r8
 80019f6:	4644      	mov	r4, r8
 80019f8:	1a82      	subs	r2, r0, r2
 80019fa:	2c00      	cmp	r4, #0
 80019fc:	d000      	beq.n	8001a00 <__aeabi_dsub+0x1c4>
 80019fe:	e0f5      	b.n	8001bec <__aeabi_dsub+0x3b0>
 8001a00:	4665      	mov	r5, ip
 8001a02:	431d      	orrs	r5, r3
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x1cc>
 8001a06:	e19c      	b.n	8001d42 <__aeabi_dsub+0x506>
 8001a08:	1e55      	subs	r5, r2, #1
 8001a0a:	2a01      	cmp	r2, #1
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x1d4>
 8001a0e:	e1fb      	b.n	8001e08 <__aeabi_dsub+0x5cc>
 8001a10:	4c60      	ldr	r4, [pc, #384]	; (8001b94 <__aeabi_dsub+0x358>)
 8001a12:	42a2      	cmp	r2, r4
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x1dc>
 8001a16:	e1bd      	b.n	8001d94 <__aeabi_dsub+0x558>
 8001a18:	002a      	movs	r2, r5
 8001a1a:	e0f0      	b.n	8001bfe <__aeabi_dsub+0x3c2>
 8001a1c:	0008      	movs	r0, r1
 8001a1e:	4338      	orrs	r0, r7
 8001a20:	d100      	bne.n	8001a24 <__aeabi_dsub+0x1e8>
 8001a22:	e0c3      	b.n	8001bac <__aeabi_dsub+0x370>
 8001a24:	1e50      	subs	r0, r2, #1
 8001a26:	2a01      	cmp	r2, #1
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x1f0>
 8001a2a:	e1a8      	b.n	8001d7e <__aeabi_dsub+0x542>
 8001a2c:	4c59      	ldr	r4, [pc, #356]	; (8001b94 <__aeabi_dsub+0x358>)
 8001a2e:	42a2      	cmp	r2, r4
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1f8>
 8001a32:	e087      	b.n	8001b44 <__aeabi_dsub+0x308>
 8001a34:	0002      	movs	r2, r0
 8001a36:	e736      	b.n	80018a6 <__aeabi_dsub+0x6a>
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4056      	eors	r6, r2
 8001a3c:	46b3      	mov	fp, r6
 8001a3e:	42b5      	cmp	r5, r6
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dsub+0x208>
 8001a42:	e721      	b.n	8001888 <__aeabi_dsub+0x4c>
 8001a44:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <__aeabi_dsub+0x360>)
 8001a46:	4442      	add	r2, r8
 8001a48:	2a00      	cmp	r2, #0
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x212>
 8001a4c:	e0b5      	b.n	8001bba <__aeabi_dsub+0x37e>
 8001a4e:	4642      	mov	r2, r8
 8001a50:	4644      	mov	r4, r8
 8001a52:	1a82      	subs	r2, r0, r2
 8001a54:	2c00      	cmp	r4, #0
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x21e>
 8001a58:	e138      	b.n	8001ccc <__aeabi_dsub+0x490>
 8001a5a:	4e4e      	ldr	r6, [pc, #312]	; (8001b94 <__aeabi_dsub+0x358>)
 8001a5c:	42b0      	cmp	r0, r6
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x226>
 8001a60:	e1de      	b.n	8001e20 <__aeabi_dsub+0x5e4>
 8001a62:	2680      	movs	r6, #128	; 0x80
 8001a64:	4664      	mov	r4, ip
 8001a66:	0436      	lsls	r6, r6, #16
 8001a68:	4334      	orrs	r4, r6
 8001a6a:	46a4      	mov	ip, r4
 8001a6c:	2a38      	cmp	r2, #56	; 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dsub+0x236>
 8001a70:	e196      	b.n	8001da0 <__aeabi_dsub+0x564>
 8001a72:	2a1f      	cmp	r2, #31
 8001a74:	dd00      	ble.n	8001a78 <__aeabi_dsub+0x23c>
 8001a76:	e224      	b.n	8001ec2 <__aeabi_dsub+0x686>
 8001a78:	2620      	movs	r6, #32
 8001a7a:	1ab4      	subs	r4, r6, r2
 8001a7c:	46a2      	mov	sl, r4
 8001a7e:	4664      	mov	r4, ip
 8001a80:	4656      	mov	r6, sl
 8001a82:	40b4      	lsls	r4, r6
 8001a84:	46a1      	mov	r9, r4
 8001a86:	001c      	movs	r4, r3
 8001a88:	464e      	mov	r6, r9
 8001a8a:	40d4      	lsrs	r4, r2
 8001a8c:	4326      	orrs	r6, r4
 8001a8e:	0034      	movs	r4, r6
 8001a90:	4656      	mov	r6, sl
 8001a92:	40b3      	lsls	r3, r6
 8001a94:	1e5e      	subs	r6, r3, #1
 8001a96:	41b3      	sbcs	r3, r6
 8001a98:	431c      	orrs	r4, r3
 8001a9a:	4663      	mov	r3, ip
 8001a9c:	40d3      	lsrs	r3, r2
 8001a9e:	18c9      	adds	r1, r1, r3
 8001aa0:	19e4      	adds	r4, r4, r7
 8001aa2:	42bc      	cmp	r4, r7
 8001aa4:	41bf      	sbcs	r7, r7
 8001aa6:	427f      	negs	r7, r7
 8001aa8:	46b9      	mov	r9, r7
 8001aaa:	4680      	mov	r8, r0
 8001aac:	4489      	add	r9, r1
 8001aae:	e0d8      	b.n	8001c62 <__aeabi_dsub+0x426>
 8001ab0:	4640      	mov	r0, r8
 8001ab2:	4c3b      	ldr	r4, [pc, #236]	; (8001ba0 <__aeabi_dsub+0x364>)
 8001ab4:	3001      	adds	r0, #1
 8001ab6:	4220      	tst	r0, r4
 8001ab8:	d000      	beq.n	8001abc <__aeabi_dsub+0x280>
 8001aba:	e0b4      	b.n	8001c26 <__aeabi_dsub+0x3ea>
 8001abc:	4640      	mov	r0, r8
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dsub+0x288>
 8001ac2:	e144      	b.n	8001d4e <__aeabi_dsub+0x512>
 8001ac4:	4660      	mov	r0, ip
 8001ac6:	4318      	orrs	r0, r3
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x290>
 8001aca:	e190      	b.n	8001dee <__aeabi_dsub+0x5b2>
 8001acc:	0008      	movs	r0, r1
 8001ace:	4338      	orrs	r0, r7
 8001ad0:	d000      	beq.n	8001ad4 <__aeabi_dsub+0x298>
 8001ad2:	e1aa      	b.n	8001e2a <__aeabi_dsub+0x5ee>
 8001ad4:	4661      	mov	r1, ip
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	0749      	lsls	r1, r1, #29
 8001ada:	430b      	orrs	r3, r1
 8001adc:	4661      	mov	r1, ip
 8001ade:	08cc      	lsrs	r4, r1, #3
 8001ae0:	e027      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001ae2:	0008      	movs	r0, r1
 8001ae4:	4338      	orrs	r0, r7
 8001ae6:	d061      	beq.n	8001bac <__aeabi_dsub+0x370>
 8001ae8:	1e50      	subs	r0, r2, #1
 8001aea:	2a01      	cmp	r2, #1
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x2b4>
 8001aee:	e139      	b.n	8001d64 <__aeabi_dsub+0x528>
 8001af0:	42a2      	cmp	r2, r4
 8001af2:	d027      	beq.n	8001b44 <__aeabi_dsub+0x308>
 8001af4:	0002      	movs	r2, r0
 8001af6:	e75d      	b.n	80019b4 <__aeabi_dsub+0x178>
 8001af8:	0002      	movs	r2, r0
 8001afa:	391f      	subs	r1, #31
 8001afc:	40ca      	lsrs	r2, r1
 8001afe:	0011      	movs	r1, r2
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d003      	beq.n	8001b0c <__aeabi_dsub+0x2d0>
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4098      	lsls	r0, r3
 8001b0a:	4304      	orrs	r4, r0
 8001b0c:	1e63      	subs	r3, r4, #1
 8001b0e:	419c      	sbcs	r4, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	4699      	mov	r9, r3
 8001b14:	4698      	mov	r8, r3
 8001b16:	430c      	orrs	r4, r1
 8001b18:	0763      	lsls	r3, r4, #29
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x2e2>
 8001b1c:	e712      	b.n	8001944 <__aeabi_dsub+0x108>
 8001b1e:	464b      	mov	r3, r9
 8001b20:	464a      	mov	r2, r9
 8001b22:	08e4      	lsrs	r4, r4, #3
 8001b24:	075b      	lsls	r3, r3, #29
 8001b26:	4323      	orrs	r3, r4
 8001b28:	08d4      	lsrs	r4, r2, #3
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	4919      	ldr	r1, [pc, #100]	; (8001b94 <__aeabi_dsub+0x358>)
 8001b2e:	428a      	cmp	r2, r1
 8001b30:	d00e      	beq.n	8001b50 <__aeabi_dsub+0x314>
 8001b32:	0324      	lsls	r4, r4, #12
 8001b34:	0552      	lsls	r2, r2, #21
 8001b36:	0b24      	lsrs	r4, r4, #12
 8001b38:	0d52      	lsrs	r2, r2, #21
 8001b3a:	e722      	b.n	8001982 <__aeabi_dsub+0x146>
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	2400      	movs	r4, #0
 8001b40:	2300      	movs	r3, #0
 8001b42:	e71e      	b.n	8001982 <__aeabi_dsub+0x146>
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	4662      	mov	r2, ip
 8001b48:	0752      	lsls	r2, r2, #29
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	4662      	mov	r2, ip
 8001b4e:	08d4      	lsrs	r4, r2, #3
 8001b50:	001a      	movs	r2, r3
 8001b52:	4322      	orrs	r2, r4
 8001b54:	d100      	bne.n	8001b58 <__aeabi_dsub+0x31c>
 8001b56:	e1fc      	b.n	8001f52 <__aeabi_dsub+0x716>
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	4314      	orrs	r4, r2
 8001b5e:	0324      	lsls	r4, r4, #12
 8001b60:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <__aeabi_dsub+0x358>)
 8001b62:	0b24      	lsrs	r4, r4, #12
 8001b64:	e70d      	b.n	8001982 <__aeabi_dsub+0x146>
 8001b66:	0020      	movs	r0, r4
 8001b68:	f000 fa56 	bl	8002018 <__clzsi2>
 8001b6c:	0001      	movs	r1, r0
 8001b6e:	3118      	adds	r1, #24
 8001b70:	291f      	cmp	r1, #31
 8001b72:	dc00      	bgt.n	8001b76 <__aeabi_dsub+0x33a>
 8001b74:	e6c4      	b.n	8001900 <__aeabi_dsub+0xc4>
 8001b76:	3808      	subs	r0, #8
 8001b78:	4084      	lsls	r4, r0
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	2400      	movs	r4, #0
 8001b80:	4588      	cmp	r8, r1
 8001b82:	dc00      	bgt.n	8001b86 <__aeabi_dsub+0x34a>
 8001b84:	e6c8      	b.n	8001918 <__aeabi_dsub+0xdc>
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__aeabi_dsub+0x35c>)
 8001b88:	1a5b      	subs	r3, r3, r1
 8001b8a:	4010      	ands	r0, r2
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	4681      	mov	r9, r0
 8001b90:	e6d6      	b.n	8001940 <__aeabi_dsub+0x104>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	430f      	orrs	r7, r1
 8001ba6:	1e7a      	subs	r2, r7, #1
 8001ba8:	4197      	sbcs	r7, r2
 8001baa:	e691      	b.n	80018d0 <__aeabi_dsub+0x94>
 8001bac:	4661      	mov	r1, ip
 8001bae:	08db      	lsrs	r3, r3, #3
 8001bb0:	0749      	lsls	r1, r1, #29
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	4661      	mov	r1, ip
 8001bb6:	08cc      	lsrs	r4, r1, #3
 8001bb8:	e7b8      	b.n	8001b2c <__aeabi_dsub+0x2f0>
 8001bba:	4640      	mov	r0, r8
 8001bbc:	4cd3      	ldr	r4, [pc, #844]	; (8001f0c <__aeabi_dsub+0x6d0>)
 8001bbe:	3001      	adds	r0, #1
 8001bc0:	4220      	tst	r0, r4
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x38a>
 8001bc4:	e0a2      	b.n	8001d0c <__aeabi_dsub+0x4d0>
 8001bc6:	4640      	mov	r0, r8
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d000      	beq.n	8001bce <__aeabi_dsub+0x392>
 8001bcc:	e101      	b.n	8001dd2 <__aeabi_dsub+0x596>
 8001bce:	4660      	mov	r0, ip
 8001bd0:	4318      	orrs	r0, r3
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x39a>
 8001bd4:	e15e      	b.n	8001e94 <__aeabi_dsub+0x658>
 8001bd6:	0008      	movs	r0, r1
 8001bd8:	4338      	orrs	r0, r7
 8001bda:	d000      	beq.n	8001bde <__aeabi_dsub+0x3a2>
 8001bdc:	e15f      	b.n	8001e9e <__aeabi_dsub+0x662>
 8001bde:	4661      	mov	r1, ip
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	0749      	lsls	r1, r1, #29
 8001be4:	430b      	orrs	r3, r1
 8001be6:	4661      	mov	r1, ip
 8001be8:	08cc      	lsrs	r4, r1, #3
 8001bea:	e7a2      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001bec:	4dc8      	ldr	r5, [pc, #800]	; (8001f10 <__aeabi_dsub+0x6d4>)
 8001bee:	42a8      	cmp	r0, r5
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x3b8>
 8001bf2:	e0cf      	b.n	8001d94 <__aeabi_dsub+0x558>
 8001bf4:	2580      	movs	r5, #128	; 0x80
 8001bf6:	4664      	mov	r4, ip
 8001bf8:	042d      	lsls	r5, r5, #16
 8001bfa:	432c      	orrs	r4, r5
 8001bfc:	46a4      	mov	ip, r4
 8001bfe:	2a38      	cmp	r2, #56	; 0x38
 8001c00:	dc56      	bgt.n	8001cb0 <__aeabi_dsub+0x474>
 8001c02:	2a1f      	cmp	r2, #31
 8001c04:	dd00      	ble.n	8001c08 <__aeabi_dsub+0x3cc>
 8001c06:	e0d1      	b.n	8001dac <__aeabi_dsub+0x570>
 8001c08:	2520      	movs	r5, #32
 8001c0a:	001e      	movs	r6, r3
 8001c0c:	1aad      	subs	r5, r5, r2
 8001c0e:	4664      	mov	r4, ip
 8001c10:	40ab      	lsls	r3, r5
 8001c12:	40ac      	lsls	r4, r5
 8001c14:	40d6      	lsrs	r6, r2
 8001c16:	1e5d      	subs	r5, r3, #1
 8001c18:	41ab      	sbcs	r3, r5
 8001c1a:	4334      	orrs	r4, r6
 8001c1c:	4323      	orrs	r3, r4
 8001c1e:	4664      	mov	r4, ip
 8001c20:	40d4      	lsrs	r4, r2
 8001c22:	1b09      	subs	r1, r1, r4
 8001c24:	e049      	b.n	8001cba <__aeabi_dsub+0x47e>
 8001c26:	4660      	mov	r0, ip
 8001c28:	1bdc      	subs	r4, r3, r7
 8001c2a:	1a46      	subs	r6, r0, r1
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	4180      	sbcs	r0, r0
 8001c30:	4240      	negs	r0, r0
 8001c32:	4681      	mov	r9, r0
 8001c34:	0030      	movs	r0, r6
 8001c36:	464e      	mov	r6, r9
 8001c38:	1b80      	subs	r0, r0, r6
 8001c3a:	4681      	mov	r9, r0
 8001c3c:	0200      	lsls	r0, r0, #8
 8001c3e:	d476      	bmi.n	8001d2e <__aeabi_dsub+0x4f2>
 8001c40:	464b      	mov	r3, r9
 8001c42:	4323      	orrs	r3, r4
 8001c44:	d000      	beq.n	8001c48 <__aeabi_dsub+0x40c>
 8001c46:	e652      	b.n	80018ee <__aeabi_dsub+0xb2>
 8001c48:	2400      	movs	r4, #0
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	e771      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001c4e:	4339      	orrs	r1, r7
 8001c50:	000c      	movs	r4, r1
 8001c52:	1e62      	subs	r2, r4, #1
 8001c54:	4194      	sbcs	r4, r2
 8001c56:	18e4      	adds	r4, r4, r3
 8001c58:	429c      	cmp	r4, r3
 8001c5a:	419b      	sbcs	r3, r3
 8001c5c:	425b      	negs	r3, r3
 8001c5e:	4463      	add	r3, ip
 8001c60:	4699      	mov	r9, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	d400      	bmi.n	8001c6a <__aeabi_dsub+0x42e>
 8001c68:	e756      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	469c      	mov	ip, r3
 8001c6e:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <__aeabi_dsub+0x6d4>)
 8001c70:	44e0      	add	r8, ip
 8001c72:	4598      	cmp	r8, r3
 8001c74:	d038      	beq.n	8001ce8 <__aeabi_dsub+0x4ac>
 8001c76:	464b      	mov	r3, r9
 8001c78:	48a6      	ldr	r0, [pc, #664]	; (8001f14 <__aeabi_dsub+0x6d8>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4003      	ands	r3, r0
 8001c7e:	0018      	movs	r0, r3
 8001c80:	0863      	lsrs	r3, r4, #1
 8001c82:	4014      	ands	r4, r2
 8001c84:	431c      	orrs	r4, r3
 8001c86:	07c3      	lsls	r3, r0, #31
 8001c88:	431c      	orrs	r4, r3
 8001c8a:	0843      	lsrs	r3, r0, #1
 8001c8c:	4699      	mov	r9, r3
 8001c8e:	e657      	b.n	8001940 <__aeabi_dsub+0x104>
 8001c90:	0010      	movs	r0, r2
 8001c92:	000e      	movs	r6, r1
 8001c94:	3820      	subs	r0, #32
 8001c96:	40c6      	lsrs	r6, r0
 8001c98:	2a20      	cmp	r2, #32
 8001c9a:	d004      	beq.n	8001ca6 <__aeabi_dsub+0x46a>
 8001c9c:	2040      	movs	r0, #64	; 0x40
 8001c9e:	1a82      	subs	r2, r0, r2
 8001ca0:	4091      	lsls	r1, r2
 8001ca2:	430f      	orrs	r7, r1
 8001ca4:	46b9      	mov	r9, r7
 8001ca6:	464f      	mov	r7, r9
 8001ca8:	1e7a      	subs	r2, r7, #1
 8001caa:	4197      	sbcs	r7, r2
 8001cac:	4337      	orrs	r7, r6
 8001cae:	e60f      	b.n	80018d0 <__aeabi_dsub+0x94>
 8001cb0:	4662      	mov	r2, ip
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	4193      	sbcs	r3, r2
 8001cba:	1afc      	subs	r4, r7, r3
 8001cbc:	42a7      	cmp	r7, r4
 8001cbe:	41bf      	sbcs	r7, r7
 8001cc0:	427f      	negs	r7, r7
 8001cc2:	1bcb      	subs	r3, r1, r7
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	465d      	mov	r5, fp
 8001cc8:	4680      	mov	r8, r0
 8001cca:	e608      	b.n	80018de <__aeabi_dsub+0xa2>
 8001ccc:	4666      	mov	r6, ip
 8001cce:	431e      	orrs	r6, r3
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x498>
 8001cd2:	e0be      	b.n	8001e52 <__aeabi_dsub+0x616>
 8001cd4:	1e56      	subs	r6, r2, #1
 8001cd6:	2a01      	cmp	r2, #1
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x4a0>
 8001cda:	e109      	b.n	8001ef0 <__aeabi_dsub+0x6b4>
 8001cdc:	4c8c      	ldr	r4, [pc, #560]	; (8001f10 <__aeabi_dsub+0x6d4>)
 8001cde:	42a2      	cmp	r2, r4
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x4a8>
 8001ce2:	e119      	b.n	8001f18 <__aeabi_dsub+0x6dc>
 8001ce4:	0032      	movs	r2, r6
 8001ce6:	e6c1      	b.n	8001a6c <__aeabi_dsub+0x230>
 8001ce8:	4642      	mov	r2, r8
 8001cea:	2400      	movs	r4, #0
 8001cec:	2300      	movs	r3, #0
 8001cee:	e648      	b.n	8001982 <__aeabi_dsub+0x146>
 8001cf0:	2020      	movs	r0, #32
 8001cf2:	000c      	movs	r4, r1
 8001cf4:	1a80      	subs	r0, r0, r2
 8001cf6:	003e      	movs	r6, r7
 8001cf8:	4087      	lsls	r7, r0
 8001cfa:	4084      	lsls	r4, r0
 8001cfc:	40d6      	lsrs	r6, r2
 8001cfe:	1e78      	subs	r0, r7, #1
 8001d00:	4187      	sbcs	r7, r0
 8001d02:	40d1      	lsrs	r1, r2
 8001d04:	4334      	orrs	r4, r6
 8001d06:	433c      	orrs	r4, r7
 8001d08:	448c      	add	ip, r1
 8001d0a:	e7a4      	b.n	8001c56 <__aeabi_dsub+0x41a>
 8001d0c:	4a80      	ldr	r2, [pc, #512]	; (8001f10 <__aeabi_dsub+0x6d4>)
 8001d0e:	4290      	cmp	r0, r2
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x4d8>
 8001d12:	e0e9      	b.n	8001ee8 <__aeabi_dsub+0x6ac>
 8001d14:	19df      	adds	r7, r3, r7
 8001d16:	429f      	cmp	r7, r3
 8001d18:	419b      	sbcs	r3, r3
 8001d1a:	4461      	add	r1, ip
 8001d1c:	425b      	negs	r3, r3
 8001d1e:	18c9      	adds	r1, r1, r3
 8001d20:	07cc      	lsls	r4, r1, #31
 8001d22:	087f      	lsrs	r7, r7, #1
 8001d24:	084b      	lsrs	r3, r1, #1
 8001d26:	4699      	mov	r9, r3
 8001d28:	4680      	mov	r8, r0
 8001d2a:	433c      	orrs	r4, r7
 8001d2c:	e6f4      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001d2e:	1afc      	subs	r4, r7, r3
 8001d30:	42a7      	cmp	r7, r4
 8001d32:	41bf      	sbcs	r7, r7
 8001d34:	4663      	mov	r3, ip
 8001d36:	427f      	negs	r7, r7
 8001d38:	1ac9      	subs	r1, r1, r3
 8001d3a:	1bcb      	subs	r3, r1, r7
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	e5d5      	b.n	80018ee <__aeabi_dsub+0xb2>
 8001d42:	08ff      	lsrs	r7, r7, #3
 8001d44:	074b      	lsls	r3, r1, #29
 8001d46:	465d      	mov	r5, fp
 8001d48:	433b      	orrs	r3, r7
 8001d4a:	08cc      	lsrs	r4, r1, #3
 8001d4c:	e6ee      	b.n	8001b2c <__aeabi_dsub+0x2f0>
 8001d4e:	4662      	mov	r2, ip
 8001d50:	431a      	orrs	r2, r3
 8001d52:	d000      	beq.n	8001d56 <__aeabi_dsub+0x51a>
 8001d54:	e082      	b.n	8001e5c <__aeabi_dsub+0x620>
 8001d56:	000b      	movs	r3, r1
 8001d58:	433b      	orrs	r3, r7
 8001d5a:	d11b      	bne.n	8001d94 <__aeabi_dsub+0x558>
 8001d5c:	2480      	movs	r4, #128	; 0x80
 8001d5e:	2500      	movs	r5, #0
 8001d60:	0324      	lsls	r4, r4, #12
 8001d62:	e6f9      	b.n	8001b58 <__aeabi_dsub+0x31c>
 8001d64:	19dc      	adds	r4, r3, r7
 8001d66:	429c      	cmp	r4, r3
 8001d68:	419b      	sbcs	r3, r3
 8001d6a:	4461      	add	r1, ip
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	425b      	negs	r3, r3
 8001d70:	4499      	add	r9, r3
 8001d72:	464b      	mov	r3, r9
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	d444      	bmi.n	8001e02 <__aeabi_dsub+0x5c6>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	e6cc      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001d7e:	1bdc      	subs	r4, r3, r7
 8001d80:	4662      	mov	r2, ip
 8001d82:	42a3      	cmp	r3, r4
 8001d84:	419b      	sbcs	r3, r3
 8001d86:	1a51      	subs	r1, r2, r1
 8001d88:	425b      	negs	r3, r3
 8001d8a:	1acb      	subs	r3, r1, r3
 8001d8c:	4699      	mov	r9, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	4698      	mov	r8, r3
 8001d92:	e5a4      	b.n	80018de <__aeabi_dsub+0xa2>
 8001d94:	08ff      	lsrs	r7, r7, #3
 8001d96:	074b      	lsls	r3, r1, #29
 8001d98:	465d      	mov	r5, fp
 8001d9a:	433b      	orrs	r3, r7
 8001d9c:	08cc      	lsrs	r4, r1, #3
 8001d9e:	e6d7      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001da0:	4662      	mov	r2, ip
 8001da2:	431a      	orrs	r2, r3
 8001da4:	0014      	movs	r4, r2
 8001da6:	1e63      	subs	r3, r4, #1
 8001da8:	419c      	sbcs	r4, r3
 8001daa:	e679      	b.n	8001aa0 <__aeabi_dsub+0x264>
 8001dac:	0015      	movs	r5, r2
 8001dae:	4664      	mov	r4, ip
 8001db0:	3d20      	subs	r5, #32
 8001db2:	40ec      	lsrs	r4, r5
 8001db4:	46a0      	mov	r8, r4
 8001db6:	2a20      	cmp	r2, #32
 8001db8:	d005      	beq.n	8001dc6 <__aeabi_dsub+0x58a>
 8001dba:	2540      	movs	r5, #64	; 0x40
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	1aaa      	subs	r2, r5, r2
 8001dc0:	4094      	lsls	r4, r2
 8001dc2:	4323      	orrs	r3, r4
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4654      	mov	r4, sl
 8001dc8:	1e63      	subs	r3, r4, #1
 8001dca:	419c      	sbcs	r4, r3
 8001dcc:	4643      	mov	r3, r8
 8001dce:	4323      	orrs	r3, r4
 8001dd0:	e773      	b.n	8001cba <__aeabi_dsub+0x47e>
 8001dd2:	4662      	mov	r2, ip
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	d023      	beq.n	8001e20 <__aeabi_dsub+0x5e4>
 8001dd8:	000a      	movs	r2, r1
 8001dda:	433a      	orrs	r2, r7
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x5a4>
 8001dde:	e0a0      	b.n	8001f22 <__aeabi_dsub+0x6e6>
 8001de0:	4662      	mov	r2, ip
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	0752      	lsls	r2, r2, #29
 8001de6:	4313      	orrs	r3, r2
 8001de8:	4662      	mov	r2, ip
 8001dea:	08d4      	lsrs	r4, r2, #3
 8001dec:	e6b0      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001dee:	000b      	movs	r3, r1
 8001df0:	433b      	orrs	r3, r7
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x5ba>
 8001df4:	e728      	b.n	8001c48 <__aeabi_dsub+0x40c>
 8001df6:	08ff      	lsrs	r7, r7, #3
 8001df8:	074b      	lsls	r3, r1, #29
 8001dfa:	465d      	mov	r5, fp
 8001dfc:	433b      	orrs	r3, r7
 8001dfe:	08cc      	lsrs	r4, r1, #3
 8001e00:	e697      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001e02:	2302      	movs	r3, #2
 8001e04:	4698      	mov	r8, r3
 8001e06:	e736      	b.n	8001c76 <__aeabi_dsub+0x43a>
 8001e08:	1afc      	subs	r4, r7, r3
 8001e0a:	42a7      	cmp	r7, r4
 8001e0c:	41bf      	sbcs	r7, r7
 8001e0e:	4663      	mov	r3, ip
 8001e10:	427f      	negs	r7, r7
 8001e12:	1ac9      	subs	r1, r1, r3
 8001e14:	1bcb      	subs	r3, r1, r7
 8001e16:	4699      	mov	r9, r3
 8001e18:	2301      	movs	r3, #1
 8001e1a:	465d      	mov	r5, fp
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	e55e      	b.n	80018de <__aeabi_dsub+0xa2>
 8001e20:	074b      	lsls	r3, r1, #29
 8001e22:	08ff      	lsrs	r7, r7, #3
 8001e24:	433b      	orrs	r3, r7
 8001e26:	08cc      	lsrs	r4, r1, #3
 8001e28:	e692      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001e2a:	1bdc      	subs	r4, r3, r7
 8001e2c:	4660      	mov	r0, ip
 8001e2e:	42a3      	cmp	r3, r4
 8001e30:	41b6      	sbcs	r6, r6
 8001e32:	1a40      	subs	r0, r0, r1
 8001e34:	4276      	negs	r6, r6
 8001e36:	1b80      	subs	r0, r0, r6
 8001e38:	4681      	mov	r9, r0
 8001e3a:	0200      	lsls	r0, r0, #8
 8001e3c:	d560      	bpl.n	8001f00 <__aeabi_dsub+0x6c4>
 8001e3e:	1afc      	subs	r4, r7, r3
 8001e40:	42a7      	cmp	r7, r4
 8001e42:	41bf      	sbcs	r7, r7
 8001e44:	4663      	mov	r3, ip
 8001e46:	427f      	negs	r7, r7
 8001e48:	1ac9      	subs	r1, r1, r3
 8001e4a:	1bcb      	subs	r3, r1, r7
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	465d      	mov	r5, fp
 8001e50:	e576      	b.n	8001940 <__aeabi_dsub+0x104>
 8001e52:	08ff      	lsrs	r7, r7, #3
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	433b      	orrs	r3, r7
 8001e58:	08cc      	lsrs	r4, r1, #3
 8001e5a:	e667      	b.n	8001b2c <__aeabi_dsub+0x2f0>
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	433a      	orrs	r2, r7
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x62a>
 8001e64:	e66f      	b.n	8001b46 <__aeabi_dsub+0x30a>
 8001e66:	4662      	mov	r2, ip
 8001e68:	0752      	lsls	r2, r2, #29
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	4662      	mov	r2, ip
 8001e6e:	08d4      	lsrs	r4, r2, #3
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	0312      	lsls	r2, r2, #12
 8001e74:	4214      	tst	r4, r2
 8001e76:	d007      	beq.n	8001e88 <__aeabi_dsub+0x64c>
 8001e78:	08c8      	lsrs	r0, r1, #3
 8001e7a:	4210      	tst	r0, r2
 8001e7c:	d104      	bne.n	8001e88 <__aeabi_dsub+0x64c>
 8001e7e:	465d      	mov	r5, fp
 8001e80:	0004      	movs	r4, r0
 8001e82:	08fb      	lsrs	r3, r7, #3
 8001e84:	0749      	lsls	r1, r1, #29
 8001e86:	430b      	orrs	r3, r1
 8001e88:	0f5a      	lsrs	r2, r3, #29
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	0752      	lsls	r2, r2, #29
 8001e90:	4313      	orrs	r3, r2
 8001e92:	e65d      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001e94:	074b      	lsls	r3, r1, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	433b      	orrs	r3, r7
 8001e9a:	08cc      	lsrs	r4, r1, #3
 8001e9c:	e649      	b.n	8001b32 <__aeabi_dsub+0x2f6>
 8001e9e:	19dc      	adds	r4, r3, r7
 8001ea0:	429c      	cmp	r4, r3
 8001ea2:	419b      	sbcs	r3, r3
 8001ea4:	4461      	add	r1, ip
 8001ea6:	4689      	mov	r9, r1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	4499      	add	r9, r3
 8001eac:	464b      	mov	r3, r9
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	d400      	bmi.n	8001eb4 <__aeabi_dsub+0x678>
 8001eb2:	e631      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001eb4:	464a      	mov	r2, r9
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <__aeabi_dsub+0x6d8>)
 8001eb8:	401a      	ands	r2, r3
 8001eba:	2301      	movs	r3, #1
 8001ebc:	4691      	mov	r9, r2
 8001ebe:	4698      	mov	r8, r3
 8001ec0:	e62a      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001ec2:	0016      	movs	r6, r2
 8001ec4:	4664      	mov	r4, ip
 8001ec6:	3e20      	subs	r6, #32
 8001ec8:	40f4      	lsrs	r4, r6
 8001eca:	46a0      	mov	r8, r4
 8001ecc:	2a20      	cmp	r2, #32
 8001ece:	d005      	beq.n	8001edc <__aeabi_dsub+0x6a0>
 8001ed0:	2640      	movs	r6, #64	; 0x40
 8001ed2:	4664      	mov	r4, ip
 8001ed4:	1ab2      	subs	r2, r6, r2
 8001ed6:	4094      	lsls	r4, r2
 8001ed8:	4323      	orrs	r3, r4
 8001eda:	469a      	mov	sl, r3
 8001edc:	4654      	mov	r4, sl
 8001ede:	1e63      	subs	r3, r4, #1
 8001ee0:	419c      	sbcs	r4, r3
 8001ee2:	4643      	mov	r3, r8
 8001ee4:	431c      	orrs	r4, r3
 8001ee6:	e5db      	b.n	8001aa0 <__aeabi_dsub+0x264>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	2400      	movs	r4, #0
 8001eec:	2300      	movs	r3, #0
 8001eee:	e548      	b.n	8001982 <__aeabi_dsub+0x146>
 8001ef0:	19dc      	adds	r4, r3, r7
 8001ef2:	42bc      	cmp	r4, r7
 8001ef4:	41bf      	sbcs	r7, r7
 8001ef6:	4461      	add	r1, ip
 8001ef8:	4689      	mov	r9, r1
 8001efa:	427f      	negs	r7, r7
 8001efc:	44b9      	add	r9, r7
 8001efe:	e738      	b.n	8001d72 <__aeabi_dsub+0x536>
 8001f00:	464b      	mov	r3, r9
 8001f02:	4323      	orrs	r3, r4
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x6cc>
 8001f06:	e69f      	b.n	8001c48 <__aeabi_dsub+0x40c>
 8001f08:	e606      	b.n	8001b18 <__aeabi_dsub+0x2dc>
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	000007fe 	.word	0x000007fe
 8001f10:	000007ff 	.word	0x000007ff
 8001f14:	ff7fffff 	.word	0xff7fffff
 8001f18:	08ff      	lsrs	r7, r7, #3
 8001f1a:	074b      	lsls	r3, r1, #29
 8001f1c:	433b      	orrs	r3, r7
 8001f1e:	08cc      	lsrs	r4, r1, #3
 8001f20:	e616      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001f22:	4662      	mov	r2, ip
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	0752      	lsls	r2, r2, #29
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	4662      	mov	r2, ip
 8001f2c:	08d4      	lsrs	r4, r2, #3
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	0312      	lsls	r2, r2, #12
 8001f32:	4214      	tst	r4, r2
 8001f34:	d007      	beq.n	8001f46 <__aeabi_dsub+0x70a>
 8001f36:	08c8      	lsrs	r0, r1, #3
 8001f38:	4210      	tst	r0, r2
 8001f3a:	d104      	bne.n	8001f46 <__aeabi_dsub+0x70a>
 8001f3c:	465d      	mov	r5, fp
 8001f3e:	0004      	movs	r4, r0
 8001f40:	08fb      	lsrs	r3, r7, #3
 8001f42:	0749      	lsls	r1, r1, #29
 8001f44:	430b      	orrs	r3, r1
 8001f46:	0f5a      	lsrs	r2, r3, #29
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	0752      	lsls	r2, r2, #29
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	e5fe      	b.n	8001b50 <__aeabi_dsub+0x314>
 8001f52:	2300      	movs	r3, #0
 8001f54:	4a01      	ldr	r2, [pc, #4]	; (8001f5c <__aeabi_dsub+0x720>)
 8001f56:	001c      	movs	r4, r3
 8001f58:	e513      	b.n	8001982 <__aeabi_dsub+0x146>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff

08001f60 <__aeabi_d2iz>:
 8001f60:	000a      	movs	r2, r1
 8001f62:	b530      	push	{r4, r5, lr}
 8001f64:	4c13      	ldr	r4, [pc, #76]	; (8001fb4 <__aeabi_d2iz+0x54>)
 8001f66:	0053      	lsls	r3, r2, #1
 8001f68:	0309      	lsls	r1, r1, #12
 8001f6a:	0005      	movs	r5, r0
 8001f6c:	0b09      	lsrs	r1, r1, #12
 8001f6e:	2000      	movs	r0, #0
 8001f70:	0d5b      	lsrs	r3, r3, #21
 8001f72:	0fd2      	lsrs	r2, r2, #31
 8001f74:	42a3      	cmp	r3, r4
 8001f76:	dd04      	ble.n	8001f82 <__aeabi_d2iz+0x22>
 8001f78:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <__aeabi_d2iz+0x58>)
 8001f7a:	4283      	cmp	r3, r0
 8001f7c:	dd02      	ble.n	8001f84 <__aeabi_d2iz+0x24>
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <__aeabi_d2iz+0x5c>)
 8001f80:	18d0      	adds	r0, r2, r3
 8001f82:	bd30      	pop	{r4, r5, pc}
 8001f84:	2080      	movs	r0, #128	; 0x80
 8001f86:	0340      	lsls	r0, r0, #13
 8001f88:	4301      	orrs	r1, r0
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <__aeabi_d2iz+0x60>)
 8001f8c:	1ac0      	subs	r0, r0, r3
 8001f8e:	281f      	cmp	r0, #31
 8001f90:	dd08      	ble.n	8001fa4 <__aeabi_d2iz+0x44>
 8001f92:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <__aeabi_d2iz+0x64>)
 8001f94:	1ac3      	subs	r3, r0, r3
 8001f96:	40d9      	lsrs	r1, r3
 8001f98:	000b      	movs	r3, r1
 8001f9a:	4258      	negs	r0, r3
 8001f9c:	2a00      	cmp	r2, #0
 8001f9e:	d1f0      	bne.n	8001f82 <__aeabi_d2iz+0x22>
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	e7ee      	b.n	8001f82 <__aeabi_d2iz+0x22>
 8001fa4:	4c08      	ldr	r4, [pc, #32]	; (8001fc8 <__aeabi_d2iz+0x68>)
 8001fa6:	40c5      	lsrs	r5, r0
 8001fa8:	46a4      	mov	ip, r4
 8001faa:	4463      	add	r3, ip
 8001fac:	4099      	lsls	r1, r3
 8001fae:	000b      	movs	r3, r1
 8001fb0:	432b      	orrs	r3, r5
 8001fb2:	e7f2      	b.n	8001f9a <__aeabi_d2iz+0x3a>
 8001fb4:	000003fe 	.word	0x000003fe
 8001fb8:	0000041d 	.word	0x0000041d
 8001fbc:	7fffffff 	.word	0x7fffffff
 8001fc0:	00000433 	.word	0x00000433
 8001fc4:	00000413 	.word	0x00000413
 8001fc8:	fffffbed 	.word	0xfffffbed

08001fcc <__aeabi_ui2d>:
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	1e04      	subs	r4, r0, #0
 8001fd0:	d010      	beq.n	8001ff4 <__aeabi_ui2d+0x28>
 8001fd2:	f000 f821 	bl	8002018 <__clzsi2>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <__aeabi_ui2d+0x48>)
 8001fd8:	1a1b      	subs	r3, r3, r0
 8001fda:	280a      	cmp	r0, #10
 8001fdc:	dc11      	bgt.n	8002002 <__aeabi_ui2d+0x36>
 8001fde:	220b      	movs	r2, #11
 8001fe0:	0021      	movs	r1, r4
 8001fe2:	1a12      	subs	r2, r2, r0
 8001fe4:	40d1      	lsrs	r1, r2
 8001fe6:	3015      	adds	r0, #21
 8001fe8:	030a      	lsls	r2, r1, #12
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	4084      	lsls	r4, r0
 8001fee:	0b12      	lsrs	r2, r2, #12
 8001ff0:	0d5b      	lsrs	r3, r3, #21
 8001ff2:	e001      	b.n	8001ff8 <__aeabi_ui2d+0x2c>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	051b      	lsls	r3, r3, #20
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0020      	movs	r0, r4
 8001ffe:	0019      	movs	r1, r3
 8002000:	bd10      	pop	{r4, pc}
 8002002:	0022      	movs	r2, r4
 8002004:	380b      	subs	r0, #11
 8002006:	4082      	lsls	r2, r0
 8002008:	055b      	lsls	r3, r3, #21
 800200a:	0312      	lsls	r2, r2, #12
 800200c:	2400      	movs	r4, #0
 800200e:	0b12      	lsrs	r2, r2, #12
 8002010:	0d5b      	lsrs	r3, r3, #21
 8002012:	e7f1      	b.n	8001ff8 <__aeabi_ui2d+0x2c>
 8002014:	0000041e 	.word	0x0000041e

08002018 <__clzsi2>:
 8002018:	211c      	movs	r1, #28
 800201a:	2301      	movs	r3, #1
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	4298      	cmp	r0, r3
 8002020:	d301      	bcc.n	8002026 <__clzsi2+0xe>
 8002022:	0c00      	lsrs	r0, r0, #16
 8002024:	3910      	subs	r1, #16
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	4298      	cmp	r0, r3
 800202a:	d301      	bcc.n	8002030 <__clzsi2+0x18>
 800202c:	0a00      	lsrs	r0, r0, #8
 800202e:	3908      	subs	r1, #8
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	4298      	cmp	r0, r3
 8002034:	d301      	bcc.n	800203a <__clzsi2+0x22>
 8002036:	0900      	lsrs	r0, r0, #4
 8002038:	3904      	subs	r1, #4
 800203a:	a202      	add	r2, pc, #8	; (adr r2, 8002044 <__clzsi2+0x2c>)
 800203c:	5c10      	ldrb	r0, [r2, r0]
 800203e:	1840      	adds	r0, r0, r1
 8002040:	4770      	bx	lr
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	02020304 	.word	0x02020304
 8002048:	01010101 	.word	0x01010101
	...

08002054 <__clzdi2>:
 8002054:	b510      	push	{r4, lr}
 8002056:	2900      	cmp	r1, #0
 8002058:	d103      	bne.n	8002062 <__clzdi2+0xe>
 800205a:	f7ff ffdd 	bl	8002018 <__clzsi2>
 800205e:	3020      	adds	r0, #32
 8002060:	e002      	b.n	8002068 <__clzdi2+0x14>
 8002062:	0008      	movs	r0, r1
 8002064:	f7ff ffd8 	bl	8002018 <__clzsi2>
 8002068:	bd10      	pop	{r4, pc}
 800206a:	46c0      	nop			; (mov r8, r8)

0800206c <i2c1MasterInit>:
		i2c->data_rx[i] = '\0';
	for (int i = 0; i < I2C_TX_BUFFER_SIZE; i++)
		i2c->data_tx[i] = '\0';
}

void i2c1MasterInit() {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

	i2c1GpioInit();
 8002070:	f000 f83c 	bl	80020ec <i2c1GpioInit>
	/* clock enable */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <i2c1MasterInit+0x6c>)
 8002076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <i2c1MasterInit+0x6c>)
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	0389      	lsls	r1, r1, #14
 800207e:	430a      	orrs	r2, r1
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c
	/* peripherial disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <i2c1MasterInit+0x70>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <i2c1MasterInit+0x70>)
 8002088:	2101      	movs	r1, #1
 800208a:	438a      	bics	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
	/* set timing */
	I2C1->TIMINGR = 0x00303D5B;
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <i2c1MasterInit+0x70>)
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <i2c1MasterInit+0x74>)
 8002092:	611a      	str	r2, [r3, #16]
	/* */
	CLEAR_BIT(I2C2->OAR1, I2C_OAR1_OA1EN);
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <i2c1MasterInit+0x78>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <i2c1MasterInit+0x78>)
 800209a:	4913      	ldr	r1, [pc, #76]	; (80020e8 <i2c1MasterInit+0x7c>)
 800209c:	400a      	ands	r2, r1
 800209e:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(I2C2->OAR2, I2C_OAR2_OA2EN);
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <i2c1MasterInit+0x78>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <i2c1MasterInit+0x78>)
 80020a6:	4910      	ldr	r1, [pc, #64]	; (80020e8 <i2c1MasterInit+0x7c>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]

	/*tx and rx interrupt enable */
	SET_BIT(I2C2->CR1, I2C_CR1_RXIE);
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <i2c1MasterInit+0x78>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <i2c1MasterInit+0x78>)
 80020b2:	2104      	movs	r1, #4
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C2->CR1, I2C_CR1_TXIE);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <i2c1MasterInit+0x78>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <i2c1MasterInit+0x78>)
 80020be:	2102      	movs	r1, #2
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

	/* peripherial enable */
	SET_BIT(I2C2->CR1, I2C_CR1_PE);
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <i2c1MasterInit+0x78>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <i2c1MasterInit+0x78>)
 80020ca:	2101      	movs	r1, #1
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40005400 	.word	0x40005400
 80020e0:	00303d5b 	.word	0x00303d5b
 80020e4:	40005800 	.word	0x40005800
 80020e8:	ffff7fff 	.word	0xffff7fff

080020ec <i2c1GpioInit>:

void i2c1GpioInit() {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0

	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <i2c1GpioInit+0xb4>)
 80020f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f4:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <i2c1GpioInit+0xb4>)
 80020f6:	2102      	movs	r1, #2
 80020f8:	430a      	orrs	r2, r1
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34
	/* SCL PB6  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <i2c1GpioInit+0xb8>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002102:	4929      	ldr	r1, [pc, #164]	; (80021a8 <i2c1GpioInit+0xbc>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <i2c1GpioInit+0xb8>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <i2c1GpioInit+0xb8>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0189      	lsls	r1, r1, #6
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
	/* SDA PB7 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 8002116:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <i2c1GpioInit+0xb8>)
 800211c:	4923      	ldr	r1, [pc, #140]	; (80021ac <i2c1GpioInit+0xc0>)
 800211e:	400a      	ands	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	0209      	lsls	r1, r1, #8
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
	/* SCL PB6 High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED6_0);
	/* SDC PB7  High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_1 |GPIO_OSPEEDR_OSPEED7_0);

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6);
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002136:	491e      	ldr	r1, [pc, #120]	; (80021b0 <i2c1GpioInit+0xc4>)
 8002138:	400a      	ands	r2, r1
 800213a:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6 << 1);
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <i2c1GpioInit+0xb8>)
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002142:	21f0      	movs	r1, #240	; 0xf0
 8002144:	0549      	lsls	r1, r1, #21
 8002146:	430a      	orrs	r2, r1
 8002148:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<2);
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <i2c1GpioInit+0xb8>)
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002150:	21f0      	movs	r1, #240	; 0xf0
 8002152:	0589      	lsls	r1, r1, #22
 8002154:	430a      	orrs	r2, r1
 8002156:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<3);
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <i2c1GpioInit+0xb8>)
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <i2c1GpioInit+0xb8>)
 800215e:	4915      	ldr	r1, [pc, #84]	; (80021b4 <i2c1GpioInit+0xc8>)
 8002160:	400a      	ands	r2, r1
 8002162:	621a      	str	r2, [r3, #32]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7);
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <i2c1GpioInit+0xb8>)
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	0912      	lsrs	r2, r2, #4
 800216e:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<1);
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002176:	21e0      	movs	r1, #224	; 0xe0
 8002178:	0609      	lsls	r1, r1, #24
 800217a:	430a      	orrs	r2, r1
 800217c:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<2);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002184:	21c0      	movs	r1, #192	; 0xc0
 8002186:	0609      	lsls	r1, r1, #24
 8002188:	430a      	orrs	r2, r1
 800218a:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<3);
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <i2c1GpioInit+0xb8>)
 800218e:	6a1a      	ldr	r2, [r3, #32]
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <i2c1GpioInit+0xb8>)
 8002192:	0052      	lsls	r2, r2, #1
 8002194:	0852      	lsrs	r2, r2, #1
 8002196:	621a      	str	r2, [r3, #32]
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	50000400 	.word	0x50000400
 80021a8:	ffffefff 	.word	0xffffefff
 80021ac:	ffffbfff 	.word	0xffffbfff
 80021b0:	f0ffffff 	.word	0xf0ffffff
 80021b4:	87ffffff 	.word	0x87ffffff

080021b8 <i2c1MasterFrameRx>:
	SET_BIT(I2C2->ICR, I2C_ICR_STOPCF);

	return data;
}

void i2c1MasterFrameRx(char saddr, uint8_t *rcv, uint8_t N) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6039      	str	r1, [r7, #0]
 80021c0:	0011      	movs	r1, r2
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	1c02      	adds	r2, r0, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	1dbb      	adds	r3, r7, #6
 80021ca:	1c0a      	adds	r2, r1, #0
 80021cc:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 80021ce:	f002 fe9b 	bl	8004f08 <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	613b      	str	r3, [r7, #16]
	bool timeout = false;
 80021d6:	230f      	movs	r3, #15
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, READ, N);
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 f841 	bl	8002270 <i2c1MasterStartTransfer>

	for (int i = 0; i < N; i++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e027      	b.n	8002244 <i2c1MasterFrameRx+0x8c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 80021f4:	f002 fe88 	bl	8004f08 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b14      	cmp	r3, #20
 8002200:	d906      	bls.n	8002210 <i2c1MasterFrameRx+0x58>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002208:	2101      	movs	r1, #1
 800220a:	438a      	bics	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
				return;
 800220e:	e02a      	b.n	8002266 <i2c1MasterFrameRx+0xae>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2204      	movs	r2, #4
 8002216:	4013      	ands	r3, r2
 8002218:	425a      	negs	r2, r3
 800221a:	4153      	adcs	r3, r2
 800221c:	b2db      	uxtb	r3, r3
 800221e:	0019      	movs	r1, r3
 8002220:	230f      	movs	r3, #15
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	4053      	eors	r3, r2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	400b      	ands	r3, r1
 800222e:	d1e1      	bne.n	80021f4 <i2c1MasterFrameRx+0x3c>
			}
		}
		rcv[i] = READ_REG(I2C1->RXDR);
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002232:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	18d3      	adds	r3, r2, r3
 800223a:	b2ca      	uxtb	r2, r1
 800223c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	1dbb      	adds	r3, r7, #6
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	429a      	cmp	r2, r3
 800224c:	dbe0      	blt.n	8002210 <i2c1MasterFrameRx+0x58>

	}
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2220      	movs	r2, #32
 8002256:	4013      	ands	r3, r2
 8002258:	d0fa      	beq.n	8002250 <i2c1MasterFrameRx+0x98>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <i2c1MasterFrameRx+0xb4>)
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	4b03      	ldr	r3, [pc, #12]	; (800226c <i2c1MasterFrameRx+0xb4>)
 8002260:	2120      	movs	r1, #32
 8002262:	430a      	orrs	r2, r1
 8002264:	61da      	str	r2, [r3, #28]
}
 8002266:	46bd      	mov	sp, r7
 8002268:	b006      	add	sp, #24
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40005400 	.word	0x40005400

08002270 <i2c1MasterStartTransfer>:

void i2c1MasterStartTransfer(char saddr, uint8_t transfer_request, uint8_t N) {
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	0004      	movs	r4, r0
 8002278:	0008      	movs	r0, r1
 800227a:	0011      	movs	r1, r2
 800227c:	1dfb      	adds	r3, r7, #7
 800227e:	1c22      	adds	r2, r4, #0
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	1dbb      	adds	r3, r7, #6
 8002284:	1c02      	adds	r2, r0, #0
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	1d7b      	adds	r3, r7, #5
 800228a:	1c0a      	adds	r2, r1, #0
 800228c:	701a      	strb	r2, [r3, #0]
	/* peripherial disable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 8002294:	2101      	movs	r1, #1
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
	/* set slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0a9b      	lsrs	r3, r3, #10
 80022a0:	0299      	lsls	r1, r3, #10
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022a8:	430a      	orrs	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]
	/* read N byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <i2c1MasterStartTransfer+0xa8>)
 80022b2:	401a      	ands	r2, r3
 80022b4:	1d7b      	adds	r3, r7, #5
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	0019      	movs	r1, r3
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0489      	lsls	r1, r1, #18
 80022cc:	430a      	orrs	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */
	if (transfer_request == 1) {
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <i2c1MasterStartTransfer+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	00c9      	lsls	r1, r1, #3
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	e009      	b.n	80022fc <i2c1MasterStartTransfer+0x8c>
	} else if (transfer_request == 0) {
 80022e8:	1dbb      	adds	r3, r7, #6
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <i2c1MasterStartTransfer+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022f6:	4909      	ldr	r1, [pc, #36]	; (800231c <i2c1MasterStartTransfer+0xac>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <i2c1MasterStartTransfer+0xa4>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0189      	lsls	r1, r1, #6
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]

}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b003      	add	sp, #12
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	40005400 	.word	0x40005400
 8002318:	ff00ffff 	.word	0xff00ffff
 800231c:	fffffbff 	.word	0xfffffbff

08002320 <i2c1MasterByteTx>:
		}
	}

}

void i2c1MasterByteTx(uint8_t saddr, uint8_t *data, uint8_t N) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6039      	str	r1, [r7, #0]
 8002328:	0011      	movs	r1, r2
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	1c02      	adds	r2, r0, #0
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	1c0a      	adds	r2, r1, #0
 8002334:	701a      	strb	r2, [r3, #0]
	i2c1MasterStartTransfer(saddr, WRITE, N);
 8002336:	1dbb      	adds	r3, r7, #6
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff ff95 	bl	8002270 <i2c1MasterStartTransfer>
	uint32_t counter = HAL_GetTick();
 8002346:	f002 fddf 	bl	8004f08 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e022      	b.n	800239a <i2c1MasterByteTx+0x7a>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {

			if (HAL_GetTick() - counter > I2C_TIMEOUT_MS) {
 8002354:	f002 fdd8 	bl	8004f08 <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b14      	cmp	r3, #20
 8002360:	d906      	bls.n	8002370 <i2c1MasterByteTx+0x50>
				CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 8002368:	2101      	movs	r1, #1
 800236a:	438a      	bics	r2, r1
 800236c:	601a      	str	r2, [r3, #0]
				return;
 800236e:	e025      	b.n	80023bc <i2c1MasterByteTx+0x9c>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d0ec      	beq.n	8002354 <i2c1MasterByteTx+0x34>
			}
		}
		MODIFY_REG(I2C1->TXDR, I2C_TXDR_TXDATA, data[i]);
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	4393      	bics	r3, r2
 8002382:	001a      	movs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6839      	ldr	r1, [r7, #0]
 8002388:	18cb      	adds	r3, r1, r3
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	0019      	movs	r1, r3
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 8002390:	430a      	orrs	r2, r1
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3301      	adds	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	1dbb      	adds	r3, r7, #6
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbe5      	blt.n	8002370 <i2c1MasterByteTx+0x50>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2220      	movs	r2, #32
 80023ac:	4013      	ands	r3, r2
 80023ae:	d0fa      	beq.n	80023a6 <i2c1MasterByteTx+0x86>
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <i2c1MasterByteTx+0xa4>)
 80023b6:	2120      	movs	r1, #32
 80023b8:	430a      	orrs	r2, r1
 80023ba:	619a      	str	r2, [r3, #24]

}
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	40005400 	.word	0x40005400

080023c8 <led_init>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void led_init(LED_t *led) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 80023d0:	23a0      	movs	r3, #160	; 0xa0
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	23a0      	movs	r3, #160	; 0xa0
 80023d8:	05db      	lsls	r3, r3, #23
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	01c9      	lsls	r1, r1, #7
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 80023e2:	23a0      	movs	r3, #160	; 0xa0
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	23a0      	movs	r3, #160	; 0xa0
 80023ea:	05db      	lsls	r3, r3, #23
 80023ec:	4911      	ldr	r1, [pc, #68]	; (8002434 <led_init+0x6c>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <led_init+0x70>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <led_init+0x70>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <led_init+0x70>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <led_init+0x70>)
 8002404:	2102      	movs	r1, #2
 8002406:	438a      	bics	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <led_init+0x70>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <led_init+0x70>)
 8002410:	2104      	movs	r1, #4
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <led_init+0x70>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <led_init+0x70>)
 800241c:	2108      	movs	r1, #8
 800241e:	438a      	bics	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
	led_reset(led);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f839 	bl	800249c <led_reset>
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	ffff7fff 	.word	0xffff7fff
 8002438:	50000400 	.word	0x50000400

0800243c <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->ka_counter > LED_KA_STATE_TIMEOUT)
 8002444:	f002 fd60 	bl	8004f08 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1ad2      	subs	r2, r2, r3
 8002450:	23fa      	movs	r3, #250	; 0xfa
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d905      	bls.n	8002464 <led_enable_kalive+0x28>
		l->ka_counter = HAL_GetTick();
 8002458:	f002 fd56 	bl	8004f08 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - l->ka_counter > LED_KA_ON_TIMEOUT)
			sys_rp_led_off();
		else
			sys_rp_led_on();
	}
}
 8002462:	e014      	b.n	800248e <led_enable_kalive+0x52>
		if (HAL_GetTick() - l->ka_counter > LED_KA_ON_TIMEOUT)
 8002464:	f002 fd50 	bl	8004f08 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b32      	cmp	r3, #50	; 0x32
 8002472:	d906      	bls.n	8002482 <led_enable_kalive+0x46>
			sys_rp_led_off();
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <led_enable_kalive+0x5c>)
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <led_enable_kalive+0x5c>)
 800247a:	2102      	movs	r1, #2
 800247c:	438a      	bics	r2, r1
 800247e:	615a      	str	r2, [r3, #20]
}
 8002480:	e005      	b.n	800248e <led_enable_kalive+0x52>
			sys_rp_led_on();
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <led_enable_kalive+0x5c>)
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <led_enable_kalive+0x5c>)
 8002488:	2102      	movs	r1, #2
 800248a:	430a      	orrs	r2, r1
 800248c:	615a      	str	r2, [r3, #20]
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b002      	add	sp, #8
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	50000400 	.word	0x50000400

0800249c <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	l->ch_counter = 0;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
	l->cl_counter = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
	l->cn_counter = 0;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
	l->ka_counter = HAL_GetTick();
 80024b6:	f002 fd27 	bl	8004f08 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	601a      	str	r2, [r3, #0]
	l->sysrp_counter = 0;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
	l->th_counter = 0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
	l->tok_counter = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	615a      	str	r2, [r3, #20]
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <m24c64ReadNBytes>:

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
	i2c1MasterFrameRx(CHIP_ADDR, data, 32);
}

void m24c64ReadNBytes(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	0004      	movs	r4, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	0010      	movs	r0, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	1c22      	adds	r2, r4, #0
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	1dbb      	adds	r3, r7, #6
 80024f2:	1c02      	adds	r2, r0, #0
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	1d7b      	adds	r3, r7, #5
 80024f8:	1c0a      	adds	r2, r1, #0
 80024fa:	701a      	strb	r2, [r3, #0]
	uint8_t buff[1] = { 0 };
 80024fc:	210c      	movs	r1, #12
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <m24c64ReadNBytes+0x74>)
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	701a      	strb	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	b21a      	sxth	r2, r3
 800250e:	1dbb      	adds	r3, r7, #6
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b21b      	sxth	r3, r3
 8002514:	4313      	orrs	r3, r2
 8002516:	b21a      	sxth	r2, r3
 8002518:	200e      	movs	r0, #14
 800251a:	183b      	adds	r3, r7, r0
 800251c:	801a      	strh	r2, [r3, #0]

	//buff[0] = MemAddress >> 8;
	buff[0] = MemAddress & 0xff;
 800251e:	183b      	adds	r3, r7, r0
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	187b      	adds	r3, r7, r1
 8002526:	701a      	strb	r2, [r3, #0]

	i2c1MasterByteTx(CHIP_ADDR, buff, 1);
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2201      	movs	r2, #1
 800252c:	0019      	movs	r1, r3
 800252e:	20a0      	movs	r0, #160	; 0xa0
 8002530:	f7ff fef6 	bl	8002320 <i2c1MasterByteTx>
	HAL_Delay(5);
 8002534:	2005      	movs	r0, #5
 8002536:	f002 fcf1 	bl	8004f1c <HAL_Delay>
	i2c1MasterFrameRx(CHIP_ADDR, data, size);
 800253a:	1d7b      	adds	r3, r7, #5
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	0019      	movs	r1, r3
 8002542:	20a0      	movs	r0, #160	; 0xa0
 8002544:	f7ff fe38 	bl	80021b8 <i2c1MasterFrameRx>
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b005      	add	sp, #20
 800254e:	bd90      	pop	{r4, r7, pc}
 8002550:	08006e3c 	.word	0x08006e3c

08002554 <m24c64WriteNBytes>:

void m24c64WriteNBytes(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8002554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002556:	b097      	sub	sp, #92	; 0x5c
 8002558:	af00      	add	r7, sp, #0
 800255a:	63b9      	str	r1, [r7, #56]	; 0x38
 800255c:	0011      	movs	r1, r2
 800255e:	001e      	movs	r6, r3
 8002560:	233f      	movs	r3, #63	; 0x3f
 8002562:	18fa      	adds	r2, r7, r3
 8002564:	1c03      	adds	r3, r0, #0
 8002566:	7013      	strb	r3, [r2, #0]
 8002568:	233e      	movs	r3, #62	; 0x3e
 800256a:	18fa      	adds	r2, r7, r3
 800256c:	1c0b      	adds	r3, r1, #0
 800256e:	7013      	strb	r3, [r2, #0]
 8002570:	233d      	movs	r3, #61	; 0x3d
 8002572:	18fa      	adds	r2, r7, r3
 8002574:	1c33      	adds	r3, r6, #0
 8002576:	7013      	strb	r3, [r2, #0]
 8002578:	466b      	mov	r3, sp
 800257a:	001e      	movs	r6, r3
	uint8_t buff[size + 1];
 800257c:	233d      	movs	r3, #61	; 0x3d
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	1e53      	subs	r3, r2, #1
 8002586:	657b      	str	r3, [r7, #84]	; 0x54
 8002588:	0013      	movs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69b8      	ldr	r0, [r7, #24]
 8002592:	69f9      	ldr	r1, [r7, #28]
 8002594:	0003      	movs	r3, r0
 8002596:	0f5b      	lsrs	r3, r3, #29
 8002598:	469c      	mov	ip, r3
 800259a:	000b      	movs	r3, r1
 800259c:	00dd      	lsls	r5, r3, #3
 800259e:	4663      	mov	r3, ip
 80025a0:	431d      	orrs	r5, r3
 80025a2:	0003      	movs	r3, r0
 80025a4:	00dc      	lsls	r4, r3, #3
 80025a6:	0013      	movs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	6938      	ldr	r0, [r7, #16]
 80025b0:	6979      	ldr	r1, [r7, #20]
 80025b2:	0003      	movs	r3, r0
 80025b4:	0f5b      	lsrs	r3, r3, #29
 80025b6:	000c      	movs	r4, r1
 80025b8:	00e4      	lsls	r4, r4, #3
 80025ba:	637c      	str	r4, [r7, #52]	; 0x34
 80025bc:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80025be:	431c      	orrs	r4, r3
 80025c0:	637c      	str	r4, [r7, #52]	; 0x34
 80025c2:	0003      	movs	r3, r0
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
 80025c8:	0013      	movs	r3, r2
 80025ca:	3307      	adds	r3, #7
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	466a      	mov	r2, sp
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	469d      	mov	sp, r3
 80025d6:	466b      	mov	r3, sp
 80025d8:	3300      	adds	r3, #0
 80025da:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t read[size];
 80025dc:	233d      	movs	r3, #61	; 0x3d
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	001a      	movs	r2, r3
 80025e4:	3a01      	subs	r2, #1
 80025e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	60fa      	str	r2, [r7, #12]
 80025ee:	68b8      	ldr	r0, [r7, #8]
 80025f0:	68f9      	ldr	r1, [r7, #12]
 80025f2:	0002      	movs	r2, r0
 80025f4:	0f52      	lsrs	r2, r2, #29
 80025f6:	000c      	movs	r4, r1
 80025f8:	00e4      	lsls	r4, r4, #3
 80025fa:	62fc      	str	r4, [r7, #44]	; 0x2c
 80025fc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80025fe:	4314      	orrs	r4, r2
 8002600:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002602:	0002      	movs	r2, r0
 8002604:	00d2      	lsls	r2, r2, #3
 8002606:	62ba      	str	r2, [r7, #40]	; 0x28
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	0002      	movs	r2, r0
 8002614:	0f52      	lsrs	r2, r2, #29
 8002616:	000c      	movs	r4, r1
 8002618:	00e4      	lsls	r4, r4, #3
 800261a:	627c      	str	r4, [r7, #36]	; 0x24
 800261c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800261e:	4314      	orrs	r4, r2
 8002620:	627c      	str	r4, [r7, #36]	; 0x24
 8002622:	0002      	movs	r2, r0
 8002624:	00d2      	lsls	r2, r2, #3
 8002626:	623a      	str	r2, [r7, #32]
 8002628:	3307      	adds	r3, #7
 800262a:	08db      	lsrs	r3, r3, #3
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	466a      	mov	r2, sp
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	469d      	mov	sp, r3
 8002634:	466b      	mov	r3, sp
 8002636:	3300      	adds	r3, #0
 8002638:	647b      	str	r3, [r7, #68]	; 0x44

	m24c64ReadNBytes(page, read, offset, size);
 800263a:	233d      	movs	r3, #61	; 0x3d
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781c      	ldrb	r4, [r3, #0]
 8002640:	233e      	movs	r3, #62	; 0x3e
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002648:	233f      	movs	r3, #63	; 0x3f
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	7818      	ldrb	r0, [r3, #0]
 800264e:	0023      	movs	r3, r4
 8002650:	f7ff ff44 	bl	80024dc <m24c64ReadNBytes>

	if (strncmp((const char*) data, (const char*) read, (size_t) size)) {
 8002654:	233d      	movs	r3, #61	; 0x3d
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	0018      	movs	r0, r3
 8002660:	f003 ff84 	bl	800656c <strncmp>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d02b      	beq.n	80026c0 <m24c64WriteNBytes+0x16c>
		//buff[0] = (page << PADDRPOSITION | offset) >> 8;
		buff[0] = (page << PADDRPOSITION | offset) & 0xff;
 8002668:	233f      	movs	r3, #63	; 0x3f
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	b25a      	sxtb	r2, r3
 8002672:	233e      	movs	r3, #62	; 0x3e
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b25b      	sxtb	r3, r3
 800267a:	4313      	orrs	r3, r2
 800267c:	b25b      	sxtb	r3, r3
 800267e:	b2da      	uxtb	r2, r3
 8002680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002682:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < size; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	653b      	str	r3, [r7, #80]	; 0x50
 8002688:	e00a      	b.n	80026a0 <m24c64WriteNBytes+0x14c>
			buff[i + 1] = data[i];
 800268a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800268e:	18d2      	adds	r2, r2, r3
 8002690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002692:	3301      	adds	r3, #1
 8002694:	7811      	ldrb	r1, [r2, #0]
 8002696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002698:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < size; i++) {
 800269a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269c:	3301      	adds	r3, #1
 800269e:	653b      	str	r3, [r7, #80]	; 0x50
 80026a0:	233d      	movs	r3, #61	; 0x3d
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026a8:	429a      	cmp	r2, r3
 80026aa:	dbee      	blt.n	800268a <m24c64WriteNBytes+0x136>
		}
		i2c1MasterByteTx(CHIP_ADDR, buff, size + 1);
 80026ac:	233d      	movs	r3, #61	; 0x3d
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b8:	0019      	movs	r1, r3
 80026ba:	20a0      	movs	r0, #160	; 0xa0
 80026bc:	f7ff fe30 	bl	8002320 <i2c1MasterByteTx>
	}
	HAL_Delay(6);
 80026c0:	2006      	movs	r0, #6
 80026c2:	f002 fc2b 	bl	8004f1c <HAL_Delay>
 80026c6:	46b5      	mov	sp, r6
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b017      	add	sp, #92	; 0x5c
 80026ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026d0 <getFreqOutFromEeprom>:
RS485_t *rs485_ptr;
unsigned long a;
unsigned long b;
unsigned long c;

unsigned long getFreqOutFromEeprom() {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0

	uint8_t buffer[4] = { 0 };
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
	unsigned long FreqOutSave = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
	m24c64ReadNBytes(FREQ_OUT_ADDR, buffer, 0, FREQ_OUT_SIZE);
 80026e0:	1d39      	adds	r1, r7, #4
 80026e2:	2304      	movs	r3, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	2003      	movs	r0, #3
 80026e8:	f7ff fef8 	bl	80024dc <m24c64ReadNBytes>
	for (int i = 0; i < FREQ_OUT_SIZE; i++) {
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	e00f      	b.n	8002712 <getFreqOutFromEeprom+0x42>
		FreqOutSave |= (buffer[i] << ((i) * 8));
 80026f2:	1d3a      	adds	r2, r7, #4
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	18d3      	adds	r3, r2, r3
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	001a      	movs	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	409a      	lsls	r2, r3
 8002702:	0013      	movs	r3, r2
 8002704:	001a      	movs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FREQ_OUT_SIZE; i++) {
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3301      	adds	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	ddec      	ble.n	80026f2 <getFreqOutFromEeprom+0x22>
	}
	return FreqOutSave;
 8002718:	68fb      	ldr	r3, [r7, #12]
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b004      	add	sp, #16
 8002720:	bd80      	pop	{r7, pc}

08002722 <getFreqBaseFromEeprom>:

unsigned long getFreqBaseFromEeprom() {
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0

	uint8_t buffer[4] = { 0 };
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
	unsigned long FreqBaseSave = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
	m24c64ReadNBytes(FREQ_BASE_ADDR, buffer, 0, FREQ_OUT_SIZE);
 8002732:	1d39      	adds	r1, r7, #4
 8002734:	2304      	movs	r3, #4
 8002736:	2200      	movs	r2, #0
 8002738:	2004      	movs	r0, #4
 800273a:	f7ff fecf 	bl	80024dc <m24c64ReadNBytes>
	for (int i = 0; i < FREQ_OUT_SIZE; i++) {
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	e00f      	b.n	8002764 <getFreqBaseFromEeprom+0x42>
		FreqBaseSave |= (buffer[i] << ((i) * 8));
 8002744:	1d3a      	adds	r2, r7, #4
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	18d3      	adds	r3, r2, r3
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	001a      	movs	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	409a      	lsls	r2, r3
 8002754:	0013      	movs	r3, r2
 8002756:	001a      	movs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FREQ_OUT_SIZE; i++) {
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3301      	adds	r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b03      	cmp	r3, #3
 8002768:	ddec      	ble.n	8002744 <getFreqBaseFromEeprom+0x22>
	}
	return FreqBaseSave;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}

08002774 <getPdBmFromEeprom>:

unsigned long getPdBmFromEeprom() {
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0

	uint8_t buffer[4] = { 0 };
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
	unsigned long PdBmSave = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
	m24c64ReadNBytes(POUT_ADDR, buffer, 0, FREQ_OUT_SIZE);
 8002784:	1d39      	adds	r1, r7, #4
 8002786:	2304      	movs	r3, #4
 8002788:	2200      	movs	r2, #0
 800278a:	2005      	movs	r0, #5
 800278c:	f7ff fea6 	bl	80024dc <m24c64ReadNBytes>
	for (int i = 0; i < FREQ_OUT_SIZE; i++) {
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	e00f      	b.n	80027b6 <getPdBmFromEeprom+0x42>
		PdBmSave |= (buffer[i] << ((i) * 8));
 8002796:	1d3a      	adds	r2, r7, #4
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	18d3      	adds	r3, r2, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	001a      	movs	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	409a      	lsls	r2, r3
 80027a6:	0013      	movs	r3, r2
 80027a8:	001a      	movs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FREQ_OUT_SIZE; i++) {
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	ddec      	ble.n	8002796 <getPdBmFromEeprom+0x22>
	}
	return PdBmSave;
 80027bc:	68fb      	ldr	r3, [r7, #12]
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <getFreqOut>:

unsigned long getFreqOut(unsigned long FreqBase) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	unsigned long suma_read;

	suma_read = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) ? 0 : FREQ_STEP;
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <getFreqOut+0x14c>)
 80027d6:	2104      	movs	r1, #4
 80027d8:	0018      	movs	r0, r3
 80027da:	f002 fddb 	bl	8005394 <HAL_GPIO_ReadPin>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <getFreqOut+0x1e>
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <getFreqOut+0x20>
 80027e6:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <getFreqOut+0x150>)
 80027e8:	001a      	movs	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) ? 0 : FREQ_STEP * 2;
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	005a      	lsls	r2, r3, #1
 80027f4:	23a0      	movs	r3, #160	; 0xa0
 80027f6:	05db      	lsls	r3, r3, #23
 80027f8:	0011      	movs	r1, r2
 80027fa:	0018      	movs	r0, r3
 80027fc:	f002 fdca 	bl	8005394 <HAL_GPIO_ReadPin>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <getFreqOut+0x40>
 8002804:	2300      	movs	r3, #0
 8002806:	e000      	b.n	800280a <getFreqOut+0x42>
 8002808:	4b44      	ldr	r3, [pc, #272]	; (800291c <getFreqOut+0x154>)
 800280a:	001a      	movs	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	189b      	adds	r3, r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) ? 0 : FREQ_STEP * 4;
 8002812:	4b43      	ldr	r3, [pc, #268]	; (8002920 <getFreqOut+0x158>)
 8002814:	2140      	movs	r1, #64	; 0x40
 8002816:	0018      	movs	r0, r3
 8002818:	f002 fdbc 	bl	8005394 <HAL_GPIO_ReadPin>
 800281c:	1e03      	subs	r3, r0, #0
 800281e:	d001      	beq.n	8002824 <getFreqOut+0x5c>
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <getFreqOut+0x5e>
 8002824:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <getFreqOut+0x15c>)
 8002826:	001a      	movs	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	189b      	adds	r3, r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
	suma_read += HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) ? 0 : FREQ_STEP * 8;
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	011a      	lsls	r2, r3, #4
 8002832:	23a0      	movs	r3, #160	; 0xa0
 8002834:	05db      	lsls	r3, r3, #23
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f002 fdab 	bl	8005394 <HAL_GPIO_ReadPin>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d001      	beq.n	8002846 <getFreqOut+0x7e>
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <getFreqOut+0x80>
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <getFreqOut+0x160>)
 8002848:	001a      	movs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	189b      	adds	r3, r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_4_GPIO_Port, SW_4_Pin) ? 0 : FREQ_STEP * 16;
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	23a0      	movs	r3, #160	; 0xa0
 8002856:	05db      	lsls	r3, r3, #23
 8002858:	0011      	movs	r1, r2
 800285a:	0018      	movs	r0, r3
 800285c:	f002 fd9a 	bl	8005394 <HAL_GPIO_ReadPin>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d001      	beq.n	8002868 <getFreqOut+0xa0>
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <getFreqOut+0xa2>
 8002868:	4b30      	ldr	r3, [pc, #192]	; (800292c <getFreqOut+0x164>)
 800286a:	001a      	movs	r2, r3
	suma_read +=
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	189b      	adds	r3, r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin) ? 0 : FREQ_STEP * 32;
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	021a      	lsls	r2, r3, #8
 8002876:	23a0      	movs	r3, #160	; 0xa0
 8002878:	05db      	lsls	r3, r3, #23
 800287a:	0011      	movs	r1, r2
 800287c:	0018      	movs	r0, r3
 800287e:	f002 fd89 	bl	8005394 <HAL_GPIO_ReadPin>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <getFreqOut+0xc2>
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <getFreqOut+0xc4>
 800288a:	4b29      	ldr	r3, [pc, #164]	; (8002930 <getFreqOut+0x168>)
 800288c:	001a      	movs	r2, r3
	suma_read +=
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	189b      	adds	r3, r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_6_GPIO_Port, SW_6_Pin) ? 0 : FREQ_STEP * 64;
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <getFreqOut+0x14c>)
 8002896:	2108      	movs	r1, #8
 8002898:	0018      	movs	r0, r3
 800289a:	f002 fd7b 	bl	8005394 <HAL_GPIO_ReadPin>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d001      	beq.n	80028a6 <getFreqOut+0xde>
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <getFreqOut+0xe0>
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <getFreqOut+0x16c>)
 80028a8:	001a      	movs	r2, r3
	suma_read +=
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	189b      	adds	r3, r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_7_GPIO_Port, SW_7_Pin) ? 0 : FREQ_STEP * 128;
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <getFreqOut+0x14c>)
 80028b2:	2110      	movs	r1, #16
 80028b4:	0018      	movs	r0, r3
 80028b6:	f002 fd6d 	bl	8005394 <HAL_GPIO_ReadPin>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <getFreqOut+0xfa>
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <getFreqOut+0xfc>
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <getFreqOut+0x170>)
 80028c4:	001a      	movs	r2, r3
	suma_read +=
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_8_GPIO_Port, SW_8_Pin) ? 0 : FREQ_STEP * 256;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <getFreqOut+0x14c>)
 80028ce:	2120      	movs	r1, #32
 80028d0:	0018      	movs	r0, r3
 80028d2:	f002 fd5f 	bl	8005394 <HAL_GPIO_ReadPin>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d001      	beq.n	80028de <getFreqOut+0x116>
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <getFreqOut+0x118>
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <getFreqOut+0x174>)
 80028e0:	001a      	movs	r2, r3
	suma_read +=
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
	suma_read +=
			HAL_GPIO_ReadPin(SW_9_GPIO_Port, SW_9_Pin) ? 0 : FREQ_STEP * 512;
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4a09      	ldr	r2, [pc, #36]	; (8002914 <getFreqOut+0x14c>)
 80028ee:	0019      	movs	r1, r3
 80028f0:	0010      	movs	r0, r2
 80028f2:	f002 fd4f 	bl	8005394 <HAL_GPIO_ReadPin>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d001      	beq.n	80028fe <getFreqOut+0x136>
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <getFreqOut+0x138>
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <getFreqOut+0x178>)
 8002900:	001a      	movs	r2, r3
	suma_read +=
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	189b      	adds	r3, r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
	return suma_read;
 8002908:	68fb      	ldr	r3, [r7, #12]
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	50000400 	.word	0x50000400
 8002918:	000030d4 	.word	0x000030d4
 800291c:	000061a8 	.word	0x000061a8
 8002920:	50000800 	.word	0x50000800
 8002924:	0000c350 	.word	0x0000c350
 8002928:	000186a0 	.word	0x000186a0
 800292c:	00030d40 	.word	0x00030d40
 8002930:	00061a80 	.word	0x00061a80
 8002934:	000c3500 	.word	0x000c3500
 8002938:	00186a00 	.word	0x00186a00
 800293c:	0030d400 	.word	0x0030d400
 8002940:	0061a800 	.word	0x0061a800

08002944 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	uart1_read_to_frame(uart1_ptr);
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <USART1_IRQHandler+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0018      	movs	r0, r3
 800294e:	f002 f9a3 	bl	8004c98 <uart1_read_to_frame>
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200000f4 	.word	0x200000f4

0800295c <rs485_cmd>:

void rs485_cmd(const UART1_t *uart1, RS485_t *rs485, MAX2871_t *ppl) {
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6178      	str	r0, [r7, #20]
 8002964:	6139      	str	r1, [r7, #16]
 8002966:	60fa      	str	r2, [r7, #12]
	switch (rs485->cmd) {
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b34      	cmp	r3, #52	; 0x34
 800296e:	d100      	bne.n	8002972 <rs485_cmd+0x16>
 8002970:	e116      	b.n	8002ba0 <rs485_cmd+0x244>
 8002972:	dd00      	ble.n	8002976 <rs485_cmd+0x1a>
 8002974:	e19c      	b.n	8002cb0 <rs485_cmd+0x354>
 8002976:	2b33      	cmp	r3, #51	; 0x33
 8002978:	d100      	bne.n	800297c <rs485_cmd+0x20>
 800297a:	e0b3      	b.n	8002ae4 <rs485_cmd+0x188>
 800297c:	dd00      	ble.n	8002980 <rs485_cmd+0x24>
 800297e:	e197      	b.n	8002cb0 <rs485_cmd+0x354>
 8002980:	2b31      	cmp	r3, #49	; 0x31
 8002982:	d002      	beq.n	800298a <rs485_cmd+0x2e>
 8002984:	2b32      	cmp	r3, #50	; 0x32
 8002986:	d059      	beq.n	8002a3c <rs485_cmd+0xe0>
 8002988:	e192      	b.n	8002cb0 <rs485_cmd+0x354>
	case QUERY_PARAMETER_FREQOUT: //cmd = 31
		ppl->FreqOutCh = 0;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
		ppl->FreqOutCh = uart1->rx_buffer[4] << 24;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	791b      	ldrb	r3, [r3, #4]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	001a      	movs	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	615a      	str	r2, [r3, #20]
		ppl->FreqOutCh |= uart1->rx_buffer[5] << 16;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	7952      	ldrb	r2, [r2, #5]
 80029a4:	0412      	lsls	r2, r2, #16
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	615a      	str	r2, [r3, #20]
		ppl->FreqOutCh |= uart1->rx_buffer[6] << 8;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	7992      	ldrb	r2, [r2, #6]
 80029b4:	0212      	lsls	r2, r2, #8
 80029b6:	431a      	orrs	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	615a      	str	r2, [r3, #20]
		ppl->FreqOutCh |= uart1->rx_buffer[7];
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	79d2      	ldrb	r2, [r2, #7]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	615a      	str	r2, [r3, #20]
		if ((ppl->FreqOutCh > FREQ_OUT_MIN)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4abc      	ldr	r2, [pc, #752]	; (8002cc0 <rs485_cmd+0x364>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d922      	bls.n	8002a1a <rs485_cmd+0xbe>
				&& (ppl->FreqOutCh < FREQ_OUT_MAX)) {
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4aba      	ldr	r2, [pc, #744]	; (8002cc4 <rs485_cmd+0x368>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d81d      	bhi.n	8002a1a <rs485_cmd+0xbe>
			ppl->FreqOut = ppl->FreqOutCh;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6019      	str	r1, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
			sprintf(uart1->tx_buffer, "New Frequency Out: %u\n", ppl->FreqOutCh);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3319      	adds	r3, #25
 80029f6:	0018      	movs	r0, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	4bb2      	ldr	r3, [pc, #712]	; (8002cc8 <rs485_cmd+0x36c>)
 80029fe:	0019      	movs	r1, r3
 8002a00:	f003 fd94 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3319      	adds	r3, #25
 8002a08:	2164      	movs	r1, #100	; 0x64
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f002 f98c 	bl	8004d28 <uart1_send_frame>
			ppl->freqOutUpdate = true;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2230      	movs	r2, #48	; 0x30
 8002a14:	2101      	movs	r1, #1
 8002a16:	5499      	strb	r1, [r3, r2]
 8002a18:	e00c      	b.n	8002a34 <rs485_cmd+0xd8>
		}else{
			sprintf(uart1->tx_buffer, "OUT OF RANGE \n");
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3319      	adds	r3, #25
 8002a1e:	4aab      	ldr	r2, [pc, #684]	; (8002ccc <rs485_cmd+0x370>)
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f003 fd82 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3319      	adds	r3, #25
 8002a2c:	2164      	movs	r1, #100	; 0x64
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f002 f97a 	bl	8004d28 <uart1_send_frame>
		}
		rs485->cmd = NONE;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
		break;
 8002a3a:	e13d      	b.n	8002cb8 <rs485_cmd+0x35c>
	case QUERY_PARAMETER_ON_OFF: //cmd = 32
		ppl->ON_OFF = 0;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
		ppl->ON_OFF = uart1->rx_buffer[4] << 24;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	791b      	ldrb	r3, [r3, #4]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	001a      	movs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
		ppl->ON_OFF |= uart1->rx_buffer[5] << 16;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	7952      	ldrb	r2, [r2, #5]
 8002a56:	0412      	lsls	r2, r2, #16
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
		ppl->ON_OFF |= uart1->rx_buffer[6] << 8;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	7992      	ldrb	r2, [r2, #6]
 8002a66:	0212      	lsls	r2, r2, #8
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
		ppl->ON_OFF |= uart1->rx_buffer[7];
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	79d2      	ldrb	r2, [r2, #7]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
		if (ppl->ON_OFF == 0) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d113      	bne.n	8002aac <rs485_cmd+0x150>
			HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_RESET);
 8002a84:	23a0      	movs	r3, #160	; 0xa0
 8002a86:	05db      	lsls	r3, r3, #23
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f002 fc9e 	bl	80053ce <HAL_GPIO_WritePin>
			sprintf(uart1->tx_buffer, "RFA DISABLED \n");
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3319      	adds	r3, #25
 8002a96:	4a8e      	ldr	r2, [pc, #568]	; (8002cd0 <rs485_cmd+0x374>)
 8002a98:	0011      	movs	r1, r2
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f003 fd46 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3319      	adds	r3, #25
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f002 f93e 	bl	8004d28 <uart1_send_frame>
		}
		if (ppl->ON_OFF == 1) {
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d113      	bne.n	8002adc <rs485_cmd+0x180>
			HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 8002ab4:	23a0      	movs	r3, #160	; 0xa0
 8002ab6:	05db      	lsls	r3, r3, #23
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2120      	movs	r1, #32
 8002abc:	0018      	movs	r0, r3
 8002abe:	f002 fc86 	bl	80053ce <HAL_GPIO_WritePin>
			sprintf(uart1->tx_buffer, "RFA ENABLED \n");
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3319      	adds	r3, #25
 8002ac6:	4a83      	ldr	r2, [pc, #524]	; (8002cd4 <rs485_cmd+0x378>)
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f003 fd2e 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3319      	adds	r3, #25
 8002ad4:	2164      	movs	r1, #100	; 0x64
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f002 f926 	bl	8004d28 <uart1_send_frame>
		}
		rs485->cmd = NONE;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
		break;
 8002ae2:	e0e9      	b.n	8002cb8 <rs485_cmd+0x35c>
	case QUERY_PARAMETER_FREQBASE: //cmd = 33
		ppl->FreqBaseCh = 0;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	621a      	str	r2, [r3, #32]
		ppl->FreqBaseCh = uart1->rx_buffer[4] << 24;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	061b      	lsls	r3, r3, #24
 8002af0:	001a      	movs	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	621a      	str	r2, [r3, #32]
		ppl->FreqBaseCh |= uart1->rx_buffer[5] << 16;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	7952      	ldrb	r2, [r2, #5]
 8002afe:	0412      	lsls	r2, r2, #16
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	621a      	str	r2, [r3, #32]
		ppl->FreqBaseCh |= uart1->rx_buffer[6] << 8;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	7992      	ldrb	r2, [r2, #6]
 8002b0e:	0212      	lsls	r2, r2, #8
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	621a      	str	r2, [r3, #32]
		ppl->FreqBaseCh |= uart1->rx_buffer[7];
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	79d2      	ldrb	r2, [r2, #7]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	621a      	str	r2, [r3, #32]
		if ((ppl->FreqBaseCh > FREQ_BASE_MIN) && (ppl->FreqBaseCh < FREQ_BASE_MAX)) {
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a65      	ldr	r2, [pc, #404]	; (8002cc0 <rs485_cmd+0x364>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d927      	bls.n	8002b7e <rs485_cmd+0x222>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <rs485_cmd+0x37c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d822      	bhi.n	8002b7e <rs485_cmd+0x222>
			ppl->freqBase = ppl->FreqBaseCh;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	61da      	str	r2, [r3, #28]
			ppl->FreqOut = ppl->freqOutRead + ppl->freqBase;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	001c      	movs	r4, r3
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	001d      	movs	r5, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	601c      	str	r4, [r3, #0]
 8002b54:	605d      	str	r5, [r3, #4]
			ppl->freqBaseUpdate = true;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2231      	movs	r2, #49	; 0x31
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]
			sprintf(uart1->tx_buffer, "New Base Frequency: %u\n",
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3319      	adds	r3, #25
 8002b62:	0018      	movs	r0, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <rs485_cmd+0x380>)
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	f003 fcde 	bl	800652c <siprintf>
					ppl->FreqBaseCh);
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3319      	adds	r3, #25
 8002b74:	2164      	movs	r1, #100	; 0x64
 8002b76:	0018      	movs	r0, r3
 8002b78:	f002 f8d6 	bl	8004d28 <uart1_send_frame>
 8002b7c:	e00c      	b.n	8002b98 <rs485_cmd+0x23c>
		}else{
			sprintf(uart1->tx_buffer, "OUT OF RANGE \n");
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3319      	adds	r3, #25
 8002b82:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <rs485_cmd+0x370>)
 8002b84:	0011      	movs	r1, r2
 8002b86:	0018      	movs	r0, r3
 8002b88:	f003 fcd0 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3319      	adds	r3, #25
 8002b90:	2164      	movs	r1, #100	; 0x64
 8002b92:	0018      	movs	r0, r3
 8002b94:	f002 f8c8 	bl	8004d28 <uart1_send_frame>
		}
		rs485->cmd = NONE;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
		break;
 8002b9e:	e08b      	b.n	8002cb8 <rs485_cmd+0x35c>
	case QUERY_PARAMETER_PdBm: //cmd = 34
		ppl->PdBmCh = 0;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
		ppl->PdBmCh = uart1->rx_buffer[4] << 24;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	001a      	movs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
		ppl->PdBmCh |= uart1->rx_buffer[5] << 16;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	7952      	ldrb	r2, [r2, #5]
 8002bba:	0412      	lsls	r2, r2, #16
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
		ppl->PdBmCh |= uart1->rx_buffer[6] << 8;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	7992      	ldrb	r2, [r2, #6]
 8002bca:	0212      	lsls	r2, r2, #8
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
		ppl->PdBmCh |= uart1->rx_buffer[7];
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	79d2      	ldrb	r2, [r2, #7]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
		if (ppl->PdBmCh == 0) {
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d114      	bne.n	8002c12 <rs485_cmd+0x2b6>
			//Power out -4dBm
			ppl->register4.APWR = 0x0UL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	22e4      	movs	r2, #228	; 0xe4
 8002bec:	2100      	movs	r1, #0
 8002bee:	5099      	str	r1, [r3, r2]
			ppl->PdBmUpdate = true;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2232      	movs	r2, #50	; 0x32
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	5499      	strb	r1, [r3, r2]
			sprintf(uart1->tx_buffer, "PdBm out = -4dBm \n");
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3319      	adds	r3, #25
 8002bfc:	4a38      	ldr	r2, [pc, #224]	; (8002ce0 <rs485_cmd+0x384>)
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f003 fc93 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3319      	adds	r3, #25
 8002c0a:	2164      	movs	r1, #100	; 0x64
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f002 f88b 	bl	8004d28 <uart1_send_frame>
		}
		if (ppl->PdBmCh == 1) {
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d114      	bne.n	8002c44 <rs485_cmd+0x2e8>
			//Power out -1dBm
			ppl->register4.APWR = 0x1UL;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	22e4      	movs	r2, #228	; 0xe4
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5099      	str	r1, [r3, r2]
			ppl->PdBmUpdate = true;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2232      	movs	r2, #50	; 0x32
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
			sprintf(uart1->tx_buffer, "PdBm out = -1dBm \n");
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3319      	adds	r3, #25
 8002c2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <rs485_cmd+0x388>)
 8002c30:	0011      	movs	r1, r2
 8002c32:	0018      	movs	r0, r3
 8002c34:	f003 fc7a 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	3319      	adds	r3, #25
 8002c3c:	2164      	movs	r1, #100	; 0x64
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f002 f872 	bl	8004d28 <uart1_send_frame>
		}
		if (ppl->PdBmCh == 2) {
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d114      	bne.n	8002c76 <rs485_cmd+0x31a>
			//Power out +2dBm
			ppl->register4.APWR = 0x2UL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	22e4      	movs	r2, #228	; 0xe4
 8002c50:	2102      	movs	r1, #2
 8002c52:	5099      	str	r1, [r3, r2]
			ppl->PdBmUpdate = true;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2232      	movs	r2, #50	; 0x32
 8002c58:	2101      	movs	r1, #1
 8002c5a:	5499      	strb	r1, [r3, r2]
			sprintf(uart1->tx_buffer, "PdBm out = +2dBm \n");
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3319      	adds	r3, #25
 8002c60:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <rs485_cmd+0x38c>)
 8002c62:	0011      	movs	r1, r2
 8002c64:	0018      	movs	r0, r3
 8002c66:	f003 fc61 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3319      	adds	r3, #25
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	0018      	movs	r0, r3
 8002c72:	f002 f859 	bl	8004d28 <uart1_send_frame>
		}
		if (ppl->PdBmCh == 3) {
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d114      	bne.n	8002ca8 <rs485_cmd+0x34c>
			//Power out +5dBm
			ppl->register4.APWR = 0x3UL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	22e4      	movs	r2, #228	; 0xe4
 8002c82:	2103      	movs	r1, #3
 8002c84:	5099      	str	r1, [r3, r2]
			ppl->PdBmUpdate = true;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2232      	movs	r2, #50	; 0x32
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]
			sprintf(uart1->tx_buffer, "PdBm out = +5dBm \n");
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3319      	adds	r3, #25
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <rs485_cmd+0x390>)
 8002c94:	0011      	movs	r1, r2
 8002c96:	0018      	movs	r0, r3
 8002c98:	f003 fc48 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3319      	adds	r3, #25
 8002ca0:	2164      	movs	r1, #100	; 0x64
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f002 f840 	bl	8004d28 <uart1_send_frame>
		}
		rs485->cmd = NONE;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
		break;
 8002cae:	e003      	b.n	8002cb8 <rs485_cmd+0x35c>
	default:
		rs485->cmd = NONE;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
		break;
 8002cb6:	46c0      	nop			; (mov r8, r8)
	}
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b006      	add	sp, #24
 8002cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc0:	087e60a0 	.word	0x087e60a0
 8002cc4:	099bb77f 	.word	0x099bb77f
 8002cc8:	08006e40 	.word	0x08006e40
 8002ccc:	08006e58 	.word	0x08006e58
 8002cd0:	08006e68 	.word	0x08006e68
 8002cd4:	08006e78 	.word	0x08006e78
 8002cd8:	08d89853 	.word	0x08d89853
 8002cdc:	08006e88 	.word	0x08006e88
 8002ce0:	08006ea0 	.word	0x08006ea0
 8002ce4:	08006eb4 	.word	0x08006eb4
 8002ce8:	08006ec8 	.word	0x08006ec8
 8002cec:	08006edc 	.word	0x08006edc

08002cf0 <freqOutUpdate>:

void freqOutUpdate(const UART1_t *uart1, MAX2871_t *ppl) {
 8002cf0:	b5b0      	push	{r4, r5, r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
	ppl->freqOutRead = getFreqOut(ppl->freqBase);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff fd62 	bl	80027c8 <getFreqOut>
 8002d04:	0002      	movs	r2, r0
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	60da      	str	r2, [r3, #12]
	if (ppl->freqOutRead != ppl->freqOutNew) {
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d01d      	beq.n	8002d52 <freqOutUpdate+0x62>
		Change_end_off_led();
 8002d16:	23a0      	movs	r3, #160	; 0xa0
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	23a0      	movs	r3, #160	; 0xa0
 8002d1e:	05db      	lsls	r3, r3, #23
 8002d20:	2180      	movs	r1, #128	; 0x80
 8002d22:	438a      	bics	r2, r1
 8002d24:	615a      	str	r2, [r3, #20]
		ppl->lastReadTick = HAL_GetTick();
 8002d26:	f002 f8ef 	bl	8004f08 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_RESET);
 8002d30:	23a0      	movs	r3, #160	; 0xa0
 8002d32:	05db      	lsls	r3, r3, #23
 8002d34:	2200      	movs	r2, #0
 8002d36:	2120      	movs	r1, #32
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f002 fb48 	bl	80053ce <HAL_GPIO_WritePin>
		Freq_changing_on_led();
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <freqOutUpdate+0xf4>)
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <freqOutUpdate+0xf4>)
 8002d44:	2101      	movs	r1, #1
 8002d46:	430a      	orrs	r2, r1
 8002d48:	615a      	str	r2, [r3, #20]
		ppl->freqOutNew = ppl->freqOutRead;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	611a      	str	r2, [r3, #16]
	}
	if ((HAL_GetTick() - ppl->lastReadTick) > 100) {
 8002d52:	f002 f8d9 	bl	8004f08 <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d93c      	bls.n	8002ddc <freqOutUpdate+0xec>
		if (ppl->freqOutNew != ppl->freqOutCurrent) {
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d036      	beq.n	8002ddc <freqOutUpdate+0xec>
			ppl->FreqOut = ppl->freqOutRead + ppl->freqBase;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	18d3      	adds	r3, r2, r3
 8002d78:	001c      	movs	r4, r3
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	001d      	movs	r5, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	601c      	str	r4, [r3, #0]
 8002d82:	605d      	str	r5, [r3, #4]
			sprintf(uart1->tx_buffer, "New Frequency Out: %u\n", ppl->FreqOut);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3319      	adds	r3, #25
 8002d88:	0018      	movs	r0, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4915      	ldr	r1, [pc, #84]	; (8002de8 <freqOutUpdate+0xf8>)
 8002d92:	f003 fbcb 	bl	800652c <siprintf>
			uart1_send_frame(uart1->tx_buffer, TX_BUFFLEN);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3319      	adds	r3, #25
 8002d9a:	2164      	movs	r1, #100	; 0x64
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f001 ffc3 	bl	8004d28 <uart1_send_frame>
			ppl->freqOutUpdate = true;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2230      	movs	r2, #48	; 0x30
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]
			HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 8002daa:	23a0      	movs	r3, #160	; 0xa0
 8002dac:	05db      	lsls	r3, r3, #23
 8002dae:	2201      	movs	r2, #1
 8002db0:	2120      	movs	r1, #32
 8002db2:	0018      	movs	r0, r3
 8002db4:	f002 fb0b 	bl	80053ce <HAL_GPIO_WritePin>
			Freq_changing_off_led();
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <freqOutUpdate+0xf4>)
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <freqOutUpdate+0xf4>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	438a      	bics	r2, r1
 8002dc2:	615a      	str	r2, [r3, #20]
			Change_end_on_led();
 8002dc4:	23a0      	movs	r3, #160	; 0xa0
 8002dc6:	05db      	lsls	r3, r3, #23
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	23a0      	movs	r3, #160	; 0xa0
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	615a      	str	r2, [r3, #20]
			ppl->freqOutCurrent = ppl->freqOutNew;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	609a      	str	r2, [r3, #8]
		}
	}
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bdb0      	pop	{r4, r5, r7, pc}
 8002de4:	50000400 	.word	0x50000400
 8002de8:	08006e40 	.word	0x08006e40

08002dec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	b0f5      	sub	sp, #468	; 0x1d4
 8002df0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	RS485_t rs485;
	MAX2871_t ppl;
	ppl_ptr = &ppl;
 8002df2:	4b5d      	ldr	r3, [pc, #372]	; (8002f68 <main+0x17c>)
 8002df4:	24b0      	movs	r4, #176	; 0xb0
 8002df6:	193a      	adds	r2, r7, r4
 8002df8:	601a      	str	r2, [r3, #0]
	LED_t led;
	UART1_t uart1;
	Tone_uhf_t uhf;
	uart1_ptr = &uart1;
 8002dfa:	4b5c      	ldr	r3, [pc, #368]	; (8002f6c <main+0x180>)
 8002dfc:	2510      	movs	r5, #16
 8002dfe:	197a      	adds	r2, r7, r5
 8002e00:	601a      	str	r2, [r3, #0]
	uhf_ptr = &uhf;
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <main+0x184>)
 8002e04:	003a      	movs	r2, r7
 8002e06:	601a      	str	r2, [r3, #0]
	rs485_ptr = &rs485;
 8002e08:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <main+0x188>)
 8002e0a:	26e2      	movs	r6, #226	; 0xe2
 8002e0c:	0076      	lsls	r6, r6, #1
 8002e0e:	19ba      	adds	r2, r7, r6
 8002e10:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002e12:	f001 fffd 	bl	8004e10 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002e16:	f000 f8b5 	bl	8002f84 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002e1a:	f000 f93b 	bl	8003094 <MX_GPIO_Init>
	//MX_I2C1_Init();
	MX_SPI2_Init();
 8002e1e:	f000 f8f9 	bl	8003014 <MX_SPI2_Init>
	//MX_USART1_UART_Init();
	//MX_CRC_Init();

	/* USER CODE BEGIN 2 */
	toneUhfInit(UHF_TONE, ID0, &uhf);
 8002e22:	003b      	movs	r3, r7
 8002e24:	001a      	movs	r2, r3
 8002e26:	2100      	movs	r1, #0
 8002e28:	2007      	movs	r0, #7
 8002e2a:	f001 fb2a 	bl	8004482 <toneUhfInit>
	rs485_init(&rs485);
 8002e2e:	19bb      	adds	r3, r7, r6
 8002e30:	0018      	movs	r0, r3
 8002e32:	f001 fbab 	bl	800458c <rs485_init>
	led_init(&led);
 8002e36:	2394      	movs	r3, #148	; 0x94
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff fac4 	bl	80023c8 <led_init>
	i2c1MasterInit();
 8002e40:	f7ff f914 	bl	800206c <i2c1MasterInit>
	uart1_init(HS16_CLK, BAUD_RATE, &uart1);
 8002e44:	197a      	adds	r2, r7, r5
 8002e46:	23e1      	movs	r3, #225	; 0xe1
 8002e48:	025b      	lsls	r3, r3, #9
 8002e4a:	484b      	ldr	r0, [pc, #300]	; (8002f78 <main+0x18c>)
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	f001 fe6f 	bl	8004b30 <uart1_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	max2871Init(&ppl);
 8002e52:	193b      	adds	r3, r7, r4
 8002e54:	0018      	movs	r0, r3
 8002e56:	f000 fbb5 	bl	80035c4 <max2871Init>
	max2871RegisterInit(&hspi2, &ppl);
 8002e5a:	193a      	adds	r2, r7, r4
 8002e5c:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <main+0x190>)
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f001 fa1f 	bl	80042a4 <max2871RegisterInit>
	max2871Program(&hspi2, &ppl);
 8002e66:	193a      	adds	r2, r7, r4
 8002e68:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <main+0x190>)
 8002e6a:	0011      	movs	r1, r2
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f001 fa95 	bl	800439c <max2871Program>
	HAL_GPIO_WritePin(GPIOA, MAX_RF_ENABLE_Pin, GPIO_PIN_SET);
 8002e72:	23a0      	movs	r3, #160	; 0xa0
 8002e74:	05db      	lsls	r3, r3, #23
 8002e76:	2201      	movs	r2, #1
 8002e78:	2120      	movs	r1, #32
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f002 faa7 	bl	80053ce <HAL_GPIO_WritePin>

	while (1) {

		led_enable_kalive(&led);
 8002e80:	2394      	movs	r3, #148	; 0x94
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff fad9 	bl	800243c <led_enable_kalive>

		freqOutUpdate(&uart1, &ppl);
 8002e8a:	24b0      	movs	r4, #176	; 0xb0
 8002e8c:	193a      	adds	r2, r7, r4
 8002e8e:	2510      	movs	r5, #16
 8002e90:	197b      	adds	r3, r7, r5
 8002e92:	0011      	movs	r1, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7ff ff2b 	bl	8002cf0 <freqOutUpdate>
		rs485_update_status_by_uart(&rs485, &uart1);
 8002e9a:	197a      	adds	r2, r7, r5
 8002e9c:	26e2      	movs	r6, #226	; 0xe2
 8002e9e:	0076      	lsls	r6, r6, #1
 8002ea0:	19bb      	adds	r3, r7, r6
 8002ea2:	0011      	movs	r1, r2
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f001 fc03 	bl	80046b0 <rs485_update_status_by_uart>
		rs485_cmd(&uart1, &rs485, &ppl);
 8002eaa:	193a      	adds	r2, r7, r4
 8002eac:	19b9      	adds	r1, r7, r6
 8002eae:	197b      	adds	r3, r7, r5
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff fd53 	bl	800295c <rs485_cmd>

		if (ppl.freqOutUpdate) {
 8002eb6:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <main+0x194>)
 8002eb8:	21e8      	movs	r1, #232	; 0xe8
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	185b      	adds	r3, r3, r1
 8002ebe:	19db      	adds	r3, r3, r7
 8002ec0:	2230      	movs	r2, #48	; 0x30
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d011      	beq.n	8002eec <main+0x100>
			ppl.freqOutUpdate = false;
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <main+0x194>)
 8002eca:	185b      	adds	r3, r3, r1
 8002ecc:	19db      	adds	r3, r3, r7
 8002ece:	2230      	movs	r2, #48	; 0x30
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]
			max2871Program(&hspi2, &ppl);
 8002ed4:	193a      	adds	r2, r7, r4
 8002ed6:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <main+0x190>)
 8002ed8:	0011      	movs	r1, r2
 8002eda:	0018      	movs	r0, r3
 8002edc:	f001 fa5e 	bl	800439c <max2871Program>
			m24c64WriteNBytes(FREQ_OUT_ADDR, (uint8_t*) (&ppl.FreqOut), 0,
 8002ee0:	1939      	adds	r1, r7, r4
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2003      	movs	r0, #3
 8002ee8:	f7ff fb34 	bl	8002554 <m24c64WriteNBytes>
					FREQ_OUT_SIZE);
		}

		if (ppl.freqBaseUpdate) {
 8002eec:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <main+0x194>)
 8002eee:	21e8      	movs	r1, #232	; 0xe8
 8002ef0:	0049      	lsls	r1, r1, #1
 8002ef2:	185b      	adds	r3, r3, r1
 8002ef4:	19db      	adds	r3, r3, r7
 8002ef6:	2231      	movs	r2, #49	; 0x31
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d014      	beq.n	8002f28 <main+0x13c>
			ppl.freqBaseUpdate = false;
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <main+0x194>)
 8002f00:	185b      	adds	r3, r3, r1
 8002f02:	19db      	adds	r3, r3, r7
 8002f04:	2231      	movs	r2, #49	; 0x31
 8002f06:	2100      	movs	r1, #0
 8002f08:	5499      	strb	r1, [r3, r2]
			max2871Program(&hspi2, &ppl);
 8002f0a:	24b0      	movs	r4, #176	; 0xb0
 8002f0c:	193a      	adds	r2, r7, r4
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <main+0x190>)
 8002f10:	0011      	movs	r1, r2
 8002f12:	0018      	movs	r0, r3
 8002f14:	f001 fa42 	bl	800439c <max2871Program>
			m24c64WriteNBytes(FREQ_BASE_ADDR, (uint8_t*) (&ppl.freqBase), 0,
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	331c      	adds	r3, #28
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	2304      	movs	r3, #4
 8002f20:	2200      	movs	r2, #0
 8002f22:	2004      	movs	r0, #4
 8002f24:	f7ff fb16 	bl	8002554 <m24c64WriteNBytes>
					FREQ_OUT_SIZE);
		}

		if (ppl.PdBmUpdate) {
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <main+0x194>)
 8002f2a:	21e8      	movs	r1, #232	; 0xe8
 8002f2c:	0049      	lsls	r1, r1, #1
 8002f2e:	185b      	adds	r3, r3, r1
 8002f30:	19db      	adds	r3, r3, r7
 8002f32:	2232      	movs	r2, #50	; 0x32
 8002f34:	5c9b      	ldrb	r3, [r3, r2]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0a2      	beq.n	8002e80 <main+0x94>
			ppl.PdBmUpdate = false;
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <main+0x194>)
 8002f3c:	185b      	adds	r3, r3, r1
 8002f3e:	19db      	adds	r3, r3, r7
 8002f40:	2232      	movs	r2, #50	; 0x32
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]
			max2871Program(&hspi2, &ppl);
 8002f46:	24b0      	movs	r4, #176	; 0xb0
 8002f48:	193a      	adds	r2, r7, r4
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <main+0x190>)
 8002f4c:	0011      	movs	r1, r2
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f001 fa24 	bl	800439c <max2871Program>
			m24c64WriteNBytes(POUT_ADDR, (uint8_t*) (&ppl.register4.APWR), 0,
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	33e4      	adds	r3, #228	; 0xe4
 8002f58:	0019      	movs	r1, r3
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2005      	movs	r0, #5
 8002f60:	f7ff faf8 	bl	8002554 <m24c64WriteNBytes>
		led_enable_kalive(&led);
 8002f64:	e78c      	b.n	8002e80 <main+0x94>
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	200000f0 	.word	0x200000f0
 8002f6c:	200000f4 	.word	0x200000f4
 8002f70:	200000f8 	.word	0x200000f8
 8002f74:	200000fc 	.word	0x200000fc
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	2000008c 	.word	0x2000008c
 8002f80:	fffffee0 	.word	0xfffffee0

08002f84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b093      	sub	sp, #76	; 0x4c
 8002f88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f8a:	2414      	movs	r4, #20
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	0018      	movs	r0, r3
 8002f90:	2334      	movs	r3, #52	; 0x34
 8002f92:	001a      	movs	r2, r3
 8002f94:	2100      	movs	r1, #0
 8002f96:	f003 fac1 	bl	800651c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	2310      	movs	r3, #16
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	f003 faba 	bl	800651c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f002 fa2b 	bl	8005408 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fb8:	193b      	adds	r3, r7, r4
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	0052      	lsls	r2, r2, #1
 8002fbe:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002fc0:	193b      	adds	r3, r7, r4
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	2240      	movs	r2, #64	; 0x40
 8002fca:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f002 fa57 	bl	8005488 <HAL_RCC_OscConfig>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d001      	beq.n	8002fe2 <SystemClock_Config+0x5e>
		Error_Handler();
 8002fde:	f000 f8fb 	bl	80031d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	2200      	movs	r2, #0
 8002fec:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	0018      	movs	r0, r3
 8003000:	f002 fd52 	bl	8005aa8 <HAL_RCC_ClockConfig>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <SystemClock_Config+0x88>
		Error_Handler();
 8003008:	f000 f8e6 	bl	80031d8 <Error_Handler>
	}
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b013      	add	sp, #76	; 0x4c
 8003012:	bd90      	pop	{r4, r7, pc}

08003014 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <MX_SPI2_Init+0x78>)
 800301a:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <MX_SPI2_Init+0x7c>)
 800301c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <MX_SPI2_Init+0x78>)
 8003020:	2282      	movs	r2, #130	; 0x82
 8003022:	0052      	lsls	r2, r2, #1
 8003024:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <MX_SPI2_Init+0x78>)
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	0212      	lsls	r2, r2, #8
 800302c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <MX_SPI2_Init+0x78>)
 8003030:	22e0      	movs	r2, #224	; 0xe0
 8003032:	00d2      	lsls	r2, r2, #3
 8003034:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <MX_SPI2_Init+0x78>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <MX_SPI2_Init+0x78>)
 800303e:	2200      	movs	r2, #0
 8003040:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <MX_SPI2_Init+0x78>)
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <MX_SPI2_Init+0x78>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <MX_SPI2_Init+0x78>)
 8003052:	2200      	movs	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <MX_SPI2_Init+0x78>)
 8003058:	2200      	movs	r2, #0
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <MX_SPI2_Init+0x78>)
 800305e:	2200      	movs	r2, #0
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <MX_SPI2_Init+0x78>)
 8003064:	2207      	movs	r2, #7
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <MX_SPI2_Init+0x78>)
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <MX_SPI2_Init+0x78>)
 8003070:	2208      	movs	r2, #8
 8003072:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <MX_SPI2_Init+0x78>)
 8003076:	0018      	movs	r0, r3
 8003078:	f002 fea0 	bl	8005dbc <HAL_SPI_Init>
 800307c:	1e03      	subs	r3, r0, #0
 800307e:	d001      	beq.n	8003084 <MX_SPI2_Init+0x70>
		Error_Handler();
 8003080:	f000 f8aa 	bl	80031d8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	2000008c 	.word	0x2000008c
 8003090:	40003800 	.word	0x40003800

08003094 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800309a:	240c      	movs	r4, #12
 800309c:	193b      	adds	r3, r7, r4
 800309e:	0018      	movs	r0, r3
 80030a0:	2314      	movs	r3, #20
 80030a2:	001a      	movs	r2, r3
 80030a4:	2100      	movs	r1, #0
 80030a6:	f003 fa39 	bl	800651c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030aa:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	4b44      	ldr	r3, [pc, #272]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030b0:	2102      	movs	r1, #2
 80030b2:	430a      	orrs	r2, r1
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
 80030b6:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	2202      	movs	r2, #2
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80030c2:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c6:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030c8:	2104      	movs	r1, #4
 80030ca:	430a      	orrs	r2, r1
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
 80030ce:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d2:	2204      	movs	r2, #4
 80030d4:	4013      	ands	r3, r2
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80030da:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030de:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	635a      	str	r2, [r3, #52]	; 0x34
 80030e6:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <MX_GPIO_Init+0x12c>)
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	2201      	movs	r2, #1
 80030ec:	4013      	ands	r3, r2
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin,
 80030f2:	4934      	ldr	r1, [pc, #208]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030f4:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <MX_GPIO_Init+0x134>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	0018      	movs	r0, r3
 80030fa:	f002 f968 	bl	80053ce <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80030fe:	23a0      	movs	r3, #160	; 0xa0
 8003100:	05db      	lsls	r3, r3, #23
 8003102:	2200      	movs	r2, #0
 8003104:	21ae      	movs	r1, #174	; 0xae
 8003106:	0018      	movs	r0, r3
 8003108:	f002 f961 	bl	80053ce <HAL_GPIO_WritePin>
	MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin | MAX_RF_ENABLE_Pin | LED_1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RS485_CTRL_Pin LED_2_Pin LED_3_Pin */
	GPIO_InitStruct.Pin = RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin;
 800310c:	193b      	adds	r3, r7, r4
 800310e:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <MX_GPIO_Init+0x130>)
 8003110:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003112:	193b      	adds	r3, r7, r4
 8003114:	2201      	movs	r2, #1
 8003116:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	193b      	adds	r3, r7, r4
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	193b      	adds	r3, r7, r4
 8003120:	2200      	movs	r2, #0
 8003122:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003124:	193b      	adds	r3, r7, r4
 8003126:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <MX_GPIO_Init+0x134>)
 8003128:	0019      	movs	r1, r3
 800312a:	0010      	movs	r0, r2
 800312c:	f001 ffce 	bl	80050cc <HAL_GPIO_Init>

	/*Configure GPIO pins : TEST_INPUT_1_Pin TEST_INPUT_2_Pin SW_2_Pin */
	GPIO_InitStruct.Pin = TEST_INPUT_1_Pin | TEST_INPUT_2_Pin | SW_2_Pin;
 8003130:	193b      	adds	r3, r7, r4
 8003132:	4a26      	ldr	r2, [pc, #152]	; (80031cc <MX_GPIO_Init+0x138>)
 8003134:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003136:	193b      	adds	r3, r7, r4
 8003138:	2200      	movs	r2, #0
 800313a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	193b      	adds	r3, r7, r4
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003142:	193b      	adds	r3, r7, r4
 8003144:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <MX_GPIO_Init+0x13c>)
 8003146:	0019      	movs	r1, r3
 8003148:	0010      	movs	r0, r2
 800314a:	f001 ffbf 	bl	80050cc <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LE_Pin MAX_CE_Pin MAX_MUX_Pin MAX_RF_ENABLE_Pin
	 LED_1_Pin */
	GPIO_InitStruct.Pin = MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin
 800314e:	193b      	adds	r3, r7, r4
 8003150:	22ae      	movs	r2, #174	; 0xae
 8003152:	601a      	str	r2, [r3, #0]
			| MAX_RF_ENABLE_Pin | LED_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003154:	193b      	adds	r3, r7, r4
 8003156:	2201      	movs	r2, #1
 8003158:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	193b      	adds	r3, r7, r4
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003160:	193b      	adds	r3, r7, r4
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003166:	193a      	adds	r2, r7, r4
 8003168:	23a0      	movs	r3, #160	; 0xa0
 800316a:	05db      	lsls	r3, r3, #23
 800316c:	0011      	movs	r1, r2
 800316e:	0018      	movs	r0, r3
 8003170:	f001 ffac 	bl	80050cc <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LOCK_DETECTOR_Pin SW_1_Pin SW_3_Pin SW_4_Pin
	 SW_5_Pin */
	GPIO_InitStruct.Pin = MAX_LOCK_DETECTOR_Pin | SW_1_Pin | SW_3_Pin | SW_4_Pin
 8003174:	193b      	adds	r3, r7, r4
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <MX_GPIO_Init+0x140>)
 8003178:	601a      	str	r2, [r3, #0]
			| SW_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317a:	193b      	adds	r3, r7, r4
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	193b      	adds	r3, r7, r4
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003186:	193a      	adds	r2, r7, r4
 8003188:	23a0      	movs	r3, #160	; 0xa0
 800318a:	05db      	lsls	r3, r3, #23
 800318c:	0011      	movs	r1, r2
 800318e:	0018      	movs	r0, r3
 8003190:	f001 ff9c 	bl	80050cc <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_0_Pin SW_6_Pin SW_7_Pin SW_8_Pin
	 SW_9_Pin */
	GPIO_InitStruct.Pin = SW_0_Pin | SW_6_Pin | SW_7_Pin | SW_8_Pin | SW_9_Pin;
 8003194:	0021      	movs	r1, r4
 8003196:	187b      	adds	r3, r7, r1
 8003198:	229e      	movs	r2, #158	; 0x9e
 800319a:	0052      	lsls	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2200      	movs	r2, #0
 80031a2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <MX_GPIO_Init+0x134>)
 80031ae:	0019      	movs	r1, r3
 80031b0:	0010      	movs	r0, r2
 80031b2:	f001 ff8b 	bl	80050cc <HAL_GPIO_Init>

}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b009      	add	sp, #36	; 0x24
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	40021000 	.word	0x40021000
 80031c4:	00000203 	.word	0x00000203
 80031c8:	50000400 	.word	0x50000400
 80031cc:	0000c040 	.word	0x0000c040
 80031d0:	50000800 	.word	0x50000800
 80031d4:	00009940 	.word	0x00009940

080031d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031dc:	b672      	cpsid	i
}
 80031de:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031e0:	e7fe      	b.n	80031e0 <Error_Handler+0x8>

080031e2 <getRegister0InitValue>:
 *      Author: artur
 */

#include "max2871.h"

unsigned long getRegister0InitValue(MAX2871_t *ppl) {
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]

	ppl->register0.INT = 0x0UL;   // Enables fractional-N mode
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	635a      	str	r2, [r3, #52]	; 0x34
	ppl->register0.NDIV = 0x0UL; // Sets integer part (N-divider) of the feedback divider factor
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
	ppl->register0.FRAC = 0x0UL;  // Sets fractional value
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c
	ppl->register0.ADDR0 = 0x0UL; // Register address bits
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

	return ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	07da      	lsls	r2, r3, #31
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	03db      	lsls	r3, r3, #15
 800320e:	431a      	orrs	r2, r3
			| ppl->register0.FRAC << 3 | ppl->register0.ADDR0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	4313      	orrs	r3, r2
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}

08003226 <getRegister1InitValue>:

unsigned long getRegister1InitValue(MAX2871_t *ppl) {
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]

	ppl->register1.CPL = 0x3UL;        // Charge pump linearity 30%
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	645a      	str	r2, [r3, #68]	; 0x44
	ppl->register1.CPT = 0x00UL;       // Charge pump test mode  normal mode
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	649a      	str	r2, [r3, #72]	; 0x48
	ppl->register1.PHASE = 0x1UL;      // Phase Value (recommended)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	64da      	str	r2, [r3, #76]	; 0x4c
	ppl->register1.MODULUS = 0xFA0UL;  // 4000 for max resolution
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	22fa      	movs	r2, #250	; 0xfa
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	651a      	str	r2, [r3, #80]	; 0x50
	ppl->register1.ADDR1 = 0x1UL;      // Register address bits
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	655a      	str	r2, [r3, #84]	; 0x54

	return ppl->register1.CPL << 29 | ppl->register1.CPT << 27
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	075a      	lsls	r2, r3, #29
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003258:	06db      	lsls	r3, r3, #27
 800325a:	431a      	orrs	r2, r3
			| ppl->register1.PHASE << 15 | ppl->register1.MODULUS << 3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	03db      	lsls	r3, r3, #15
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	431a      	orrs	r2, r3
			| ppl->register1.ADDR1;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	4313      	orrs	r3, r2
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	b002      	add	sp, #8
 8003278:	bd80      	pop	{r7, pc}

0800327a <getRegister2InitValue>:

unsigned long getRegister2InitValue(MAX2871_t *ppl) {
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]

	ppl->register2.LDS = 0x1UL;    // 1 if fPFD > 32 MHz
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	659a      	str	r2, [r3, #88]	; 0x58
	ppl->register2.SDN = 0x0UL;    // Noise mode  Low-noise mode
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	65da      	str	r2, [r3, #92]	; 0x5c
	ppl->register2.MUX = 0x6UL;    // MUX pin configuration  Digital lock detect
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2206      	movs	r2, #6
 8003292:	661a      	str	r2, [r3, #96]	; 0x60
	ppl->register2.DBR = 0x0UL;    // Reference doubler is disabled
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	665a      	str	r2, [r3, #100]	; 0x64
	ppl->register2.RDIV2 = 0x0UL;  // Reference divide-by-2 is disabled
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	669a      	str	r2, [r3, #104]	; 0x68
	ppl->register2.RCNT = 0x0UL;   // Reference divide Value is unused
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	66da      	str	r2, [r3, #108]	; 0x6c
	ppl->register2.REG4DB = 0x0UL; // Double buffer mode disabled
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	671a      	str	r2, [r3, #112]	; 0x70
	ppl->register2.CP = 0x00UL; // Charge pump current  0.32 mA (1.36/RSET * (1 + CP[3:0]) RSET  5k1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	675a      	str	r2, [r3, #116]	; 0x74
	ppl->register2.LDF = 0x0UL;    // Lock detect function  Frac-N lock detect
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	679a      	str	r2, [r3, #120]	; 0x78
	ppl->register2.LDP = 0x0UL;    // Lock detect precision  10ns
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	67da      	str	r2, [r3, #124]	; 0x7c
	ppl->register2.PDP = 0x1UL;    // Phase detector polarity set positive
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	2101      	movs	r1, #1
 80032c4:	5099      	str	r1, [r3, r2]
	ppl->register2.SHDN = 0x0UL;   // Sets power-down mode.
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2284      	movs	r2, #132	; 0x84
 80032ca:	2100      	movs	r1, #0
 80032cc:	5099      	str	r1, [r3, r2]
	ppl->register2.TRI = 0x0UL;    // Sets charge-pump three-state mode
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2288      	movs	r2, #136	; 0x88
 80032d2:	2100      	movs	r1, #0
 80032d4:	5099      	str	r1, [r3, r2]
	ppl->register2.RST = 0x0UL;    // Sets counter reset mode
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	228c      	movs	r2, #140	; 0x8c
 80032da:	2100      	movs	r1, #0
 80032dc:	5099      	str	r1, [r3, r2]
	ppl->register2.ADDR2 = 0x2UL;  // Register address bits
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2290      	movs	r2, #144	; 0x90
 80032e2:	2102      	movs	r1, #2
 80032e4:	5099      	str	r1, [r3, r2]

	return ppl->register2.LDS << 31 | ppl->register2.SDN << 29
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	07da      	lsls	r2, r3, #31
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	075b      	lsls	r3, r3, #29
 80032f2:	431a      	orrs	r2, r3
			| ppl->register2.MUX << 26 | ppl->register2.DBR << 25
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f8:	069b      	lsls	r3, r3, #26
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003300:	065b      	lsls	r3, r3, #25
 8003302:	431a      	orrs	r2, r3
			| ppl->register2.RDIV2 << 24 | ppl->register2.RCNT << 14
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003310:	039b      	lsls	r3, r3, #14
 8003312:	431a      	orrs	r2, r3
			| ppl->register2.REG4DB << 13 | ppl->register2.CP << 9
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	035b      	lsls	r3, r3, #13
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003320:	025b      	lsls	r3, r3, #9
 8003322:	431a      	orrs	r2, r3
			| ppl->register2.LDF << 8 | ppl->register2.LDP << 7
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003330:	01db      	lsls	r3, r3, #7
 8003332:	431a      	orrs	r2, r3
			| ppl->register2.PDP << 6 | ppl->register2.SHDN << 5
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	585b      	ldr	r3, [r3, r1]
 800333a:	019b      	lsls	r3, r3, #6
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2184      	movs	r1, #132	; 0x84
 8003342:	585b      	ldr	r3, [r3, r1]
 8003344:	015b      	lsls	r3, r3, #5
 8003346:	431a      	orrs	r2, r3
			| ppl->register2.TRI << 4 | ppl->register2.RST << 3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2188      	movs	r1, #136	; 0x88
 800334c:	585b      	ldr	r3, [r3, r1]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	218c      	movs	r1, #140	; 0x8c
 8003356:	585b      	ldr	r3, [r3, r1]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	431a      	orrs	r2, r3
			| ppl->register2.ADDR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2190      	movs	r1, #144	; 0x90
 8003360:	585b      	ldr	r3, [r3, r1]
 8003362:	4313      	orrs	r3, r2
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <getRegister3InitValue>:

unsigned long getRegister3InitValue(MAX2871_t *ppl) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

	ppl->register3.VCO_MS = 0x0UL;   // VCO manual selection: unused
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2294      	movs	r2, #148	; 0x94
 8003378:	2100      	movs	r1, #0
 800337a:	5099      	str	r1, [r3, r2]
	ppl->register3.VAS_SHDN = 0x0UL; // VAS enabled
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2298      	movs	r2, #152	; 0x98
 8003380:	2100      	movs	r1, #0
 8003382:	5099      	str	r1, [r3, r2]
	ppl->register3.RETUNE = 0x1UL;   // VAS temperature compensation enabled
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	229c      	movs	r2, #156	; 0x9c
 8003388:	2101      	movs	r1, #1
 800338a:	5099      	str	r1, [r3, r2]
	ppl->register3.CSM = 0x0UL;      // Cycle slip mode disabled
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	22a0      	movs	r2, #160	; 0xa0
 8003390:	2100      	movs	r1, #0
 8003392:	5099      	str	r1, [r3, r2]
	ppl->register3.MUTEDEL = 0x0UL;  // Mute delay mode disabled
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	22a4      	movs	r2, #164	; 0xa4
 8003398:	2100      	movs	r1, #0
 800339a:	5099      	str	r1, [r3, r2]
	ppl->register3.CDM = 0x1UL;      // Fast-lock mode enabled
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	22a8      	movs	r2, #168	; 0xa8
 80033a0:	2101      	movs	r1, #1
 80033a2:	5099      	str	r1, [r3, r2]
	ppl->register3.CDIV = 0x0UL;     // Clock divider value unused
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	22ac      	movs	r2, #172	; 0xac
 80033a8:	2100      	movs	r1, #0
 80033aa:	5099      	str	r1, [r3, r2]
	ppl->register3.ADDR3 = 0x3UL;    // Register address bits
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	22b0      	movs	r2, #176	; 0xb0
 80033b0:	2103      	movs	r1, #3
 80033b2:	5099      	str	r1, [r3, r2]

	return ppl->register3.VCO_MS << 26 | ppl->register3.VAS_SHDN << 25
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2294      	movs	r2, #148	; 0x94
 80033b8:	589b      	ldr	r3, [r3, r2]
 80033ba:	069a      	lsls	r2, r3, #26
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2198      	movs	r1, #152	; 0x98
 80033c0:	585b      	ldr	r3, [r3, r1]
 80033c2:	065b      	lsls	r3, r3, #25
 80033c4:	431a      	orrs	r2, r3
			| ppl->register3.RETUNE << 24 | ppl->register3.CSM << 18
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	219c      	movs	r1, #156	; 0x9c
 80033ca:	585b      	ldr	r3, [r3, r1]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	21a0      	movs	r1, #160	; 0xa0
 80033d4:	585b      	ldr	r3, [r3, r1]
 80033d6:	049b      	lsls	r3, r3, #18
 80033d8:	431a      	orrs	r2, r3
			| ppl->register3.MUTEDEL << 17 | ppl->register3.CDM << 15
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	21a4      	movs	r1, #164	; 0xa4
 80033de:	585b      	ldr	r3, [r3, r1]
 80033e0:	045b      	lsls	r3, r3, #17
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	21a8      	movs	r1, #168	; 0xa8
 80033e8:	585b      	ldr	r3, [r3, r1]
 80033ea:	03db      	lsls	r3, r3, #15
 80033ec:	431a      	orrs	r2, r3
			| ppl->register3.CDIV << 3 | ppl->register3.ADDR3;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	21ac      	movs	r1, #172	; 0xac
 80033f2:	585b      	ldr	r3, [r3, r1]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	21b0      	movs	r1, #176	; 0xb0
 80033fc:	585b      	ldr	r3, [r3, r1]
 80033fe:	4313      	orrs	r3, r2
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}

08003408 <getRegister4InitValue>:

unsigned long getRegister4InitValue(MAX2871_t *ppl) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

	ppl->register4.RES = 0x3UL;    // Reserved
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	22b4      	movs	r2, #180	; 0xb4
 8003414:	2103      	movs	r1, #3
 8003416:	5099      	str	r1, [r3, r2]
	ppl->register4.SDLDO = 0x0UL;  // LDO enabled
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	22b8      	movs	r2, #184	; 0xb8
 800341c:	2100      	movs	r1, #0
 800341e:	5099      	str	r1, [r3, r2]
	ppl->register4.SDDIV = 0x0UL;  // VCO Divider enabled
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	22bc      	movs	r2, #188	; 0xbc
 8003424:	2100      	movs	r1, #0
 8003426:	5099      	str	r1, [r3, r2]
	ppl->register4.SDREF = 0x0UL;  // Reference input enabled
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	22c0      	movs	r2, #192	; 0xc0
 800342c:	2100      	movs	r1, #0
 800342e:	5099      	str	r1, [r3, r2]
	ppl->register4.FB = 0x1UL;     // VCO to N counter mode is NOT divided
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	22c4      	movs	r2, #196	; 0xc4
 8003434:	2101      	movs	r1, #1
 8003436:	5099      	str	r1, [r3, r2]
	ppl->register4.BS = 0x30FFUL; // Should be chosen so that fPFD/BS  50kH or less
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	22c8      	movs	r2, #200	; 0xc8
 800343c:	4936      	ldr	r1, [pc, #216]	; (8003518 <getRegister4InitValue+0x110>)
 800343e:	5099      	str	r1, [r3, r2]
	ppl->register4.SDVCO = 0x0UL;  // VCO enabled
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	22cc      	movs	r2, #204	; 0xcc
 8003444:	2100      	movs	r1, #0
 8003446:	5099      	str	r1, [r3, r2]
	ppl->register4.MTLD = 0x0UL;   // RFOUT Mute until Lock detect mode disabled
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	22d0      	movs	r2, #208	; 0xd0
 800344c:	2100      	movs	r1, #0
 800344e:	5099      	str	r1, [r3, r2]
	ppl->register4.BDIV = 0x0UL; // RFOUTB is divided (so it's the same as RFOUTA)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	22d4      	movs	r2, #212	; 0xd4
 8003454:	2100      	movs	r1, #0
 8003456:	5099      	str	r1, [r3, r2]
	ppl->register4.RFB_EN = 0x0UL; // RFOUTB disabled
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	22d8      	movs	r2, #216	; 0xd8
 800345c:	2100      	movs	r1, #0
 800345e:	5099      	str	r1, [r3, r2]
	ppl->register4.BPWR = 0x3UL;   // RFOUTB  5 dBm
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	22dc      	movs	r2, #220	; 0xdc
 8003464:	2103      	movs	r1, #3
 8003466:	5099      	str	r1, [r3, r2]
	ppl->register4.RFA_EN = 0x1UL; // RFOUTA enabled
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	22e0      	movs	r2, #224	; 0xe0
 800346c:	2101      	movs	r1, #1
 800346e:	5099      	str	r1, [r3, r2]
	ppl->register4.APWR = 0x2UL; // Sets RFOUTA single-ended output power   (00 = -4dBm)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	22e4      	movs	r2, #228	; 0xe4
 8003474:	2102      	movs	r1, #2
 8003476:	5099      	str	r1, [r3, r2]
								 //(01 = -1dBm)
								 //(10 = +2dBm)
								 //(11 = +5dBm)
	ppl->register4.ADDR4 = 0x4UL;  // Register address bits
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	22e8      	movs	r2, #232	; 0xe8
 800347c:	2104      	movs	r1, #4
 800347e:	5099      	str	r1, [r3, r2]

	return ppl->register4.RES << 29 | ppl->register4.SDLDO << 28
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	22b4      	movs	r2, #180	; 0xb4
 8003484:	589b      	ldr	r3, [r3, r2]
 8003486:	075a      	lsls	r2, r3, #29
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	21b8      	movs	r1, #184	; 0xb8
 800348c:	585b      	ldr	r3, [r3, r1]
 800348e:	071b      	lsls	r3, r3, #28
 8003490:	431a      	orrs	r2, r3
			| ppl->register4.SDDIV << 27 | ppl->register4.SDREF << 26
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	21bc      	movs	r1, #188	; 0xbc
 8003496:	585b      	ldr	r3, [r3, r1]
 8003498:	06db      	lsls	r3, r3, #27
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	21c0      	movs	r1, #192	; 0xc0
 80034a0:	585b      	ldr	r3, [r3, r1]
 80034a2:	069b      	lsls	r3, r3, #26
 80034a4:	431a      	orrs	r2, r3
			| ppl->register4.FB << 23 | ppl->DIVA << 20
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	21c4      	movs	r1, #196	; 0xc4
 80034aa:	585b      	ldr	r3, [r3, r1]
 80034ac:	05db      	lsls	r3, r3, #23
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	051b      	lsls	r3, r3, #20
 80034b6:	431a      	orrs	r2, r3
			| ppl->register4.BS << 12 | ppl->register4.SDVCO << 11
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	21c8      	movs	r1, #200	; 0xc8
 80034bc:	585b      	ldr	r3, [r3, r1]
 80034be:	031b      	lsls	r3, r3, #12
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	21cc      	movs	r1, #204	; 0xcc
 80034c6:	585b      	ldr	r3, [r3, r1]
 80034c8:	02db      	lsls	r3, r3, #11
 80034ca:	431a      	orrs	r2, r3
			| ppl->register4.MTLD << 10 | ppl->register4.BDIV << 9
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	21d0      	movs	r1, #208	; 0xd0
 80034d0:	585b      	ldr	r3, [r3, r1]
 80034d2:	029b      	lsls	r3, r3, #10
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	21d4      	movs	r1, #212	; 0xd4
 80034da:	585b      	ldr	r3, [r3, r1]
 80034dc:	025b      	lsls	r3, r3, #9
 80034de:	431a      	orrs	r2, r3
			| ppl->register4.RFB_EN << 8 | ppl->register4.BPWR << 6
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	21d8      	movs	r1, #216	; 0xd8
 80034e4:	585b      	ldr	r3, [r3, r1]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	21dc      	movs	r1, #220	; 0xdc
 80034ee:	585b      	ldr	r3, [r3, r1]
 80034f0:	019b      	lsls	r3, r3, #6
 80034f2:	431a      	orrs	r2, r3
			| ppl->register4.RFA_EN << 5 | ppl->register4.APWR << 3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	21e0      	movs	r1, #224	; 0xe0
 80034f8:	585b      	ldr	r3, [r3, r1]
 80034fa:	015b      	lsls	r3, r3, #5
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	21e4      	movs	r1, #228	; 0xe4
 8003502:	585b      	ldr	r3, [r3, r1]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	431a      	orrs	r2, r3
			| ppl->register4.ADDR4;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	21e8      	movs	r1, #232	; 0xe8
 800350c:	585b      	ldr	r3, [r3, r1]
 800350e:	4313      	orrs	r3, r2
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}
 8003518:	000030ff 	.word	0x000030ff

0800351c <getRegister5InitValue>:

unsigned long getRegister5InitValue(MAX2871_t *ppl) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

	ppl->register5.VAS_DLY = 0x3UL;  // 0x0 if VAS_TEMP  0, 0x3 if VAS_TEMP  1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	22ec      	movs	r2, #236	; 0xec
 8003528:	2103      	movs	r1, #3
 800352a:	5099      	str	r1, [r3, r2]
	ppl->register5.SDPLL = 0x0UL;    // PLL enabled
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	22f0      	movs	r2, #240	; 0xf0
 8003530:	2100      	movs	r1, #0
 8003532:	5099      	str	r1, [r3, r2]
	ppl->register5.F01 = 0x1UL;      // If F  0 then int
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	22f4      	movs	r2, #244	; 0xf4
 8003538:	2101      	movs	r1, #1
 800353a:	5099      	str	r1, [r3, r2]
	ppl->register5.LD = 0x1UL;       // Lock-Detect pin function  HIGH
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	22f8      	movs	r2, #248	; 0xf8
 8003540:	2101      	movs	r1, #1
 8003542:	5099      	str	r1, [r3, r2]
	ppl->register5.MUX_MSB = 0x0UL;  // MSB of MUX
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	22fc      	movs	r2, #252	; 0xfc
 8003548:	2100      	movs	r1, #0
 800354a:	5099      	str	r1, [r3, r2]
	ppl->register5.ADCS = 0x0UL;     // ADC normal operation (ADC isn't used)
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2100      	movs	r1, #0
 8003554:	50d1      	str	r1, [r2, r3]
	ppl->register5.ADCM = 0x0UL;     // ADC disabled
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	2382      	movs	r3, #130	; 0x82
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2100      	movs	r1, #0
 800355e:	50d1      	str	r1, [r2, r3]
	ppl->register5.ADDR5 = 0x5UL;    // Register address bits
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	2384      	movs	r3, #132	; 0x84
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2105      	movs	r1, #5
 8003568:	50d1      	str	r1, [r2, r3]

	return ppl->register5.VAS_DLY << 29 | ppl->register5.SDPLL << 25
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	22ec      	movs	r2, #236	; 0xec
 800356e:	589b      	ldr	r3, [r3, r2]
 8003570:	075a      	lsls	r2, r3, #29
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	21f0      	movs	r1, #240	; 0xf0
 8003576:	585b      	ldr	r3, [r3, r1]
 8003578:	065b      	lsls	r3, r3, #25
 800357a:	431a      	orrs	r2, r3
			| ppl->register5.F01 << 24 | ppl->register5.LD << 22
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	21f4      	movs	r1, #244	; 0xf4
 8003580:	585b      	ldr	r3, [r3, r1]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	21f8      	movs	r1, #248	; 0xf8
 800358a:	585b      	ldr	r3, [r3, r1]
 800358c:	059b      	lsls	r3, r3, #22
 800358e:	431a      	orrs	r2, r3
			| ppl->register5.MUX_MSB << 18 | ppl->register5.ADCS << 6
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	21fc      	movs	r1, #252	; 0xfc
 8003594:	585b      	ldr	r3, [r3, r1]
 8003596:	049b      	lsls	r3, r3, #18
 8003598:	431a      	orrs	r2, r3
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	58cb      	ldr	r3, [r1, r3]
 80035a2:	019b      	lsls	r3, r3, #6
 80035a4:	431a      	orrs	r2, r3
			| ppl->register5.ADCM << 3 | ppl->register5.ADDR5;
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	2382      	movs	r3, #130	; 0x82
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	58cb      	ldr	r3, [r1, r3]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	431a      	orrs	r2, r3
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	2384      	movs	r3, #132	; 0x84
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	58cb      	ldr	r3, [r1, r3]
 80035ba:	4313      	orrs	r3, r2
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <max2871Init>:

void max2871Init(MAX2871_t *ppl) {
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	// Composition of MAX2971 Registers

	ppl->freqOutCurrent = -1;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4252      	negs	r2, r2
 80035d2:	609a      	str	r2, [r3, #8]
	ppl->freqOutRead;
	ppl->freqOutNew;
	ppl->FreqOutCh = 0x0UL;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
	ppl->DIVA = 0x0UL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]
	ppl->freqBase = 0x0UL;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	61da      	str	r2, [r3, #28]
	ppl->FreqBaseCh = 0x0UL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	621a      	str	r2, [r3, #32]
	ppl->ON_OFF;
	ppl->PdBmCh = 0x0UL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	629a      	str	r2, [r3, #40]	; 0x28
	ppl->lastReadTick = HAL_GetTick();
 80035f2:	f001 fc89 	bl	8004f08 <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
	ppl->freqOutUpdate = false;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2230      	movs	r2, #48	; 0x30
 8003600:	2100      	movs	r1, #0
 8003602:	5499      	strb	r1, [r3, r2]
	ppl->freqBaseUpdate = false;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2231      	movs	r2, #49	; 0x31
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]
	ppl->PdBmUpdate = false;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2232      	movs	r2, #50	; 0x32
 8003610:	2100      	movs	r1, #0
 8003612:	5499      	strb	r1, [r3, r2]

	ppl->FreqOut = getFreqOutFromEeprom();
 8003614:	f7ff f85c 	bl	80026d0 <getFreqOutFromEeprom>
 8003618:	0003      	movs	r3, r0
 800361a:	001c      	movs	r4, r3
 800361c:	17db      	asrs	r3, r3, #31
 800361e:	001d      	movs	r5, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	601c      	str	r4, [r3, #0]
 8003624:	605d      	str	r5, [r3, #4]
	if ((ppl->FreqOut < FREQ_OUT_MIN) || (ppl->FreqOut > FREQ_OUT_MAX)) {
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d103      	bne.n	8003638 <max2871Init+0x74>
 8003630:	d10b      	bne.n	800364a <max2871Init+0x86>
 8003632:	4927      	ldr	r1, [pc, #156]	; (80036d0 <max2871Init+0x10c>)
 8003634:	428a      	cmp	r2, r1
 8003636:	d908      	bls.n	800364a <max2871Init+0x86>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <max2871Init+0x86>
 8003642:	d107      	bne.n	8003654 <max2871Init+0x90>
 8003644:	4923      	ldr	r1, [pc, #140]	; (80036d4 <max2871Init+0x110>)
 8003646:	428a      	cmp	r2, r1
 8003648:	d904      	bls.n	8003654 <max2871Init+0x90>
		ppl->FreqOut = 145000000;
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4a22      	ldr	r2, [pc, #136]	; (80036d8 <max2871Init+0x114>)
 800364e:	2300      	movs	r3, #0
 8003650:	600a      	str	r2, [r1, #0]
 8003652:	604b      	str	r3, [r1, #4]
	}
	ppl->freqBase = getFreqBaseFromEeprom();
 8003654:	f7ff f865 	bl	8002722 <getFreqBaseFromEeprom>
 8003658:	0003      	movs	r3, r0
 800365a:	001a      	movs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	61da      	str	r2, [r3, #28]
	if ((ppl->freqBase < FREQ_BASE_MIN) || (ppl->freqBase > FREQ_BASE_MAX)) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <max2871Init+0x10c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d904      	bls.n	8003674 <max2871Init+0xb0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <max2871Init+0x118>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d902      	bls.n	800367a <max2871Init+0xb6>
		ppl->freqBase = 145000000;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <max2871Init+0x114>)
 8003678:	61da      	str	r2, [r3, #28]
	}
	ppl->register4.APWR = getPdBmFromEeprom();
 800367a:	f7ff f87b 	bl	8002774 <getPdBmFromEeprom>
 800367e:	0003      	movs	r3, r0
 8003680:	0019      	movs	r1, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	22e4      	movs	r2, #228	; 0xe4
 8003686:	5099      	str	r1, [r3, r2]
	if ((ppl->register4.APWR < 0) || (ppl->register4.APWR > 3)) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	22e4      	movs	r2, #228	; 0xe4
 800368c:	589b      	ldr	r3, [r3, r2]
 800368e:	2b03      	cmp	r3, #3
 8003690:	d903      	bls.n	800369a <max2871Init+0xd6>
		ppl->register4.APWR = 0x2UL;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	22e4      	movs	r2, #228	; 0xe4
 8003696:	2102      	movs	r1, #2
 8003698:	5099      	str	r1, [r3, r2]
	}
	ppl->freqOutNew = getFreqOut(ppl->freqBase);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	0018      	movs	r0, r3
 80036a0:	f7ff f892 	bl	80027c8 <getFreqOut>
 80036a4:	0003      	movs	r3, r0
 80036a6:	001a      	movs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]
	ppl->freqOutCurrent = ppl->freqOutNew;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	609a      	str	r2, [r3, #8]

	ppl->freqOutNew = getFreqOut(ppl->freqBase);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7ff f885 	bl	80027c8 <getFreqOut>
 80036be:	0003      	movs	r3, r0
 80036c0:	001a      	movs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]

}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b002      	add	sp, #8
 80036cc:	bdb0      	pop	{r4, r5, r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	087e609f 	.word	0x087e609f
 80036d4:	099bb780 	.word	0x099bb780
 80036d8:	08a48640 	.word	0x08a48640
 80036dc:	08d89854 	.word	0x08d89854

080036e0 <max2871Write>:

void max2871Write(SPI_HandleTypeDef *hspi2, unsigned long data)
// Writes 32 Bit value to register of MAX2871
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4] = { 0 };
 80036ea:	240c      	movs	r4, #12
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

	buffer[0] = (data & 0xFF000000) >> 24;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	0e1b      	lsrs	r3, r3, #24
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	701a      	strb	r2, [r3, #0]
	buffer[1] = (data & 0x00FF0000) >> 16;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	b2da      	uxtb	r2, r3
 8003702:	193b      	adds	r3, r7, r4
 8003704:	705a      	strb	r2, [r3, #1]
	buffer[2] = (data & 0x0000FF00) >> 8;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	b2da      	uxtb	r2, r3
 800370c:	193b      	adds	r3, r7, r4
 800370e:	709a      	strb	r2, [r3, #2]
	buffer[3] = (data & 0x000000FF);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	193b      	adds	r3, r7, r4
 8003716:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_RESET);
 8003718:	23a0      	movs	r3, #160	; 0xa0
 800371a:	05db      	lsls	r3, r3, #23
 800371c:	2200      	movs	r2, #0
 800371e:	2104      	movs	r1, #4
 8003720:	0018      	movs	r0, r3
 8003722:	f001 fe54 	bl	80053ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_RESET);
 8003726:	23a0      	movs	r3, #160	; 0xa0
 8003728:	05db      	lsls	r3, r3, #23
 800372a:	2200      	movs	r2, #0
 800372c:	2102      	movs	r1, #2
 800372e:	0018      	movs	r0, r3
 8003730:	f001 fe4d 	bl	80053ce <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003734:	2001      	movs	r0, #1
 8003736:	f001 fbf1 	bl	8004f1c <HAL_Delay>
	HAL_SPI_Transmit(hspi2, buffer, 4, 100);
 800373a:	1939      	adds	r1, r7, r4
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	2364      	movs	r3, #100	; 0x64
 8003740:	2204      	movs	r2, #4
 8003742:	f002 fbf3 	bl	8005f2c <HAL_SPI_Transmit>
	HAL_Delay(1);
 8003746:	2001      	movs	r0, #1
 8003748:	f001 fbe8 	bl	8004f1c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, MAX_CE_Pin, GPIO_PIN_SET);
 800374c:	23a0      	movs	r3, #160	; 0xa0
 800374e:	05db      	lsls	r3, r3, #23
 8003750:	2201      	movs	r2, #1
 8003752:	2104      	movs	r1, #4
 8003754:	0018      	movs	r0, r3
 8003756:	f001 fe3a 	bl	80053ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MAX_LE_Pin, GPIO_PIN_SET);
 800375a:	23a0      	movs	r3, #160	; 0xa0
 800375c:	05db      	lsls	r3, r3, #23
 800375e:	2201      	movs	r2, #1
 8003760:	2102      	movs	r1, #2
 8003762:	0018      	movs	r0, r3
 8003764:	f001 fe33 	bl	80053ce <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8003768:	2032      	movs	r0, #50	; 0x32
 800376a:	f001 fbd7 	bl	8004f1c <HAL_Delay>
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b005      	add	sp, #20
 8003774:	bd90      	pop	{r4, r7, pc}
	...

08003778 <max2871CalculateRegister0Values>:

void max2871CalculateRegister0Values(MAX2871_t *ppl) // Calculates values of NDIV, FRAC & DIVA
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b0bf      	sub	sp, #252	; 0xfc
 800377c:	af00      	add	r7, sp, #0
 800377e:	22dc      	movs	r2, #220	; 0xdc
 8003780:	2308      	movs	r3, #8
 8003782:	18d3      	adds	r3, r2, r3
 8003784:	19db      	adds	r3, r3, r7
 8003786:	6018      	str	r0, [r3, #0]
	double rest;
	unsigned long FreqRef = 50000000.0;  // FreqRef * 5
 8003788:	4b8d      	ldr	r3, [pc, #564]	; (80039c0 <max2871CalculateRegister0Values+0x248>)
 800378a:	21ec      	movs	r1, #236	; 0xec
 800378c:	2008      	movs	r0, #8
 800378e:	1809      	adds	r1, r1, r0
 8003790:	19c9      	adds	r1, r1, r7
 8003792:	600b      	str	r3, [r1, #0]
	unsigned long Resol = 4000.0;
 8003794:	23fa      	movs	r3, #250	; 0xfa
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	21e8      	movs	r1, #232	; 0xe8
 800379a:	2008      	movs	r0, #8
 800379c:	1809      	adds	r1, r1, r0
 800379e:	19c9      	adds	r1, r1, r7
 80037a0:	600b      	str	r3, [r1, #0]

	if (ppl->FreqOut >= 3000000000) {
 80037a2:	2308      	movs	r3, #8
 80037a4:	18d3      	adds	r3, r2, r3
 80037a6:	19db      	adds	r3, r3, r7
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <max2871CalculateRegister0Values+0x42>
 80037b2:	d173      	bne.n	800389c <max2871CalculateRegister0Values+0x124>
 80037b4:	4983      	ldr	r1, [pc, #524]	; (80039c4 <max2871CalculateRegister0Values+0x24c>)
 80037b6:	428a      	cmp	r2, r1
 80037b8:	d970      	bls.n	800389c <max2871CalculateRegister0Values+0x124>
		ppl->DIVA = 0;
 80037ba:	26dc      	movs	r6, #220	; 0xdc
 80037bc:	2308      	movs	r3, #8
 80037be:	18f3      	adds	r3, r6, r3
 80037c0:	19db      	adds	r3, r3, r7
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	619a      	str	r2, [r3, #24]
		ppl->register0.NDIV = ppl->FreqOut / FreqRef;
 80037c8:	2308      	movs	r3, #8
 80037ca:	18f3      	adds	r3, r6, r3
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	24ec      	movs	r4, #236	; 0xec
 80037d6:	2308      	movs	r3, #8
 80037d8:	18e3      	adds	r3, r4, r3
 80037da:	19db      	adds	r3, r3, r7
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	18ba      	adds	r2, r7, r2
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	2284      	movs	r2, #132	; 0x84
 80037e8:	18ba      	adds	r2, r7, r2
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f7fc fd58 	bl	80002a8 <__aeabi_uldivmod>
 80037f8:	0002      	movs	r2, r0
 80037fa:	000b      	movs	r3, r1
 80037fc:	2308      	movs	r3, #8
 80037fe:	18f3      	adds	r3, r6, r3
 8003800:	19db      	adds	r3, r3, r7
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
		rest = ppl->FreqOut % FreqRef;
 8003806:	2308      	movs	r3, #8
 8003808:	18f3      	adds	r3, r6, r3
 800380a:	19db      	adds	r3, r3, r7
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	2308      	movs	r3, #8
 8003814:	18e3      	adds	r3, r4, r3
 8003816:	19db      	adds	r3, r3, r7
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	67bb      	str	r3, [r7, #120]	; 0x78
 800381c:	2300      	movs	r3, #0
 800381e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003822:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003824:	f7fc fd40 	bl	80002a8 <__aeabi_uldivmod>
 8003828:	0010      	movs	r0, r2
 800382a:	0019      	movs	r1, r3
 800382c:	f7fc fd7a 	bl	8000324 <__aeabi_ul2d>
 8003830:	0002      	movs	r2, r0
 8003832:	000b      	movs	r3, r1
 8003834:	25e0      	movs	r5, #224	; 0xe0
 8003836:	2108      	movs	r1, #8
 8003838:	1869      	adds	r1, r5, r1
 800383a:	19c9      	adds	r1, r1, r7
 800383c:	600a      	str	r2, [r1, #0]
 800383e:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003840:	2308      	movs	r3, #8
 8003842:	18e3      	adds	r3, r4, r3
 8003844:	19db      	adds	r3, r3, r7
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	f7fe fbc0 	bl	8001fcc <__aeabi_ui2d>
 800384c:	0002      	movs	r2, r0
 800384e:	000b      	movs	r3, r1
 8003850:	2108      	movs	r1, #8
 8003852:	1869      	adds	r1, r5, r1
 8003854:	19c9      	adds	r1, r1, r7
 8003856:	6808      	ldr	r0, [r1, #0]
 8003858:	6849      	ldr	r1, [r1, #4]
 800385a:	f7fd f981 	bl	8000b60 <__aeabi_ddiv>
 800385e:	0002      	movs	r2, r0
 8003860:	000b      	movs	r3, r1
 8003862:	0014      	movs	r4, r2
 8003864:	001d      	movs	r5, r3
 8003866:	23e8      	movs	r3, #232	; 0xe8
 8003868:	2208      	movs	r2, #8
 800386a:	189b      	adds	r3, r3, r2
 800386c:	19db      	adds	r3, r3, r7
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	f7fe fbac 	bl	8001fcc <__aeabi_ui2d>
 8003874:	0002      	movs	r2, r0
 8003876:	000b      	movs	r3, r1
 8003878:	0020      	movs	r0, r4
 800387a:	0029      	movs	r1, r5
 800387c:	f7fd fd72 	bl	8001364 <__aeabi_dmul>
 8003880:	0002      	movs	r2, r0
 8003882:	000b      	movs	r3, r1
 8003884:	0010      	movs	r0, r2
 8003886:	0019      	movs	r1, r3
 8003888:	f7fc fd2e 	bl	80002e8 <__aeabi_d2uiz>
 800388c:	0002      	movs	r2, r0
 800388e:	2308      	movs	r3, #8
 8003890:	18f3      	adds	r3, r6, r3
 8003892:	19db      	adds	r3, r3, r7
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c
		ppl->DIVA = 7;
		ppl->register0.NDIV = ppl->FreqOut * 128 / FreqRef;
		rest = ppl->FreqOut * 128 % FreqRef;
		ppl->register0.FRAC = rest / FreqRef * Resol;
	}
}
 8003898:	f000 fcfc 	bl	8004294 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 3000000000) && (ppl->FreqOut >= 1500000000)) {
 800389c:	23dc      	movs	r3, #220	; 0xdc
 800389e:	2208      	movs	r2, #8
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	19db      	adds	r3, r3, r7
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d000      	beq.n	80038b0 <max2871CalculateRegister0Values+0x138>
 80038ae:	e08d      	b.n	80039cc <max2871CalculateRegister0Values+0x254>
 80038b0:	d103      	bne.n	80038ba <max2871CalculateRegister0Values+0x142>
 80038b2:	4944      	ldr	r1, [pc, #272]	; (80039c4 <max2871CalculateRegister0Values+0x24c>)
 80038b4:	428a      	cmp	r2, r1
 80038b6:	d900      	bls.n	80038ba <max2871CalculateRegister0Values+0x142>
 80038b8:	e088      	b.n	80039cc <max2871CalculateRegister0Values+0x254>
 80038ba:	23dc      	movs	r3, #220	; 0xdc
 80038bc:	2208      	movs	r2, #8
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	19db      	adds	r3, r3, r7
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <max2871CalculateRegister0Values+0x160>
 80038cc:	d000      	beq.n	80038d0 <max2871CalculateRegister0Values+0x158>
 80038ce:	e07d      	b.n	80039cc <max2871CalculateRegister0Values+0x254>
 80038d0:	493d      	ldr	r1, [pc, #244]	; (80039c8 <max2871CalculateRegister0Values+0x250>)
 80038d2:	428a      	cmp	r2, r1
 80038d4:	d800      	bhi.n	80038d8 <max2871CalculateRegister0Values+0x160>
 80038d6:	e079      	b.n	80039cc <max2871CalculateRegister0Values+0x254>
		ppl->DIVA = 1;
 80038d8:	26dc      	movs	r6, #220	; 0xdc
 80038da:	2308      	movs	r3, #8
 80038dc:	18f3      	adds	r3, r6, r3
 80038de:	19db      	adds	r3, r3, r7
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2201      	movs	r2, #1
 80038e4:	619a      	str	r2, [r3, #24]
		ppl->register0.NDIV = ppl->FreqOut * 2 / FreqRef;
 80038e6:	2308      	movs	r3, #8
 80038e8:	18f3      	adds	r3, r6, r3
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	1892      	adds	r2, r2, r2
 80038f4:	415b      	adcs	r3, r3
 80038f6:	0010      	movs	r0, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	24ec      	movs	r4, #236	; 0xec
 80038fc:	2308      	movs	r3, #8
 80038fe:	18e3      	adds	r3, r4, r3
 8003900:	19db      	adds	r3, r3, r7
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	673b      	str	r3, [r7, #112]	; 0x70
 8003906:	2300      	movs	r3, #0
 8003908:	677b      	str	r3, [r7, #116]	; 0x74
 800390a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800390c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800390e:	f7fc fccb 	bl	80002a8 <__aeabi_uldivmod>
 8003912:	0002      	movs	r2, r0
 8003914:	000b      	movs	r3, r1
 8003916:	2308      	movs	r3, #8
 8003918:	18f3      	adds	r3, r6, r3
 800391a:	19db      	adds	r3, r3, r7
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
		rest = ppl->FreqOut * 2 % FreqRef;
 8003920:	2308      	movs	r3, #8
 8003922:	18f3      	adds	r3, r6, r3
 8003924:	19db      	adds	r3, r3, r7
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	1892      	adds	r2, r2, r2
 800392e:	415b      	adcs	r3, r3
 8003930:	0010      	movs	r0, r2
 8003932:	0019      	movs	r1, r3
 8003934:	2308      	movs	r3, #8
 8003936:	18e3      	adds	r3, r4, r3
 8003938:	19db      	adds	r3, r3, r7
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	66bb      	str	r3, [r7, #104]	; 0x68
 800393e:	2300      	movs	r3, #0
 8003940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003946:	f7fc fcaf 	bl	80002a8 <__aeabi_uldivmod>
 800394a:	0010      	movs	r0, r2
 800394c:	0019      	movs	r1, r3
 800394e:	f7fc fce9 	bl	8000324 <__aeabi_ul2d>
 8003952:	0002      	movs	r2, r0
 8003954:	000b      	movs	r3, r1
 8003956:	25e0      	movs	r5, #224	; 0xe0
 8003958:	2108      	movs	r1, #8
 800395a:	1869      	adds	r1, r5, r1
 800395c:	19c9      	adds	r1, r1, r7
 800395e:	600a      	str	r2, [r1, #0]
 8003960:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003962:	2308      	movs	r3, #8
 8003964:	18e3      	adds	r3, r4, r3
 8003966:	19db      	adds	r3, r3, r7
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	f7fe fb2f 	bl	8001fcc <__aeabi_ui2d>
 800396e:	0002      	movs	r2, r0
 8003970:	000b      	movs	r3, r1
 8003972:	2108      	movs	r1, #8
 8003974:	1869      	adds	r1, r5, r1
 8003976:	19c9      	adds	r1, r1, r7
 8003978:	6808      	ldr	r0, [r1, #0]
 800397a:	6849      	ldr	r1, [r1, #4]
 800397c:	f7fd f8f0 	bl	8000b60 <__aeabi_ddiv>
 8003980:	0002      	movs	r2, r0
 8003982:	000b      	movs	r3, r1
 8003984:	0014      	movs	r4, r2
 8003986:	001d      	movs	r5, r3
 8003988:	23e8      	movs	r3, #232	; 0xe8
 800398a:	2208      	movs	r2, #8
 800398c:	189b      	adds	r3, r3, r2
 800398e:	19db      	adds	r3, r3, r7
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	f7fe fb1b 	bl	8001fcc <__aeabi_ui2d>
 8003996:	0002      	movs	r2, r0
 8003998:	000b      	movs	r3, r1
 800399a:	0020      	movs	r0, r4
 800399c:	0029      	movs	r1, r5
 800399e:	f7fd fce1 	bl	8001364 <__aeabi_dmul>
 80039a2:	0002      	movs	r2, r0
 80039a4:	000b      	movs	r3, r1
 80039a6:	0010      	movs	r0, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	f7fc fc9d 	bl	80002e8 <__aeabi_d2uiz>
 80039ae:	0002      	movs	r2, r0
 80039b0:	2308      	movs	r3, #8
 80039b2:	18f3      	adds	r3, r6, r3
 80039b4:	19db      	adds	r3, r3, r7
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ba:	f000 fc6b 	bl	8004294 <max2871CalculateRegister0Values+0xb1c>
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	02faf080 	.word	0x02faf080
 80039c4:	b2d05dff 	.word	0xb2d05dff
 80039c8:	59682eff 	.word	0x59682eff
	} else if ((ppl->FreqOut < 1500000000) && (ppl->FreqOut >= 750000000)) {
 80039cc:	23dc      	movs	r3, #220	; 0xdc
 80039ce:	2208      	movs	r2, #8
 80039d0:	189b      	adds	r3, r3, r2
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d000      	beq.n	80039e0 <max2871CalculateRegister0Values+0x268>
 80039de:	e0aa      	b.n	8003b36 <max2871CalculateRegister0Values+0x3be>
 80039e0:	d103      	bne.n	80039ea <max2871CalculateRegister0Values+0x272>
 80039e2:	49b5      	ldr	r1, [pc, #724]	; (8003cb8 <max2871CalculateRegister0Values+0x540>)
 80039e4:	428a      	cmp	r2, r1
 80039e6:	d900      	bls.n	80039ea <max2871CalculateRegister0Values+0x272>
 80039e8:	e0a5      	b.n	8003b36 <max2871CalculateRegister0Values+0x3be>
 80039ea:	23dc      	movs	r3, #220	; 0xdc
 80039ec:	2208      	movs	r2, #8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	19db      	adds	r3, r3, r7
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <max2871CalculateRegister0Values+0x290>
 80039fc:	d000      	beq.n	8003a00 <max2871CalculateRegister0Values+0x288>
 80039fe:	e09a      	b.n	8003b36 <max2871CalculateRegister0Values+0x3be>
 8003a00:	49ae      	ldr	r1, [pc, #696]	; (8003cbc <max2871CalculateRegister0Values+0x544>)
 8003a02:	428a      	cmp	r2, r1
 8003a04:	d800      	bhi.n	8003a08 <max2871CalculateRegister0Values+0x290>
 8003a06:	e096      	b.n	8003b36 <max2871CalculateRegister0Values+0x3be>
		ppl->DIVA = 2;
 8003a08:	26dc      	movs	r6, #220	; 0xdc
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	18f3      	adds	r3, r6, r3
 8003a0e:	19db      	adds	r3, r3, r7
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2202      	movs	r2, #2
 8003a14:	619a      	str	r2, [r3, #24]
		ppl->register0.NDIV = ppl->FreqOut * 4 / FreqRef;
 8003a16:	2308      	movs	r3, #8
 8003a18:	18f3      	adds	r3, r6, r3
 8003a1a:	19db      	adds	r3, r3, r7
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	0f91      	lsrs	r1, r2, #30
 8003a24:	0098      	lsls	r0, r3, #2
 8003a26:	24d4      	movs	r4, #212	; 0xd4
 8003a28:	2508      	movs	r5, #8
 8003a2a:	1965      	adds	r5, r4, r5
 8003a2c:	19ed      	adds	r5, r5, r7
 8003a2e:	6028      	str	r0, [r5, #0]
 8003a30:	0020      	movs	r0, r4
 8003a32:	0005      	movs	r5, r0
 8003a34:	2408      	movs	r4, #8
 8003a36:	1900      	adds	r0, r0, r4
 8003a38:	19c4      	adds	r4, r0, r7
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	4308      	orrs	r0, r1
 8003a3e:	0029      	movs	r1, r5
 8003a40:	2408      	movs	r4, #8
 8003a42:	1909      	adds	r1, r1, r4
 8003a44:	19c9      	adds	r1, r1, r7
 8003a46:	6008      	str	r0, [r1, #0]
 8003a48:	0093      	lsls	r3, r2, #2
 8003a4a:	21d0      	movs	r1, #208	; 0xd0
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	188a      	adds	r2, r1, r2
 8003a50:	19d2      	adds	r2, r2, r7
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	23ec      	movs	r3, #236	; 0xec
 8003a56:	001c      	movs	r4, r3
 8003a58:	2208      	movs	r2, #8
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	19da      	adds	r2, r3, r7
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	663b      	str	r3, [r7, #96]	; 0x60
 8003a62:	2300      	movs	r3, #0
 8003a64:	667b      	str	r3, [r7, #100]	; 0x64
 8003a66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a6a:	2008      	movs	r0, #8
 8003a6c:	1809      	adds	r1, r1, r0
 8003a6e:	19c9      	adds	r1, r1, r7
 8003a70:	6808      	ldr	r0, [r1, #0]
 8003a72:	6849      	ldr	r1, [r1, #4]
 8003a74:	f7fc fc18 	bl	80002a8 <__aeabi_uldivmod>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	000b      	movs	r3, r1
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	18f3      	adds	r3, r6, r3
 8003a80:	19d9      	adds	r1, r3, r7
 8003a82:	680b      	ldr	r3, [r1, #0]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
		rest = ppl->FreqOut * 4 % FreqRef;
 8003a86:	2308      	movs	r3, #8
 8003a88:	18f3      	adds	r3, r6, r3
 8003a8a:	19da      	adds	r2, r3, r7
 8003a8c:	6813      	ldr	r3, [r2, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	0f91      	lsrs	r1, r2, #30
 8003a94:	0098      	lsls	r0, r3, #2
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4308      	orrs	r0, r1
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	0093      	lsls	r3, r2, #2
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	0023      	movs	r3, r4
 8003aa4:	001d      	movs	r5, r3
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	189b      	adds	r3, r3, r2
 8003aaa:	19da      	adds	r2, r3, r7
 8003aac:	6813      	ldr	r3, [r2, #0]
 8003aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	f7fc fbf4 	bl	80002a8 <__aeabi_uldivmod>
 8003ac0:	0010      	movs	r0, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	f7fc fc2e 	bl	8000324 <__aeabi_ul2d>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	000b      	movs	r3, r1
 8003acc:	24e0      	movs	r4, #224	; 0xe0
 8003ace:	2108      	movs	r1, #8
 8003ad0:	1861      	adds	r1, r4, r1
 8003ad2:	19c9      	adds	r1, r1, r7
 8003ad4:	600a      	str	r2, [r1, #0]
 8003ad6:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003ad8:	002b      	movs	r3, r5
 8003ada:	2208      	movs	r2, #8
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f7fe fa73 	bl	8001fcc <__aeabi_ui2d>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	000b      	movs	r3, r1
 8003aea:	2108      	movs	r1, #8
 8003aec:	1861      	adds	r1, r4, r1
 8003aee:	19c9      	adds	r1, r1, r7
 8003af0:	6808      	ldr	r0, [r1, #0]
 8003af2:	6849      	ldr	r1, [r1, #4]
 8003af4:	f7fd f834 	bl	8000b60 <__aeabi_ddiv>
 8003af8:	0002      	movs	r2, r0
 8003afa:	000b      	movs	r3, r1
 8003afc:	0014      	movs	r4, r2
 8003afe:	001d      	movs	r5, r3
 8003b00:	23e8      	movs	r3, #232	; 0xe8
 8003b02:	2208      	movs	r2, #8
 8003b04:	189b      	adds	r3, r3, r2
 8003b06:	19db      	adds	r3, r3, r7
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	f7fe fa5f 	bl	8001fcc <__aeabi_ui2d>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	000b      	movs	r3, r1
 8003b12:	0020      	movs	r0, r4
 8003b14:	0029      	movs	r1, r5
 8003b16:	f7fd fc25 	bl	8001364 <__aeabi_dmul>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	000b      	movs	r3, r1
 8003b1e:	0010      	movs	r0, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	f7fc fbe1 	bl	80002e8 <__aeabi_d2uiz>
 8003b26:	0002      	movs	r2, r0
 8003b28:	2308      	movs	r3, #8
 8003b2a:	18f3      	adds	r3, r6, r3
 8003b2c:	19db      	adds	r3, r3, r7
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b32:	f000 fbaf 	bl	8004294 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 750000000) && (ppl->FreqOut >= 375000000)) {
 8003b36:	23dc      	movs	r3, #220	; 0xdc
 8003b38:	2208      	movs	r2, #8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	19db      	adds	r3, r3, r7
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d000      	beq.n	8003b4a <max2871CalculateRegister0Values+0x3d2>
 8003b48:	e0bc      	b.n	8003cc4 <max2871CalculateRegister0Values+0x54c>
 8003b4a:	d103      	bne.n	8003b54 <max2871CalculateRegister0Values+0x3dc>
 8003b4c:	495b      	ldr	r1, [pc, #364]	; (8003cbc <max2871CalculateRegister0Values+0x544>)
 8003b4e:	428a      	cmp	r2, r1
 8003b50:	d900      	bls.n	8003b54 <max2871CalculateRegister0Values+0x3dc>
 8003b52:	e0b7      	b.n	8003cc4 <max2871CalculateRegister0Values+0x54c>
 8003b54:	23dc      	movs	r3, #220	; 0xdc
 8003b56:	2208      	movs	r2, #8
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <max2871CalculateRegister0Values+0x3fa>
 8003b66:	d000      	beq.n	8003b6a <max2871CalculateRegister0Values+0x3f2>
 8003b68:	e0ac      	b.n	8003cc4 <max2871CalculateRegister0Values+0x54c>
 8003b6a:	4955      	ldr	r1, [pc, #340]	; (8003cc0 <max2871CalculateRegister0Values+0x548>)
 8003b6c:	428a      	cmp	r2, r1
 8003b6e:	d800      	bhi.n	8003b72 <max2871CalculateRegister0Values+0x3fa>
 8003b70:	e0a8      	b.n	8003cc4 <max2871CalculateRegister0Values+0x54c>
		ppl->DIVA = 3;
 8003b72:	26dc      	movs	r6, #220	; 0xdc
 8003b74:	2308      	movs	r3, #8
 8003b76:	18f3      	adds	r3, r6, r3
 8003b78:	19db      	adds	r3, r3, r7
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	619a      	str	r2, [r3, #24]
		ppl->register0.NDIV = ppl->FreqOut * 8 / FreqRef;
 8003b80:	2308      	movs	r3, #8
 8003b82:	18f3      	adds	r3, r6, r3
 8003b84:	19db      	adds	r3, r3, r7
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0f51      	lsrs	r1, r2, #29
 8003b8e:	00d8      	lsls	r0, r3, #3
 8003b90:	24cc      	movs	r4, #204	; 0xcc
 8003b92:	2508      	movs	r5, #8
 8003b94:	1965      	adds	r5, r4, r5
 8003b96:	19ed      	adds	r5, r5, r7
 8003b98:	6028      	str	r0, [r5, #0]
 8003b9a:	2008      	movs	r0, #8
 8003b9c:	1820      	adds	r0, r4, r0
 8003b9e:	19c0      	adds	r0, r0, r7
 8003ba0:	6800      	ldr	r0, [r0, #0]
 8003ba2:	4308      	orrs	r0, r1
 8003ba4:	2108      	movs	r1, #8
 8003ba6:	1861      	adds	r1, r4, r1
 8003ba8:	19c9      	adds	r1, r1, r7
 8003baa:	6008      	str	r0, [r1, #0]
 8003bac:	00d3      	lsls	r3, r2, #3
 8003bae:	21c8      	movs	r1, #200	; 0xc8
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	188a      	adds	r2, r1, r2
 8003bb4:	19d2      	adds	r2, r2, r7
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	24ec      	movs	r4, #236	; 0xec
 8003bba:	2308      	movs	r3, #8
 8003bbc:	18e3      	adds	r3, r4, r3
 8003bbe:	19db      	adds	r3, r3, r7
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bcc:	2008      	movs	r0, #8
 8003bce:	1809      	adds	r1, r1, r0
 8003bd0:	19c9      	adds	r1, r1, r7
 8003bd2:	6808      	ldr	r0, [r1, #0]
 8003bd4:	6849      	ldr	r1, [r1, #4]
 8003bd6:	f7fc fb67 	bl	80002a8 <__aeabi_uldivmod>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	000b      	movs	r3, r1
 8003bde:	2308      	movs	r3, #8
 8003be0:	18f3      	adds	r3, r6, r3
 8003be2:	19db      	adds	r3, r3, r7
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
		rest = ppl->FreqOut * 8 % FreqRef;
 8003be8:	2308      	movs	r3, #8
 8003bea:	18f3      	adds	r3, r6, r3
 8003bec:	19db      	adds	r3, r3, r7
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0f51      	lsrs	r1, r2, #29
 8003bf6:	468c      	mov	ip, r1
 8003bf8:	00d8      	lsls	r0, r3, #3
 8003bfa:	25c4      	movs	r5, #196	; 0xc4
 8003bfc:	2108      	movs	r1, #8
 8003bfe:	1869      	adds	r1, r5, r1
 8003c00:	19c9      	adds	r1, r1, r7
 8003c02:	6008      	str	r0, [r1, #0]
 8003c04:	2108      	movs	r1, #8
 8003c06:	1869      	adds	r1, r5, r1
 8003c08:	19c8      	adds	r0, r1, r7
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	4661      	mov	r1, ip
 8003c0e:	4308      	orrs	r0, r1
 8003c10:	2108      	movs	r1, #8
 8003c12:	1869      	adds	r1, r5, r1
 8003c14:	19c9      	adds	r1, r1, r7
 8003c16:	6008      	str	r0, [r1, #0]
 8003c18:	00d3      	lsls	r3, r2, #3
 8003c1a:	21c0      	movs	r1, #192	; 0xc0
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	188a      	adds	r2, r1, r2
 8003c20:	19d2      	adds	r2, r2, r7
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	2308      	movs	r3, #8
 8003c26:	18e3      	adds	r3, r4, r3
 8003c28:	19db      	adds	r3, r3, r7
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c2e:	2300      	movs	r3, #0
 8003c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c36:	2008      	movs	r0, #8
 8003c38:	1809      	adds	r1, r1, r0
 8003c3a:	19c9      	adds	r1, r1, r7
 8003c3c:	6808      	ldr	r0, [r1, #0]
 8003c3e:	6849      	ldr	r1, [r1, #4]
 8003c40:	f7fc fb32 	bl	80002a8 <__aeabi_uldivmod>
 8003c44:	0010      	movs	r0, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	f7fc fb6c 	bl	8000324 <__aeabi_ul2d>
 8003c4c:	0002      	movs	r2, r0
 8003c4e:	000b      	movs	r3, r1
 8003c50:	25e0      	movs	r5, #224	; 0xe0
 8003c52:	2108      	movs	r1, #8
 8003c54:	1869      	adds	r1, r5, r1
 8003c56:	19c9      	adds	r1, r1, r7
 8003c58:	600a      	str	r2, [r1, #0]
 8003c5a:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	18e3      	adds	r3, r4, r3
 8003c60:	19db      	adds	r3, r3, r7
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	f7fe f9b2 	bl	8001fcc <__aeabi_ui2d>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	2108      	movs	r1, #8
 8003c6e:	1869      	adds	r1, r5, r1
 8003c70:	19c9      	adds	r1, r1, r7
 8003c72:	6808      	ldr	r0, [r1, #0]
 8003c74:	6849      	ldr	r1, [r1, #4]
 8003c76:	f7fc ff73 	bl	8000b60 <__aeabi_ddiv>
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	000b      	movs	r3, r1
 8003c7e:	0014      	movs	r4, r2
 8003c80:	001d      	movs	r5, r3
 8003c82:	23e8      	movs	r3, #232	; 0xe8
 8003c84:	2208      	movs	r2, #8
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	19db      	adds	r3, r3, r7
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	f7fe f99e 	bl	8001fcc <__aeabi_ui2d>
 8003c90:	0002      	movs	r2, r0
 8003c92:	000b      	movs	r3, r1
 8003c94:	0020      	movs	r0, r4
 8003c96:	0029      	movs	r1, r5
 8003c98:	f7fd fb64 	bl	8001364 <__aeabi_dmul>
 8003c9c:	0002      	movs	r2, r0
 8003c9e:	000b      	movs	r3, r1
 8003ca0:	0010      	movs	r0, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	f7fc fb20 	bl	80002e8 <__aeabi_d2uiz>
 8003ca8:	0002      	movs	r2, r0
 8003caa:	2308      	movs	r3, #8
 8003cac:	18f3      	adds	r3, r6, r3
 8003cae:	19db      	adds	r3, r3, r7
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cb4:	e2ee      	b.n	8004294 <max2871CalculateRegister0Values+0xb1c>
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	59682eff 	.word	0x59682eff
 8003cbc:	2cb4177f 	.word	0x2cb4177f
 8003cc0:	165a0bbf 	.word	0x165a0bbf
	} else if ((ppl->FreqOut < 375000000) && (ppl->FreqOut >= 187500000)) {
 8003cc4:	23dc      	movs	r3, #220	; 0xdc
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	189b      	adds	r3, r3, r2
 8003cca:	19db      	adds	r3, r3, r7
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d000      	beq.n	8003cd8 <max2871CalculateRegister0Values+0x560>
 8003cd6:	e0b5      	b.n	8003e44 <max2871CalculateRegister0Values+0x6cc>
 8003cd8:	d103      	bne.n	8003ce2 <max2871CalculateRegister0Values+0x56a>
 8003cda:	49ba      	ldr	r1, [pc, #744]	; (8003fc4 <max2871CalculateRegister0Values+0x84c>)
 8003cdc:	428a      	cmp	r2, r1
 8003cde:	d900      	bls.n	8003ce2 <max2871CalculateRegister0Values+0x56a>
 8003ce0:	e0b0      	b.n	8003e44 <max2871CalculateRegister0Values+0x6cc>
 8003ce2:	23dc      	movs	r3, #220	; 0xdc
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	19db      	adds	r3, r3, r7
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <max2871CalculateRegister0Values+0x588>
 8003cf4:	d000      	beq.n	8003cf8 <max2871CalculateRegister0Values+0x580>
 8003cf6:	e0a5      	b.n	8003e44 <max2871CalculateRegister0Values+0x6cc>
 8003cf8:	49b3      	ldr	r1, [pc, #716]	; (8003fc8 <max2871CalculateRegister0Values+0x850>)
 8003cfa:	428a      	cmp	r2, r1
 8003cfc:	d800      	bhi.n	8003d00 <max2871CalculateRegister0Values+0x588>
 8003cfe:	e0a1      	b.n	8003e44 <max2871CalculateRegister0Values+0x6cc>
		ppl->DIVA = 4;
 8003d00:	26dc      	movs	r6, #220	; 0xdc
 8003d02:	2308      	movs	r3, #8
 8003d04:	18f3      	adds	r3, r6, r3
 8003d06:	19db      	adds	r3, r3, r7
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	619a      	str	r2, [r3, #24]
		ppl->register0.NDIV = ppl->FreqOut * 16 / FreqRef;
 8003d0e:	2308      	movs	r3, #8
 8003d10:	18f3      	adds	r3, r6, r3
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	0f11      	lsrs	r1, r2, #28
 8003d1c:	0118      	lsls	r0, r3, #4
 8003d1e:	24bc      	movs	r4, #188	; 0xbc
 8003d20:	2508      	movs	r5, #8
 8003d22:	1965      	adds	r5, r4, r5
 8003d24:	19ed      	adds	r5, r5, r7
 8003d26:	6028      	str	r0, [r5, #0]
 8003d28:	2008      	movs	r0, #8
 8003d2a:	1820      	adds	r0, r4, r0
 8003d2c:	19c0      	adds	r0, r0, r7
 8003d2e:	6800      	ldr	r0, [r0, #0]
 8003d30:	4308      	orrs	r0, r1
 8003d32:	2108      	movs	r1, #8
 8003d34:	1861      	adds	r1, r4, r1
 8003d36:	19c9      	adds	r1, r1, r7
 8003d38:	6008      	str	r0, [r1, #0]
 8003d3a:	0113      	lsls	r3, r2, #4
 8003d3c:	21b8      	movs	r1, #184	; 0xb8
 8003d3e:	2208      	movs	r2, #8
 8003d40:	188a      	adds	r2, r1, r2
 8003d42:	19d2      	adds	r2, r2, r7
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	24ec      	movs	r4, #236	; 0xec
 8003d48:	2308      	movs	r3, #8
 8003d4a:	18e3      	adds	r3, r4, r3
 8003d4c:	19db      	adds	r3, r3, r7
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	643b      	str	r3, [r7, #64]	; 0x40
 8003d52:	2300      	movs	r3, #0
 8003d54:	647b      	str	r3, [r7, #68]	; 0x44
 8003d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5a:	2008      	movs	r0, #8
 8003d5c:	1809      	adds	r1, r1, r0
 8003d5e:	19c9      	adds	r1, r1, r7
 8003d60:	6808      	ldr	r0, [r1, #0]
 8003d62:	6849      	ldr	r1, [r1, #4]
 8003d64:	f7fc faa0 	bl	80002a8 <__aeabi_uldivmod>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	000b      	movs	r3, r1
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	18f3      	adds	r3, r6, r3
 8003d70:	19db      	adds	r3, r3, r7
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
		rest = ppl->FreqOut * 16 % FreqRef;
 8003d76:	2308      	movs	r3, #8
 8003d78:	18f3      	adds	r3, r6, r3
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	0f11      	lsrs	r1, r2, #28
 8003d84:	468c      	mov	ip, r1
 8003d86:	0118      	lsls	r0, r3, #4
 8003d88:	25b4      	movs	r5, #180	; 0xb4
 8003d8a:	2108      	movs	r1, #8
 8003d8c:	1869      	adds	r1, r5, r1
 8003d8e:	19c9      	adds	r1, r1, r7
 8003d90:	6008      	str	r0, [r1, #0]
 8003d92:	2108      	movs	r1, #8
 8003d94:	1869      	adds	r1, r5, r1
 8003d96:	19c8      	adds	r0, r1, r7
 8003d98:	6800      	ldr	r0, [r0, #0]
 8003d9a:	4661      	mov	r1, ip
 8003d9c:	4308      	orrs	r0, r1
 8003d9e:	2108      	movs	r1, #8
 8003da0:	1869      	adds	r1, r5, r1
 8003da2:	19c9      	adds	r1, r1, r7
 8003da4:	6008      	str	r0, [r1, #0]
 8003da6:	0113      	lsls	r3, r2, #4
 8003da8:	21b0      	movs	r1, #176	; 0xb0
 8003daa:	2208      	movs	r2, #8
 8003dac:	188a      	adds	r2, r1, r2
 8003dae:	19d2      	adds	r2, r2, r7
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	2308      	movs	r3, #8
 8003db4:	18e3      	adds	r3, r4, r3
 8003db6:	19db      	adds	r3, r3, r7
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	2008      	movs	r0, #8
 8003dc6:	1809      	adds	r1, r1, r0
 8003dc8:	19c9      	adds	r1, r1, r7
 8003dca:	6808      	ldr	r0, [r1, #0]
 8003dcc:	6849      	ldr	r1, [r1, #4]
 8003dce:	f7fc fa6b 	bl	80002a8 <__aeabi_uldivmod>
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	f7fc faa5 	bl	8000324 <__aeabi_ul2d>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	000b      	movs	r3, r1
 8003dde:	25e0      	movs	r5, #224	; 0xe0
 8003de0:	2108      	movs	r1, #8
 8003de2:	1869      	adds	r1, r5, r1
 8003de4:	19c9      	adds	r1, r1, r7
 8003de6:	600a      	str	r2, [r1, #0]
 8003de8:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003dea:	2308      	movs	r3, #8
 8003dec:	18e3      	adds	r3, r4, r3
 8003dee:	19db      	adds	r3, r3, r7
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	f7fe f8eb 	bl	8001fcc <__aeabi_ui2d>
 8003df6:	0002      	movs	r2, r0
 8003df8:	000b      	movs	r3, r1
 8003dfa:	2108      	movs	r1, #8
 8003dfc:	1869      	adds	r1, r5, r1
 8003dfe:	19c9      	adds	r1, r1, r7
 8003e00:	6808      	ldr	r0, [r1, #0]
 8003e02:	6849      	ldr	r1, [r1, #4]
 8003e04:	f7fc feac 	bl	8000b60 <__aeabi_ddiv>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	000b      	movs	r3, r1
 8003e0c:	0014      	movs	r4, r2
 8003e0e:	001d      	movs	r5, r3
 8003e10:	23e8      	movs	r3, #232	; 0xe8
 8003e12:	2208      	movs	r2, #8
 8003e14:	189b      	adds	r3, r3, r2
 8003e16:	19db      	adds	r3, r3, r7
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f7fe f8d7 	bl	8001fcc <__aeabi_ui2d>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	000b      	movs	r3, r1
 8003e22:	0020      	movs	r0, r4
 8003e24:	0029      	movs	r1, r5
 8003e26:	f7fd fa9d 	bl	8001364 <__aeabi_dmul>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	000b      	movs	r3, r1
 8003e2e:	0010      	movs	r0, r2
 8003e30:	0019      	movs	r1, r3
 8003e32:	f7fc fa59 	bl	80002e8 <__aeabi_d2uiz>
 8003e36:	0002      	movs	r2, r0
 8003e38:	2308      	movs	r3, #8
 8003e3a:	18f3      	adds	r3, r6, r3
 8003e3c:	19db      	adds	r3, r3, r7
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e42:	e227      	b.n	8004294 <max2871CalculateRegister0Values+0xb1c>
	} else if ((ppl->FreqOut < 187500000) && (ppl->FreqOut >= 93750000)) {
 8003e44:	23dc      	movs	r3, #220	; 0xdc
 8003e46:	2208      	movs	r2, #8
 8003e48:	189b      	adds	r3, r3, r2
 8003e4a:	19db      	adds	r3, r3, r7
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d000      	beq.n	8003e58 <max2871CalculateRegister0Values+0x6e0>
 8003e56:	e0bb      	b.n	8003fd0 <max2871CalculateRegister0Values+0x858>
 8003e58:	d103      	bne.n	8003e62 <max2871CalculateRegister0Values+0x6ea>
 8003e5a:	495b      	ldr	r1, [pc, #364]	; (8003fc8 <max2871CalculateRegister0Values+0x850>)
 8003e5c:	428a      	cmp	r2, r1
 8003e5e:	d900      	bls.n	8003e62 <max2871CalculateRegister0Values+0x6ea>
 8003e60:	e0b6      	b.n	8003fd0 <max2871CalculateRegister0Values+0x858>
 8003e62:	23dc      	movs	r3, #220	; 0xdc
 8003e64:	2208      	movs	r2, #8
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	19db      	adds	r3, r3, r7
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <max2871CalculateRegister0Values+0x708>
 8003e74:	d000      	beq.n	8003e78 <max2871CalculateRegister0Values+0x700>
 8003e76:	e0ab      	b.n	8003fd0 <max2871CalculateRegister0Values+0x858>
 8003e78:	4954      	ldr	r1, [pc, #336]	; (8003fcc <max2871CalculateRegister0Values+0x854>)
 8003e7a:	428a      	cmp	r2, r1
 8003e7c:	d800      	bhi.n	8003e80 <max2871CalculateRegister0Values+0x708>
 8003e7e:	e0a7      	b.n	8003fd0 <max2871CalculateRegister0Values+0x858>
		ppl->DIVA = 5;
 8003e80:	26dc      	movs	r6, #220	; 0xdc
 8003e82:	2308      	movs	r3, #8
 8003e84:	18f3      	adds	r3, r6, r3
 8003e86:	19db      	adds	r3, r3, r7
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2205      	movs	r2, #5
 8003e8c:	619a      	str	r2, [r3, #24]
		ppl->register0.NDIV = ppl->FreqOut * 32 / FreqRef;
 8003e8e:	2308      	movs	r3, #8
 8003e90:	18f3      	adds	r3, r6, r3
 8003e92:	19db      	adds	r3, r3, r7
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	0ed1      	lsrs	r1, r2, #27
 8003e9c:	0158      	lsls	r0, r3, #5
 8003e9e:	24ac      	movs	r4, #172	; 0xac
 8003ea0:	2508      	movs	r5, #8
 8003ea2:	1965      	adds	r5, r4, r5
 8003ea4:	19ed      	adds	r5, r5, r7
 8003ea6:	6028      	str	r0, [r5, #0]
 8003ea8:	2008      	movs	r0, #8
 8003eaa:	1820      	adds	r0, r4, r0
 8003eac:	19c0      	adds	r0, r0, r7
 8003eae:	6800      	ldr	r0, [r0, #0]
 8003eb0:	4308      	orrs	r0, r1
 8003eb2:	2108      	movs	r1, #8
 8003eb4:	1861      	adds	r1, r4, r1
 8003eb6:	19c9      	adds	r1, r1, r7
 8003eb8:	6008      	str	r0, [r1, #0]
 8003eba:	0153      	lsls	r3, r2, #5
 8003ebc:	21a8      	movs	r1, #168	; 0xa8
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	188a      	adds	r2, r1, r2
 8003ec2:	19d2      	adds	r2, r2, r7
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	24ec      	movs	r4, #236	; 0xec
 8003ec8:	2308      	movs	r3, #8
 8003eca:	18e3      	adds	r3, r4, r3
 8003ecc:	19db      	adds	r3, r3, r7
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eda:	2008      	movs	r0, #8
 8003edc:	1809      	adds	r1, r1, r0
 8003ede:	19c9      	adds	r1, r1, r7
 8003ee0:	6808      	ldr	r0, [r1, #0]
 8003ee2:	6849      	ldr	r1, [r1, #4]
 8003ee4:	f7fc f9e0 	bl	80002a8 <__aeabi_uldivmod>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	000b      	movs	r3, r1
 8003eec:	2308      	movs	r3, #8
 8003eee:	18f3      	adds	r3, r6, r3
 8003ef0:	19db      	adds	r3, r3, r7
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38
		rest = ppl->FreqOut * 32 % FreqRef;
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	18f3      	adds	r3, r6, r3
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	0ed1      	lsrs	r1, r2, #27
 8003f04:	468c      	mov	ip, r1
 8003f06:	0158      	lsls	r0, r3, #5
 8003f08:	25a4      	movs	r5, #164	; 0xa4
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	1869      	adds	r1, r5, r1
 8003f0e:	19c9      	adds	r1, r1, r7
 8003f10:	6008      	str	r0, [r1, #0]
 8003f12:	2108      	movs	r1, #8
 8003f14:	1869      	adds	r1, r5, r1
 8003f16:	19c8      	adds	r0, r1, r7
 8003f18:	6800      	ldr	r0, [r0, #0]
 8003f1a:	4661      	mov	r1, ip
 8003f1c:	4308      	orrs	r0, r1
 8003f1e:	2108      	movs	r1, #8
 8003f20:	1869      	adds	r1, r5, r1
 8003f22:	19c9      	adds	r1, r1, r7
 8003f24:	6008      	str	r0, [r1, #0]
 8003f26:	0153      	lsls	r3, r2, #5
 8003f28:	21a0      	movs	r1, #160	; 0xa0
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	188a      	adds	r2, r1, r2
 8003f2e:	19d2      	adds	r2, r2, r7
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	2308      	movs	r3, #8
 8003f34:	18e3      	adds	r3, r4, r3
 8003f36:	19db      	adds	r3, r3, r7
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	2008      	movs	r0, #8
 8003f46:	1809      	adds	r1, r1, r0
 8003f48:	19c9      	adds	r1, r1, r7
 8003f4a:	6808      	ldr	r0, [r1, #0]
 8003f4c:	6849      	ldr	r1, [r1, #4]
 8003f4e:	f7fc f9ab 	bl	80002a8 <__aeabi_uldivmod>
 8003f52:	0010      	movs	r0, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	f7fc f9e5 	bl	8000324 <__aeabi_ul2d>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	000b      	movs	r3, r1
 8003f5e:	25e0      	movs	r5, #224	; 0xe0
 8003f60:	2108      	movs	r1, #8
 8003f62:	1869      	adds	r1, r5, r1
 8003f64:	19c9      	adds	r1, r1, r7
 8003f66:	600a      	str	r2, [r1, #0]
 8003f68:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	18e3      	adds	r3, r4, r3
 8003f6e:	19db      	adds	r3, r3, r7
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	f7fe f82b 	bl	8001fcc <__aeabi_ui2d>
 8003f76:	0002      	movs	r2, r0
 8003f78:	000b      	movs	r3, r1
 8003f7a:	2108      	movs	r1, #8
 8003f7c:	1869      	adds	r1, r5, r1
 8003f7e:	19c9      	adds	r1, r1, r7
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	6849      	ldr	r1, [r1, #4]
 8003f84:	f7fc fdec 	bl	8000b60 <__aeabi_ddiv>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	000b      	movs	r3, r1
 8003f8c:	0014      	movs	r4, r2
 8003f8e:	001d      	movs	r5, r3
 8003f90:	23e8      	movs	r3, #232	; 0xe8
 8003f92:	2208      	movs	r2, #8
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	19db      	adds	r3, r3, r7
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	f7fe f817 	bl	8001fcc <__aeabi_ui2d>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	000b      	movs	r3, r1
 8003fa2:	0020      	movs	r0, r4
 8003fa4:	0029      	movs	r1, r5
 8003fa6:	f7fd f9dd 	bl	8001364 <__aeabi_dmul>
 8003faa:	0002      	movs	r2, r0
 8003fac:	000b      	movs	r3, r1
 8003fae:	0010      	movs	r0, r2
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	f7fc f999 	bl	80002e8 <__aeabi_d2uiz>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	2308      	movs	r3, #8
 8003fba:	18f3      	adds	r3, r6, r3
 8003fbc:	19db      	adds	r3, r3, r7
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fc2:	e167      	b.n	8004294 <max2871CalculateRegister0Values+0xb1c>
 8003fc4:	165a0bbf 	.word	0x165a0bbf
 8003fc8:	0b2d05df 	.word	0x0b2d05df
 8003fcc:	059682ef 	.word	0x059682ef
	} else if ((ppl->FreqOut < 93750000) && (ppl->FreqOut >= 46875000)) {
 8003fd0:	23dc      	movs	r3, #220	; 0xdc
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	189b      	adds	r3, r3, r2
 8003fd6:	19db      	adds	r3, r3, r7
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d000      	beq.n	8003fe4 <max2871CalculateRegister0Values+0x86c>
 8003fe2:	e0b5      	b.n	8004150 <max2871CalculateRegister0Values+0x9d8>
 8003fe4:	d103      	bne.n	8003fee <max2871CalculateRegister0Values+0x876>
 8003fe6:	49ad      	ldr	r1, [pc, #692]	; (800429c <max2871CalculateRegister0Values+0xb24>)
 8003fe8:	428a      	cmp	r2, r1
 8003fea:	d900      	bls.n	8003fee <max2871CalculateRegister0Values+0x876>
 8003fec:	e0b0      	b.n	8004150 <max2871CalculateRegister0Values+0x9d8>
 8003fee:	23dc      	movs	r3, #220	; 0xdc
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	189b      	adds	r3, r3, r2
 8003ff4:	19db      	adds	r3, r3, r7
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <max2871CalculateRegister0Values+0x894>
 8004000:	d000      	beq.n	8004004 <max2871CalculateRegister0Values+0x88c>
 8004002:	e0a5      	b.n	8004150 <max2871CalculateRegister0Values+0x9d8>
 8004004:	49a6      	ldr	r1, [pc, #664]	; (80042a0 <max2871CalculateRegister0Values+0xb28>)
 8004006:	428a      	cmp	r2, r1
 8004008:	d800      	bhi.n	800400c <max2871CalculateRegister0Values+0x894>
 800400a:	e0a1      	b.n	8004150 <max2871CalculateRegister0Values+0x9d8>
		ppl->DIVA = 6;
 800400c:	26dc      	movs	r6, #220	; 0xdc
 800400e:	2308      	movs	r3, #8
 8004010:	18f3      	adds	r3, r6, r3
 8004012:	19db      	adds	r3, r3, r7
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2206      	movs	r2, #6
 8004018:	619a      	str	r2, [r3, #24]
		ppl->register0.NDIV = ppl->FreqOut * 64 / FreqRef;
 800401a:	2308      	movs	r3, #8
 800401c:	18f3      	adds	r3, r6, r3
 800401e:	19db      	adds	r3, r3, r7
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	0e91      	lsrs	r1, r2, #26
 8004028:	0198      	lsls	r0, r3, #6
 800402a:	249c      	movs	r4, #156	; 0x9c
 800402c:	2508      	movs	r5, #8
 800402e:	1965      	adds	r5, r4, r5
 8004030:	19ed      	adds	r5, r5, r7
 8004032:	6028      	str	r0, [r5, #0]
 8004034:	2008      	movs	r0, #8
 8004036:	1820      	adds	r0, r4, r0
 8004038:	19c0      	adds	r0, r0, r7
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	4308      	orrs	r0, r1
 800403e:	2108      	movs	r1, #8
 8004040:	1861      	adds	r1, r4, r1
 8004042:	19c9      	adds	r1, r1, r7
 8004044:	6008      	str	r0, [r1, #0]
 8004046:	0193      	lsls	r3, r2, #6
 8004048:	2198      	movs	r1, #152	; 0x98
 800404a:	2208      	movs	r2, #8
 800404c:	188a      	adds	r2, r1, r2
 800404e:	19d2      	adds	r2, r2, r7
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	24ec      	movs	r4, #236	; 0xec
 8004054:	2308      	movs	r3, #8
 8004056:	18e3      	adds	r3, r4, r3
 8004058:	19db      	adds	r3, r3, r7
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	2300      	movs	r3, #0
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	6a3a      	ldr	r2, [r7, #32]
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2008      	movs	r0, #8
 8004068:	1809      	adds	r1, r1, r0
 800406a:	19c9      	adds	r1, r1, r7
 800406c:	6808      	ldr	r0, [r1, #0]
 800406e:	6849      	ldr	r1, [r1, #4]
 8004070:	f7fc f91a 	bl	80002a8 <__aeabi_uldivmod>
 8004074:	0002      	movs	r2, r0
 8004076:	000b      	movs	r3, r1
 8004078:	2308      	movs	r3, #8
 800407a:	18f3      	adds	r3, r6, r3
 800407c:	19db      	adds	r3, r3, r7
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
		rest = ppl->FreqOut * 64 % FreqRef;
 8004082:	2308      	movs	r3, #8
 8004084:	18f3      	adds	r3, r6, r3
 8004086:	19db      	adds	r3, r3, r7
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	0e91      	lsrs	r1, r2, #26
 8004090:	468c      	mov	ip, r1
 8004092:	0198      	lsls	r0, r3, #6
 8004094:	2594      	movs	r5, #148	; 0x94
 8004096:	2108      	movs	r1, #8
 8004098:	1869      	adds	r1, r5, r1
 800409a:	19c9      	adds	r1, r1, r7
 800409c:	6008      	str	r0, [r1, #0]
 800409e:	2108      	movs	r1, #8
 80040a0:	1869      	adds	r1, r5, r1
 80040a2:	19c8      	adds	r0, r1, r7
 80040a4:	6800      	ldr	r0, [r0, #0]
 80040a6:	4661      	mov	r1, ip
 80040a8:	4308      	orrs	r0, r1
 80040aa:	2108      	movs	r1, #8
 80040ac:	1869      	adds	r1, r5, r1
 80040ae:	19c9      	adds	r1, r1, r7
 80040b0:	6008      	str	r0, [r1, #0]
 80040b2:	0193      	lsls	r3, r2, #6
 80040b4:	2190      	movs	r1, #144	; 0x90
 80040b6:	2208      	movs	r2, #8
 80040b8:	188a      	adds	r2, r1, r2
 80040ba:	19d2      	adds	r2, r2, r7
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	2308      	movs	r3, #8
 80040c0:	18e3      	adds	r3, r4, r3
 80040c2:	19db      	adds	r3, r3, r7
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2008      	movs	r0, #8
 80040d2:	1809      	adds	r1, r1, r0
 80040d4:	19c9      	adds	r1, r1, r7
 80040d6:	6808      	ldr	r0, [r1, #0]
 80040d8:	6849      	ldr	r1, [r1, #4]
 80040da:	f7fc f8e5 	bl	80002a8 <__aeabi_uldivmod>
 80040de:	0010      	movs	r0, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	f7fc f91f 	bl	8000324 <__aeabi_ul2d>
 80040e6:	0002      	movs	r2, r0
 80040e8:	000b      	movs	r3, r1
 80040ea:	25e0      	movs	r5, #224	; 0xe0
 80040ec:	2108      	movs	r1, #8
 80040ee:	1869      	adds	r1, r5, r1
 80040f0:	19c9      	adds	r1, r1, r7
 80040f2:	600a      	str	r2, [r1, #0]
 80040f4:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 80040f6:	2308      	movs	r3, #8
 80040f8:	18e3      	adds	r3, r4, r3
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	f7fd ff65 	bl	8001fcc <__aeabi_ui2d>
 8004102:	0002      	movs	r2, r0
 8004104:	000b      	movs	r3, r1
 8004106:	2108      	movs	r1, #8
 8004108:	1869      	adds	r1, r5, r1
 800410a:	19c9      	adds	r1, r1, r7
 800410c:	6808      	ldr	r0, [r1, #0]
 800410e:	6849      	ldr	r1, [r1, #4]
 8004110:	f7fc fd26 	bl	8000b60 <__aeabi_ddiv>
 8004114:	0002      	movs	r2, r0
 8004116:	000b      	movs	r3, r1
 8004118:	0014      	movs	r4, r2
 800411a:	001d      	movs	r5, r3
 800411c:	23e8      	movs	r3, #232	; 0xe8
 800411e:	2208      	movs	r2, #8
 8004120:	189b      	adds	r3, r3, r2
 8004122:	19db      	adds	r3, r3, r7
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	f7fd ff51 	bl	8001fcc <__aeabi_ui2d>
 800412a:	0002      	movs	r2, r0
 800412c:	000b      	movs	r3, r1
 800412e:	0020      	movs	r0, r4
 8004130:	0029      	movs	r1, r5
 8004132:	f7fd f917 	bl	8001364 <__aeabi_dmul>
 8004136:	0002      	movs	r2, r0
 8004138:	000b      	movs	r3, r1
 800413a:	0010      	movs	r0, r2
 800413c:	0019      	movs	r1, r3
 800413e:	f7fc f8d3 	bl	80002e8 <__aeabi_d2uiz>
 8004142:	0002      	movs	r2, r0
 8004144:	2308      	movs	r3, #8
 8004146:	18f3      	adds	r3, r6, r3
 8004148:	19db      	adds	r3, r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	63da      	str	r2, [r3, #60]	; 0x3c
 800414e:	e0a1      	b.n	8004294 <max2871CalculateRegister0Values+0xb1c>
		ppl->DIVA = 7;
 8004150:	26dc      	movs	r6, #220	; 0xdc
 8004152:	2308      	movs	r3, #8
 8004154:	18f3      	adds	r3, r6, r3
 8004156:	19db      	adds	r3, r3, r7
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2207      	movs	r2, #7
 800415c:	619a      	str	r2, [r3, #24]
		ppl->register0.NDIV = ppl->FreqOut * 128 / FreqRef;
 800415e:	2308      	movs	r3, #8
 8004160:	18f3      	adds	r3, r6, r3
 8004162:	19db      	adds	r3, r3, r7
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	0e51      	lsrs	r1, r2, #25
 800416c:	01d8      	lsls	r0, r3, #7
 800416e:	248c      	movs	r4, #140	; 0x8c
 8004170:	2508      	movs	r5, #8
 8004172:	1965      	adds	r5, r4, r5
 8004174:	19ed      	adds	r5, r5, r7
 8004176:	6028      	str	r0, [r5, #0]
 8004178:	2008      	movs	r0, #8
 800417a:	1820      	adds	r0, r4, r0
 800417c:	19c0      	adds	r0, r0, r7
 800417e:	6800      	ldr	r0, [r0, #0]
 8004180:	4308      	orrs	r0, r1
 8004182:	2108      	movs	r1, #8
 8004184:	1861      	adds	r1, r4, r1
 8004186:	19c9      	adds	r1, r1, r7
 8004188:	6008      	str	r0, [r1, #0]
 800418a:	01d3      	lsls	r3, r2, #7
 800418c:	2188      	movs	r1, #136	; 0x88
 800418e:	2208      	movs	r2, #8
 8004190:	188a      	adds	r2, r1, r2
 8004192:	19d2      	adds	r2, r2, r7
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	24ec      	movs	r4, #236	; 0xec
 8004198:	2308      	movs	r3, #8
 800419a:	18e3      	adds	r3, r4, r3
 800419c:	19db      	adds	r3, r3, r7
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2008      	movs	r0, #8
 80041ac:	1809      	adds	r1, r1, r0
 80041ae:	19c9      	adds	r1, r1, r7
 80041b0:	6808      	ldr	r0, [r1, #0]
 80041b2:	6849      	ldr	r1, [r1, #4]
 80041b4:	f7fc f878 	bl	80002a8 <__aeabi_uldivmod>
 80041b8:	0002      	movs	r2, r0
 80041ba:	000b      	movs	r3, r1
 80041bc:	2308      	movs	r3, #8
 80041be:	18f3      	adds	r3, r6, r3
 80041c0:	19db      	adds	r3, r3, r7
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38
		rest = ppl->FreqOut * 128 % FreqRef;
 80041c6:	2308      	movs	r3, #8
 80041c8:	18f3      	adds	r3, r6, r3
 80041ca:	19db      	adds	r3, r3, r7
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	0e51      	lsrs	r1, r2, #25
 80041d4:	468c      	mov	ip, r1
 80041d6:	01d8      	lsls	r0, r3, #7
 80041d8:	2584      	movs	r5, #132	; 0x84
 80041da:	2108      	movs	r1, #8
 80041dc:	1869      	adds	r1, r5, r1
 80041de:	19c9      	adds	r1, r1, r7
 80041e0:	6008      	str	r0, [r1, #0]
 80041e2:	2108      	movs	r1, #8
 80041e4:	1869      	adds	r1, r5, r1
 80041e6:	19c8      	adds	r0, r1, r7
 80041e8:	6800      	ldr	r0, [r0, #0]
 80041ea:	4661      	mov	r1, ip
 80041ec:	4308      	orrs	r0, r1
 80041ee:	2108      	movs	r1, #8
 80041f0:	1869      	adds	r1, r5, r1
 80041f2:	19c9      	adds	r1, r1, r7
 80041f4:	6008      	str	r0, [r1, #0]
 80041f6:	01d3      	lsls	r3, r2, #7
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	2208      	movs	r2, #8
 80041fc:	188a      	adds	r2, r1, r2
 80041fe:	19d2      	adds	r2, r2, r7
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	2308      	movs	r3, #8
 8004204:	18e3      	adds	r3, r4, r3
 8004206:	19db      	adds	r3, r3, r7
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2008      	movs	r0, #8
 8004216:	1809      	adds	r1, r1, r0
 8004218:	19c9      	adds	r1, r1, r7
 800421a:	6808      	ldr	r0, [r1, #0]
 800421c:	6849      	ldr	r1, [r1, #4]
 800421e:	f7fc f843 	bl	80002a8 <__aeabi_uldivmod>
 8004222:	0010      	movs	r0, r2
 8004224:	0019      	movs	r1, r3
 8004226:	f7fc f87d 	bl	8000324 <__aeabi_ul2d>
 800422a:	0002      	movs	r2, r0
 800422c:	000b      	movs	r3, r1
 800422e:	25e0      	movs	r5, #224	; 0xe0
 8004230:	2108      	movs	r1, #8
 8004232:	1869      	adds	r1, r5, r1
 8004234:	19c9      	adds	r1, r1, r7
 8004236:	600a      	str	r2, [r1, #0]
 8004238:	604b      	str	r3, [r1, #4]
		ppl->register0.FRAC = rest / FreqRef * Resol;
 800423a:	2308      	movs	r3, #8
 800423c:	18e3      	adds	r3, r4, r3
 800423e:	19db      	adds	r3, r3, r7
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	f7fd fec3 	bl	8001fcc <__aeabi_ui2d>
 8004246:	0002      	movs	r2, r0
 8004248:	000b      	movs	r3, r1
 800424a:	2108      	movs	r1, #8
 800424c:	1869      	adds	r1, r5, r1
 800424e:	19c9      	adds	r1, r1, r7
 8004250:	6808      	ldr	r0, [r1, #0]
 8004252:	6849      	ldr	r1, [r1, #4]
 8004254:	f7fc fc84 	bl	8000b60 <__aeabi_ddiv>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	0014      	movs	r4, r2
 800425e:	001d      	movs	r5, r3
 8004260:	23e8      	movs	r3, #232	; 0xe8
 8004262:	2208      	movs	r2, #8
 8004264:	189b      	adds	r3, r3, r2
 8004266:	19db      	adds	r3, r3, r7
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	f7fd feaf 	bl	8001fcc <__aeabi_ui2d>
 800426e:	0002      	movs	r2, r0
 8004270:	000b      	movs	r3, r1
 8004272:	0020      	movs	r0, r4
 8004274:	0029      	movs	r1, r5
 8004276:	f7fd f875 	bl	8001364 <__aeabi_dmul>
 800427a:	0002      	movs	r2, r0
 800427c:	000b      	movs	r3, r1
 800427e:	0010      	movs	r0, r2
 8004280:	0019      	movs	r1, r3
 8004282:	f7fc f831 	bl	80002e8 <__aeabi_d2uiz>
 8004286:	0002      	movs	r2, r0
 8004288:	2308      	movs	r3, #8
 800428a:	18f3      	adds	r3, r6, r3
 800428c:	19db      	adds	r3, r3, r7
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004292:	e7ff      	b.n	8004294 <max2871CalculateRegister0Values+0xb1c>
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b03f      	add	sp, #252	; 0xfc
 800429a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429c:	059682ef 	.word	0x059682ef
 80042a0:	02cb4177 	.word	0x02cb4177

080042a4 <max2871RegisterInit>:

void max2871RegisterInit(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < 2; i++) {
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e041      	b.n	8004338 <max2871RegisterInit+0x94>
		max2871Write(hspi2, getRegister5InitValue(ppl));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff f930 	bl	800351c <getRegister5InitValue>
 80042bc:	0002      	movs	r2, r0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7ff fa0c 	bl	80036e0 <max2871Write>
		HAL_Delay(20);
 80042c8:	2014      	movs	r0, #20
 80042ca:	f000 fe27 	bl	8004f1c <HAL_Delay>
		max2871Write(hspi2, getRegister4InitValue(ppl));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7ff f899 	bl	8003408 <getRegister4InitValue>
 80042d6:	0002      	movs	r2, r0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	0011      	movs	r1, r2
 80042dc:	0018      	movs	r0, r3
 80042de:	f7ff f9ff 	bl	80036e0 <max2871Write>
		max2871Write(hspi2, getRegister3InitValue(ppl));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff f841 	bl	800336c <getRegister3InitValue>
 80042ea:	0002      	movs	r2, r0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0011      	movs	r1, r2
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7ff f9f5 	bl	80036e0 <max2871Write>
		max2871Write(hspi2, getRegister2InitValue(ppl));
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7fe ffbe 	bl	800327a <getRegister2InitValue>
 80042fe:	0002      	movs	r2, r0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff f9eb 	bl	80036e0 <max2871Write>
		max2871Write(hspi2, getRegister1InitValue(ppl));
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	0018      	movs	r0, r3
 800430e:	f7fe ff8a 	bl	8003226 <getRegister1InitValue>
 8004312:	0002      	movs	r2, r0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0011      	movs	r1, r2
 8004318:	0018      	movs	r0, r3
 800431a:	f7ff f9e1 	bl	80036e0 <max2871Write>
		max2871Write(hspi2, getRegister0InitValue(ppl));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	0018      	movs	r0, r3
 8004322:	f7fe ff5e 	bl	80031e2 <getRegister0InitValue>
 8004326:	0002      	movs	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0011      	movs	r1, r2
 800432c:	0018      	movs	r0, r3
 800432e:	f7ff f9d7 	bl	80036e0 <max2871Write>
	for (int i = 0; i < 2; i++) {
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b01      	cmp	r3, #1
 800433c:	ddba      	ble.n	80042b4 <max2871RegisterInit+0x10>
	}
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b004      	add	sp, #16
 8004346:	bd80      	pop	{r7, pc}

08004348 <waitForLock>:

void waitForLock() {
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
	GPIO_PinState lock = GPIO_PIN_SET;
 800434e:	230f      	movs	r3, #15
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
	unsigned long t_ini = HAL_GetTick();
 8004356:	f000 fdd7 	bl	8004f08 <HAL_GetTick>
 800435a:	0003      	movs	r3, r0
 800435c:	607b      	str	r3, [r7, #4]
	unsigned long test;
	while (lock == GPIO_PIN_SET && (test < 2000)) {
 800435e:	e00f      	b.n	8004380 <waitForLock+0x38>
		test = HAL_GetTick() - t_ini;
 8004360:	f000 fdd2 	bl	8004f08 <HAL_GetTick>
 8004364:	0002      	movs	r2, r0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	60bb      	str	r3, [r7, #8]
		lock = HAL_GPIO_ReadPin(MAX_LOCK_DETECTOR_GPIO_Port,
 800436c:	230f      	movs	r3, #15
 800436e:	18fc      	adds	r4, r7, r3
 8004370:	23a0      	movs	r3, #160	; 0xa0
 8004372:	05db      	lsls	r3, r3, #23
 8004374:	2140      	movs	r1, #64	; 0x40
 8004376:	0018      	movs	r0, r3
 8004378:	f001 f80c 	bl	8005394 <HAL_GPIO_ReadPin>
 800437c:	0003      	movs	r3, r0
 800437e:	7023      	strb	r3, [r4, #0]
	while (lock == GPIO_PIN_SET && (test < 2000)) {
 8004380:	230f      	movs	r3, #15
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d104      	bne.n	8004394 <waitForLock+0x4c>
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	23fa      	movs	r3, #250	; 0xfa
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	429a      	cmp	r2, r3
 8004392:	d3e5      	bcc.n	8004360 <waitForLock+0x18>
		MAX_LOCK_DETECTOR_Pin);
	}
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b005      	add	sp, #20
 800439a:	bd90      	pop	{r4, r7, pc}

0800439c <max2871Program>:

void max2871Program(SPI_HandleTypeDef *hspi2, MAX2871_t *ppl) // Compose register value of register 0 and 4
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]

	unsigned long composedRegisterValue;
	max2871CalculateRegister0Values(ppl);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff f9e5 	bl	8003778 <max2871CalculateRegister0Values>

	composedRegisterValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	07da      	lsls	r2, r3, #31
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	03db      	lsls	r3, r3, #15
 80043ba:	431a      	orrs	r2, r3
			| ppl->register0.FRAC << 3 | ppl->register0.ADDR0;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	431a      	orrs	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	composedRegisterValue = ppl->register0.INT << 31 | ppl->register0.NDIV << 15
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

	max2871Write(hspi2, composedRegisterValue);
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	0011      	movs	r1, r2
 80043d2:	0018      	movs	r0, r3
 80043d4:	f7ff f984 	bl	80036e0 <max2871Write>

	waitForLock();
 80043d8:	f7ff ffb6 	bl	8004348 <waitForLock>

	composedRegisterValue = ppl->register4.RES << 29
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	22b4      	movs	r2, #180	; 0xb4
 80043e0:	589b      	ldr	r3, [r3, r2]
 80043e2:	075a      	lsls	r2, r3, #29
			| ppl->register4.SDLDO << 28 | ppl->register4.SDDIV << 27
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	21b8      	movs	r1, #184	; 0xb8
 80043e8:	585b      	ldr	r3, [r3, r1]
 80043ea:	071b      	lsls	r3, r3, #28
 80043ec:	431a      	orrs	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	21bc      	movs	r1, #188	; 0xbc
 80043f2:	585b      	ldr	r3, [r3, r1]
 80043f4:	06db      	lsls	r3, r3, #27
 80043f6:	431a      	orrs	r2, r3
			| ppl->register4.SDREF << 26 | ppl->register4.FB << 23
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	21c0      	movs	r1, #192	; 0xc0
 80043fc:	585b      	ldr	r3, [r3, r1]
 80043fe:	069b      	lsls	r3, r3, #26
 8004400:	431a      	orrs	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	21c4      	movs	r1, #196	; 0xc4
 8004406:	585b      	ldr	r3, [r3, r1]
 8004408:	05db      	lsls	r3, r3, #23
 800440a:	431a      	orrs	r2, r3
			| ppl->DIVA << 20 | ppl->register4.BS << 12
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	051b      	lsls	r3, r3, #20
 8004412:	431a      	orrs	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	21c8      	movs	r1, #200	; 0xc8
 8004418:	585b      	ldr	r3, [r3, r1]
 800441a:	031b      	lsls	r3, r3, #12
 800441c:	431a      	orrs	r2, r3
			| ppl->register4.SDVCO << 11 | ppl->register4.MTLD << 10
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	21cc      	movs	r1, #204	; 0xcc
 8004422:	585b      	ldr	r3, [r3, r1]
 8004424:	02db      	lsls	r3, r3, #11
 8004426:	431a      	orrs	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	21d0      	movs	r1, #208	; 0xd0
 800442c:	585b      	ldr	r3, [r3, r1]
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	431a      	orrs	r2, r3
			| ppl->register4.BDIV << 9 | ppl->register4.RFB_EN << 8
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	21d4      	movs	r1, #212	; 0xd4
 8004436:	585b      	ldr	r3, [r3, r1]
 8004438:	025b      	lsls	r3, r3, #9
 800443a:	431a      	orrs	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	21d8      	movs	r1, #216	; 0xd8
 8004440:	585b      	ldr	r3, [r3, r1]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	431a      	orrs	r2, r3
			| ppl->register4.BPWR << 6 | ppl->register4.RFA_EN << 5
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	21dc      	movs	r1, #220	; 0xdc
 800444a:	585b      	ldr	r3, [r3, r1]
 800444c:	019b      	lsls	r3, r3, #6
 800444e:	431a      	orrs	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	21e0      	movs	r1, #224	; 0xe0
 8004454:	585b      	ldr	r3, [r3, r1]
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	431a      	orrs	r2, r3
			| ppl->register4.APWR << 3 | ppl->register4.ADDR4;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	21e4      	movs	r1, #228	; 0xe4
 800445e:	585b      	ldr	r3, [r3, r1]
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	431a      	orrs	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	21e8      	movs	r1, #232	; 0xe8
 8004468:	585b      	ldr	r3, [r3, r1]
	composedRegisterValue = ppl->register4.RES << 29
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

	max2871Write(hspi2, composedRegisterValue);
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	0011      	movs	r1, r2
 8004474:	0018      	movs	r0, r3
 8004476:	f7ff f933 	bl	80036e0 <max2871Write>
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b004      	add	sp, #16
 8004480:	bd80      	pop	{r7, pc}

08004482 <toneUhfInit>:
	/* PA3  PA_HAB as output - ENABLE - DISABLE PA */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE3_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE3_1);
}

void toneUhfInit(Function_t funcion, Id_t id, Tone_uhf_t *uhf) {
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	603a      	str	r2, [r7, #0]
 800448a:	1dfb      	adds	r3, r7, #7
 800448c:	1c02      	adds	r2, r0, #0
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	1dbb      	adds	r3, r7, #6
 8004492:	1c0a      	adds	r2, r1, #0
 8004494:	701a      	strb	r2, [r3, #0]
	uhf->ON_OFF = 0;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
	uhf->FreqBase = 0;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	605a      	str	r2, [r3, #4]
	uhf->FreqOut = 0;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
	uhf->PdBm = 0;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	731a      	strb	r2, [r3, #12]
	uhf->function = funcion;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	1dfa      	adds	r2, r7, #7
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	739a      	strb	r2, [r3, #14]
	uhf->id = id;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	1dba      	adds	r2, r7, #6
 80044ba:	7812      	ldrb	r2, [r2, #0]
 80044bc:	735a      	strb	r2, [r3, #13]
}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b002      	add	sp, #8
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	000a      	movs	r2, r1
 80044d2:	1cfb      	adds	r3, r7, #3
 80044d4:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 80044d6:	230a      	movs	r3, #10
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <crc_get+0xc0>)
 80044dc:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 80044de:	230c      	movs	r3, #12
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2200      	movs	r2, #0
 80044e4:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 80044e6:	230f      	movs	r3, #15
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e03d      	b.n	800456c <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 80044f0:	230f      	movs	r3, #15
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	18d3      	adds	r3, r2, r3
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	b299      	uxth	r1, r3
 8004502:	220c      	movs	r2, #12
 8004504:	18bb      	adds	r3, r7, r2
 8004506:	18ba      	adds	r2, r7, r2
 8004508:	8812      	ldrh	r2, [r2, #0]
 800450a:	404a      	eors	r2, r1
 800450c:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 800450e:	230e      	movs	r3, #14
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e01e      	b.n	8004556 <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8004518:	210c      	movs	r1, #12
 800451a:	187b      	adds	r3, r7, r1
 800451c:	2200      	movs	r2, #0
 800451e:	5e9b      	ldrsh	r3, [r3, r2]
 8004520:	2b00      	cmp	r3, #0
 8004522:	da0c      	bge.n	800453e <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8004524:	187b      	adds	r3, r7, r1
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	b21a      	sxth	r2, r3
 800452c:	230a      	movs	r3, #10
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2000      	movs	r0, #0
 8004532:	5e1b      	ldrsh	r3, [r3, r0]
 8004534:	4053      	eors	r3, r2
 8004536:	b21a      	sxth	r2, r3
 8004538:	187b      	adds	r3, r7, r1
 800453a:	801a      	strh	r2, [r3, #0]
 800453c:	e005      	b.n	800454a <crc_get+0x82>
			else
				crc <<= 1;
 800453e:	230c      	movs	r3, #12
 8004540:	18fa      	adds	r2, r7, r3
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	18db      	adds	r3, r3, r3
 8004548:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 800454a:	210e      	movs	r1, #14
 800454c:	187b      	adds	r3, r7, r1
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	187b      	adds	r3, r7, r1
 8004552:	3201      	adds	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	230e      	movs	r3, #14
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b07      	cmp	r3, #7
 800455e:	d9db      	bls.n	8004518 <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8004560:	210f      	movs	r1, #15
 8004562:	187b      	adds	r3, r7, r1
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	187b      	adds	r3, r7, r1
 8004568:	3201      	adds	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	230f      	movs	r3, #15
 800456e:	18fa      	adds	r2, r7, r3
 8004570:	1cfb      	adds	r3, r7, #3
 8004572:	7812      	ldrb	r2, [r2, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d3ba      	bcc.n	80044f0 <crc_get+0x28>
		}
	}
	return crc;
 800457a:	230c      	movs	r3, #12
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	881b      	ldrh	r3, [r3, #0]
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b004      	add	sp, #16
 8004586:	bd80      	pop	{r7, pc}
 8004588:	00001021 	.word	0x00001021

0800458c <rs485_init>:

void rs485_init(RS485_t *r) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2207      	movs	r2, #7
 800459e:	721a      	strb	r2, [r3, #8]
	r->cmd = NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]

	/* PB9 DE485 as output  */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <rs485_init+0x3c>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <rs485_init+0x3c>)
 80045ac:	2180      	movs	r1, #128	; 0x80
 80045ae:	02c9      	lsls	r1, r1, #11
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <rs485_init+0x3c>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <rs485_init+0x3c>)
 80045ba:	4904      	ldr	r1, [pc, #16]	; (80045cc <rs485_init+0x40>)
 80045bc:	400a      	ands	r2, r1
 80045be:	601a      	str	r2, [r3, #0]

}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b002      	add	sp, #8
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	50000400 	.word	0x50000400
 80045cc:	fff7ffff 	.word	0xfff7ffff

080045d0 <rs485_check_frame>:
Rs485_status_t rs485_check_frame(RS485_t *r, UART1_t *u) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

	if (u->rx_count > (MINIMUN_FRAME_LEN)) {
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	227d      	movs	r2, #125	; 0x7d
 80045de:	5c9b      	ldrb	r3, [r3, r2]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d913      	bls.n	800460c <rs485_check_frame+0x3c>
		if (u->rx_buffer[0] == LTEL_START_MARK) {
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	227e      	movs	r2, #126	; 0x7e
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10c      	bne.n	8004608 <rs485_check_frame+0x38>
			if (u->rx_buffer[u->rx_count - 1] == LTEL_END_MARK)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	227d      	movs	r2, #125	; 0x7d
 80045f2:	5c9b      	ldrb	r3, [r3, r2]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	227f      	movs	r2, #127	; 0x7f
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <rs485_check_frame+0x34>
				return VALID_FRAME;
 8004600:	2302      	movs	r3, #2
 8004602:	e004      	b.n	800460e <rs485_check_frame+0x3e>
			else
				return START_READING;
 8004604:	2301      	movs	r3, #1
 8004606:	e002      	b.n	800460e <rs485_check_frame+0x3e>
		} else
			return NOT_VALID_FRAME;
 8004608:	2303      	movs	r3, #3
 800460a:	e000      	b.n	800460e <rs485_check_frame+0x3e>
	} else

		return WAITING;
 800460c:	2308      	movs	r3, #8
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}

08004616 <rs485_check_CRC_module>:

Rs485_status_t rs485_check_CRC_module(UART1_t *uart1) {
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = uart1->rx_buffer[8] << 8;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7a1b      	ldrb	r3, [r3, #8]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	60fb      	str	r3, [r7, #12]
	crc_save |= uart1->rx_buffer[9];
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7a5b      	ldrb	r3, [r3, #9]
 800462a:	001a      	movs	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(uart1->rx_buffer[1]), 7);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3301      	adds	r3, #1
 8004636:	2107      	movs	r1, #7
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff ff45 	bl	80044c8 <crc_get>
 800463e:	0003      	movs	r3, r0
 8004640:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	429a      	cmp	r2, r3
 8004648:	d101      	bne.n	800464e <rs485_check_CRC_module+0x38>
		return DATA_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <rs485_check_CRC_module+0x3a>
	return CRC_ERROR;
 800464e:	2306      	movs	r3, #6
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b004      	add	sp, #16
 8004656:	bd80      	pop	{r7, pc}

08004658 <rs485_check_valid_module>:

Rs485_status_t rs485_check_valid_module(UART1_t *uart1) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	if (uart1->rx_buffer[1] == UHF_TONE) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	785b      	ldrb	r3, [r3, #1]
 8004664:	2b07      	cmp	r3, #7
 8004666:	d11c      	bne.n	80046a2 <rs485_check_valid_module+0x4a>
		if (uart1->rx_buffer[2] == ID0) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	789b      	ldrb	r3, [r3, #2]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d116      	bne.n	800469e <rs485_check_valid_module+0x46>
			for (int i = 3; i < uart1->rx_count; i++)
 8004670:	2303      	movs	r3, #3
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e00b      	b.n	800468e <rs485_check_valid_module+0x36>
				if (uart1->rx_buffer[i] == LTEL_END_MARK)
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	18d3      	adds	r3, r2, r3
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	227f      	movs	r2, #127	; 0x7f
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <rs485_check_valid_module+0x30>
					return VALID_MODULE;
 8004684:	2309      	movs	r3, #9
 8004686:	e00f      	b.n	80046a8 <rs485_check_valid_module+0x50>
			for (int i = 3; i < uart1->rx_count; i++)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	227d      	movs	r2, #125	; 0x7d
 8004692:	5c9b      	ldrb	r3, [r3, r2]
 8004694:	001a      	movs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4293      	cmp	r3, r2
 800469a:	dbec      	blt.n	8004676 <rs485_check_valid_module+0x1e>
 800469c:	e003      	b.n	80046a6 <rs485_check_valid_module+0x4e>
		} else
			return WRONG_MODULE_ID;
 800469e:	2305      	movs	r3, #5
 80046a0:	e002      	b.n	80046a8 <rs485_check_valid_module+0x50>
	} else
		return WRONG_MODULE_FUNCTION;
 80046a2:	2304      	movs	r3, #4
 80046a4:	e000      	b.n	80046a8 <rs485_check_valid_module+0x50>
	return WRONG_MODULE_FUNCTION;
 80046a6:	2304      	movs	r3, #4
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b004      	add	sp, #16
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <rs485_update_status_by_uart>:

void rs485_parameters_cmd_action(uint8_t *frame) {

}

void rs485_update_status_by_uart(RS485_t *rs485, UART1_t *uart1) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
	switch (rs485->status) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7a1b      	ldrb	r3, [r3, #8]
 80046be:	2b09      	cmp	r3, #9
 80046c0:	d900      	bls.n	80046c4 <rs485_update_status_by_uart+0x14>
 80046c2:	e081      	b.n	80047c8 <rs485_update_status_by_uart+0x118>
 80046c4:	009a      	lsls	r2, r3, #2
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <rs485_update_status_by_uart+0x134>)
 80046c8:	18d3      	adds	r3, r2, r3
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	469f      	mov	pc, r3
	case VALID_MODULE:
		rs485->status = rs485_check_CRC_module(uart1);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff ffa0 	bl	8004616 <rs485_check_CRC_module>
 80046d6:	0003      	movs	r3, r0
 80046d8:	001a      	movs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	721a      	strb	r2, [r3, #8]
		break;
 80046de:	e07c      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	case DATA_OK:
		rs485->cmd = uart1->rx_buffer[3];
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	78da      	ldrb	r2, [r3, #3]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	701a      	strb	r2, [r3, #0]
		uart1_send_str("DATA OK\r\n");
 80046e8:	4b3f      	ldr	r3, [pc, #252]	; (80047e8 <rs485_update_status_by_uart+0x138>)
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 faf8 	bl	8004ce0 <uart1_send_str>
		rs485->status = DONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2207      	movs	r2, #7
 80046f4:	721a      	strb	r2, [r3, #8]
		break;
 80046f6:	e070      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	case START_READING:
		rs485->status = WAITING;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2208      	movs	r2, #8
 80046fc:	721a      	strb	r2, [r3, #8]
		if (uart1_clean_by_timeout(uart1, "START_READING"))
 80046fe:	4a3b      	ldr	r2, [pc, #236]	; (80047ec <rs485_update_status_by_uart+0x13c>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	0011      	movs	r1, r2
 8004704:	0018      	movs	r0, r3
 8004706:	f000 f971 	bl	80049ec <uart1_clean_by_timeout>
 800470a:	1e03      	subs	r3, r0, #0
 800470c:	d064      	beq.n	80047d8 <rs485_update_status_by_uart+0x128>
			rs485->status = DONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2207      	movs	r2, #7
 8004712:	721a      	strb	r2, [r3, #8]
		break;
 8004714:	e060      	b.n	80047d8 <rs485_update_status_by_uart+0x128>
	case VALID_FRAME:
		rs485->status = rs485_check_valid_module(uart1);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	0018      	movs	r0, r3
 800471a:	f7ff ff9d 	bl	8004658 <rs485_check_valid_module>
 800471e:	0003      	movs	r3, r0
 8004720:	001a      	movs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	721a      	strb	r2, [r3, #8]
		break;
 8004726:	e058      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	case NOT_VALID_FRAME:
		HAL_Delay(50);
 8004728:	2032      	movs	r0, #50	; 0x32
 800472a:	f000 fbf7 	bl	8004f1c <HAL_Delay>
	    uart1_send_str("NOT VALID FRAME\r\n");
 800472e:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <rs485_update_status_by_uart+0x140>)
 8004730:	0018      	movs	r0, r3
 8004732:	f000 fad5 	bl	8004ce0 <uart1_send_str>
		uart1_clean_buffer(uart1);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	0018      	movs	r0, r3
 800473a:	f000 fb1b 	bl	8004d74 <uart1_clean_buffer>
		rs485->status = DONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2207      	movs	r2, #7
 8004742:	721a      	strb	r2, [r3, #8]
		break;
 8004744:	e049      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	case WRONG_MODULE_ID:
		uart1_send_str("WRONG MODULE ID\r\n");
 8004746:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <rs485_update_status_by_uart+0x144>)
 8004748:	0018      	movs	r0, r3
 800474a:	f000 fac9 	bl	8004ce0 <uart1_send_str>
		uart1_clean_buffer(uart1);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fb0f 	bl	8004d74 <uart1_clean_buffer>
		rs485->status = DONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2207      	movs	r2, #7
 800475a:	721a      	strb	r2, [r3, #8]
		break;
 800475c:	e03d      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	case WRONG_MODULE_FUNCTION:
		uart1_send_str("WRONG FUNCTION\r\n");
 800475e:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <rs485_update_status_by_uart+0x148>)
 8004760:	0018      	movs	r0, r3
 8004762:	f000 fabd 	bl	8004ce0 <uart1_send_str>
		uart1_clean_buffer(uart1);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	0018      	movs	r0, r3
 800476a:	f000 fb03 	bl	8004d74 <uart1_clean_buffer>
		rs485->status = DONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2207      	movs	r2, #7
 8004772:	721a      	strb	r2, [r3, #8]
		break;
 8004774:	e031      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	case CRC_ERROR:
		uart1_send_str("CRC ERROR\r\n");
 8004776:	4b21      	ldr	r3, [pc, #132]	; (80047fc <rs485_update_status_by_uart+0x14c>)
 8004778:	0018      	movs	r0, r3
 800477a:	f000 fab1 	bl	8004ce0 <uart1_send_str>
		uart1_clean_buffer(uart1);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	0018      	movs	r0, r3
 8004782:	f000 faf7 	bl	8004d74 <uart1_clean_buffer>
		rs485->status = DONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2207      	movs	r2, #7
 800478a:	721a      	strb	r2, [r3, #8]
		break;
 800478c:	e025      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	case WAITING:
		rs485->status = rs485_check_frame(rs485, uart1);
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	0011      	movs	r1, r2
 8004794:	0018      	movs	r0, r3
 8004796:	f7ff ff1b 	bl	80045d0 <rs485_check_frame>
 800479a:	0003      	movs	r3, r0
 800479c:	001a      	movs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	721a      	strb	r2, [r3, #8]
		uart1_clean_by_timeout(uart1, "WAITING");
 80047a2:	4a17      	ldr	r2, [pc, #92]	; (8004800 <rs485_update_status_by_uart+0x150>)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	0011      	movs	r1, r2
 80047a8:	0018      	movs	r0, r3
 80047aa:	f000 f91f 	bl	80049ec <uart1_clean_by_timeout>
		break;
 80047ae:	e014      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	case DONE:
		uart1_send_str("DONE\r\n");
 80047b0:	4b14      	ldr	r3, [pc, #80]	; (8004804 <rs485_update_status_by_uart+0x154>)
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 fa94 	bl	8004ce0 <uart1_send_str>
		uart1_clean_buffer(uart1);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 fada 	bl	8004d74 <uart1_clean_buffer>
		rs485->status = WAITING;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2208      	movs	r2, #8
 80047c4:	721a      	strb	r2, [r3, #8]
		break;
 80047c6:	e008      	b.n	80047da <rs485_update_status_by_uart+0x12a>
	default:
		rs485->status = DONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2207      	movs	r2, #7
 80047cc:	721a      	strb	r2, [r3, #8]
		uart1_clean_buffer(uart1);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 facf 	bl	8004d74 <uart1_clean_buffer>
		break;
 80047d6:	e000      	b.n	80047da <rs485_update_status_by_uart+0x12a>
		break;
 80047d8:	46c0      	nop			; (mov r8, r8)
	}
}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b002      	add	sp, #8
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	08006ff0 	.word	0x08006ff0
 80047e8:	08006ef0 	.word	0x08006ef0
 80047ec:	08006efc 	.word	0x08006efc
 80047f0:	08006f0c 	.word	0x08006f0c
 80047f4:	08006f20 	.word	0x08006f20
 80047f8:	08006f34 	.word	0x08006f34
 80047fc:	08006f48 	.word	0x08006f48
 8004800:	08006f54 	.word	0x08006f54
 8004804:	08006f5c 	.word	0x08006f5c

08004808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_MspInit+0x44>)
 8004810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004812:	4b0e      	ldr	r3, [pc, #56]	; (800484c <HAL_MspInit+0x44>)
 8004814:	2101      	movs	r1, #1
 8004816:	430a      	orrs	r2, r1
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_MspInit+0x44>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2201      	movs	r2, #1
 8004820:	4013      	ands	r3, r2
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_MspInit+0x44>)
 8004828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_MspInit+0x44>)
 800482c:	2180      	movs	r1, #128	; 0x80
 800482e:	0549      	lsls	r1, r1, #21
 8004830:	430a      	orrs	r2, r1
 8004832:	63da      	str	r2, [r3, #60]	; 0x3c
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_MspInit+0x44>)
 8004836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	055b      	lsls	r3, r3, #21
 800483c:	4013      	ands	r3, r2
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b002      	add	sp, #8
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	40021000 	.word	0x40021000

08004850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b08b      	sub	sp, #44	; 0x2c
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004858:	2414      	movs	r4, #20
 800485a:	193b      	adds	r3, r7, r4
 800485c:	0018      	movs	r0, r3
 800485e:	2314      	movs	r3, #20
 8004860:	001a      	movs	r2, r3
 8004862:	2100      	movs	r1, #0
 8004864:	f001 fe5a 	bl	800651c <memset>
  if(hspi->Instance==SPI2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a26      	ldr	r2, [pc, #152]	; (8004908 <HAL_SPI_MspInit+0xb8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d146      	bne.n	8004900 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004872:	4b26      	ldr	r3, [pc, #152]	; (800490c <HAL_SPI_MspInit+0xbc>)
 8004874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004876:	4b25      	ldr	r3, [pc, #148]	; (800490c <HAL_SPI_MspInit+0xbc>)
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	01c9      	lsls	r1, r1, #7
 800487c:	430a      	orrs	r2, r1
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <HAL_SPI_MspInit+0xbc>)
 8004882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	01db      	lsls	r3, r3, #7
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488e:	4b1f      	ldr	r3, [pc, #124]	; (800490c <HAL_SPI_MspInit+0xbc>)
 8004890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004892:	4b1e      	ldr	r3, [pc, #120]	; (800490c <HAL_SPI_MspInit+0xbc>)
 8004894:	2101      	movs	r1, #1
 8004896:	430a      	orrs	r2, r1
 8004898:	635a      	str	r2, [r3, #52]	; 0x34
 800489a:	4b1c      	ldr	r3, [pc, #112]	; (800490c <HAL_SPI_MspInit+0xbc>)
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	2201      	movs	r2, #1
 80048a0:	4013      	ands	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MAX_SCK_Pin;
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	2202      	movs	r2, #2
 80048b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	193b      	adds	r3, r7, r4
 80048b4:	2200      	movs	r2, #0
 80048b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b8:	193b      	adds	r3, r7, r4
 80048ba:	2200      	movs	r2, #0
 80048bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80048be:	193b      	adds	r3, r7, r4
 80048c0:	2200      	movs	r2, #0
 80048c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_SCK_GPIO_Port, &GPIO_InitStruct);
 80048c4:	193a      	adds	r2, r7, r4
 80048c6:	23a0      	movs	r3, #160	; 0xa0
 80048c8:	05db      	lsls	r3, r3, #23
 80048ca:	0011      	movs	r1, r2
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 fbfd 	bl	80050cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAX_DATA_Pin;
 80048d2:	0021      	movs	r1, r4
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	2210      	movs	r2, #16
 80048d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	2202      	movs	r2, #2
 80048de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	187b      	adds	r3, r7, r1
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e6:	187b      	adds	r3, r7, r1
 80048e8:	2200      	movs	r2, #0
 80048ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80048ec:	187b      	adds	r3, r7, r1
 80048ee:	2201      	movs	r2, #1
 80048f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_DATA_GPIO_Port, &GPIO_InitStruct);
 80048f2:	187a      	adds	r2, r7, r1
 80048f4:	23a0      	movs	r3, #160	; 0xa0
 80048f6:	05db      	lsls	r3, r3, #23
 80048f8:	0011      	movs	r1, r2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 fbe6 	bl	80050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b00b      	add	sp, #44	; 0x2c
 8004906:	bd90      	pop	{r4, r7, pc}
 8004908:	40003800 	.word	0x40003800
 800490c:	40021000 	.word	0x40021000

08004910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004914:	e7fe      	b.n	8004914 <NMI_Handler+0x4>

08004916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800491a:	e7fe      	b.n	800491a <HardFault_Handler+0x4>

0800491c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004934:	f000 fad6 	bl	8004ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <_sbrk+0x5c>)
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <_sbrk+0x60>)
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <_sbrk+0x64>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <_sbrk+0x64>)
 800495e:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <_sbrk+0x68>)
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <_sbrk+0x64>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	18d3      	adds	r3, r2, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d207      	bcs.n	8004980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004970:	f001 fdaa 	bl	80064c8 <__errno>
 8004974:	0003      	movs	r3, r0
 8004976:	220c      	movs	r2, #12
 8004978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800497a:	2301      	movs	r3, #1
 800497c:	425b      	negs	r3, r3
 800497e:	e009      	b.n	8004994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004980:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <_sbrk+0x64>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004986:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <_sbrk+0x64>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	18d2      	adds	r2, r2, r3
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <_sbrk+0x64>)
 8004990:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004992:	68fb      	ldr	r3, [r7, #12]
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b006      	add	sp, #24
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20002000 	.word	0x20002000
 80049a0:	00000400 	.word	0x00000400
 80049a4:	20000100 	.word	0x20000100
 80049a8:	20000118 	.word	0x20000118

080049ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	0002      	movs	r2, r0
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049c4:	1dfb      	adds	r3, r7, #7
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b7f      	cmp	r3, #127	; 0x7f
 80049ca:	d809      	bhi.n	80049e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049cc:	1dfb      	adds	r3, r7, #7
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	001a      	movs	r2, r3
 80049d2:	231f      	movs	r3, #31
 80049d4:	401a      	ands	r2, r3
 80049d6:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <__NVIC_EnableIRQ+0x30>)
 80049d8:	2101      	movs	r1, #1
 80049da:	4091      	lsls	r1, r2
 80049dc:	000a      	movs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	e000e100 	.word	0xe000e100

080049ec <uart1_clean_by_timeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  uart1_clean_by_timeout(UART1_t* uart1,const char* str){
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 80049f6:	f000 fa87 	bl	8004f08 <HAL_GetTick>
 80049fa:	0002      	movs	r2, r0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2180      	movs	r1, #128	; 0x80
 8004a00:	585b      	ldr	r3, [r3, r1]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	4a0f      	ldr	r2, [pc, #60]	; (8004a44 <uart1_clean_by_timeout+0x58>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d917      	bls.n	8004a3a <uart1_clean_by_timeout+0x4e>
			uart1_send_str((char*)str);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 f967 	bl	8004ce0 <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <uart1_clean_by_timeout+0x5c>)
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 f963 	bl	8004ce0 <uart1_send_str>
			if(strlen(str)>0)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <uart1_clean_by_timeout+0x3e>
				uart1_clean_buffer(uart1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 f9a5 	bl	8004d74 <uart1_clean_buffer>
			uart1->timeout = HAL_GetTick();
 8004a2a:	f000 fa6d 	bl	8004f08 <HAL_GetTick>
 8004a2e:	0002      	movs	r2, r0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	505a      	str	r2, [r3, r1]
			return 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <uart1_clean_by_timeout+0x50>
		}
		return 0;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b002      	add	sp, #8
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	00001388 	.word	0x00001388
 8004a48:	08006f64 	.word	0x08006f64

08004a4c <uart1_gpio_init>:

void uart1_gpio_init() {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10    ------> USART1_RX **/

	/* PA10 alternate mode */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 8004a50:	23a0      	movs	r3, #160	; 0xa0
 8004a52:	05db      	lsls	r3, r3, #23
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	23a0      	movs	r3, #160	; 0xa0
 8004a58:	05db      	lsls	r3, r3, #23
 8004a5a:	4930      	ldr	r1, [pc, #192]	; (8004b1c <uart1_gpio_init+0xd0>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8004a60:	23a0      	movs	r3, #160	; 0xa0
 8004a62:	05db      	lsls	r3, r3, #23
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	23a0      	movs	r3, #160	; 0xa0
 8004a68:	05db      	lsls	r3, r3, #23
 8004a6a:	2180      	movs	r1, #128	; 0x80
 8004a6c:	0389      	lsls	r1, r1, #14
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 8004a72:	23a0      	movs	r3, #160	; 0xa0
 8004a74:	05db      	lsls	r3, r3, #23
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	23a0      	movs	r3, #160	; 0xa0
 8004a7a:	05db      	lsls	r3, r3, #23
 8004a7c:	4928      	ldr	r1, [pc, #160]	; (8004b20 <uart1_gpio_init+0xd4>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 8004a82:	23a0      	movs	r3, #160	; 0xa0
 8004a84:	05db      	lsls	r3, r3, #23
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	23a0      	movs	r3, #160	; 0xa0
 8004a8a:	05db      	lsls	r3, r3, #23
 8004a8c:	2180      	movs	r1, #128	; 0x80
 8004a8e:	0309      	lsls	r1, r1, #12
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 8004a94:	23a0      	movs	r3, #160	; 0xa0
 8004a96:	05db      	lsls	r3, r3, #23
 8004a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9a:	23a0      	movs	r3, #160	; 0xa0
 8004a9c:	05db      	lsls	r3, r3, #23
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	0049      	lsls	r1, r1, #1
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 8004aa6:	23a0      	movs	r3, #160	; 0xa0
 8004aa8:	05db      	lsls	r3, r3, #23
 8004aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aac:	23a0      	movs	r3, #160	; 0xa0
 8004aae:	05db      	lsls	r3, r3, #23
 8004ab0:	491c      	ldr	r1, [pc, #112]	; (8004b24 <uart1_gpio_init+0xd8>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 8004ab6:	23a0      	movs	r3, #160	; 0xa0
 8004ab8:	05db      	lsls	r3, r3, #23
 8004aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004abc:	23a0      	movs	r3, #160	; 0xa0
 8004abe:	05db      	lsls	r3, r3, #23
 8004ac0:	4919      	ldr	r1, [pc, #100]	; (8004b28 <uart1_gpio_init+0xdc>)
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 8004ac6:	23a0      	movs	r3, #160	; 0xa0
 8004ac8:	05db      	lsls	r3, r3, #23
 8004aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004acc:	23a0      	movs	r3, #160	; 0xa0
 8004ace:	05db      	lsls	r3, r3, #23
 8004ad0:	4916      	ldr	r1, [pc, #88]	; (8004b2c <uart1_gpio_init+0xe0>)
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 8004ad6:	23a0      	movs	r3, #160	; 0xa0
 8004ad8:	05db      	lsls	r3, r3, #23
 8004ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004adc:	23a0      	movs	r3, #160	; 0xa0
 8004ade:	05db      	lsls	r3, r3, #23
 8004ae0:	2110      	movs	r1, #16
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 8004ae6:	23a0      	movs	r3, #160	; 0xa0
 8004ae8:	05db      	lsls	r3, r3, #23
 8004aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aec:	23a0      	movs	r3, #160	; 0xa0
 8004aee:	05db      	lsls	r3, r3, #23
 8004af0:	2120      	movs	r1, #32
 8004af2:	438a      	bics	r2, r1
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 8004af6:	23a0      	movs	r3, #160	; 0xa0
 8004af8:	05db      	lsls	r3, r3, #23
 8004afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004afc:	23a0      	movs	r3, #160	; 0xa0
 8004afe:	05db      	lsls	r3, r3, #23
 8004b00:	2140      	movs	r1, #64	; 0x40
 8004b02:	438a      	bics	r2, r1
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 8004b06:	23a0      	movs	r3, #160	; 0xa0
 8004b08:	05db      	lsls	r3, r3, #23
 8004b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0c:	23a0      	movs	r3, #160	; 0xa0
 8004b0e:	05db      	lsls	r3, r3, #23
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	438a      	bics	r2, r1
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	ffefffff 	.word	0xffefffff
 8004b20:	fffbffff 	.word	0xfffbffff
 8004b24:	fffffdff 	.word	0xfffffdff
 8004b28:	fffffbff 	.word	0xfffffbff
 8004b2c:	fffff7ff 	.word	0xfffff7ff

08004b30 <uart1_init>:

void uart1_init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8004b40:	f7ff ff84 	bl	8004a4c <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 8004b44:	4b1f      	ldr	r3, [pc, #124]	; (8004bc4 <uart1_init+0x94>)
 8004b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <uart1_init+0x94>)
 8004b4a:	2180      	movs	r1, #128	; 0x80
 8004b4c:	01c9      	lsls	r1, r1, #7
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <uart1_init+0x98>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10b      	bne.n	8004b72 <uart1_init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <uart1_init+0x94>)
 8004b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b5e:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <uart1_init+0x94>)
 8004b60:	2101      	movs	r1, #1
 8004b62:	438a      	bics	r2, r1
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 8004b66:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <uart1_init+0x94>)
 8004b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <uart1_init+0x94>)
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7fb facd 	bl	8000114 <__udivsi3>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <uart1_init+0x9c>)
 8004b84:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <uart1_init+0x9c>)
 8004b88:	220c      	movs	r2, #12
 8004b8a:	601a      	str	r2, [r3, #0]
	u->rx_count = 0;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	227d      	movs	r2, #125	; 0x7d
 8004b90:	2100      	movs	r1, #0
 8004b92:	5499      	strb	r1, [r3, r2]

	uart1_clean_buffer(u);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 f8ec 	bl	8004d74 <uart1_clean_buffer>

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <uart1_init+0x9c>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <uart1_init+0x9c>)
 8004ba2:	2120      	movs	r1, #32
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8004ba8:	201b      	movs	r0, #27
 8004baa:	f7ff ff05 	bl	80049b8 <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <uart1_init+0x9c>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <uart1_init+0x9c>)
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b006      	add	sp, #24
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	40013800 	.word	0x40013800

08004bd0 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <uart1_write+0x50>)
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <uart1_write+0x50>)
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	0089      	lsls	r1, r1, #2
 8004be6:	430a      	orrs	r2, r1
 8004be8:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <uart1_write+0x54>)
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	2280      	movs	r2, #128	; 0x80
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d0fa      	beq.n	8004bec <uart1_write+0x1c>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <uart1_write+0x54>)
 8004bf8:	1dfa      	adds	r2, r7, #7
 8004bfa:	7812      	ldrb	r2, [r2, #0]
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <uart1_write+0x54>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	2240      	movs	r2, #64	; 0x40
 8004c06:	4013      	ands	r3, r2
 8004c08:	d0fa      	beq.n	8004c00 <uart1_write+0x30>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <uart1_write+0x50>)
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <uart1_write+0x50>)
 8004c10:	4905      	ldr	r1, [pc, #20]	; (8004c28 <uart1_write+0x58>)
 8004c12:	400a      	ands	r2, r1
 8004c14:	615a      	str	r2, [r3, #20]
}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b002      	add	sp, #8
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	50000400 	.word	0x50000400
 8004c24:	40013800 	.word	0x40013800
 8004c28:	fffffdff 	.word	0xfffffdff

08004c2c <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 8004c32:	4b18      	ldr	r3, [pc, #96]	; (8004c94 <uart1_1byte_read+0x68>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2208      	movs	r2, #8
 8004c38:	401a      	ands	r2, r3
 8004c3a:	1dfb      	adds	r3, r7, #7
 8004c3c:	1e51      	subs	r1, r2, #1
 8004c3e:	418a      	sbcs	r2, r1
 8004c40:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 8004c42:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <uart1_1byte_read+0x68>)
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	2220      	movs	r2, #32
 8004c48:	401a      	ands	r2, r3
 8004c4a:	1dbb      	adds	r3, r7, #6
 8004c4c:	1e51      	subs	r1, r2, #1
 8004c4e:	418a      	sbcs	r2, r1
 8004c50:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 8004c52:	1dbb      	adds	r3, r7, #6
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d103      	bne.n	8004c62 <uart1_1byte_read+0x36>
 8004c5a:	1dfb      	adds	r3, r7, #7
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <uart1_1byte_read+0x5c>
		if (override)
 8004c62:	1dfb      	adds	r3, r7, #7
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <uart1_1byte_read+0x68>)
 8004c6c:	6a1a      	ldr	r2, [r3, #32]
 8004c6e:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <uart1_1byte_read+0x68>)
 8004c70:	2108      	movs	r1, #8
 8004c72:	430a      	orrs	r2, r1
 8004c74:	621a      	str	r2, [r3, #32]
		data = USART1->RDR;
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <uart1_1byte_read+0x68>)
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	1d7b      	adds	r3, r7, #5
 8004c7e:	701a      	strb	r2, [r3, #0]
		return data;
 8004c80:	1d7b      	adds	r3, r7, #5
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e000      	b.n	8004c8a <uart1_1byte_read+0x5e>
	} else
		return '\0';
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	40013800 	.word	0x40013800

08004c98 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	227d      	movs	r2, #125	; 0x7d
 8004ca4:	5c9b      	ldrb	r3, [r3, r2]
 8004ca6:	2b18      	cmp	r3, #24
 8004ca8:	d907      	bls.n	8004cba <uart1_read_to_frame+0x22>
		uart1_clean_buffer(u);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f000 f861 	bl	8004d74 <uart1_clean_buffer>
		u->rx_count = 0;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	227d      	movs	r2, #125	; 0x7d
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	5499      	strb	r1, [r3, r2]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	227d      	movs	r2, #125	; 0x7d
 8004cbe:	5c9b      	ldrb	r3, [r3, r2]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	b2d0      	uxtb	r0, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	217d      	movs	r1, #125	; 0x7d
 8004cc8:	5450      	strb	r0, [r2, r1]
 8004cca:	001c      	movs	r4, r3
 8004ccc:	f7ff ffae 	bl	8004c2c <uart1_1byte_read>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	001a      	movs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	551a      	strb	r2, [r3, r4]
}
 8004cd8:	46c0      	nop			; (mov r8, r8)
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b003      	add	sp, #12
 8004cde:	bd90      	pop	{r4, r7, pc}

08004ce0 <uart1_send_str>:

void uart1_send_str(char *str) {
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8004ce8:	230f      	movs	r3, #15
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e00d      	b.n	8004d0e <uart1_send_str+0x2e>
		uart1_write(str[i]);
 8004cf2:	240f      	movs	r4, #15
 8004cf4:	193b      	adds	r3, r7, r4
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	18d3      	adds	r3, r2, r3
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7ff ff66 	bl	8004bd0 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8004d04:	193b      	adds	r3, r7, r4
 8004d06:	781a      	ldrb	r2, [r3, #0]
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	3201      	adds	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	230f      	movs	r3, #15
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	18d3      	adds	r3, r2, r3
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e9      	bne.n	8004cf2 <uart1_send_str+0x12>
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b005      	add	sp, #20
 8004d26:	bd90      	pop	{r4, r7, pc}

08004d28 <uart1_send_frame>:

void uart1_send_frame(char *str, uint8_t len) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	000a      	movs	r2, r1
 8004d32:	1cfb      	adds	r3, r7, #3
 8004d34:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 8004d36:	1cfb      	adds	r3, r7, #3
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d016      	beq.n	8004d6c <uart1_send_frame+0x44>
		for (int i = 0; i < len; i++){
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e00e      	b.n	8004d62 <uart1_send_frame+0x3a>
			uart1_write(str[i]);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	18d3      	adds	r3, r2, r3
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7ff ff3f 	bl	8004bd0 <uart1_write>
			str[i] = (char) '\0';
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	18d3      	adds	r3, r2, r3
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	1cfb      	adds	r3, r7, #3
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	dbeb      	blt.n	8004d44 <uart1_send_frame+0x1c>
		}
	}
}
 8004d6c:	46c0      	nop			; (mov r8, r8)
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b004      	add	sp, #16
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	227d      	movs	r2, #125	; 0x7d
 8004d80:	2100      	movs	r1, #0
 8004d82:	5499      	strb	r1, [r3, r2]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e010      	b.n	8004dac <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b18      	cmp	r3, #24
 8004d8e:	dc04      	bgt.n	8004d9a <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	18d3      	adds	r3, r2, r3
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	18d3      	adds	r3, r2, r3
 8004da0:	3319      	adds	r3, #25
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b63      	cmp	r3, #99	; 0x63
 8004db0:	ddeb      	ble.n	8004d8a <uart1_clean_buffer+0x16>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b004      	add	sp, #16
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004dbc:	480d      	ldr	r0, [pc, #52]	; (8004df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004dbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004dc0:	f7ff fdf4 	bl	80049ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004dc4:	480c      	ldr	r0, [pc, #48]	; (8004df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004dc6:	490d      	ldr	r1, [pc, #52]	; (8004dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004dc8:	4a0d      	ldr	r2, [pc, #52]	; (8004e00 <LoopForever+0xe>)
  movs r3, #0
 8004dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004dcc:	e002      	b.n	8004dd4 <LoopCopyDataInit>

08004dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dd2:	3304      	adds	r3, #4

08004dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004dd8:	d3f9      	bcc.n	8004dce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ddc:	4c0a      	ldr	r4, [pc, #40]	; (8004e08 <LoopForever+0x16>)
  movs r3, #0
 8004dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004de0:	e001      	b.n	8004de6 <LoopFillZerobss>

08004de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004de4:	3204      	adds	r2, #4

08004de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004de8:	d3fb      	bcc.n	8004de2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004dea:	f001 fb73 	bl	80064d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004dee:	f7fd fffd 	bl	8002dec <main>

08004df2 <LoopForever>:

LoopForever:
  b LoopForever
 8004df2:	e7fe      	b.n	8004df2 <LoopForever>
  ldr   r0, =_estack
 8004df4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004e00:	0800709c 	.word	0x0800709c
  ldr r2, =_sbss
 8004e04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004e08:	20000118 	.word	0x20000118

08004e0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e0c:	e7fe      	b.n	8004e0c <ADC1_IRQHandler>
	...

08004e10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e16:	1dfb      	adds	r3, r7, #7
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_Init+0x3c>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <HAL_Init+0x3c>)
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	0049      	lsls	r1, r1, #1
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e2a:	2003      	movs	r0, #3
 8004e2c:	f000 f810 	bl	8004e50 <HAL_InitTick>
 8004e30:	1e03      	subs	r3, r0, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004e34:	1dfb      	adds	r3, r7, #7
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e001      	b.n	8004e40 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004e3c:	f7ff fce4 	bl	8004808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e40:	1dfb      	adds	r3, r7, #7
 8004e42:	781b      	ldrb	r3, [r3, #0]
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40022000 	.word	0x40022000

08004e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004e58:	230f      	movs	r3, #15
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004e60:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <HAL_InitTick+0x88>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d02b      	beq.n	8004ec0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <HAL_InitTick+0x8c>)
 8004e6a:	681c      	ldr	r4, [r3, #0]
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <HAL_InitTick+0x88>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	0019      	movs	r1, r3
 8004e72:	23fa      	movs	r3, #250	; 0xfa
 8004e74:	0098      	lsls	r0, r3, #2
 8004e76:	f7fb f94d 	bl	8000114 <__udivsi3>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	0020      	movs	r0, r4
 8004e80:	f7fb f948 	bl	8000114 <__udivsi3>
 8004e84:	0003      	movs	r3, r0
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 f913 	bl	80050b2 <HAL_SYSTICK_Config>
 8004e8c:	1e03      	subs	r3, r0, #0
 8004e8e:	d112      	bne.n	8004eb6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d80a      	bhi.n	8004eac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	2301      	movs	r3, #1
 8004e9a:	425b      	negs	r3, r3
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 f8f2 	bl	8005088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <HAL_InitTick+0x90>)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e00d      	b.n	8004ec8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004eac:	230f      	movs	r3, #15
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e008      	b.n	8004ec8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004eb6:	230f      	movs	r3, #15
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e003      	b.n	8004ec8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004ec8:	230f      	movs	r3, #15
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	781b      	ldrb	r3, [r3, #0]
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b005      	add	sp, #20
 8004ed4:	bd90      	pop	{r4, r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	20000008 	.word	0x20000008
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	20000004 	.word	0x20000004

08004ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_IncTick+0x1c>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	001a      	movs	r2, r3
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_IncTick+0x20>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	18d2      	adds	r2, r2, r3
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <HAL_IncTick+0x20>)
 8004ef6:	601a      	str	r2, [r3, #0]
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	20000008 	.word	0x20000008
 8004f04:	20000104 	.word	0x20000104

08004f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f0c:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <HAL_GetTick+0x10>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	20000104 	.word	0x20000104

08004f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3301      	adds	r3, #1
 8004f34:	d005      	beq.n	8004f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <HAL_Delay+0x44>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	189b      	adds	r3, r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	f7ff ffe0 	bl	8004f08 <HAL_GetTick>
 8004f48:	0002      	movs	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d8f7      	bhi.n	8004f44 <HAL_Delay+0x28>
  {
  }
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	20000008 	.word	0x20000008

08004f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	1dfb      	adds	r3, r7, #7
 8004f70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f72:	1dfb      	adds	r3, r7, #7
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b7f      	cmp	r3, #127	; 0x7f
 8004f78:	d828      	bhi.n	8004fcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f7a:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <__NVIC_SetPriority+0xd4>)
 8004f7c:	1dfb      	adds	r3, r7, #7
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	b25b      	sxtb	r3, r3
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	33c0      	adds	r3, #192	; 0xc0
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	589b      	ldr	r3, [r3, r2]
 8004f8a:	1dfa      	adds	r2, r7, #7
 8004f8c:	7812      	ldrb	r2, [r2, #0]
 8004f8e:	0011      	movs	r1, r2
 8004f90:	2203      	movs	r2, #3
 8004f92:	400a      	ands	r2, r1
 8004f94:	00d2      	lsls	r2, r2, #3
 8004f96:	21ff      	movs	r1, #255	; 0xff
 8004f98:	4091      	lsls	r1, r2
 8004f9a:	000a      	movs	r2, r1
 8004f9c:	43d2      	mvns	r2, r2
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	22ff      	movs	r2, #255	; 0xff
 8004fa8:	401a      	ands	r2, r3
 8004faa:	1dfb      	adds	r3, r7, #7
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	0018      	movs	r0, r3
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	4003      	ands	r3, r0
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fb8:	481f      	ldr	r0, [pc, #124]	; (8005038 <__NVIC_SetPriority+0xd4>)
 8004fba:	1dfb      	adds	r3, r7, #7
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b25b      	sxtb	r3, r3
 8004fc0:	089b      	lsrs	r3, r3, #2
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	33c0      	adds	r3, #192	; 0xc0
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004fca:	e031      	b.n	8005030 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <__NVIC_SetPriority+0xd8>)
 8004fce:	1dfb      	adds	r3, r7, #7
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	230f      	movs	r3, #15
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	3b08      	subs	r3, #8
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	3306      	adds	r3, #6
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	1dfa      	adds	r2, r7, #7
 8004fe8:	7812      	ldrb	r2, [r2, #0]
 8004fea:	0011      	movs	r1, r2
 8004fec:	2203      	movs	r2, #3
 8004fee:	400a      	ands	r2, r1
 8004ff0:	00d2      	lsls	r2, r2, #3
 8004ff2:	21ff      	movs	r1, #255	; 0xff
 8004ff4:	4091      	lsls	r1, r2
 8004ff6:	000a      	movs	r2, r1
 8004ff8:	43d2      	mvns	r2, r2
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	019b      	lsls	r3, r3, #6
 8005002:	22ff      	movs	r2, #255	; 0xff
 8005004:	401a      	ands	r2, r3
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	0018      	movs	r0, r3
 800500c:	2303      	movs	r3, #3
 800500e:	4003      	ands	r3, r0
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005014:	4809      	ldr	r0, [pc, #36]	; (800503c <__NVIC_SetPriority+0xd8>)
 8005016:	1dfb      	adds	r3, r7, #7
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	001c      	movs	r4, r3
 800501c:	230f      	movs	r3, #15
 800501e:	4023      	ands	r3, r4
 8005020:	3b08      	subs	r3, #8
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	430a      	orrs	r2, r1
 8005026:	3306      	adds	r3, #6
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	18c3      	adds	r3, r0, r3
 800502c:	3304      	adds	r3, #4
 800502e:	601a      	str	r2, [r3, #0]
}
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	46bd      	mov	sp, r7
 8005034:	b003      	add	sp, #12
 8005036:	bd90      	pop	{r4, r7, pc}
 8005038:	e000e100 	.word	0xe000e100
 800503c:	e000ed00 	.word	0xe000ed00

08005040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	045b      	lsls	r3, r3, #17
 8005050:	429a      	cmp	r2, r3
 8005052:	d301      	bcc.n	8005058 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005054:	2301      	movs	r3, #1
 8005056:	e010      	b.n	800507a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <SysTick_Config+0x44>)
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	3a01      	subs	r2, #1
 800505e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005060:	2301      	movs	r3, #1
 8005062:	425b      	negs	r3, r3
 8005064:	2103      	movs	r1, #3
 8005066:	0018      	movs	r0, r3
 8005068:	f7ff ff7c 	bl	8004f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <SysTick_Config+0x44>)
 800506e:	2200      	movs	r2, #0
 8005070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005072:	4b04      	ldr	r3, [pc, #16]	; (8005084 <SysTick_Config+0x44>)
 8005074:	2207      	movs	r2, #7
 8005076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005078:	2300      	movs	r3, #0
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b002      	add	sp, #8
 8005080:	bd80      	pop	{r7, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	e000e010 	.word	0xe000e010

08005088 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	210f      	movs	r1, #15
 8005094:	187b      	adds	r3, r7, r1
 8005096:	1c02      	adds	r2, r0, #0
 8005098:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	187b      	adds	r3, r7, r1
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b25b      	sxtb	r3, r3
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff ff5d 	bl	8004f64 <__NVIC_SetPriority>
}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b004      	add	sp, #16
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff ffbf 	bl	8005040 <SysTick_Config>
 80050c2:	0003      	movs	r3, r0
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b002      	add	sp, #8
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050da:	e147      	b.n	800536c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2101      	movs	r1, #1
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4091      	lsls	r1, r2
 80050e6:	000a      	movs	r2, r1
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d100      	bne.n	80050f4 <HAL_GPIO_Init+0x28>
 80050f2:	e138      	b.n	8005366 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2203      	movs	r2, #3
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d005      	beq.n	800510c <HAL_GPIO_Init+0x40>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2203      	movs	r2, #3
 8005106:	4013      	ands	r3, r2
 8005108:	2b02      	cmp	r3, #2
 800510a:	d130      	bne.n	800516e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	2203      	movs	r2, #3
 8005118:	409a      	lsls	r2, r3
 800511a:	0013      	movs	r3, r2
 800511c:	43da      	mvns	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4013      	ands	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	409a      	lsls	r2, r3
 800512e:	0013      	movs	r3, r2
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005142:	2201      	movs	r2, #1
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	409a      	lsls	r2, r3
 8005148:	0013      	movs	r3, r2
 800514a:	43da      	mvns	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	2201      	movs	r2, #1
 800515a:	401a      	ands	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	409a      	lsls	r2, r3
 8005160:	0013      	movs	r3, r2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2203      	movs	r2, #3
 8005174:	4013      	ands	r3, r2
 8005176:	2b03      	cmp	r3, #3
 8005178:	d017      	beq.n	80051aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	2203      	movs	r2, #3
 8005186:	409a      	lsls	r2, r3
 8005188:	0013      	movs	r3, r2
 800518a:	43da      	mvns	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4013      	ands	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	409a      	lsls	r2, r3
 800519c:	0013      	movs	r3, r2
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2203      	movs	r2, #3
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d123      	bne.n	80051fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	08da      	lsrs	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3208      	adds	r2, #8
 80051be:	0092      	lsls	r2, r2, #2
 80051c0:	58d3      	ldr	r3, [r2, r3]
 80051c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2207      	movs	r2, #7
 80051c8:	4013      	ands	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	220f      	movs	r2, #15
 80051ce:	409a      	lsls	r2, r3
 80051d0:	0013      	movs	r3, r2
 80051d2:	43da      	mvns	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4013      	ands	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2107      	movs	r1, #7
 80051e2:	400b      	ands	r3, r1
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	409a      	lsls	r2, r3
 80051e8:	0013      	movs	r3, r2
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	08da      	lsrs	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3208      	adds	r2, #8
 80051f8:	0092      	lsls	r2, r2, #2
 80051fa:	6939      	ldr	r1, [r7, #16]
 80051fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	2203      	movs	r2, #3
 800520a:	409a      	lsls	r2, r3
 800520c:	0013      	movs	r3, r2
 800520e:	43da      	mvns	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4013      	ands	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2203      	movs	r2, #3
 800521c:	401a      	ands	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	409a      	lsls	r2, r3
 8005224:	0013      	movs	r3, r2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	23c0      	movs	r3, #192	; 0xc0
 8005238:	029b      	lsls	r3, r3, #10
 800523a:	4013      	ands	r3, r2
 800523c:	d100      	bne.n	8005240 <HAL_GPIO_Init+0x174>
 800523e:	e092      	b.n	8005366 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005240:	4a50      	ldr	r2, [pc, #320]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	089b      	lsrs	r3, r3, #2
 8005246:	3318      	adds	r3, #24
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	589b      	ldr	r3, [r3, r2]
 800524c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2203      	movs	r2, #3
 8005252:	4013      	ands	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	220f      	movs	r2, #15
 8005258:	409a      	lsls	r2, r3
 800525a:	0013      	movs	r3, r2
 800525c:	43da      	mvns	r2, r3
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4013      	ands	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	23a0      	movs	r3, #160	; 0xa0
 8005268:	05db      	lsls	r3, r3, #23
 800526a:	429a      	cmp	r2, r3
 800526c:	d013      	beq.n	8005296 <HAL_GPIO_Init+0x1ca>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a45      	ldr	r2, [pc, #276]	; (8005388 <HAL_GPIO_Init+0x2bc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00d      	beq.n	8005292 <HAL_GPIO_Init+0x1c6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a44      	ldr	r2, [pc, #272]	; (800538c <HAL_GPIO_Init+0x2c0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <HAL_GPIO_Init+0x1c2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a43      	ldr	r2, [pc, #268]	; (8005390 <HAL_GPIO_Init+0x2c4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d101      	bne.n	800528a <HAL_GPIO_Init+0x1be>
 8005286:	2303      	movs	r3, #3
 8005288:	e006      	b.n	8005298 <HAL_GPIO_Init+0x1cc>
 800528a:	2305      	movs	r3, #5
 800528c:	e004      	b.n	8005298 <HAL_GPIO_Init+0x1cc>
 800528e:	2302      	movs	r3, #2
 8005290:	e002      	b.n	8005298 <HAL_GPIO_Init+0x1cc>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_GPIO_Init+0x1cc>
 8005296:	2300      	movs	r3, #0
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	2103      	movs	r1, #3
 800529c:	400a      	ands	r2, r1
 800529e:	00d2      	lsls	r2, r2, #3
 80052a0:	4093      	lsls	r3, r2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80052a8:	4936      	ldr	r1, [pc, #216]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	3318      	adds	r3, #24
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052b6:	4b33      	ldr	r3, [pc, #204]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43da      	mvns	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	035b      	lsls	r3, r3, #13
 80052ce:	4013      	ands	r3, r2
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80052e0:	4b28      	ldr	r3, [pc, #160]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	43da      	mvns	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	039b      	lsls	r3, r3, #14
 80052f8:	4013      	ands	r3, r2
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005304:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800530a:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 800530c:	2384      	movs	r3, #132	; 0x84
 800530e:	58d3      	ldr	r3, [r2, r3]
 8005310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	43da      	mvns	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	029b      	lsls	r3, r3, #10
 8005324:	4013      	ands	r3, r2
 8005326:	d003      	beq.n	8005330 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005330:	4914      	ldr	r1, [pc, #80]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 8005332:	2284      	movs	r2, #132	; 0x84
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005338:	4a12      	ldr	r2, [pc, #72]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	58d3      	ldr	r3, [r2, r3]
 800533e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	43da      	mvns	r2, r3
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4013      	ands	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	025b      	lsls	r3, r3, #9
 8005352:	4013      	ands	r3, r2
 8005354:	d003      	beq.n	800535e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800535e:	4909      	ldr	r1, [pc, #36]	; (8005384 <HAL_GPIO_Init+0x2b8>)
 8005360:	2280      	movs	r2, #128	; 0x80
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	3301      	adds	r3, #1
 800536a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	40da      	lsrs	r2, r3
 8005374:	1e13      	subs	r3, r2, #0
 8005376:	d000      	beq.n	800537a <HAL_GPIO_Init+0x2ae>
 8005378:	e6b0      	b.n	80050dc <HAL_GPIO_Init+0x10>
  }
}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	46c0      	nop			; (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b006      	add	sp, #24
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021800 	.word	0x40021800
 8005388:	50000400 	.word	0x50000400
 800538c:	50000800 	.word	0x50000800
 8005390:	50000c00 	.word	0x50000c00

08005394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	000a      	movs	r2, r1
 800539e:	1cbb      	adds	r3, r7, #2
 80053a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	1cba      	adds	r2, r7, #2
 80053a8:	8812      	ldrh	r2, [r2, #0]
 80053aa:	4013      	ands	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80053ae:	230f      	movs	r3, #15
 80053b0:	18fb      	adds	r3, r7, r3
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e003      	b.n	80053c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053b8:	230f      	movs	r3, #15
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80053c0:	230f      	movs	r3, #15
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	781b      	ldrb	r3, [r3, #0]
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b004      	add	sp, #16
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	0008      	movs	r0, r1
 80053d8:	0011      	movs	r1, r2
 80053da:	1cbb      	adds	r3, r7, #2
 80053dc:	1c02      	adds	r2, r0, #0
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	1c7b      	adds	r3, r7, #1
 80053e2:	1c0a      	adds	r2, r1, #0
 80053e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053e6:	1c7b      	adds	r3, r7, #1
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053ee:	1cbb      	adds	r3, r7, #2
 80053f0:	881a      	ldrh	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053f6:	e003      	b.n	8005400 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053f8:	1cbb      	adds	r3, r7, #2
 80053fa:	881a      	ldrh	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b002      	add	sp, #8
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a19      	ldr	r2, [pc, #100]	; (800547c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005416:	4013      	ands	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	4b17      	ldr	r3, [pc, #92]	; (8005478 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	429a      	cmp	r2, r3
 800542a:	d11f      	bne.n	800546c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800542c:	4b14      	ldr	r3, [pc, #80]	; (8005480 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	0013      	movs	r3, r2
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	189b      	adds	r3, r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4912      	ldr	r1, [pc, #72]	; (8005484 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800543a:	0018      	movs	r0, r3
 800543c:	f7fa fe6a 	bl	8000114 <__udivsi3>
 8005440:	0003      	movs	r3, r0
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005446:	e008      	b.n	800545a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3b01      	subs	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e001      	b.n	800545a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e009      	b.n	800546e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	401a      	ands	r2, r3
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	429a      	cmp	r2, r3
 800546a:	d0ed      	beq.n	8005448 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	40007000 	.word	0x40007000
 800547c:	fffff9ff 	.word	0xfffff9ff
 8005480:	20000000 	.word	0x20000000
 8005484:	000f4240 	.word	0x000f4240

08005488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e2f3      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	4013      	ands	r3, r2
 80054a2:	d100      	bne.n	80054a6 <HAL_RCC_OscConfig+0x1e>
 80054a4:	e07c      	b.n	80055a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054a6:	4bc3      	ldr	r3, [pc, #780]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2238      	movs	r2, #56	; 0x38
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b0:	4bc0      	ldr	r3, [pc, #768]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	2203      	movs	r2, #3
 80054b6:	4013      	ands	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d102      	bne.n	80054c6 <HAL_RCC_OscConfig+0x3e>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d002      	beq.n	80054cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d10b      	bne.n	80054e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054cc:	4bb9      	ldr	r3, [pc, #740]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	029b      	lsls	r3, r3, #10
 80054d4:	4013      	ands	r3, r2
 80054d6:	d062      	beq.n	800559e <HAL_RCC_OscConfig+0x116>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d15e      	bne.n	800559e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e2ce      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	025b      	lsls	r3, r3, #9
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_OscConfig+0x78>
 80054f0:	4bb0      	ldr	r3, [pc, #704]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4baf      	ldr	r3, [pc, #700]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	0249      	lsls	r1, r1, #9
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e020      	b.n	8005542 <HAL_RCC_OscConfig+0xba>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	23a0      	movs	r3, #160	; 0xa0
 8005506:	02db      	lsls	r3, r3, #11
 8005508:	429a      	cmp	r2, r3
 800550a:	d10e      	bne.n	800552a <HAL_RCC_OscConfig+0xa2>
 800550c:	4ba9      	ldr	r3, [pc, #676]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4ba8      	ldr	r3, [pc, #672]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	02c9      	lsls	r1, r1, #11
 8005516:	430a      	orrs	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	4ba6      	ldr	r3, [pc, #664]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4ba5      	ldr	r3, [pc, #660]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	0249      	lsls	r1, r1, #9
 8005524:	430a      	orrs	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	e00b      	b.n	8005542 <HAL_RCC_OscConfig+0xba>
 800552a:	4ba2      	ldr	r3, [pc, #648]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4ba1      	ldr	r3, [pc, #644]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005530:	49a1      	ldr	r1, [pc, #644]	; (80057b8 <HAL_RCC_OscConfig+0x330>)
 8005532:	400a      	ands	r2, r1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	4b9f      	ldr	r3, [pc, #636]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b9e      	ldr	r3, [pc, #632]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800553c:	499f      	ldr	r1, [pc, #636]	; (80057bc <HAL_RCC_OscConfig+0x334>)
 800553e:	400a      	ands	r2, r1
 8005540:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d014      	beq.n	8005574 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554a:	f7ff fcdd 	bl	8004f08 <HAL_GetTick>
 800554e:	0003      	movs	r3, r0
 8005550:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005554:	f7ff fcd8 	bl	8004f08 <HAL_GetTick>
 8005558:	0002      	movs	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	; 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e28d      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005566:	4b93      	ldr	r3, [pc, #588]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	4013      	ands	r3, r2
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0xcc>
 8005572:	e015      	b.n	80055a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7ff fcc8 	bl	8004f08 <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800557e:	f7ff fcc3 	bl	8004f08 <HAL_GetTick>
 8005582:	0002      	movs	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b64      	cmp	r3, #100	; 0x64
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e278      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005590:	4b88      	ldr	r3, [pc, #544]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	029b      	lsls	r3, r3, #10
 8005598:	4013      	ands	r3, r2
 800559a:	d1f0      	bne.n	800557e <HAL_RCC_OscConfig+0xf6>
 800559c:	e000      	b.n	80055a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800559e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	d100      	bne.n	80055ac <HAL_RCC_OscConfig+0x124>
 80055aa:	e099      	b.n	80056e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ac:	4b81      	ldr	r3, [pc, #516]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2238      	movs	r2, #56	; 0x38
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b6:	4b7f      	ldr	r3, [pc, #508]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2203      	movs	r2, #3
 80055bc:	4013      	ands	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d102      	bne.n	80055cc <HAL_RCC_OscConfig+0x144>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d002      	beq.n	80055d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d135      	bne.n	800563e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055d2:	4b78      	ldr	r3, [pc, #480]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4013      	ands	r3, r2
 80055dc:	d005      	beq.n	80055ea <HAL_RCC_OscConfig+0x162>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e24b      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ea:	4b72      	ldr	r3, [pc, #456]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4a74      	ldr	r2, [pc, #464]	; (80057c0 <HAL_RCC_OscConfig+0x338>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	0019      	movs	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	021a      	lsls	r2, r3, #8
 80055fa:	4b6e      	ldr	r3, [pc, #440]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d112      	bne.n	800562c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005606:	4b6b      	ldr	r3, [pc, #428]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a6e      	ldr	r2, [pc, #440]	; (80057c4 <HAL_RCC_OscConfig+0x33c>)
 800560c:	4013      	ands	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	4b67      	ldr	r3, [pc, #412]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800561a:	4b66      	ldr	r3, [pc, #408]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0adb      	lsrs	r3, r3, #11
 8005620:	2207      	movs	r2, #7
 8005622:	4013      	ands	r3, r2
 8005624:	4a68      	ldr	r2, [pc, #416]	; (80057c8 <HAL_RCC_OscConfig+0x340>)
 8005626:	40da      	lsrs	r2, r3
 8005628:	4b68      	ldr	r3, [pc, #416]	; (80057cc <HAL_RCC_OscConfig+0x344>)
 800562a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800562c:	4b68      	ldr	r3, [pc, #416]	; (80057d0 <HAL_RCC_OscConfig+0x348>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	0018      	movs	r0, r3
 8005632:	f7ff fc0d 	bl	8004e50 <HAL_InitTick>
 8005636:	1e03      	subs	r3, r0, #0
 8005638:	d051      	beq.n	80056de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e221      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d030      	beq.n	80056a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005646:	4b5b      	ldr	r3, [pc, #364]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a5e      	ldr	r2, [pc, #376]	; (80057c4 <HAL_RCC_OscConfig+0x33c>)
 800564c:	4013      	ands	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	4b57      	ldr	r3, [pc, #348]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005656:	430a      	orrs	r2, r1
 8005658:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800565a:	4b56      	ldr	r3, [pc, #344]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b55      	ldr	r3, [pc, #340]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005660:	2180      	movs	r1, #128	; 0x80
 8005662:	0049      	lsls	r1, r1, #1
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7ff fc4e 	bl	8004f08 <HAL_GetTick>
 800566c:	0003      	movs	r3, r0
 800566e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005672:	f7ff fc49 	bl	8004f08 <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e1fe      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005684:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4013      	ands	r3, r2
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005690:	4b48      	ldr	r3, [pc, #288]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a4a      	ldr	r2, [pc, #296]	; (80057c0 <HAL_RCC_OscConfig+0x338>)
 8005696:	4013      	ands	r3, r2
 8005698:	0019      	movs	r1, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	4b44      	ldr	r3, [pc, #272]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	e01b      	b.n	80056e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80056a8:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80056ae:	4949      	ldr	r1, [pc, #292]	; (80057d4 <HAL_RCC_OscConfig+0x34c>)
 80056b0:	400a      	ands	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7ff fc28 	bl	8004f08 <HAL_GetTick>
 80056b8:	0003      	movs	r3, r0
 80056ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056be:	f7ff fc23 	bl	8004f08 <HAL_GetTick>
 80056c2:	0002      	movs	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e1d8      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056d0:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4013      	ands	r3, r2
 80056da:	d1f0      	bne.n	80056be <HAL_RCC_OscConfig+0x236>
 80056dc:	e000      	b.n	80056e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2208      	movs	r2, #8
 80056e6:	4013      	ands	r3, r2
 80056e8:	d047      	beq.n	800577a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80056ea:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2238      	movs	r2, #56	; 0x38
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b18      	cmp	r3, #24
 80056f4:	d10a      	bne.n	800570c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80056f6:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	2202      	movs	r2, #2
 80056fc:	4013      	ands	r3, r2
 80056fe:	d03c      	beq.n	800577a <HAL_RCC_OscConfig+0x2f2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d138      	bne.n	800577a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e1ba      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005714:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005716:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005718:	4b26      	ldr	r3, [pc, #152]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800571a:	2101      	movs	r1, #1
 800571c:	430a      	orrs	r2, r1
 800571e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7ff fbf2 	bl	8004f08 <HAL_GetTick>
 8005724:	0003      	movs	r3, r0
 8005726:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800572a:	f7ff fbed 	bl	8004f08 <HAL_GetTick>
 800572e:	0002      	movs	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e1a2      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800573c:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800573e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005740:	2202      	movs	r2, #2
 8005742:	4013      	ands	r3, r2
 8005744:	d0f1      	beq.n	800572a <HAL_RCC_OscConfig+0x2a2>
 8005746:	e018      	b.n	800577a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800574a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800574e:	2101      	movs	r1, #1
 8005750:	438a      	bics	r2, r1
 8005752:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7ff fbd8 	bl	8004f08 <HAL_GetTick>
 8005758:	0003      	movs	r3, r0
 800575a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800575e:	f7ff fbd3 	bl	8004f08 <HAL_GetTick>
 8005762:	0002      	movs	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e188      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005770:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	2202      	movs	r2, #2
 8005776:	4013      	ands	r3, r2
 8005778:	d1f1      	bne.n	800575e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2204      	movs	r2, #4
 8005780:	4013      	ands	r3, r2
 8005782:	d100      	bne.n	8005786 <HAL_RCC_OscConfig+0x2fe>
 8005784:	e0c6      	b.n	8005914 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005786:	231f      	movs	r3, #31
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2238      	movs	r2, #56	; 0x38
 8005794:	4013      	ands	r3, r2
 8005796:	2b20      	cmp	r3, #32
 8005798:	d11e      	bne.n	80057d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_RCC_OscConfig+0x32c>)
 800579c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579e:	2202      	movs	r2, #2
 80057a0:	4013      	ands	r3, r2
 80057a2:	d100      	bne.n	80057a6 <HAL_RCC_OscConfig+0x31e>
 80057a4:	e0b6      	b.n	8005914 <HAL_RCC_OscConfig+0x48c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d000      	beq.n	80057b0 <HAL_RCC_OscConfig+0x328>
 80057ae:	e0b1      	b.n	8005914 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e166      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
 80057b4:	40021000 	.word	0x40021000
 80057b8:	fffeffff 	.word	0xfffeffff
 80057bc:	fffbffff 	.word	0xfffbffff
 80057c0:	ffff80ff 	.word	0xffff80ff
 80057c4:	ffffc7ff 	.word	0xffffc7ff
 80057c8:	00f42400 	.word	0x00f42400
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000004 	.word	0x20000004
 80057d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057d8:	4bac      	ldr	r3, [pc, #688]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80057da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	055b      	lsls	r3, r3, #21
 80057e0:	4013      	ands	r3, r2
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_OscConfig+0x360>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <HAL_RCC_OscConfig+0x362>
 80057e8:	2300      	movs	r3, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d011      	beq.n	8005812 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057ee:	4ba7      	ldr	r3, [pc, #668]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80057f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f2:	4ba6      	ldr	r3, [pc, #664]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80057f4:	2180      	movs	r1, #128	; 0x80
 80057f6:	0549      	lsls	r1, r1, #21
 80057f8:	430a      	orrs	r2, r1
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80057fc:	4ba3      	ldr	r3, [pc, #652]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80057fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	055b      	lsls	r3, r3, #21
 8005804:	4013      	ands	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800580a:	231f      	movs	r3, #31
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005812:	4b9f      	ldr	r3, [pc, #636]	; (8005a90 <HAL_RCC_OscConfig+0x608>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4013      	ands	r3, r2
 800581c:	d11a      	bne.n	8005854 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800581e:	4b9c      	ldr	r3, [pc, #624]	; (8005a90 <HAL_RCC_OscConfig+0x608>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b9b      	ldr	r3, [pc, #620]	; (8005a90 <HAL_RCC_OscConfig+0x608>)
 8005824:	2180      	movs	r1, #128	; 0x80
 8005826:	0049      	lsls	r1, r1, #1
 8005828:	430a      	orrs	r2, r1
 800582a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800582c:	f7ff fb6c 	bl	8004f08 <HAL_GetTick>
 8005830:	0003      	movs	r3, r0
 8005832:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005836:	f7ff fb67 	bl	8004f08 <HAL_GetTick>
 800583a:	0002      	movs	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e11c      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005848:	4b91      	ldr	r3, [pc, #580]	; (8005a90 <HAL_RCC_OscConfig+0x608>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	4013      	ands	r3, r2
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d106      	bne.n	800586a <HAL_RCC_OscConfig+0x3e2>
 800585c:	4b8b      	ldr	r3, [pc, #556]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800585e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005860:	4b8a      	ldr	r3, [pc, #552]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005862:	2101      	movs	r1, #1
 8005864:	430a      	orrs	r2, r1
 8005866:	65da      	str	r2, [r3, #92]	; 0x5c
 8005868:	e01c      	b.n	80058a4 <HAL_RCC_OscConfig+0x41c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b05      	cmp	r3, #5
 8005870:	d10c      	bne.n	800588c <HAL_RCC_OscConfig+0x404>
 8005872:	4b86      	ldr	r3, [pc, #536]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005876:	4b85      	ldr	r3, [pc, #532]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005878:	2104      	movs	r1, #4
 800587a:	430a      	orrs	r2, r1
 800587c:	65da      	str	r2, [r3, #92]	; 0x5c
 800587e:	4b83      	ldr	r3, [pc, #524]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005882:	4b82      	ldr	r3, [pc, #520]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005884:	2101      	movs	r1, #1
 8005886:	430a      	orrs	r2, r1
 8005888:	65da      	str	r2, [r3, #92]	; 0x5c
 800588a:	e00b      	b.n	80058a4 <HAL_RCC_OscConfig+0x41c>
 800588c:	4b7f      	ldr	r3, [pc, #508]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800588e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005890:	4b7e      	ldr	r3, [pc, #504]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005892:	2101      	movs	r1, #1
 8005894:	438a      	bics	r2, r1
 8005896:	65da      	str	r2, [r3, #92]	; 0x5c
 8005898:	4b7c      	ldr	r3, [pc, #496]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800589a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800589c:	4b7b      	ldr	r3, [pc, #492]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800589e:	2104      	movs	r1, #4
 80058a0:	438a      	bics	r2, r1
 80058a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d014      	beq.n	80058d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7ff fb2c 	bl	8004f08 <HAL_GetTick>
 80058b0:	0003      	movs	r3, r0
 80058b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b4:	e009      	b.n	80058ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b6:	f7ff fb27 	bl	8004f08 <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	4a74      	ldr	r2, [pc, #464]	; (8005a94 <HAL_RCC_OscConfig+0x60c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e0db      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ca:	4b70      	ldr	r3, [pc, #448]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80058cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ce:	2202      	movs	r2, #2
 80058d0:	4013      	ands	r3, r2
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x42e>
 80058d4:	e013      	b.n	80058fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7ff fb17 	bl	8004f08 <HAL_GetTick>
 80058da:	0003      	movs	r3, r0
 80058dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058de:	e009      	b.n	80058f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e0:	f7ff fb12 	bl	8004f08 <HAL_GetTick>
 80058e4:	0002      	movs	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	4a6a      	ldr	r2, [pc, #424]	; (8005a94 <HAL_RCC_OscConfig+0x60c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e0c6      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058f4:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	2202      	movs	r2, #2
 80058fa:	4013      	ands	r3, r2
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80058fe:	231f      	movs	r3, #31
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d105      	bne.n	8005914 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005908:	4b60      	ldr	r3, [pc, #384]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800590a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800590c:	4b5f      	ldr	r3, [pc, #380]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800590e:	4962      	ldr	r1, [pc, #392]	; (8005a98 <HAL_RCC_OscConfig+0x610>)
 8005910:	400a      	ands	r2, r1
 8005912:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d100      	bne.n	800591e <HAL_RCC_OscConfig+0x496>
 800591c:	e0b0      	b.n	8005a80 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800591e:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2238      	movs	r2, #56	; 0x38
 8005924:	4013      	ands	r3, r2
 8005926:	2b10      	cmp	r3, #16
 8005928:	d100      	bne.n	800592c <HAL_RCC_OscConfig+0x4a4>
 800592a:	e078      	b.n	8005a1e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d153      	bne.n	80059dc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005934:	4b55      	ldr	r3, [pc, #340]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b54      	ldr	r3, [pc, #336]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800593a:	4958      	ldr	r1, [pc, #352]	; (8005a9c <HAL_RCC_OscConfig+0x614>)
 800593c:	400a      	ands	r2, r1
 800593e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7ff fae2 	bl	8004f08 <HAL_GetTick>
 8005944:	0003      	movs	r3, r0
 8005946:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594a:	f7ff fadd 	bl	8004f08 <HAL_GetTick>
 800594e:	0002      	movs	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e092      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800595c:	4b4b      	ldr	r3, [pc, #300]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	049b      	lsls	r3, r3, #18
 8005964:	4013      	ands	r3, r2
 8005966:	d1f0      	bne.n	800594a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005968:	4b48      	ldr	r3, [pc, #288]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a4c      	ldr	r2, [pc, #304]	; (8005aa0 <HAL_RCC_OscConfig+0x618>)
 800596e:	4013      	ands	r3, r2
 8005970:	0019      	movs	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	431a      	orrs	r2, r3
 8005990:	4b3e      	ldr	r3, [pc, #248]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005992:	430a      	orrs	r2, r1
 8005994:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005996:	4b3d      	ldr	r3, [pc, #244]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b3c      	ldr	r3, [pc, #240]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 800599c:	2180      	movs	r1, #128	; 0x80
 800599e:	0449      	lsls	r1, r1, #17
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80059a4:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	4b38      	ldr	r3, [pc, #224]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80059aa:	2180      	movs	r1, #128	; 0x80
 80059ac:	0549      	lsls	r1, r1, #21
 80059ae:	430a      	orrs	r2, r1
 80059b0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7ff faa9 	bl	8004f08 <HAL_GetTick>
 80059b6:	0003      	movs	r3, r0
 80059b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059bc:	f7ff faa4 	bl	8004f08 <HAL_GetTick>
 80059c0:	0002      	movs	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e059      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ce:	4b2f      	ldr	r3, [pc, #188]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	2380      	movs	r3, #128	; 0x80
 80059d4:	049b      	lsls	r3, r3, #18
 80059d6:	4013      	ands	r3, r2
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0x534>
 80059da:	e051      	b.n	8005a80 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059dc:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 80059e2:	492e      	ldr	r1, [pc, #184]	; (8005a9c <HAL_RCC_OscConfig+0x614>)
 80059e4:	400a      	ands	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7ff fa8e 	bl	8004f08 <HAL_GetTick>
 80059ec:	0003      	movs	r3, r0
 80059ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f2:	f7ff fa89 	bl	8004f08 <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e03e      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a04:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	049b      	lsls	r3, r3, #18
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d1f0      	bne.n	80059f2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005a10:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005a16:	4923      	ldr	r1, [pc, #140]	; (8005aa4 <HAL_RCC_OscConfig+0x61c>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	60da      	str	r2, [r3, #12]
 8005a1c:	e030      	b.n	8005a80 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e02b      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005a2a:	4b18      	ldr	r3, [pc, #96]	; (8005a8c <HAL_RCC_OscConfig+0x604>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2203      	movs	r2, #3
 8005a34:	401a      	ands	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d11e      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2270      	movs	r2, #112	; 0x70
 8005a42:	401a      	ands	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d117      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	23fe      	movs	r3, #254	; 0xfe
 8005a50:	01db      	lsls	r3, r3, #7
 8005a52:	401a      	ands	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d10e      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	23f8      	movs	r3, #248	; 0xf8
 8005a62:	039b      	lsls	r3, r3, #14
 8005a64:	401a      	ands	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d106      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	0f5b      	lsrs	r3, r3, #29
 8005a72:	075a      	lsls	r2, r3, #29
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	0018      	movs	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b008      	add	sp, #32
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	40007000 	.word	0x40007000
 8005a94:	00001388 	.word	0x00001388
 8005a98:	efffffff 	.word	0xefffffff
 8005a9c:	feffffff 	.word	0xfeffffff
 8005aa0:	1fc1808c 	.word	0x1fc1808c
 8005aa4:	effefffc 	.word	0xeffefffc

08005aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0e9      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005abc:	4b76      	ldr	r3, [pc, #472]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d91e      	bls.n	8005b08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aca:	4b73      	ldr	r3, [pc, #460]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2207      	movs	r2, #7
 8005ad0:	4393      	bics	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	4b70      	ldr	r3, [pc, #448]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005adc:	f7ff fa14 	bl	8004f08 <HAL_GetTick>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ae4:	e009      	b.n	8005afa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae6:	f7ff fa0f 	bl	8004f08 <HAL_GetTick>
 8005aea:	0002      	movs	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	4a6a      	ldr	r2, [pc, #424]	; (8005c9c <HAL_RCC_ClockConfig+0x1f4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e0ca      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005afa:	4b67      	ldr	r3, [pc, #412]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2207      	movs	r2, #7
 8005b00:	4013      	ands	r3, r2
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d1ee      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	4013      	ands	r3, r2
 8005b10:	d015      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2204      	movs	r2, #4
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d006      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b1c:	4b60      	ldr	r3, [pc, #384]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	4b5f      	ldr	r3, [pc, #380]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b22:	21e0      	movs	r1, #224	; 0xe0
 8005b24:	01c9      	lsls	r1, r1, #7
 8005b26:	430a      	orrs	r2, r1
 8005b28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4a5d      	ldr	r2, [pc, #372]	; (8005ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	4b59      	ldr	r3, [pc, #356]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2201      	movs	r2, #1
 8005b44:	4013      	ands	r3, r2
 8005b46:	d057      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b50:	4b53      	ldr	r3, [pc, #332]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	029b      	lsls	r3, r3, #10
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d12b      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e097      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d107      	bne.n	8005b78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b68:	4b4d      	ldr	r3, [pc, #308]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	049b      	lsls	r3, r3, #18
 8005b70:	4013      	ands	r3, r2
 8005b72:	d11f      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e08b      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b80:	4b47      	ldr	r3, [pc, #284]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d113      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e07f      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d106      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b98:	4b41      	ldr	r3, [pc, #260]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e074      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ba6:	4b3e      	ldr	r3, [pc, #248]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005baa:	2202      	movs	r2, #2
 8005bac:	4013      	ands	r3, r2
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e06d      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bb4:	4b3a      	ldr	r3, [pc, #232]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2207      	movs	r2, #7
 8005bba:	4393      	bics	r3, r2
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	4b37      	ldr	r3, [pc, #220]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc8:	f7ff f99e 	bl	8004f08 <HAL_GetTick>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd0:	e009      	b.n	8005be6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd2:	f7ff f999 	bl	8004f08 <HAL_GetTick>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	4a2f      	ldr	r2, [pc, #188]	; (8005c9c <HAL_RCC_ClockConfig+0x1f4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e054      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be6:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2238      	movs	r2, #56	; 0x38
 8005bec:	401a      	ands	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d1ec      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2207      	movs	r2, #7
 8005bfe:	4013      	ands	r3, r2
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d21e      	bcs.n	8005c44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2207      	movs	r2, #7
 8005c0c:	4393      	bics	r3, r2
 8005c0e:	0019      	movs	r1, r3
 8005c10:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c18:	f7ff f976 	bl	8004f08 <HAL_GetTick>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c20:	e009      	b.n	8005c36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c22:	f7ff f971 	bl	8004f08 <HAL_GetTick>
 8005c26:	0002      	movs	r2, r0
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <HAL_RCC_ClockConfig+0x1f4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e02c      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c36:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2207      	movs	r2, #7
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d1ee      	bne.n	8005c22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2204      	movs	r2, #4
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d009      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c4e:	4b14      	ldr	r3, [pc, #80]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	4a15      	ldr	r2, [pc, #84]	; (8005ca8 <HAL_RCC_ClockConfig+0x200>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	0019      	movs	r1, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c62:	f000 f829 	bl	8005cb8 <HAL_RCC_GetSysClockFreq>
 8005c66:	0001      	movs	r1, r0
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	0a1b      	lsrs	r3, r3, #8
 8005c6e:	220f      	movs	r2, #15
 8005c70:	401a      	ands	r2, r3
 8005c72:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <HAL_RCC_ClockConfig+0x204>)
 8005c74:	0092      	lsls	r2, r2, #2
 8005c76:	58d3      	ldr	r3, [r2, r3]
 8005c78:	221f      	movs	r2, #31
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	000a      	movs	r2, r1
 8005c7e:	40da      	lsrs	r2, r3
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <HAL_RCC_ClockConfig+0x208>)
 8005c82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_RCC_ClockConfig+0x20c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7ff f8e1 	bl	8004e50 <HAL_InitTick>
 8005c8e:	0003      	movs	r3, r0
}
 8005c90:	0018      	movs	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b004      	add	sp, #16
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40022000 	.word	0x40022000
 8005c9c:	00001388 	.word	0x00001388
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	fffff0ff 	.word	0xfffff0ff
 8005ca8:	ffff8fff 	.word	0xffff8fff
 8005cac:	08007018 	.word	0x08007018
 8005cb0:	20000000 	.word	0x20000000
 8005cb4:	20000004 	.word	0x20000004

08005cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cbe:	4b3c      	ldr	r3, [pc, #240]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2238      	movs	r2, #56	; 0x38
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d10f      	bne.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005cc8:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	0adb      	lsrs	r3, r3, #11
 8005cce:	2207      	movs	r2, #7
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	409a      	lsls	r2, r3
 8005cd6:	0013      	movs	r3, r2
 8005cd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	4835      	ldr	r0, [pc, #212]	; (8005db4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005cde:	f7fa fa19 	bl	8000114 <__udivsi3>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	613b      	str	r3, [r7, #16]
 8005ce6:	e05d      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ce8:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2238      	movs	r2, #56	; 0x38
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d102      	bne.n	8005cfa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cf4:	4b30      	ldr	r3, [pc, #192]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	e054      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cfa:	4b2d      	ldr	r3, [pc, #180]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2238      	movs	r2, #56	; 0x38
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d138      	bne.n	8005d78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d06:	4b2a      	ldr	r3, [pc, #168]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d10:	4b27      	ldr	r3, [pc, #156]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	2207      	movs	r2, #7
 8005d18:	4013      	ands	r3, r2
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d10d      	bne.n	8005d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4824      	ldr	r0, [pc, #144]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d28:	f7fa f9f4 	bl	8000114 <__udivsi3>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	0019      	movs	r1, r3
 8005d30:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	227f      	movs	r2, #127	; 0x7f
 8005d38:	4013      	ands	r3, r2
 8005d3a:	434b      	muls	r3, r1
 8005d3c:	617b      	str	r3, [r7, #20]
        break;
 8005d3e:	e00d      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	481c      	ldr	r0, [pc, #112]	; (8005db4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d44:	f7fa f9e6 	bl	8000114 <__udivsi3>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	0a1b      	lsrs	r3, r3, #8
 8005d52:	227f      	movs	r2, #127	; 0x7f
 8005d54:	4013      	ands	r3, r2
 8005d56:	434b      	muls	r3, r1
 8005d58:	617b      	str	r3, [r7, #20]
        break;
 8005d5a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	0f5b      	lsrs	r3, r3, #29
 8005d62:	2207      	movs	r2, #7
 8005d64:	4013      	ands	r3, r2
 8005d66:	3301      	adds	r3, #1
 8005d68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	6978      	ldr	r0, [r7, #20]
 8005d6e:	f7fa f9d1 	bl	8000114 <__udivsi3>
 8005d72:	0003      	movs	r3, r0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	e015      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005d78:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2238      	movs	r2, #56	; 0x38
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d103      	bne.n	8005d8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e00b      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005d8c:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2238      	movs	r2, #56	; 0x38
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b18      	cmp	r3, #24
 8005d96:	d103      	bne.n	8005da0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005d98:	23fa      	movs	r3, #250	; 0xfa
 8005d9a:	01db      	lsls	r3, r3, #7
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	e001      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005da4:	693b      	ldr	r3, [r7, #16]
}
 8005da6:	0018      	movs	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b006      	add	sp, #24
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	40021000 	.word	0x40021000
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	007a1200 	.word	0x007a1200

08005dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0a8      	b.n	8005f20 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	2382      	movs	r3, #130	; 0x82
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d009      	beq.n	8005df6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	61da      	str	r2, [r3, #28]
 8005de8:	e005      	b.n	8005df6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	225d      	movs	r2, #93	; 0x5d
 8005e00:	5c9b      	ldrb	r3, [r3, r2]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d107      	bne.n	8005e18 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	225c      	movs	r2, #92	; 0x5c
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7fe fd1c 	bl	8004850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	225d      	movs	r2, #93	; 0x5d
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2140      	movs	r1, #64	; 0x40
 8005e2c:	438a      	bics	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	23e0      	movs	r3, #224	; 0xe0
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d902      	bls.n	8005e42 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e002      	b.n	8005e48 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	015b      	lsls	r3, r3, #5
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	23f0      	movs	r3, #240	; 0xf0
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d008      	beq.n	8005e66 <HAL_SPI_Init+0xaa>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	23e0      	movs	r3, #224	; 0xe0
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d002      	beq.n	8005e66 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	2382      	movs	r3, #130	; 0x82
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	401a      	ands	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6899      	ldr	r1, [r3, #8]
 8005e74:	2384      	movs	r3, #132	; 0x84
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	400b      	ands	r3, r1
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2102      	movs	r1, #2
 8005e82:	400b      	ands	r3, r1
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6999      	ldr	r1, [r3, #24]
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	400b      	ands	r3, r1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	2138      	movs	r1, #56	; 0x38
 8005ea2:	400b      	ands	r3, r1
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	2180      	movs	r1, #128	; 0x80
 8005eac:	400b      	ands	r3, r1
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	0011      	movs	r1, r2
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	019b      	lsls	r3, r3, #6
 8005eba:	401a      	ands	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	2204      	movs	r2, #4
 8005ecc:	401a      	ands	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	400b      	ands	r3, r1
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	2108      	movs	r1, #8
 8005ede:	400b      	ands	r3, r1
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68d9      	ldr	r1, [r3, #12]
 8005ee6:	23f0      	movs	r3, #240	; 0xf0
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	400b      	ands	r3, r1
 8005eec:	431a      	orrs	r2, r3
 8005eee:	0011      	movs	r1, r2
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	015b      	lsls	r3, r3, #5
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69da      	ldr	r2, [r3, #28]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4907      	ldr	r1, [pc, #28]	; (8005f28 <HAL_SPI_Init+0x16c>)
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	225d      	movs	r2, #93	; 0x5d
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b004      	add	sp, #16
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	fffff7ff 	.word	0xfffff7ff

08005f2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	1dbb      	adds	r3, r7, #6
 8005f3a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f3c:	231f      	movs	r3, #31
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	225c      	movs	r2, #92	; 0x5c
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_SPI_Transmit+0x26>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e140      	b.n	80061d4 <HAL_SPI_Transmit+0x2a8>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	225c      	movs	r2, #92	; 0x5c
 8005f56:	2101      	movs	r1, #1
 8005f58:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f5a:	f7fe ffd5 	bl	8004f08 <HAL_GetTick>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f62:	2316      	movs	r3, #22
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	1dba      	adds	r2, r7, #6
 8005f68:	8812      	ldrh	r2, [r2, #0]
 8005f6a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	225d      	movs	r2, #93	; 0x5d
 8005f70:	5c9b      	ldrb	r3, [r3, r2]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d004      	beq.n	8005f82 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005f78:	231f      	movs	r3, #31
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f80:	e11d      	b.n	80061be <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_SPI_Transmit+0x64>
 8005f88:	1dbb      	adds	r3, r7, #6
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005f90:	231f      	movs	r3, #31
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f98:	e111      	b.n	80061be <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	225d      	movs	r2, #93	; 0x5d
 8005f9e:	2103      	movs	r1, #3
 8005fa0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1dba      	adds	r2, r7, #6
 8005fb2:	8812      	ldrh	r2, [r2, #0]
 8005fb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1dba      	adds	r2, r7, #6
 8005fba:	8812      	ldrh	r2, [r2, #0]
 8005fbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2244      	movs	r2, #68	; 0x44
 8005fc8:	2100      	movs	r1, #0
 8005fca:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2246      	movs	r2, #70	; 0x46
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d110      	bne.n	800600e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2140      	movs	r1, #64	; 0x40
 8005ff8:	438a      	bics	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	01c9      	lsls	r1, r1, #7
 800600a:	430a      	orrs	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2240      	movs	r2, #64	; 0x40
 8006016:	4013      	ands	r3, r2
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d007      	beq.n	800602c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2140      	movs	r1, #64	; 0x40
 8006028:	430a      	orrs	r2, r1
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	23e0      	movs	r3, #224	; 0xe0
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	429a      	cmp	r2, r3
 8006036:	d94e      	bls.n	80060d6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <HAL_SPI_Transmit+0x11e>
 8006040:	2316      	movs	r3, #22
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d13f      	bne.n	80060ca <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800606e:	e02c      	b.n	80060ca <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2202      	movs	r2, #2
 8006078:	4013      	ands	r3, r2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d112      	bne.n	80060a4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060a2:	e012      	b.n	80060ca <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a4:	f7fe ff30 	bl	8004f08 <HAL_GetTick>
 80060a8:	0002      	movs	r2, r0
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d802      	bhi.n	80060ba <HAL_SPI_Transmit+0x18e>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	d102      	bne.n	80060c0 <HAL_SPI_Transmit+0x194>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80060c0:	231f      	movs	r3, #31
 80060c2:	18fb      	adds	r3, r7, r3
 80060c4:	2203      	movs	r2, #3
 80060c6:	701a      	strb	r2, [r3, #0]
          goto error;
 80060c8:	e079      	b.n	80061be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1cd      	bne.n	8006070 <HAL_SPI_Transmit+0x144>
 80060d4:	e04f      	b.n	8006176 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <HAL_SPI_Transmit+0x1bc>
 80060de:	2316      	movs	r3, #22
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d141      	bne.n	800616c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800610e:	e02d      	b.n	800616c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2202      	movs	r2, #2
 8006118:	4013      	ands	r3, r2
 800611a:	2b02      	cmp	r3, #2
 800611c:	d113      	bne.n	8006146 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	7812      	ldrb	r2, [r2, #0]
 800612a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006144:	e012      	b.n	800616c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006146:	f7fe fedf 	bl	8004f08 <HAL_GetTick>
 800614a:	0002      	movs	r2, r0
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d802      	bhi.n	800615c <HAL_SPI_Transmit+0x230>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	d102      	bne.n	8006162 <HAL_SPI_Transmit+0x236>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006162:	231f      	movs	r3, #31
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	2203      	movs	r2, #3
 8006168:	701a      	strb	r2, [r3, #0]
          goto error;
 800616a:	e028      	b.n	80061be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1cc      	bne.n	8006110 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	0018      	movs	r0, r3
 800617e:	f000 f95d 	bl	800643c <SPI_EndRxTxTransaction>
 8006182:	1e03      	subs	r3, r0, #0
 8006184:	d002      	beq.n	800618c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006194:	2300      	movs	r3, #0
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80061b2:	231f      	movs	r3, #31
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e000      	b.n	80061be <HAL_SPI_Transmit+0x292>
  }

error:
 80061bc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	225d      	movs	r2, #93	; 0x5d
 80061c2:	2101      	movs	r1, #1
 80061c4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	225c      	movs	r2, #92	; 0x5c
 80061ca:	2100      	movs	r1, #0
 80061cc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80061ce:	231f      	movs	r3, #31
 80061d0:	18fb      	adds	r3, r7, r3
 80061d2:	781b      	ldrb	r3, [r3, #0]
}
 80061d4:	0018      	movs	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b008      	add	sp, #32
 80061da:	bd80      	pop	{r7, pc}

080061dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	1dfb      	adds	r3, r7, #7
 80061ea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061ec:	f7fe fe8c 	bl	8004f08 <HAL_GetTick>
 80061f0:	0002      	movs	r2, r0
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	18d3      	adds	r3, r2, r3
 80061fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061fc:	f7fe fe84 	bl	8004f08 <HAL_GetTick>
 8006200:	0003      	movs	r3, r0
 8006202:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006204:	4b3a      	ldr	r3, [pc, #232]	; (80062f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	015b      	lsls	r3, r3, #5
 800620a:	0d1b      	lsrs	r3, r3, #20
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	4353      	muls	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006212:	e058      	b.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	3301      	adds	r3, #1
 8006218:	d055      	beq.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800621a:	f7fe fe75 	bl	8004f08 <HAL_GetTick>
 800621e:	0002      	movs	r2, r0
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	429a      	cmp	r2, r3
 8006228:	d902      	bls.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x54>
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d142      	bne.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	21e0      	movs	r1, #224	; 0xe0
 800623c:	438a      	bics	r2, r1
 800623e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	2382      	movs	r3, #130	; 0x82
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	429a      	cmp	r2, r3
 800624a:	d113      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x98>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	2380      	movs	r3, #128	; 0x80
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	429a      	cmp	r2, r3
 8006256:	d005      	beq.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	429a      	cmp	r2, r3
 8006262:	d107      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2140      	movs	r1, #64	; 0x40
 8006270:	438a      	bics	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	019b      	lsls	r3, r3, #6
 800627c:	429a      	cmp	r2, r3
 800627e:	d110      	bne.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	491a      	ldr	r1, [pc, #104]	; (80062f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800628c:	400a      	ands	r2, r1
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2180      	movs	r1, #128	; 0x80
 800629c:	0189      	lsls	r1, r1, #6
 800629e:	430a      	orrs	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	225d      	movs	r2, #93	; 0x5d
 80062a6:	2101      	movs	r1, #1
 80062a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	225c      	movs	r2, #92	; 0x5c
 80062ae:	2100      	movs	r1, #0
 80062b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e017      	b.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	4013      	ands	r3, r2
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	425a      	negs	r2, r3
 80062d6:	4153      	adcs	r3, r2
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	001a      	movs	r2, r3
 80062dc:	1dfb      	adds	r3, r7, #7
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d197      	bne.n	8006214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	0018      	movs	r0, r3
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b008      	add	sp, #32
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	20000000 	.word	0x20000000
 80062f4:	ffffdfff 	.word	0xffffdfff

080062f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006306:	2317      	movs	r3, #23
 8006308:	18fb      	adds	r3, r7, r3
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800630e:	f7fe fdfb 	bl	8004f08 <HAL_GetTick>
 8006312:	0002      	movs	r2, r0
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	18d3      	adds	r3, r2, r3
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800631e:	f7fe fdf3 	bl	8004f08 <HAL_GetTick>
 8006322:	0003      	movs	r3, r0
 8006324:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800632e:	4b41      	ldr	r3, [pc, #260]	; (8006434 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	0013      	movs	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	189b      	adds	r3, r3, r2
 8006338:	00da      	lsls	r2, r3, #3
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	0d1b      	lsrs	r3, r3, #20
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	4353      	muls	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006344:	e068      	b.n	8006418 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	23c0      	movs	r3, #192	; 0xc0
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	429a      	cmp	r2, r3
 800634e:	d10a      	bne.n	8006366 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	2117      	movs	r1, #23
 800635e:	187b      	adds	r3, r7, r1
 8006360:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006362:	187b      	adds	r3, r7, r1
 8006364:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	d055      	beq.n	8006418 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800636c:	f7fe fdcc 	bl	8004f08 <HAL_GetTick>
 8006370:	0002      	movs	r2, r0
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006378:	429a      	cmp	r2, r3
 800637a:	d902      	bls.n	8006382 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	2b00      	cmp	r3, #0
 8006380:	d142      	bne.n	8006408 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	21e0      	movs	r1, #224	; 0xe0
 800638e:	438a      	bics	r2, r1
 8006390:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	2382      	movs	r3, #130	; 0x82
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	429a      	cmp	r2, r3
 800639c:	d113      	bne.n	80063c6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d005      	beq.n	80063b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	2380      	movs	r3, #128	; 0x80
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d107      	bne.n	80063c6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2140      	movs	r1, #64	; 0x40
 80063c2:	438a      	bics	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ca:	2380      	movs	r3, #128	; 0x80
 80063cc:	019b      	lsls	r3, r3, #6
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d110      	bne.n	80063f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4916      	ldr	r1, [pc, #88]	; (8006438 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80063de:	400a      	ands	r2, r1
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2180      	movs	r1, #128	; 0x80
 80063ee:	0189      	lsls	r1, r1, #6
 80063f0:	430a      	orrs	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	225d      	movs	r2, #93	; 0x5d
 80063f8:	2101      	movs	r1, #1
 80063fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	225c      	movs	r2, #92	; 0x5c
 8006400:	2100      	movs	r1, #0
 8006402:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e010      	b.n	800642a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	3b01      	subs	r3, #1
 8006416:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	429a      	cmp	r2, r3
 8006426:	d18e      	bne.n	8006346 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b00a      	add	sp, #40	; 0x28
 8006430:	bd80      	pop	{r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	20000000 	.word	0x20000000
 8006438:	ffffdfff 	.word	0xffffdfff

0800643c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	23c0      	movs	r3, #192	; 0xc0
 800644c:	0159      	lsls	r1, r3, #5
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	0013      	movs	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	f7ff ff4e 	bl	80062f8 <SPI_WaitFifoStateUntilTimeout>
 800645c:	1e03      	subs	r3, r0, #0
 800645e:	d007      	beq.n	8006470 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006464:	2220      	movs	r2, #32
 8006466:	431a      	orrs	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e027      	b.n	80064c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	0013      	movs	r3, r2
 800647a:	2200      	movs	r2, #0
 800647c:	2180      	movs	r1, #128	; 0x80
 800647e:	f7ff fead 	bl	80061dc <SPI_WaitFlagStateUntilTimeout>
 8006482:	1e03      	subs	r3, r0, #0
 8006484:	d007      	beq.n	8006496 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648a:	2220      	movs	r2, #32
 800648c:	431a      	orrs	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e014      	b.n	80064c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	23c0      	movs	r3, #192	; 0xc0
 800649a:	00d9      	lsls	r1, r3, #3
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	0013      	movs	r3, r2
 80064a4:	2200      	movs	r2, #0
 80064a6:	f7ff ff27 	bl	80062f8 <SPI_WaitFifoStateUntilTimeout>
 80064aa:	1e03      	subs	r3, r0, #0
 80064ac:	d007      	beq.n	80064be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b2:	2220      	movs	r2, #32
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e000      	b.n	80064c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b004      	add	sp, #16
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <__errno>:
 80064c8:	4b01      	ldr	r3, [pc, #4]	; (80064d0 <__errno+0x8>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	4770      	bx	lr
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	2000000c 	.word	0x2000000c

080064d4 <__libc_init_array>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	2600      	movs	r6, #0
 80064d8:	4d0c      	ldr	r5, [pc, #48]	; (800650c <__libc_init_array+0x38>)
 80064da:	4c0d      	ldr	r4, [pc, #52]	; (8006510 <__libc_init_array+0x3c>)
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	42a6      	cmp	r6, r4
 80064e2:	d109      	bne.n	80064f8 <__libc_init_array+0x24>
 80064e4:	2600      	movs	r6, #0
 80064e6:	f000 fc9d 	bl	8006e24 <_init>
 80064ea:	4d0a      	ldr	r5, [pc, #40]	; (8006514 <__libc_init_array+0x40>)
 80064ec:	4c0a      	ldr	r4, [pc, #40]	; (8006518 <__libc_init_array+0x44>)
 80064ee:	1b64      	subs	r4, r4, r5
 80064f0:	10a4      	asrs	r4, r4, #2
 80064f2:	42a6      	cmp	r6, r4
 80064f4:	d105      	bne.n	8006502 <__libc_init_array+0x2e>
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	00b3      	lsls	r3, r6, #2
 80064fa:	58eb      	ldr	r3, [r5, r3]
 80064fc:	4798      	blx	r3
 80064fe:	3601      	adds	r6, #1
 8006500:	e7ee      	b.n	80064e0 <__libc_init_array+0xc>
 8006502:	00b3      	lsls	r3, r6, #2
 8006504:	58eb      	ldr	r3, [r5, r3]
 8006506:	4798      	blx	r3
 8006508:	3601      	adds	r6, #1
 800650a:	e7f2      	b.n	80064f2 <__libc_init_array+0x1e>
 800650c:	08007094 	.word	0x08007094
 8006510:	08007094 	.word	0x08007094
 8006514:	08007094 	.word	0x08007094
 8006518:	08007098 	.word	0x08007098

0800651c <memset>:
 800651c:	0003      	movs	r3, r0
 800651e:	1882      	adds	r2, r0, r2
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	7019      	strb	r1, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <siprintf>:
 800652c:	b40e      	push	{r1, r2, r3}
 800652e:	b500      	push	{lr}
 8006530:	490b      	ldr	r1, [pc, #44]	; (8006560 <siprintf+0x34>)
 8006532:	b09c      	sub	sp, #112	; 0x70
 8006534:	ab1d      	add	r3, sp, #116	; 0x74
 8006536:	9002      	str	r0, [sp, #8]
 8006538:	9006      	str	r0, [sp, #24]
 800653a:	9107      	str	r1, [sp, #28]
 800653c:	9104      	str	r1, [sp, #16]
 800653e:	4809      	ldr	r0, [pc, #36]	; (8006564 <siprintf+0x38>)
 8006540:	4909      	ldr	r1, [pc, #36]	; (8006568 <siprintf+0x3c>)
 8006542:	cb04      	ldmia	r3!, {r2}
 8006544:	9105      	str	r1, [sp, #20]
 8006546:	6800      	ldr	r0, [r0, #0]
 8006548:	a902      	add	r1, sp, #8
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	f000 f882 	bl	8006654 <_svfiprintf_r>
 8006550:	2300      	movs	r3, #0
 8006552:	9a02      	ldr	r2, [sp, #8]
 8006554:	7013      	strb	r3, [r2, #0]
 8006556:	b01c      	add	sp, #112	; 0x70
 8006558:	bc08      	pop	{r3}
 800655a:	b003      	add	sp, #12
 800655c:	4718      	bx	r3
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	7fffffff 	.word	0x7fffffff
 8006564:	2000000c 	.word	0x2000000c
 8006568:	ffff0208 	.word	0xffff0208

0800656c <strncmp>:
 800656c:	b530      	push	{r4, r5, lr}
 800656e:	0005      	movs	r5, r0
 8006570:	1e10      	subs	r0, r2, #0
 8006572:	d008      	beq.n	8006586 <strncmp+0x1a>
 8006574:	2400      	movs	r4, #0
 8006576:	3a01      	subs	r2, #1
 8006578:	5d2b      	ldrb	r3, [r5, r4]
 800657a:	5d08      	ldrb	r0, [r1, r4]
 800657c:	4283      	cmp	r3, r0
 800657e:	d101      	bne.n	8006584 <strncmp+0x18>
 8006580:	4294      	cmp	r4, r2
 8006582:	d101      	bne.n	8006588 <strncmp+0x1c>
 8006584:	1a18      	subs	r0, r3, r0
 8006586:	bd30      	pop	{r4, r5, pc}
 8006588:	3401      	adds	r4, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f4      	bne.n	8006578 <strncmp+0xc>
 800658e:	e7f9      	b.n	8006584 <strncmp+0x18>

08006590 <__ssputs_r>:
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	688e      	ldr	r6, [r1, #8]
 8006594:	b085      	sub	sp, #20
 8006596:	0007      	movs	r7, r0
 8006598:	000c      	movs	r4, r1
 800659a:	9203      	str	r2, [sp, #12]
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	429e      	cmp	r6, r3
 80065a0:	d83c      	bhi.n	800661c <__ssputs_r+0x8c>
 80065a2:	2390      	movs	r3, #144	; 0x90
 80065a4:	898a      	ldrh	r2, [r1, #12]
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	421a      	tst	r2, r3
 80065aa:	d034      	beq.n	8006616 <__ssputs_r+0x86>
 80065ac:	6909      	ldr	r1, [r1, #16]
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	6960      	ldr	r0, [r4, #20]
 80065b2:	1a5b      	subs	r3, r3, r1
 80065b4:	9302      	str	r3, [sp, #8]
 80065b6:	2303      	movs	r3, #3
 80065b8:	4343      	muls	r3, r0
 80065ba:	0fdd      	lsrs	r5, r3, #31
 80065bc:	18ed      	adds	r5, r5, r3
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	9802      	ldr	r0, [sp, #8]
 80065c2:	3301      	adds	r3, #1
 80065c4:	181b      	adds	r3, r3, r0
 80065c6:	106d      	asrs	r5, r5, #1
 80065c8:	42ab      	cmp	r3, r5
 80065ca:	d900      	bls.n	80065ce <__ssputs_r+0x3e>
 80065cc:	001d      	movs	r5, r3
 80065ce:	0553      	lsls	r3, r2, #21
 80065d0:	d532      	bpl.n	8006638 <__ssputs_r+0xa8>
 80065d2:	0029      	movs	r1, r5
 80065d4:	0038      	movs	r0, r7
 80065d6:	f000 fb53 	bl	8006c80 <_malloc_r>
 80065da:	1e06      	subs	r6, r0, #0
 80065dc:	d109      	bne.n	80065f2 <__ssputs_r+0x62>
 80065de:	230c      	movs	r3, #12
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	2340      	movs	r3, #64	; 0x40
 80065e4:	2001      	movs	r0, #1
 80065e6:	89a2      	ldrh	r2, [r4, #12]
 80065e8:	4240      	negs	r0, r0
 80065ea:	4313      	orrs	r3, r2
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	b005      	add	sp, #20
 80065f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f2:	9a02      	ldr	r2, [sp, #8]
 80065f4:	6921      	ldr	r1, [r4, #16]
 80065f6:	f000 faba 	bl	8006b6e <memcpy>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	4a14      	ldr	r2, [pc, #80]	; (8006650 <__ssputs_r+0xc0>)
 80065fe:	401a      	ands	r2, r3
 8006600:	2380      	movs	r3, #128	; 0x80
 8006602:	4313      	orrs	r3, r2
 8006604:	81a3      	strh	r3, [r4, #12]
 8006606:	9b02      	ldr	r3, [sp, #8]
 8006608:	6126      	str	r6, [r4, #16]
 800660a:	18f6      	adds	r6, r6, r3
 800660c:	6026      	str	r6, [r4, #0]
 800660e:	6165      	str	r5, [r4, #20]
 8006610:	9e01      	ldr	r6, [sp, #4]
 8006612:	1aed      	subs	r5, r5, r3
 8006614:	60a5      	str	r5, [r4, #8]
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	429e      	cmp	r6, r3
 800661a:	d900      	bls.n	800661e <__ssputs_r+0x8e>
 800661c:	9e01      	ldr	r6, [sp, #4]
 800661e:	0032      	movs	r2, r6
 8006620:	9903      	ldr	r1, [sp, #12]
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	f000 faac 	bl	8006b80 <memmove>
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	2000      	movs	r0, #0
 800662c:	1b9b      	subs	r3, r3, r6
 800662e:	60a3      	str	r3, [r4, #8]
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	199e      	adds	r6, r3, r6
 8006634:	6026      	str	r6, [r4, #0]
 8006636:	e7da      	b.n	80065ee <__ssputs_r+0x5e>
 8006638:	002a      	movs	r2, r5
 800663a:	0038      	movs	r0, r7
 800663c:	f000 fb96 	bl	8006d6c <_realloc_r>
 8006640:	1e06      	subs	r6, r0, #0
 8006642:	d1e0      	bne.n	8006606 <__ssputs_r+0x76>
 8006644:	0038      	movs	r0, r7
 8006646:	6921      	ldr	r1, [r4, #16]
 8006648:	f000 faae 	bl	8006ba8 <_free_r>
 800664c:	e7c7      	b.n	80065de <__ssputs_r+0x4e>
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	fffffb7f 	.word	0xfffffb7f

08006654 <_svfiprintf_r>:
 8006654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006656:	b0a1      	sub	sp, #132	; 0x84
 8006658:	9003      	str	r0, [sp, #12]
 800665a:	001d      	movs	r5, r3
 800665c:	898b      	ldrh	r3, [r1, #12]
 800665e:	000f      	movs	r7, r1
 8006660:	0016      	movs	r6, r2
 8006662:	061b      	lsls	r3, r3, #24
 8006664:	d511      	bpl.n	800668a <_svfiprintf_r+0x36>
 8006666:	690b      	ldr	r3, [r1, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10e      	bne.n	800668a <_svfiprintf_r+0x36>
 800666c:	2140      	movs	r1, #64	; 0x40
 800666e:	f000 fb07 	bl	8006c80 <_malloc_r>
 8006672:	6038      	str	r0, [r7, #0]
 8006674:	6138      	str	r0, [r7, #16]
 8006676:	2800      	cmp	r0, #0
 8006678:	d105      	bne.n	8006686 <_svfiprintf_r+0x32>
 800667a:	230c      	movs	r3, #12
 800667c:	9a03      	ldr	r2, [sp, #12]
 800667e:	3801      	subs	r0, #1
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	b021      	add	sp, #132	; 0x84
 8006684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006686:	2340      	movs	r3, #64	; 0x40
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	2300      	movs	r3, #0
 800668c:	ac08      	add	r4, sp, #32
 800668e:	6163      	str	r3, [r4, #20]
 8006690:	3320      	adds	r3, #32
 8006692:	7663      	strb	r3, [r4, #25]
 8006694:	3310      	adds	r3, #16
 8006696:	76a3      	strb	r3, [r4, #26]
 8006698:	9507      	str	r5, [sp, #28]
 800669a:	0035      	movs	r5, r6
 800669c:	782b      	ldrb	r3, [r5, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <_svfiprintf_r+0x52>
 80066a2:	2b25      	cmp	r3, #37	; 0x25
 80066a4:	d147      	bne.n	8006736 <_svfiprintf_r+0xe2>
 80066a6:	1bab      	subs	r3, r5, r6
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	42b5      	cmp	r5, r6
 80066ac:	d00c      	beq.n	80066c8 <_svfiprintf_r+0x74>
 80066ae:	0032      	movs	r2, r6
 80066b0:	0039      	movs	r1, r7
 80066b2:	9803      	ldr	r0, [sp, #12]
 80066b4:	f7ff ff6c 	bl	8006590 <__ssputs_r>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d100      	bne.n	80066be <_svfiprintf_r+0x6a>
 80066bc:	e0ae      	b.n	800681c <_svfiprintf_r+0x1c8>
 80066be:	6962      	ldr	r2, [r4, #20]
 80066c0:	9b05      	ldr	r3, [sp, #20]
 80066c2:	4694      	mov	ip, r2
 80066c4:	4463      	add	r3, ip
 80066c6:	6163      	str	r3, [r4, #20]
 80066c8:	782b      	ldrb	r3, [r5, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d100      	bne.n	80066d0 <_svfiprintf_r+0x7c>
 80066ce:	e0a5      	b.n	800681c <_svfiprintf_r+0x1c8>
 80066d0:	2201      	movs	r2, #1
 80066d2:	2300      	movs	r3, #0
 80066d4:	4252      	negs	r2, r2
 80066d6:	6062      	str	r2, [r4, #4]
 80066d8:	a904      	add	r1, sp, #16
 80066da:	3254      	adds	r2, #84	; 0x54
 80066dc:	1852      	adds	r2, r2, r1
 80066de:	1c6e      	adds	r6, r5, #1
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	60e3      	str	r3, [r4, #12]
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	7013      	strb	r3, [r2, #0]
 80066e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80066ea:	2205      	movs	r2, #5
 80066ec:	7831      	ldrb	r1, [r6, #0]
 80066ee:	4854      	ldr	r0, [pc, #336]	; (8006840 <_svfiprintf_r+0x1ec>)
 80066f0:	f000 fa32 	bl	8006b58 <memchr>
 80066f4:	1c75      	adds	r5, r6, #1
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d11f      	bne.n	800673a <_svfiprintf_r+0xe6>
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	06d3      	lsls	r3, r2, #27
 80066fe:	d504      	bpl.n	800670a <_svfiprintf_r+0xb6>
 8006700:	2353      	movs	r3, #83	; 0x53
 8006702:	a904      	add	r1, sp, #16
 8006704:	185b      	adds	r3, r3, r1
 8006706:	2120      	movs	r1, #32
 8006708:	7019      	strb	r1, [r3, #0]
 800670a:	0713      	lsls	r3, r2, #28
 800670c:	d504      	bpl.n	8006718 <_svfiprintf_r+0xc4>
 800670e:	2353      	movs	r3, #83	; 0x53
 8006710:	a904      	add	r1, sp, #16
 8006712:	185b      	adds	r3, r3, r1
 8006714:	212b      	movs	r1, #43	; 0x2b
 8006716:	7019      	strb	r1, [r3, #0]
 8006718:	7833      	ldrb	r3, [r6, #0]
 800671a:	2b2a      	cmp	r3, #42	; 0x2a
 800671c:	d016      	beq.n	800674c <_svfiprintf_r+0xf8>
 800671e:	0035      	movs	r5, r6
 8006720:	2100      	movs	r1, #0
 8006722:	200a      	movs	r0, #10
 8006724:	68e3      	ldr	r3, [r4, #12]
 8006726:	782a      	ldrb	r2, [r5, #0]
 8006728:	1c6e      	adds	r6, r5, #1
 800672a:	3a30      	subs	r2, #48	; 0x30
 800672c:	2a09      	cmp	r2, #9
 800672e:	d94e      	bls.n	80067ce <_svfiprintf_r+0x17a>
 8006730:	2900      	cmp	r1, #0
 8006732:	d111      	bne.n	8006758 <_svfiprintf_r+0x104>
 8006734:	e017      	b.n	8006766 <_svfiprintf_r+0x112>
 8006736:	3501      	adds	r5, #1
 8006738:	e7b0      	b.n	800669c <_svfiprintf_r+0x48>
 800673a:	4b41      	ldr	r3, [pc, #260]	; (8006840 <_svfiprintf_r+0x1ec>)
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	1ac0      	subs	r0, r0, r3
 8006740:	2301      	movs	r3, #1
 8006742:	4083      	lsls	r3, r0
 8006744:	4313      	orrs	r3, r2
 8006746:	002e      	movs	r6, r5
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	e7ce      	b.n	80066ea <_svfiprintf_r+0x96>
 800674c:	9b07      	ldr	r3, [sp, #28]
 800674e:	1d19      	adds	r1, r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	9107      	str	r1, [sp, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	db01      	blt.n	800675c <_svfiprintf_r+0x108>
 8006758:	930b      	str	r3, [sp, #44]	; 0x2c
 800675a:	e004      	b.n	8006766 <_svfiprintf_r+0x112>
 800675c:	425b      	negs	r3, r3
 800675e:	60e3      	str	r3, [r4, #12]
 8006760:	2302      	movs	r3, #2
 8006762:	4313      	orrs	r3, r2
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	782b      	ldrb	r3, [r5, #0]
 8006768:	2b2e      	cmp	r3, #46	; 0x2e
 800676a:	d10a      	bne.n	8006782 <_svfiprintf_r+0x12e>
 800676c:	786b      	ldrb	r3, [r5, #1]
 800676e:	2b2a      	cmp	r3, #42	; 0x2a
 8006770:	d135      	bne.n	80067de <_svfiprintf_r+0x18a>
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	3502      	adds	r5, #2
 8006776:	1d1a      	adds	r2, r3, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	9207      	str	r2, [sp, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	db2b      	blt.n	80067d8 <_svfiprintf_r+0x184>
 8006780:	9309      	str	r3, [sp, #36]	; 0x24
 8006782:	4e30      	ldr	r6, [pc, #192]	; (8006844 <_svfiprintf_r+0x1f0>)
 8006784:	2203      	movs	r2, #3
 8006786:	0030      	movs	r0, r6
 8006788:	7829      	ldrb	r1, [r5, #0]
 800678a:	f000 f9e5 	bl	8006b58 <memchr>
 800678e:	2800      	cmp	r0, #0
 8006790:	d006      	beq.n	80067a0 <_svfiprintf_r+0x14c>
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	1b80      	subs	r0, r0, r6
 8006796:	4083      	lsls	r3, r0
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	3501      	adds	r5, #1
 800679c:	4313      	orrs	r3, r2
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	7829      	ldrb	r1, [r5, #0]
 80067a2:	2206      	movs	r2, #6
 80067a4:	4828      	ldr	r0, [pc, #160]	; (8006848 <_svfiprintf_r+0x1f4>)
 80067a6:	1c6e      	adds	r6, r5, #1
 80067a8:	7621      	strb	r1, [r4, #24]
 80067aa:	f000 f9d5 	bl	8006b58 <memchr>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d03c      	beq.n	800682c <_svfiprintf_r+0x1d8>
 80067b2:	4b26      	ldr	r3, [pc, #152]	; (800684c <_svfiprintf_r+0x1f8>)
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d125      	bne.n	8006804 <_svfiprintf_r+0x1b0>
 80067b8:	2207      	movs	r2, #7
 80067ba:	9b07      	ldr	r3, [sp, #28]
 80067bc:	3307      	adds	r3, #7
 80067be:	4393      	bics	r3, r2
 80067c0:	3308      	adds	r3, #8
 80067c2:	9307      	str	r3, [sp, #28]
 80067c4:	6963      	ldr	r3, [r4, #20]
 80067c6:	9a04      	ldr	r2, [sp, #16]
 80067c8:	189b      	adds	r3, r3, r2
 80067ca:	6163      	str	r3, [r4, #20]
 80067cc:	e765      	b.n	800669a <_svfiprintf_r+0x46>
 80067ce:	4343      	muls	r3, r0
 80067d0:	0035      	movs	r5, r6
 80067d2:	2101      	movs	r1, #1
 80067d4:	189b      	adds	r3, r3, r2
 80067d6:	e7a6      	b.n	8006726 <_svfiprintf_r+0xd2>
 80067d8:	2301      	movs	r3, #1
 80067da:	425b      	negs	r3, r3
 80067dc:	e7d0      	b.n	8006780 <_svfiprintf_r+0x12c>
 80067de:	2300      	movs	r3, #0
 80067e0:	200a      	movs	r0, #10
 80067e2:	001a      	movs	r2, r3
 80067e4:	3501      	adds	r5, #1
 80067e6:	6063      	str	r3, [r4, #4]
 80067e8:	7829      	ldrb	r1, [r5, #0]
 80067ea:	1c6e      	adds	r6, r5, #1
 80067ec:	3930      	subs	r1, #48	; 0x30
 80067ee:	2909      	cmp	r1, #9
 80067f0:	d903      	bls.n	80067fa <_svfiprintf_r+0x1a6>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0c5      	beq.n	8006782 <_svfiprintf_r+0x12e>
 80067f6:	9209      	str	r2, [sp, #36]	; 0x24
 80067f8:	e7c3      	b.n	8006782 <_svfiprintf_r+0x12e>
 80067fa:	4342      	muls	r2, r0
 80067fc:	0035      	movs	r5, r6
 80067fe:	2301      	movs	r3, #1
 8006800:	1852      	adds	r2, r2, r1
 8006802:	e7f1      	b.n	80067e8 <_svfiprintf_r+0x194>
 8006804:	ab07      	add	r3, sp, #28
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	003a      	movs	r2, r7
 800680a:	0021      	movs	r1, r4
 800680c:	4b10      	ldr	r3, [pc, #64]	; (8006850 <_svfiprintf_r+0x1fc>)
 800680e:	9803      	ldr	r0, [sp, #12]
 8006810:	e000      	b.n	8006814 <_svfiprintf_r+0x1c0>
 8006812:	bf00      	nop
 8006814:	9004      	str	r0, [sp, #16]
 8006816:	9b04      	ldr	r3, [sp, #16]
 8006818:	3301      	adds	r3, #1
 800681a:	d1d3      	bne.n	80067c4 <_svfiprintf_r+0x170>
 800681c:	89bb      	ldrh	r3, [r7, #12]
 800681e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006820:	065b      	lsls	r3, r3, #25
 8006822:	d400      	bmi.n	8006826 <_svfiprintf_r+0x1d2>
 8006824:	e72d      	b.n	8006682 <_svfiprintf_r+0x2e>
 8006826:	2001      	movs	r0, #1
 8006828:	4240      	negs	r0, r0
 800682a:	e72a      	b.n	8006682 <_svfiprintf_r+0x2e>
 800682c:	ab07      	add	r3, sp, #28
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	003a      	movs	r2, r7
 8006832:	0021      	movs	r1, r4
 8006834:	4b06      	ldr	r3, [pc, #24]	; (8006850 <_svfiprintf_r+0x1fc>)
 8006836:	9803      	ldr	r0, [sp, #12]
 8006838:	f000 f87c 	bl	8006934 <_printf_i>
 800683c:	e7ea      	b.n	8006814 <_svfiprintf_r+0x1c0>
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	08007058 	.word	0x08007058
 8006844:	0800705e 	.word	0x0800705e
 8006848:	08007062 	.word	0x08007062
 800684c:	00000000 	.word	0x00000000
 8006850:	08006591 	.word	0x08006591

08006854 <_printf_common>:
 8006854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006856:	0015      	movs	r5, r2
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	688a      	ldr	r2, [r1, #8]
 800685c:	690b      	ldr	r3, [r1, #16]
 800685e:	000c      	movs	r4, r1
 8006860:	9000      	str	r0, [sp, #0]
 8006862:	4293      	cmp	r3, r2
 8006864:	da00      	bge.n	8006868 <_printf_common+0x14>
 8006866:	0013      	movs	r3, r2
 8006868:	0022      	movs	r2, r4
 800686a:	602b      	str	r3, [r5, #0]
 800686c:	3243      	adds	r2, #67	; 0x43
 800686e:	7812      	ldrb	r2, [r2, #0]
 8006870:	2a00      	cmp	r2, #0
 8006872:	d001      	beq.n	8006878 <_printf_common+0x24>
 8006874:	3301      	adds	r3, #1
 8006876:	602b      	str	r3, [r5, #0]
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	069b      	lsls	r3, r3, #26
 800687c:	d502      	bpl.n	8006884 <_printf_common+0x30>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	3302      	adds	r3, #2
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	2306      	movs	r3, #6
 8006888:	0017      	movs	r7, r2
 800688a:	401f      	ands	r7, r3
 800688c:	421a      	tst	r2, r3
 800688e:	d027      	beq.n	80068e0 <_printf_common+0x8c>
 8006890:	0023      	movs	r3, r4
 8006892:	3343      	adds	r3, #67	; 0x43
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	1e5a      	subs	r2, r3, #1
 8006898:	4193      	sbcs	r3, r2
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	0692      	lsls	r2, r2, #26
 800689e:	d430      	bmi.n	8006902 <_printf_common+0xae>
 80068a0:	0022      	movs	r2, r4
 80068a2:	9901      	ldr	r1, [sp, #4]
 80068a4:	9800      	ldr	r0, [sp, #0]
 80068a6:	9e08      	ldr	r6, [sp, #32]
 80068a8:	3243      	adds	r2, #67	; 0x43
 80068aa:	47b0      	blx	r6
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d025      	beq.n	80068fc <_printf_common+0xa8>
 80068b0:	2306      	movs	r3, #6
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	682a      	ldr	r2, [r5, #0]
 80068b6:	68e1      	ldr	r1, [r4, #12]
 80068b8:	2500      	movs	r5, #0
 80068ba:	4003      	ands	r3, r0
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d103      	bne.n	80068c8 <_printf_common+0x74>
 80068c0:	1a8d      	subs	r5, r1, r2
 80068c2:	43eb      	mvns	r3, r5
 80068c4:	17db      	asrs	r3, r3, #31
 80068c6:	401d      	ands	r5, r3
 80068c8:	68a3      	ldr	r3, [r4, #8]
 80068ca:	6922      	ldr	r2, [r4, #16]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	dd01      	ble.n	80068d4 <_printf_common+0x80>
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	18ed      	adds	r5, r5, r3
 80068d4:	2700      	movs	r7, #0
 80068d6:	42bd      	cmp	r5, r7
 80068d8:	d120      	bne.n	800691c <_printf_common+0xc8>
 80068da:	2000      	movs	r0, #0
 80068dc:	e010      	b.n	8006900 <_printf_common+0xac>
 80068de:	3701      	adds	r7, #1
 80068e0:	68e3      	ldr	r3, [r4, #12]
 80068e2:	682a      	ldr	r2, [r5, #0]
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	42bb      	cmp	r3, r7
 80068e8:	ddd2      	ble.n	8006890 <_printf_common+0x3c>
 80068ea:	0022      	movs	r2, r4
 80068ec:	2301      	movs	r3, #1
 80068ee:	9901      	ldr	r1, [sp, #4]
 80068f0:	9800      	ldr	r0, [sp, #0]
 80068f2:	9e08      	ldr	r6, [sp, #32]
 80068f4:	3219      	adds	r2, #25
 80068f6:	47b0      	blx	r6
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d1f0      	bne.n	80068de <_printf_common+0x8a>
 80068fc:	2001      	movs	r0, #1
 80068fe:	4240      	negs	r0, r0
 8006900:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006902:	2030      	movs	r0, #48	; 0x30
 8006904:	18e1      	adds	r1, r4, r3
 8006906:	3143      	adds	r1, #67	; 0x43
 8006908:	7008      	strb	r0, [r1, #0]
 800690a:	0021      	movs	r1, r4
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	3145      	adds	r1, #69	; 0x45
 8006910:	7809      	ldrb	r1, [r1, #0]
 8006912:	18a2      	adds	r2, r4, r2
 8006914:	3243      	adds	r2, #67	; 0x43
 8006916:	3302      	adds	r3, #2
 8006918:	7011      	strb	r1, [r2, #0]
 800691a:	e7c1      	b.n	80068a0 <_printf_common+0x4c>
 800691c:	0022      	movs	r2, r4
 800691e:	2301      	movs	r3, #1
 8006920:	9901      	ldr	r1, [sp, #4]
 8006922:	9800      	ldr	r0, [sp, #0]
 8006924:	9e08      	ldr	r6, [sp, #32]
 8006926:	321a      	adds	r2, #26
 8006928:	47b0      	blx	r6
 800692a:	1c43      	adds	r3, r0, #1
 800692c:	d0e6      	beq.n	80068fc <_printf_common+0xa8>
 800692e:	3701      	adds	r7, #1
 8006930:	e7d1      	b.n	80068d6 <_printf_common+0x82>
	...

08006934 <_printf_i>:
 8006934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006936:	b08b      	sub	sp, #44	; 0x2c
 8006938:	9206      	str	r2, [sp, #24]
 800693a:	000a      	movs	r2, r1
 800693c:	3243      	adds	r2, #67	; 0x43
 800693e:	9307      	str	r3, [sp, #28]
 8006940:	9005      	str	r0, [sp, #20]
 8006942:	9204      	str	r2, [sp, #16]
 8006944:	7e0a      	ldrb	r2, [r1, #24]
 8006946:	000c      	movs	r4, r1
 8006948:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800694a:	2a78      	cmp	r2, #120	; 0x78
 800694c:	d807      	bhi.n	800695e <_printf_i+0x2a>
 800694e:	2a62      	cmp	r2, #98	; 0x62
 8006950:	d809      	bhi.n	8006966 <_printf_i+0x32>
 8006952:	2a00      	cmp	r2, #0
 8006954:	d100      	bne.n	8006958 <_printf_i+0x24>
 8006956:	e0c1      	b.n	8006adc <_printf_i+0x1a8>
 8006958:	2a58      	cmp	r2, #88	; 0x58
 800695a:	d100      	bne.n	800695e <_printf_i+0x2a>
 800695c:	e08c      	b.n	8006a78 <_printf_i+0x144>
 800695e:	0026      	movs	r6, r4
 8006960:	3642      	adds	r6, #66	; 0x42
 8006962:	7032      	strb	r2, [r6, #0]
 8006964:	e022      	b.n	80069ac <_printf_i+0x78>
 8006966:	0010      	movs	r0, r2
 8006968:	3863      	subs	r0, #99	; 0x63
 800696a:	2815      	cmp	r0, #21
 800696c:	d8f7      	bhi.n	800695e <_printf_i+0x2a>
 800696e:	f7f9 fbc7 	bl	8000100 <__gnu_thumb1_case_shi>
 8006972:	0016      	.short	0x0016
 8006974:	fff6001f 	.word	0xfff6001f
 8006978:	fff6fff6 	.word	0xfff6fff6
 800697c:	001ffff6 	.word	0x001ffff6
 8006980:	fff6fff6 	.word	0xfff6fff6
 8006984:	fff6fff6 	.word	0xfff6fff6
 8006988:	003600a8 	.word	0x003600a8
 800698c:	fff6009a 	.word	0xfff6009a
 8006990:	00b9fff6 	.word	0x00b9fff6
 8006994:	0036fff6 	.word	0x0036fff6
 8006998:	fff6fff6 	.word	0xfff6fff6
 800699c:	009e      	.short	0x009e
 800699e:	0026      	movs	r6, r4
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	3642      	adds	r6, #66	; 0x42
 80069a4:	1d11      	adds	r1, r2, #4
 80069a6:	6019      	str	r1, [r3, #0]
 80069a8:	6813      	ldr	r3, [r2, #0]
 80069aa:	7033      	strb	r3, [r6, #0]
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0a7      	b.n	8006b00 <_printf_i+0x1cc>
 80069b0:	6808      	ldr	r0, [r1, #0]
 80069b2:	6819      	ldr	r1, [r3, #0]
 80069b4:	1d0a      	adds	r2, r1, #4
 80069b6:	0605      	lsls	r5, r0, #24
 80069b8:	d50b      	bpl.n	80069d2 <_printf_i+0x9e>
 80069ba:	680d      	ldr	r5, [r1, #0]
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	2d00      	cmp	r5, #0
 80069c0:	da03      	bge.n	80069ca <_printf_i+0x96>
 80069c2:	232d      	movs	r3, #45	; 0x2d
 80069c4:	9a04      	ldr	r2, [sp, #16]
 80069c6:	426d      	negs	r5, r5
 80069c8:	7013      	strb	r3, [r2, #0]
 80069ca:	4b61      	ldr	r3, [pc, #388]	; (8006b50 <_printf_i+0x21c>)
 80069cc:	270a      	movs	r7, #10
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	e01b      	b.n	8006a0a <_printf_i+0xd6>
 80069d2:	680d      	ldr	r5, [r1, #0]
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	0641      	lsls	r1, r0, #25
 80069d8:	d5f1      	bpl.n	80069be <_printf_i+0x8a>
 80069da:	b22d      	sxth	r5, r5
 80069dc:	e7ef      	b.n	80069be <_printf_i+0x8a>
 80069de:	680d      	ldr	r5, [r1, #0]
 80069e0:	6819      	ldr	r1, [r3, #0]
 80069e2:	1d08      	adds	r0, r1, #4
 80069e4:	6018      	str	r0, [r3, #0]
 80069e6:	062e      	lsls	r6, r5, #24
 80069e8:	d501      	bpl.n	80069ee <_printf_i+0xba>
 80069ea:	680d      	ldr	r5, [r1, #0]
 80069ec:	e003      	b.n	80069f6 <_printf_i+0xc2>
 80069ee:	066d      	lsls	r5, r5, #25
 80069f0:	d5fb      	bpl.n	80069ea <_printf_i+0xb6>
 80069f2:	680d      	ldr	r5, [r1, #0]
 80069f4:	b2ad      	uxth	r5, r5
 80069f6:	4b56      	ldr	r3, [pc, #344]	; (8006b50 <_printf_i+0x21c>)
 80069f8:	2708      	movs	r7, #8
 80069fa:	9303      	str	r3, [sp, #12]
 80069fc:	2a6f      	cmp	r2, #111	; 0x6f
 80069fe:	d000      	beq.n	8006a02 <_printf_i+0xce>
 8006a00:	3702      	adds	r7, #2
 8006a02:	0023      	movs	r3, r4
 8006a04:	2200      	movs	r2, #0
 8006a06:	3343      	adds	r3, #67	; 0x43
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	6863      	ldr	r3, [r4, #4]
 8006a0c:	60a3      	str	r3, [r4, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	db03      	blt.n	8006a1a <_printf_i+0xe6>
 8006a12:	2204      	movs	r2, #4
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	4391      	bics	r1, r2
 8006a18:	6021      	str	r1, [r4, #0]
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	d102      	bne.n	8006a24 <_printf_i+0xf0>
 8006a1e:	9e04      	ldr	r6, [sp, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00c      	beq.n	8006a3e <_printf_i+0x10a>
 8006a24:	9e04      	ldr	r6, [sp, #16]
 8006a26:	0028      	movs	r0, r5
 8006a28:	0039      	movs	r1, r7
 8006a2a:	f7f9 fbf9 	bl	8000220 <__aeabi_uidivmod>
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	3e01      	subs	r6, #1
 8006a32:	5c5b      	ldrb	r3, [r3, r1]
 8006a34:	7033      	strb	r3, [r6, #0]
 8006a36:	002b      	movs	r3, r5
 8006a38:	0005      	movs	r5, r0
 8006a3a:	429f      	cmp	r7, r3
 8006a3c:	d9f3      	bls.n	8006a26 <_printf_i+0xf2>
 8006a3e:	2f08      	cmp	r7, #8
 8006a40:	d109      	bne.n	8006a56 <_printf_i+0x122>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	07db      	lsls	r3, r3, #31
 8006a46:	d506      	bpl.n	8006a56 <_printf_i+0x122>
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	6922      	ldr	r2, [r4, #16]
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	dc02      	bgt.n	8006a56 <_printf_i+0x122>
 8006a50:	2330      	movs	r3, #48	; 0x30
 8006a52:	3e01      	subs	r6, #1
 8006a54:	7033      	strb	r3, [r6, #0]
 8006a56:	9b04      	ldr	r3, [sp, #16]
 8006a58:	1b9b      	subs	r3, r3, r6
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	0021      	movs	r1, r4
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	9805      	ldr	r0, [sp, #20]
 8006a64:	9b06      	ldr	r3, [sp, #24]
 8006a66:	aa09      	add	r2, sp, #36	; 0x24
 8006a68:	f7ff fef4 	bl	8006854 <_printf_common>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d14c      	bne.n	8006b0a <_printf_i+0x1d6>
 8006a70:	2001      	movs	r0, #1
 8006a72:	4240      	negs	r0, r0
 8006a74:	b00b      	add	sp, #44	; 0x2c
 8006a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a78:	3145      	adds	r1, #69	; 0x45
 8006a7a:	700a      	strb	r2, [r1, #0]
 8006a7c:	4a34      	ldr	r2, [pc, #208]	; (8006b50 <_printf_i+0x21c>)
 8006a7e:	9203      	str	r2, [sp, #12]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	6821      	ldr	r1, [r4, #0]
 8006a84:	ca20      	ldmia	r2!, {r5}
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	0608      	lsls	r0, r1, #24
 8006a8a:	d516      	bpl.n	8006aba <_printf_i+0x186>
 8006a8c:	07cb      	lsls	r3, r1, #31
 8006a8e:	d502      	bpl.n	8006a96 <_printf_i+0x162>
 8006a90:	2320      	movs	r3, #32
 8006a92:	4319      	orrs	r1, r3
 8006a94:	6021      	str	r1, [r4, #0]
 8006a96:	2710      	movs	r7, #16
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	d1b2      	bne.n	8006a02 <_printf_i+0xce>
 8006a9c:	2320      	movs	r3, #32
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	439a      	bics	r2, r3
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	e7ad      	b.n	8006a02 <_printf_i+0xce>
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	6809      	ldr	r1, [r1, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	6022      	str	r2, [r4, #0]
 8006aae:	0022      	movs	r2, r4
 8006ab0:	2178      	movs	r1, #120	; 0x78
 8006ab2:	3245      	adds	r2, #69	; 0x45
 8006ab4:	7011      	strb	r1, [r2, #0]
 8006ab6:	4a27      	ldr	r2, [pc, #156]	; (8006b54 <_printf_i+0x220>)
 8006ab8:	e7e1      	b.n	8006a7e <_printf_i+0x14a>
 8006aba:	0648      	lsls	r0, r1, #25
 8006abc:	d5e6      	bpl.n	8006a8c <_printf_i+0x158>
 8006abe:	b2ad      	uxth	r5, r5
 8006ac0:	e7e4      	b.n	8006a8c <_printf_i+0x158>
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	680d      	ldr	r5, [r1, #0]
 8006ac6:	1d10      	adds	r0, r2, #4
 8006ac8:	6949      	ldr	r1, [r1, #20]
 8006aca:	6018      	str	r0, [r3, #0]
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	062e      	lsls	r6, r5, #24
 8006ad0:	d501      	bpl.n	8006ad6 <_printf_i+0x1a2>
 8006ad2:	6019      	str	r1, [r3, #0]
 8006ad4:	e002      	b.n	8006adc <_printf_i+0x1a8>
 8006ad6:	066d      	lsls	r5, r5, #25
 8006ad8:	d5fb      	bpl.n	8006ad2 <_printf_i+0x19e>
 8006ada:	8019      	strh	r1, [r3, #0]
 8006adc:	2300      	movs	r3, #0
 8006ade:	9e04      	ldr	r6, [sp, #16]
 8006ae0:	6123      	str	r3, [r4, #16]
 8006ae2:	e7bb      	b.n	8006a5c <_printf_i+0x128>
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	1d11      	adds	r1, r2, #4
 8006ae8:	6019      	str	r1, [r3, #0]
 8006aea:	6816      	ldr	r6, [r2, #0]
 8006aec:	2100      	movs	r1, #0
 8006aee:	0030      	movs	r0, r6
 8006af0:	6862      	ldr	r2, [r4, #4]
 8006af2:	f000 f831 	bl	8006b58 <memchr>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d001      	beq.n	8006afe <_printf_i+0x1ca>
 8006afa:	1b80      	subs	r0, r0, r6
 8006afc:	6060      	str	r0, [r4, #4]
 8006afe:	6863      	ldr	r3, [r4, #4]
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9a04      	ldr	r2, [sp, #16]
 8006b06:	7013      	strb	r3, [r2, #0]
 8006b08:	e7a8      	b.n	8006a5c <_printf_i+0x128>
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	0032      	movs	r2, r6
 8006b0e:	9906      	ldr	r1, [sp, #24]
 8006b10:	9805      	ldr	r0, [sp, #20]
 8006b12:	9d07      	ldr	r5, [sp, #28]
 8006b14:	47a8      	blx	r5
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d0aa      	beq.n	8006a70 <_printf_i+0x13c>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	079b      	lsls	r3, r3, #30
 8006b1e:	d415      	bmi.n	8006b4c <_printf_i+0x218>
 8006b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b22:	68e0      	ldr	r0, [r4, #12]
 8006b24:	4298      	cmp	r0, r3
 8006b26:	daa5      	bge.n	8006a74 <_printf_i+0x140>
 8006b28:	0018      	movs	r0, r3
 8006b2a:	e7a3      	b.n	8006a74 <_printf_i+0x140>
 8006b2c:	0022      	movs	r2, r4
 8006b2e:	2301      	movs	r3, #1
 8006b30:	9906      	ldr	r1, [sp, #24]
 8006b32:	9805      	ldr	r0, [sp, #20]
 8006b34:	9e07      	ldr	r6, [sp, #28]
 8006b36:	3219      	adds	r2, #25
 8006b38:	47b0      	blx	r6
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	d098      	beq.n	8006a70 <_printf_i+0x13c>
 8006b3e:	3501      	adds	r5, #1
 8006b40:	68e3      	ldr	r3, [r4, #12]
 8006b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	42ab      	cmp	r3, r5
 8006b48:	dcf0      	bgt.n	8006b2c <_printf_i+0x1f8>
 8006b4a:	e7e9      	b.n	8006b20 <_printf_i+0x1ec>
 8006b4c:	2500      	movs	r5, #0
 8006b4e:	e7f7      	b.n	8006b40 <_printf_i+0x20c>
 8006b50:	08007069 	.word	0x08007069
 8006b54:	0800707a 	.word	0x0800707a

08006b58 <memchr>:
 8006b58:	b2c9      	uxtb	r1, r1
 8006b5a:	1882      	adds	r2, r0, r2
 8006b5c:	4290      	cmp	r0, r2
 8006b5e:	d101      	bne.n	8006b64 <memchr+0xc>
 8006b60:	2000      	movs	r0, #0
 8006b62:	4770      	bx	lr
 8006b64:	7803      	ldrb	r3, [r0, #0]
 8006b66:	428b      	cmp	r3, r1
 8006b68:	d0fb      	beq.n	8006b62 <memchr+0xa>
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	e7f6      	b.n	8006b5c <memchr+0x4>

08006b6e <memcpy>:
 8006b6e:	2300      	movs	r3, #0
 8006b70:	b510      	push	{r4, lr}
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d100      	bne.n	8006b78 <memcpy+0xa>
 8006b76:	bd10      	pop	{r4, pc}
 8006b78:	5ccc      	ldrb	r4, [r1, r3]
 8006b7a:	54c4      	strb	r4, [r0, r3]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	e7f8      	b.n	8006b72 <memcpy+0x4>

08006b80 <memmove>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4288      	cmp	r0, r1
 8006b84:	d902      	bls.n	8006b8c <memmove+0xc>
 8006b86:	188b      	adds	r3, r1, r2
 8006b88:	4298      	cmp	r0, r3
 8006b8a:	d303      	bcc.n	8006b94 <memmove+0x14>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e007      	b.n	8006ba0 <memmove+0x20>
 8006b90:	5c8b      	ldrb	r3, [r1, r2]
 8006b92:	5483      	strb	r3, [r0, r2]
 8006b94:	3a01      	subs	r2, #1
 8006b96:	d2fb      	bcs.n	8006b90 <memmove+0x10>
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	5ccc      	ldrb	r4, [r1, r3]
 8006b9c:	54c4      	strb	r4, [r0, r3]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d1fa      	bne.n	8006b9a <memmove+0x1a>
 8006ba4:	e7f8      	b.n	8006b98 <memmove+0x18>
	...

08006ba8 <_free_r>:
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	0005      	movs	r5, r0
 8006bac:	2900      	cmp	r1, #0
 8006bae:	d010      	beq.n	8006bd2 <_free_r+0x2a>
 8006bb0:	1f0c      	subs	r4, r1, #4
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	da00      	bge.n	8006bba <_free_r+0x12>
 8006bb8:	18e4      	adds	r4, r4, r3
 8006bba:	0028      	movs	r0, r5
 8006bbc:	f000 f918 	bl	8006df0 <__malloc_lock>
 8006bc0:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <_free_r+0x90>)
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <_free_r+0x2c>
 8006bc8:	6063      	str	r3, [r4, #4]
 8006bca:	6014      	str	r4, [r2, #0]
 8006bcc:	0028      	movs	r0, r5
 8006bce:	f000 f917 	bl	8006e00 <__malloc_unlock>
 8006bd2:	bd70      	pop	{r4, r5, r6, pc}
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d908      	bls.n	8006bea <_free_r+0x42>
 8006bd8:	6821      	ldr	r1, [r4, #0]
 8006bda:	1860      	adds	r0, r4, r1
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	d1f3      	bne.n	8006bc8 <_free_r+0x20>
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	1841      	adds	r1, r0, r1
 8006be6:	6021      	str	r1, [r4, #0]
 8006be8:	e7ee      	b.n	8006bc8 <_free_r+0x20>
 8006bea:	001a      	movs	r2, r3
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <_free_r+0x4e>
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	d9f9      	bls.n	8006bea <_free_r+0x42>
 8006bf6:	6811      	ldr	r1, [r2, #0]
 8006bf8:	1850      	adds	r0, r2, r1
 8006bfa:	42a0      	cmp	r0, r4
 8006bfc:	d10b      	bne.n	8006c16 <_free_r+0x6e>
 8006bfe:	6820      	ldr	r0, [r4, #0]
 8006c00:	1809      	adds	r1, r1, r0
 8006c02:	1850      	adds	r0, r2, r1
 8006c04:	6011      	str	r1, [r2, #0]
 8006c06:	4283      	cmp	r3, r0
 8006c08:	d1e0      	bne.n	8006bcc <_free_r+0x24>
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	1841      	adds	r1, r0, r1
 8006c10:	6011      	str	r1, [r2, #0]
 8006c12:	6053      	str	r3, [r2, #4]
 8006c14:	e7da      	b.n	8006bcc <_free_r+0x24>
 8006c16:	42a0      	cmp	r0, r4
 8006c18:	d902      	bls.n	8006c20 <_free_r+0x78>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	e7d5      	b.n	8006bcc <_free_r+0x24>
 8006c20:	6821      	ldr	r1, [r4, #0]
 8006c22:	1860      	adds	r0, r4, r1
 8006c24:	4283      	cmp	r3, r0
 8006c26:	d103      	bne.n	8006c30 <_free_r+0x88>
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	1841      	adds	r1, r0, r1
 8006c2e:	6021      	str	r1, [r4, #0]
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	6054      	str	r4, [r2, #4]
 8006c34:	e7ca      	b.n	8006bcc <_free_r+0x24>
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	20000108 	.word	0x20000108

08006c3c <sbrk_aligned>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	4e0f      	ldr	r6, [pc, #60]	; (8006c7c <sbrk_aligned+0x40>)
 8006c40:	000d      	movs	r5, r1
 8006c42:	6831      	ldr	r1, [r6, #0]
 8006c44:	0004      	movs	r4, r0
 8006c46:	2900      	cmp	r1, #0
 8006c48:	d102      	bne.n	8006c50 <sbrk_aligned+0x14>
 8006c4a:	f000 f8bf 	bl	8006dcc <_sbrk_r>
 8006c4e:	6030      	str	r0, [r6, #0]
 8006c50:	0029      	movs	r1, r5
 8006c52:	0020      	movs	r0, r4
 8006c54:	f000 f8ba 	bl	8006dcc <_sbrk_r>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d00a      	beq.n	8006c72 <sbrk_aligned+0x36>
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	1cc5      	adds	r5, r0, #3
 8006c60:	439d      	bics	r5, r3
 8006c62:	42a8      	cmp	r0, r5
 8006c64:	d007      	beq.n	8006c76 <sbrk_aligned+0x3a>
 8006c66:	1a29      	subs	r1, r5, r0
 8006c68:	0020      	movs	r0, r4
 8006c6a:	f000 f8af 	bl	8006dcc <_sbrk_r>
 8006c6e:	1c43      	adds	r3, r0, #1
 8006c70:	d101      	bne.n	8006c76 <sbrk_aligned+0x3a>
 8006c72:	2501      	movs	r5, #1
 8006c74:	426d      	negs	r5, r5
 8006c76:	0028      	movs	r0, r5
 8006c78:	bd70      	pop	{r4, r5, r6, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	2000010c 	.word	0x2000010c

08006c80 <_malloc_r>:
 8006c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c82:	2203      	movs	r2, #3
 8006c84:	1ccb      	adds	r3, r1, #3
 8006c86:	4393      	bics	r3, r2
 8006c88:	3308      	adds	r3, #8
 8006c8a:	0006      	movs	r6, r0
 8006c8c:	001f      	movs	r7, r3
 8006c8e:	2b0c      	cmp	r3, #12
 8006c90:	d232      	bcs.n	8006cf8 <_malloc_r+0x78>
 8006c92:	270c      	movs	r7, #12
 8006c94:	42b9      	cmp	r1, r7
 8006c96:	d831      	bhi.n	8006cfc <_malloc_r+0x7c>
 8006c98:	0030      	movs	r0, r6
 8006c9a:	f000 f8a9 	bl	8006df0 <__malloc_lock>
 8006c9e:	4d32      	ldr	r5, [pc, #200]	; (8006d68 <_malloc_r+0xe8>)
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	001c      	movs	r4, r3
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	d12e      	bne.n	8006d06 <_malloc_r+0x86>
 8006ca8:	0039      	movs	r1, r7
 8006caa:	0030      	movs	r0, r6
 8006cac:	f7ff ffc6 	bl	8006c3c <sbrk_aligned>
 8006cb0:	0004      	movs	r4, r0
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	d11e      	bne.n	8006cf4 <_malloc_r+0x74>
 8006cb6:	682c      	ldr	r4, [r5, #0]
 8006cb8:	0025      	movs	r5, r4
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	d14a      	bne.n	8006d54 <_malloc_r+0xd4>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	0029      	movs	r1, r5
 8006cc2:	18e3      	adds	r3, r4, r3
 8006cc4:	0030      	movs	r0, r6
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	f000 f880 	bl	8006dcc <_sbrk_r>
 8006ccc:	9b01      	ldr	r3, [sp, #4]
 8006cce:	4283      	cmp	r3, r0
 8006cd0:	d143      	bne.n	8006d5a <_malloc_r+0xda>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	3703      	adds	r7, #3
 8006cd6:	1aff      	subs	r7, r7, r3
 8006cd8:	2303      	movs	r3, #3
 8006cda:	439f      	bics	r7, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	2f0c      	cmp	r7, #12
 8006ce0:	d200      	bcs.n	8006ce4 <_malloc_r+0x64>
 8006ce2:	270c      	movs	r7, #12
 8006ce4:	0039      	movs	r1, r7
 8006ce6:	0030      	movs	r0, r6
 8006ce8:	f7ff ffa8 	bl	8006c3c <sbrk_aligned>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d034      	beq.n	8006d5a <_malloc_r+0xda>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	19df      	adds	r7, r3, r7
 8006cf4:	6027      	str	r7, [r4, #0]
 8006cf6:	e013      	b.n	8006d20 <_malloc_r+0xa0>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dacb      	bge.n	8006c94 <_malloc_r+0x14>
 8006cfc:	230c      	movs	r3, #12
 8006cfe:	2500      	movs	r5, #0
 8006d00:	6033      	str	r3, [r6, #0]
 8006d02:	0028      	movs	r0, r5
 8006d04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	1bd1      	subs	r1, r2, r7
 8006d0a:	d420      	bmi.n	8006d4e <_malloc_r+0xce>
 8006d0c:	290b      	cmp	r1, #11
 8006d0e:	d917      	bls.n	8006d40 <_malloc_r+0xc0>
 8006d10:	19e2      	adds	r2, r4, r7
 8006d12:	6027      	str	r7, [r4, #0]
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	d111      	bne.n	8006d3c <_malloc_r+0xbc>
 8006d18:	602a      	str	r2, [r5, #0]
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	6011      	str	r1, [r2, #0]
 8006d1e:	6053      	str	r3, [r2, #4]
 8006d20:	0030      	movs	r0, r6
 8006d22:	0025      	movs	r5, r4
 8006d24:	f000 f86c 	bl	8006e00 <__malloc_unlock>
 8006d28:	2207      	movs	r2, #7
 8006d2a:	350b      	adds	r5, #11
 8006d2c:	1d23      	adds	r3, r4, #4
 8006d2e:	4395      	bics	r5, r2
 8006d30:	1aea      	subs	r2, r5, r3
 8006d32:	429d      	cmp	r5, r3
 8006d34:	d0e5      	beq.n	8006d02 <_malloc_r+0x82>
 8006d36:	1b5b      	subs	r3, r3, r5
 8006d38:	50a3      	str	r3, [r4, r2]
 8006d3a:	e7e2      	b.n	8006d02 <_malloc_r+0x82>
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	e7ec      	b.n	8006d1a <_malloc_r+0x9a>
 8006d40:	6862      	ldr	r2, [r4, #4]
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	d101      	bne.n	8006d4a <_malloc_r+0xca>
 8006d46:	602a      	str	r2, [r5, #0]
 8006d48:	e7ea      	b.n	8006d20 <_malloc_r+0xa0>
 8006d4a:	605a      	str	r2, [r3, #4]
 8006d4c:	e7e8      	b.n	8006d20 <_malloc_r+0xa0>
 8006d4e:	0023      	movs	r3, r4
 8006d50:	6864      	ldr	r4, [r4, #4]
 8006d52:	e7a7      	b.n	8006ca4 <_malloc_r+0x24>
 8006d54:	002c      	movs	r4, r5
 8006d56:	686d      	ldr	r5, [r5, #4]
 8006d58:	e7af      	b.n	8006cba <_malloc_r+0x3a>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	0030      	movs	r0, r6
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	f000 f84e 	bl	8006e00 <__malloc_unlock>
 8006d64:	e7cd      	b.n	8006d02 <_malloc_r+0x82>
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	20000108 	.word	0x20000108

08006d6c <_realloc_r>:
 8006d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6e:	0007      	movs	r7, r0
 8006d70:	000e      	movs	r6, r1
 8006d72:	0014      	movs	r4, r2
 8006d74:	2900      	cmp	r1, #0
 8006d76:	d105      	bne.n	8006d84 <_realloc_r+0x18>
 8006d78:	0011      	movs	r1, r2
 8006d7a:	f7ff ff81 	bl	8006c80 <_malloc_r>
 8006d7e:	0005      	movs	r5, r0
 8006d80:	0028      	movs	r0, r5
 8006d82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d103      	bne.n	8006d90 <_realloc_r+0x24>
 8006d88:	f7ff ff0e 	bl	8006ba8 <_free_r>
 8006d8c:	0025      	movs	r5, r4
 8006d8e:	e7f7      	b.n	8006d80 <_realloc_r+0x14>
 8006d90:	f000 f83e 	bl	8006e10 <_malloc_usable_size_r>
 8006d94:	9001      	str	r0, [sp, #4]
 8006d96:	4284      	cmp	r4, r0
 8006d98:	d803      	bhi.n	8006da2 <_realloc_r+0x36>
 8006d9a:	0035      	movs	r5, r6
 8006d9c:	0843      	lsrs	r3, r0, #1
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	d3ee      	bcc.n	8006d80 <_realloc_r+0x14>
 8006da2:	0021      	movs	r1, r4
 8006da4:	0038      	movs	r0, r7
 8006da6:	f7ff ff6b 	bl	8006c80 <_malloc_r>
 8006daa:	1e05      	subs	r5, r0, #0
 8006dac:	d0e8      	beq.n	8006d80 <_realloc_r+0x14>
 8006dae:	9b01      	ldr	r3, [sp, #4]
 8006db0:	0022      	movs	r2, r4
 8006db2:	429c      	cmp	r4, r3
 8006db4:	d900      	bls.n	8006db8 <_realloc_r+0x4c>
 8006db6:	001a      	movs	r2, r3
 8006db8:	0031      	movs	r1, r6
 8006dba:	0028      	movs	r0, r5
 8006dbc:	f7ff fed7 	bl	8006b6e <memcpy>
 8006dc0:	0031      	movs	r1, r6
 8006dc2:	0038      	movs	r0, r7
 8006dc4:	f7ff fef0 	bl	8006ba8 <_free_r>
 8006dc8:	e7da      	b.n	8006d80 <_realloc_r+0x14>
	...

08006dcc <_sbrk_r>:
 8006dcc:	2300      	movs	r3, #0
 8006dce:	b570      	push	{r4, r5, r6, lr}
 8006dd0:	4d06      	ldr	r5, [pc, #24]	; (8006dec <_sbrk_r+0x20>)
 8006dd2:	0004      	movs	r4, r0
 8006dd4:	0008      	movs	r0, r1
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7fd fdb2 	bl	8004940 <_sbrk>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d103      	bne.n	8006de8 <_sbrk_r+0x1c>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d000      	beq.n	8006de8 <_sbrk_r+0x1c>
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	20000110 	.word	0x20000110

08006df0 <__malloc_lock>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	4802      	ldr	r0, [pc, #8]	; (8006dfc <__malloc_lock+0xc>)
 8006df4:	f000 f814 	bl	8006e20 <__retarget_lock_acquire_recursive>
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	20000114 	.word	0x20000114

08006e00 <__malloc_unlock>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	4802      	ldr	r0, [pc, #8]	; (8006e0c <__malloc_unlock+0xc>)
 8006e04:	f000 f80d 	bl	8006e22 <__retarget_lock_release_recursive>
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	20000114 	.word	0x20000114

08006e10 <_malloc_usable_size_r>:
 8006e10:	1f0b      	subs	r3, r1, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	1f18      	subs	r0, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da01      	bge.n	8006e1e <_malloc_usable_size_r+0xe>
 8006e1a:	580b      	ldr	r3, [r1, r0]
 8006e1c:	18c0      	adds	r0, r0, r3
 8006e1e:	4770      	bx	lr

08006e20 <__retarget_lock_acquire_recursive>:
 8006e20:	4770      	bx	lr

08006e22 <__retarget_lock_release_recursive>:
 8006e22:	4770      	bx	lr

08006e24 <_init>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr

08006e30 <_fini>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	46c0      	nop			; (mov r8, r8)
 8006e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e36:	bc08      	pop	{r3}
 8006e38:	469e      	mov	lr, r3
 8006e3a:	4770      	bx	lr
