
DRS_tone_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f68  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a8  080030a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030a8  080030a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a8  080030a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  080030bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080030bc  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7a0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224f  00000000  00000000  0002e7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00030a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00031500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f84  00000000  00000000  00031f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea08  00000000  00000000  00046e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083eae  00000000  00000000  0005588c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d973a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f0  00000000  00000000  000d978c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003008 	.word	0x08003008

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003008 	.word	0x08003008

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_fadd>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	46c6      	mov	lr, r8
 80003f0:	0243      	lsls	r3, r0, #9
 80003f2:	0a5b      	lsrs	r3, r3, #9
 80003f4:	024e      	lsls	r6, r1, #9
 80003f6:	0045      	lsls	r5, r0, #1
 80003f8:	004f      	lsls	r7, r1, #1
 80003fa:	00da      	lsls	r2, r3, #3
 80003fc:	0fc4      	lsrs	r4, r0, #31
 80003fe:	469c      	mov	ip, r3
 8000400:	0a70      	lsrs	r0, r6, #9
 8000402:	4690      	mov	r8, r2
 8000404:	b500      	push	{lr}
 8000406:	0e2d      	lsrs	r5, r5, #24
 8000408:	0e3f      	lsrs	r7, r7, #24
 800040a:	0fc9      	lsrs	r1, r1, #31
 800040c:	09b6      	lsrs	r6, r6, #6
 800040e:	428c      	cmp	r4, r1
 8000410:	d04b      	beq.n	80004aa <__aeabi_fadd+0xbe>
 8000412:	1bea      	subs	r2, r5, r7
 8000414:	2a00      	cmp	r2, #0
 8000416:	dd36      	ble.n	8000486 <__aeabi_fadd+0x9a>
 8000418:	2f00      	cmp	r7, #0
 800041a:	d061      	beq.n	80004e0 <__aeabi_fadd+0xf4>
 800041c:	2dff      	cmp	r5, #255	; 0xff
 800041e:	d100      	bne.n	8000422 <__aeabi_fadd+0x36>
 8000420:	e0ad      	b.n	800057e <__aeabi_fadd+0x192>
 8000422:	2380      	movs	r3, #128	; 0x80
 8000424:	04db      	lsls	r3, r3, #19
 8000426:	431e      	orrs	r6, r3
 8000428:	2a1b      	cmp	r2, #27
 800042a:	dc00      	bgt.n	800042e <__aeabi_fadd+0x42>
 800042c:	e0d3      	b.n	80005d6 <__aeabi_fadd+0x1ea>
 800042e:	2001      	movs	r0, #1
 8000430:	4643      	mov	r3, r8
 8000432:	1a18      	subs	r0, r3, r0
 8000434:	0143      	lsls	r3, r0, #5
 8000436:	d400      	bmi.n	800043a <__aeabi_fadd+0x4e>
 8000438:	e08c      	b.n	8000554 <__aeabi_fadd+0x168>
 800043a:	0180      	lsls	r0, r0, #6
 800043c:	0987      	lsrs	r7, r0, #6
 800043e:	0038      	movs	r0, r7
 8000440:	f000 f9c0 	bl	80007c4 <__clzsi2>
 8000444:	3805      	subs	r0, #5
 8000446:	4087      	lsls	r7, r0
 8000448:	4285      	cmp	r5, r0
 800044a:	dc00      	bgt.n	800044e <__aeabi_fadd+0x62>
 800044c:	e0b6      	b.n	80005bc <__aeabi_fadd+0x1d0>
 800044e:	1a2d      	subs	r5, r5, r0
 8000450:	48b3      	ldr	r0, [pc, #716]	; (8000720 <__aeabi_fadd+0x334>)
 8000452:	4038      	ands	r0, r7
 8000454:	0743      	lsls	r3, r0, #29
 8000456:	d004      	beq.n	8000462 <__aeabi_fadd+0x76>
 8000458:	230f      	movs	r3, #15
 800045a:	4003      	ands	r3, r0
 800045c:	2b04      	cmp	r3, #4
 800045e:	d000      	beq.n	8000462 <__aeabi_fadd+0x76>
 8000460:	3004      	adds	r0, #4
 8000462:	0143      	lsls	r3, r0, #5
 8000464:	d400      	bmi.n	8000468 <__aeabi_fadd+0x7c>
 8000466:	e078      	b.n	800055a <__aeabi_fadd+0x16e>
 8000468:	1c6a      	adds	r2, r5, #1
 800046a:	2dfe      	cmp	r5, #254	; 0xfe
 800046c:	d065      	beq.n	800053a <__aeabi_fadd+0x14e>
 800046e:	0180      	lsls	r0, r0, #6
 8000470:	0a43      	lsrs	r3, r0, #9
 8000472:	469c      	mov	ip, r3
 8000474:	b2d2      	uxtb	r2, r2
 8000476:	4663      	mov	r3, ip
 8000478:	05d0      	lsls	r0, r2, #23
 800047a:	4318      	orrs	r0, r3
 800047c:	07e4      	lsls	r4, r4, #31
 800047e:	4320      	orrs	r0, r4
 8000480:	bc80      	pop	{r7}
 8000482:	46b8      	mov	r8, r7
 8000484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000486:	2a00      	cmp	r2, #0
 8000488:	d035      	beq.n	80004f6 <__aeabi_fadd+0x10a>
 800048a:	1b7a      	subs	r2, r7, r5
 800048c:	2d00      	cmp	r5, #0
 800048e:	d000      	beq.n	8000492 <__aeabi_fadd+0xa6>
 8000490:	e0af      	b.n	80005f2 <__aeabi_fadd+0x206>
 8000492:	4643      	mov	r3, r8
 8000494:	2b00      	cmp	r3, #0
 8000496:	d100      	bne.n	800049a <__aeabi_fadd+0xae>
 8000498:	e0a7      	b.n	80005ea <__aeabi_fadd+0x1fe>
 800049a:	1e53      	subs	r3, r2, #1
 800049c:	2a01      	cmp	r2, #1
 800049e:	d100      	bne.n	80004a2 <__aeabi_fadd+0xb6>
 80004a0:	e12f      	b.n	8000702 <__aeabi_fadd+0x316>
 80004a2:	2aff      	cmp	r2, #255	; 0xff
 80004a4:	d069      	beq.n	800057a <__aeabi_fadd+0x18e>
 80004a6:	001a      	movs	r2, r3
 80004a8:	e0aa      	b.n	8000600 <__aeabi_fadd+0x214>
 80004aa:	1be9      	subs	r1, r5, r7
 80004ac:	2900      	cmp	r1, #0
 80004ae:	dd70      	ble.n	8000592 <__aeabi_fadd+0x1a6>
 80004b0:	2f00      	cmp	r7, #0
 80004b2:	d037      	beq.n	8000524 <__aeabi_fadd+0x138>
 80004b4:	2dff      	cmp	r5, #255	; 0xff
 80004b6:	d062      	beq.n	800057e <__aeabi_fadd+0x192>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	04db      	lsls	r3, r3, #19
 80004bc:	431e      	orrs	r6, r3
 80004be:	291b      	cmp	r1, #27
 80004c0:	dc00      	bgt.n	80004c4 <__aeabi_fadd+0xd8>
 80004c2:	e0b0      	b.n	8000626 <__aeabi_fadd+0x23a>
 80004c4:	2001      	movs	r0, #1
 80004c6:	4440      	add	r0, r8
 80004c8:	0143      	lsls	r3, r0, #5
 80004ca:	d543      	bpl.n	8000554 <__aeabi_fadd+0x168>
 80004cc:	3501      	adds	r5, #1
 80004ce:	2dff      	cmp	r5, #255	; 0xff
 80004d0:	d033      	beq.n	800053a <__aeabi_fadd+0x14e>
 80004d2:	2301      	movs	r3, #1
 80004d4:	4a93      	ldr	r2, [pc, #588]	; (8000724 <__aeabi_fadd+0x338>)
 80004d6:	4003      	ands	r3, r0
 80004d8:	0840      	lsrs	r0, r0, #1
 80004da:	4010      	ands	r0, r2
 80004dc:	4318      	orrs	r0, r3
 80004de:	e7b9      	b.n	8000454 <__aeabi_fadd+0x68>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0xfa>
 80004e4:	e083      	b.n	80005ee <__aeabi_fadd+0x202>
 80004e6:	1e51      	subs	r1, r2, #1
 80004e8:	2a01      	cmp	r2, #1
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x102>
 80004ec:	e0d8      	b.n	80006a0 <__aeabi_fadd+0x2b4>
 80004ee:	2aff      	cmp	r2, #255	; 0xff
 80004f0:	d045      	beq.n	800057e <__aeabi_fadd+0x192>
 80004f2:	000a      	movs	r2, r1
 80004f4:	e798      	b.n	8000428 <__aeabi_fadd+0x3c>
 80004f6:	27fe      	movs	r7, #254	; 0xfe
 80004f8:	1c6a      	adds	r2, r5, #1
 80004fa:	4217      	tst	r7, r2
 80004fc:	d000      	beq.n	8000500 <__aeabi_fadd+0x114>
 80004fe:	e086      	b.n	800060e <__aeabi_fadd+0x222>
 8000500:	2d00      	cmp	r5, #0
 8000502:	d000      	beq.n	8000506 <__aeabi_fadd+0x11a>
 8000504:	e0b7      	b.n	8000676 <__aeabi_fadd+0x28a>
 8000506:	4643      	mov	r3, r8
 8000508:	2b00      	cmp	r3, #0
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x122>
 800050c:	e0f3      	b.n	80006f6 <__aeabi_fadd+0x30a>
 800050e:	2200      	movs	r2, #0
 8000510:	2e00      	cmp	r6, #0
 8000512:	d0b0      	beq.n	8000476 <__aeabi_fadd+0x8a>
 8000514:	1b98      	subs	r0, r3, r6
 8000516:	0143      	lsls	r3, r0, #5
 8000518:	d400      	bmi.n	800051c <__aeabi_fadd+0x130>
 800051a:	e0fa      	b.n	8000712 <__aeabi_fadd+0x326>
 800051c:	4643      	mov	r3, r8
 800051e:	000c      	movs	r4, r1
 8000520:	1af0      	subs	r0, r6, r3
 8000522:	e797      	b.n	8000454 <__aeabi_fadd+0x68>
 8000524:	2e00      	cmp	r6, #0
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x13e>
 8000528:	e0c8      	b.n	80006bc <__aeabi_fadd+0x2d0>
 800052a:	1e4a      	subs	r2, r1, #1
 800052c:	2901      	cmp	r1, #1
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x146>
 8000530:	e0ae      	b.n	8000690 <__aeabi_fadd+0x2a4>
 8000532:	29ff      	cmp	r1, #255	; 0xff
 8000534:	d023      	beq.n	800057e <__aeabi_fadd+0x192>
 8000536:	0011      	movs	r1, r2
 8000538:	e7c1      	b.n	80004be <__aeabi_fadd+0xd2>
 800053a:	2300      	movs	r3, #0
 800053c:	22ff      	movs	r2, #255	; 0xff
 800053e:	469c      	mov	ip, r3
 8000540:	e799      	b.n	8000476 <__aeabi_fadd+0x8a>
 8000542:	21fe      	movs	r1, #254	; 0xfe
 8000544:	1c6a      	adds	r2, r5, #1
 8000546:	4211      	tst	r1, r2
 8000548:	d077      	beq.n	800063a <__aeabi_fadd+0x24e>
 800054a:	2aff      	cmp	r2, #255	; 0xff
 800054c:	d0f5      	beq.n	800053a <__aeabi_fadd+0x14e>
 800054e:	0015      	movs	r5, r2
 8000550:	4446      	add	r6, r8
 8000552:	0870      	lsrs	r0, r6, #1
 8000554:	0743      	lsls	r3, r0, #29
 8000556:	d000      	beq.n	800055a <__aeabi_fadd+0x16e>
 8000558:	e77e      	b.n	8000458 <__aeabi_fadd+0x6c>
 800055a:	08c3      	lsrs	r3, r0, #3
 800055c:	2dff      	cmp	r5, #255	; 0xff
 800055e:	d00e      	beq.n	800057e <__aeabi_fadd+0x192>
 8000560:	025b      	lsls	r3, r3, #9
 8000562:	0a5b      	lsrs	r3, r3, #9
 8000564:	469c      	mov	ip, r3
 8000566:	b2ea      	uxtb	r2, r5
 8000568:	e785      	b.n	8000476 <__aeabi_fadd+0x8a>
 800056a:	2e00      	cmp	r6, #0
 800056c:	d007      	beq.n	800057e <__aeabi_fadd+0x192>
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	03d2      	lsls	r2, r2, #15
 8000572:	4213      	tst	r3, r2
 8000574:	d003      	beq.n	800057e <__aeabi_fadd+0x192>
 8000576:	4210      	tst	r0, r2
 8000578:	d101      	bne.n	800057e <__aeabi_fadd+0x192>
 800057a:	000c      	movs	r4, r1
 800057c:	0003      	movs	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0db      	beq.n	800053a <__aeabi_fadd+0x14e>
 8000582:	2080      	movs	r0, #128	; 0x80
 8000584:	03c0      	lsls	r0, r0, #15
 8000586:	4318      	orrs	r0, r3
 8000588:	0240      	lsls	r0, r0, #9
 800058a:	0a43      	lsrs	r3, r0, #9
 800058c:	469c      	mov	ip, r3
 800058e:	22ff      	movs	r2, #255	; 0xff
 8000590:	e771      	b.n	8000476 <__aeabi_fadd+0x8a>
 8000592:	2900      	cmp	r1, #0
 8000594:	d0d5      	beq.n	8000542 <__aeabi_fadd+0x156>
 8000596:	1b7a      	subs	r2, r7, r5
 8000598:	2d00      	cmp	r5, #0
 800059a:	d160      	bne.n	800065e <__aeabi_fadd+0x272>
 800059c:	4643      	mov	r3, r8
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d024      	beq.n	80005ec <__aeabi_fadd+0x200>
 80005a2:	1e53      	subs	r3, r2, #1
 80005a4:	2a01      	cmp	r2, #1
 80005a6:	d073      	beq.n	8000690 <__aeabi_fadd+0x2a4>
 80005a8:	2aff      	cmp	r2, #255	; 0xff
 80005aa:	d0e7      	beq.n	800057c <__aeabi_fadd+0x190>
 80005ac:	001a      	movs	r2, r3
 80005ae:	2a1b      	cmp	r2, #27
 80005b0:	dc00      	bgt.n	80005b4 <__aeabi_fadd+0x1c8>
 80005b2:	e085      	b.n	80006c0 <__aeabi_fadd+0x2d4>
 80005b4:	2001      	movs	r0, #1
 80005b6:	003d      	movs	r5, r7
 80005b8:	1980      	adds	r0, r0, r6
 80005ba:	e785      	b.n	80004c8 <__aeabi_fadd+0xdc>
 80005bc:	2320      	movs	r3, #32
 80005be:	003a      	movs	r2, r7
 80005c0:	1b45      	subs	r5, r0, r5
 80005c2:	0038      	movs	r0, r7
 80005c4:	3501      	adds	r5, #1
 80005c6:	40ea      	lsrs	r2, r5
 80005c8:	1b5d      	subs	r5, r3, r5
 80005ca:	40a8      	lsls	r0, r5
 80005cc:	1e43      	subs	r3, r0, #1
 80005ce:	4198      	sbcs	r0, r3
 80005d0:	2500      	movs	r5, #0
 80005d2:	4310      	orrs	r0, r2
 80005d4:	e73e      	b.n	8000454 <__aeabi_fadd+0x68>
 80005d6:	2320      	movs	r3, #32
 80005d8:	0030      	movs	r0, r6
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	0031      	movs	r1, r6
 80005de:	4098      	lsls	r0, r3
 80005e0:	40d1      	lsrs	r1, r2
 80005e2:	1e43      	subs	r3, r0, #1
 80005e4:	4198      	sbcs	r0, r3
 80005e6:	4308      	orrs	r0, r1
 80005e8:	e722      	b.n	8000430 <__aeabi_fadd+0x44>
 80005ea:	000c      	movs	r4, r1
 80005ec:	0003      	movs	r3, r0
 80005ee:	0015      	movs	r5, r2
 80005f0:	e7b4      	b.n	800055c <__aeabi_fadd+0x170>
 80005f2:	2fff      	cmp	r7, #255	; 0xff
 80005f4:	d0c1      	beq.n	800057a <__aeabi_fadd+0x18e>
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	4640      	mov	r0, r8
 80005fa:	04db      	lsls	r3, r3, #19
 80005fc:	4318      	orrs	r0, r3
 80005fe:	4680      	mov	r8, r0
 8000600:	2a1b      	cmp	r2, #27
 8000602:	dd51      	ble.n	80006a8 <__aeabi_fadd+0x2bc>
 8000604:	2001      	movs	r0, #1
 8000606:	000c      	movs	r4, r1
 8000608:	003d      	movs	r5, r7
 800060a:	1a30      	subs	r0, r6, r0
 800060c:	e712      	b.n	8000434 <__aeabi_fadd+0x48>
 800060e:	4643      	mov	r3, r8
 8000610:	1b9f      	subs	r7, r3, r6
 8000612:	017b      	lsls	r3, r7, #5
 8000614:	d42b      	bmi.n	800066e <__aeabi_fadd+0x282>
 8000616:	2f00      	cmp	r7, #0
 8000618:	d000      	beq.n	800061c <__aeabi_fadd+0x230>
 800061a:	e710      	b.n	800043e <__aeabi_fadd+0x52>
 800061c:	2300      	movs	r3, #0
 800061e:	2400      	movs	r4, #0
 8000620:	2200      	movs	r2, #0
 8000622:	469c      	mov	ip, r3
 8000624:	e727      	b.n	8000476 <__aeabi_fadd+0x8a>
 8000626:	2320      	movs	r3, #32
 8000628:	0032      	movs	r2, r6
 800062a:	0030      	movs	r0, r6
 800062c:	40ca      	lsrs	r2, r1
 800062e:	1a59      	subs	r1, r3, r1
 8000630:	4088      	lsls	r0, r1
 8000632:	1e43      	subs	r3, r0, #1
 8000634:	4198      	sbcs	r0, r3
 8000636:	4310      	orrs	r0, r2
 8000638:	e745      	b.n	80004c6 <__aeabi_fadd+0xda>
 800063a:	2d00      	cmp	r5, #0
 800063c:	d14a      	bne.n	80006d4 <__aeabi_fadd+0x2e8>
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d063      	beq.n	800070c <__aeabi_fadd+0x320>
 8000644:	2200      	movs	r2, #0
 8000646:	2e00      	cmp	r6, #0
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x260>
 800064a:	e714      	b.n	8000476 <__aeabi_fadd+0x8a>
 800064c:	0030      	movs	r0, r6
 800064e:	4440      	add	r0, r8
 8000650:	0143      	lsls	r3, r0, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x26a>
 8000654:	e77e      	b.n	8000554 <__aeabi_fadd+0x168>
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <__aeabi_fadd+0x334>)
 8000658:	3501      	adds	r5, #1
 800065a:	4018      	ands	r0, r3
 800065c:	e77a      	b.n	8000554 <__aeabi_fadd+0x168>
 800065e:	2fff      	cmp	r7, #255	; 0xff
 8000660:	d08c      	beq.n	800057c <__aeabi_fadd+0x190>
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	4641      	mov	r1, r8
 8000666:	04db      	lsls	r3, r3, #19
 8000668:	4319      	orrs	r1, r3
 800066a:	4688      	mov	r8, r1
 800066c:	e79f      	b.n	80005ae <__aeabi_fadd+0x1c2>
 800066e:	4643      	mov	r3, r8
 8000670:	000c      	movs	r4, r1
 8000672:	1af7      	subs	r7, r6, r3
 8000674:	e6e3      	b.n	800043e <__aeabi_fadd+0x52>
 8000676:	4642      	mov	r2, r8
 8000678:	2a00      	cmp	r2, #0
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x292>
 800067c:	e775      	b.n	800056a <__aeabi_fadd+0x17e>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d000      	beq.n	8000684 <__aeabi_fadd+0x298>
 8000682:	e77a      	b.n	800057a <__aeabi_fadd+0x18e>
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	03db      	lsls	r3, r3, #15
 8000688:	2400      	movs	r4, #0
 800068a:	469c      	mov	ip, r3
 800068c:	22ff      	movs	r2, #255	; 0xff
 800068e:	e6f2      	b.n	8000476 <__aeabi_fadd+0x8a>
 8000690:	0030      	movs	r0, r6
 8000692:	4440      	add	r0, r8
 8000694:	2501      	movs	r5, #1
 8000696:	0143      	lsls	r3, r0, #5
 8000698:	d400      	bmi.n	800069c <__aeabi_fadd+0x2b0>
 800069a:	e75b      	b.n	8000554 <__aeabi_fadd+0x168>
 800069c:	2502      	movs	r5, #2
 800069e:	e718      	b.n	80004d2 <__aeabi_fadd+0xe6>
 80006a0:	4643      	mov	r3, r8
 80006a2:	2501      	movs	r5, #1
 80006a4:	1b98      	subs	r0, r3, r6
 80006a6:	e6c5      	b.n	8000434 <__aeabi_fadd+0x48>
 80006a8:	2320      	movs	r3, #32
 80006aa:	4644      	mov	r4, r8
 80006ac:	4640      	mov	r0, r8
 80006ae:	40d4      	lsrs	r4, r2
 80006b0:	1a9a      	subs	r2, r3, r2
 80006b2:	4090      	lsls	r0, r2
 80006b4:	1e43      	subs	r3, r0, #1
 80006b6:	4198      	sbcs	r0, r3
 80006b8:	4320      	orrs	r0, r4
 80006ba:	e7a4      	b.n	8000606 <__aeabi_fadd+0x21a>
 80006bc:	000d      	movs	r5, r1
 80006be:	e74d      	b.n	800055c <__aeabi_fadd+0x170>
 80006c0:	2320      	movs	r3, #32
 80006c2:	4641      	mov	r1, r8
 80006c4:	4640      	mov	r0, r8
 80006c6:	40d1      	lsrs	r1, r2
 80006c8:	1a9a      	subs	r2, r3, r2
 80006ca:	4090      	lsls	r0, r2
 80006cc:	1e43      	subs	r3, r0, #1
 80006ce:	4198      	sbcs	r0, r3
 80006d0:	4308      	orrs	r0, r1
 80006d2:	e770      	b.n	80005b6 <__aeabi_fadd+0x1ca>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_fadd+0x2f0>
 80006da:	e74f      	b.n	800057c <__aeabi_fadd+0x190>
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0x2f6>
 80006e0:	e74d      	b.n	800057e <__aeabi_fadd+0x192>
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	03d2      	lsls	r2, r2, #15
 80006e6:	4213      	tst	r3, r2
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x300>
 80006ea:	e748      	b.n	800057e <__aeabi_fadd+0x192>
 80006ec:	4210      	tst	r0, r2
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fadd+0x306>
 80006f0:	e745      	b.n	800057e <__aeabi_fadd+0x192>
 80006f2:	0003      	movs	r3, r0
 80006f4:	e743      	b.n	800057e <__aeabi_fadd+0x192>
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d090      	beq.n	800061c <__aeabi_fadd+0x230>
 80006fa:	000c      	movs	r4, r1
 80006fc:	4684      	mov	ip, r0
 80006fe:	2200      	movs	r2, #0
 8000700:	e6b9      	b.n	8000476 <__aeabi_fadd+0x8a>
 8000702:	4643      	mov	r3, r8
 8000704:	000c      	movs	r4, r1
 8000706:	1af0      	subs	r0, r6, r3
 8000708:	3501      	adds	r5, #1
 800070a:	e693      	b.n	8000434 <__aeabi_fadd+0x48>
 800070c:	4684      	mov	ip, r0
 800070e:	2200      	movs	r2, #0
 8000710:	e6b1      	b.n	8000476 <__aeabi_fadd+0x8a>
 8000712:	2800      	cmp	r0, #0
 8000714:	d000      	beq.n	8000718 <__aeabi_fadd+0x32c>
 8000716:	e71d      	b.n	8000554 <__aeabi_fadd+0x168>
 8000718:	2300      	movs	r3, #0
 800071a:	2400      	movs	r4, #0
 800071c:	469c      	mov	ip, r3
 800071e:	e6aa      	b.n	8000476 <__aeabi_fadd+0x8a>
 8000720:	fbffffff 	.word	0xfbffffff
 8000724:	7dffffff 	.word	0x7dffffff

08000728 <__aeabi_i2f>:
 8000728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072a:	2800      	cmp	r0, #0
 800072c:	d013      	beq.n	8000756 <__aeabi_i2f+0x2e>
 800072e:	17c3      	asrs	r3, r0, #31
 8000730:	18c6      	adds	r6, r0, r3
 8000732:	405e      	eors	r6, r3
 8000734:	0fc4      	lsrs	r4, r0, #31
 8000736:	0030      	movs	r0, r6
 8000738:	f000 f844 	bl	80007c4 <__clzsi2>
 800073c:	239e      	movs	r3, #158	; 0x9e
 800073e:	0005      	movs	r5, r0
 8000740:	1a1b      	subs	r3, r3, r0
 8000742:	2b96      	cmp	r3, #150	; 0x96
 8000744:	dc0f      	bgt.n	8000766 <__aeabi_i2f+0x3e>
 8000746:	2808      	cmp	r0, #8
 8000748:	dd01      	ble.n	800074e <__aeabi_i2f+0x26>
 800074a:	3d08      	subs	r5, #8
 800074c:	40ae      	lsls	r6, r5
 800074e:	0276      	lsls	r6, r6, #9
 8000750:	0a76      	lsrs	r6, r6, #9
 8000752:	b2d8      	uxtb	r0, r3
 8000754:	e002      	b.n	800075c <__aeabi_i2f+0x34>
 8000756:	2400      	movs	r4, #0
 8000758:	2000      	movs	r0, #0
 800075a:	2600      	movs	r6, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4330      	orrs	r0, r6
 8000760:	07e4      	lsls	r4, r4, #31
 8000762:	4320      	orrs	r0, r4
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000766:	2b99      	cmp	r3, #153	; 0x99
 8000768:	dd0c      	ble.n	8000784 <__aeabi_i2f+0x5c>
 800076a:	2205      	movs	r2, #5
 800076c:	0031      	movs	r1, r6
 800076e:	1a12      	subs	r2, r2, r0
 8000770:	40d1      	lsrs	r1, r2
 8000772:	000a      	movs	r2, r1
 8000774:	0001      	movs	r1, r0
 8000776:	0030      	movs	r0, r6
 8000778:	311b      	adds	r1, #27
 800077a:	4088      	lsls	r0, r1
 800077c:	1e41      	subs	r1, r0, #1
 800077e:	4188      	sbcs	r0, r1
 8000780:	4302      	orrs	r2, r0
 8000782:	0016      	movs	r6, r2
 8000784:	2d05      	cmp	r5, #5
 8000786:	dc12      	bgt.n	80007ae <__aeabi_i2f+0x86>
 8000788:	0031      	movs	r1, r6
 800078a:	4f0d      	ldr	r7, [pc, #52]	; (80007c0 <__aeabi_i2f+0x98>)
 800078c:	4039      	ands	r1, r7
 800078e:	0772      	lsls	r2, r6, #29
 8000790:	d009      	beq.n	80007a6 <__aeabi_i2f+0x7e>
 8000792:	200f      	movs	r0, #15
 8000794:	4030      	ands	r0, r6
 8000796:	2804      	cmp	r0, #4
 8000798:	d005      	beq.n	80007a6 <__aeabi_i2f+0x7e>
 800079a:	3104      	adds	r1, #4
 800079c:	014a      	lsls	r2, r1, #5
 800079e:	d502      	bpl.n	80007a6 <__aeabi_i2f+0x7e>
 80007a0:	239f      	movs	r3, #159	; 0x9f
 80007a2:	4039      	ands	r1, r7
 80007a4:	1b5b      	subs	r3, r3, r5
 80007a6:	0189      	lsls	r1, r1, #6
 80007a8:	0a4e      	lsrs	r6, r1, #9
 80007aa:	b2d8      	uxtb	r0, r3
 80007ac:	e7d6      	b.n	800075c <__aeabi_i2f+0x34>
 80007ae:	1f6a      	subs	r2, r5, #5
 80007b0:	4096      	lsls	r6, r2
 80007b2:	0031      	movs	r1, r6
 80007b4:	4f02      	ldr	r7, [pc, #8]	; (80007c0 <__aeabi_i2f+0x98>)
 80007b6:	4039      	ands	r1, r7
 80007b8:	0772      	lsls	r2, r6, #29
 80007ba:	d0f4      	beq.n	80007a6 <__aeabi_i2f+0x7e>
 80007bc:	e7e9      	b.n	8000792 <__aeabi_i2f+0x6a>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	fbffffff 	.word	0xfbffffff

080007c4 <__clzsi2>:
 80007c4:	211c      	movs	r1, #28
 80007c6:	2301      	movs	r3, #1
 80007c8:	041b      	lsls	r3, r3, #16
 80007ca:	4298      	cmp	r0, r3
 80007cc:	d301      	bcc.n	80007d2 <__clzsi2+0xe>
 80007ce:	0c00      	lsrs	r0, r0, #16
 80007d0:	3910      	subs	r1, #16
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	4298      	cmp	r0, r3
 80007d6:	d301      	bcc.n	80007dc <__clzsi2+0x18>
 80007d8:	0a00      	lsrs	r0, r0, #8
 80007da:	3908      	subs	r1, #8
 80007dc:	091b      	lsrs	r3, r3, #4
 80007de:	4298      	cmp	r0, r3
 80007e0:	d301      	bcc.n	80007e6 <__clzsi2+0x22>
 80007e2:	0900      	lsrs	r0, r0, #4
 80007e4:	3904      	subs	r1, #4
 80007e6:	a202      	add	r2, pc, #8	; (adr r2, 80007f0 <__clzsi2+0x2c>)
 80007e8:	5c10      	ldrb	r0, [r2, r0]
 80007ea:	1840      	adds	r0, r0, r1
 80007ec:	4770      	bx	lr
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	02020304 	.word	0x02020304
 80007f4:	01010101 	.word	0x01010101
	...

08000800 <i2c1MasterInit>:
		i2c->data_rx[i] = '\0';
	for (int i = 0; i < I2C_TX_BUFFER_SIZE; i++)
		i2c->data_tx[i] = '\0';
}

void i2c1MasterInit() {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	i2c1GpioInit();
 8000804:	f000 f83c 	bl	8000880 <i2c1GpioInit>
	/* clock enable */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <i2c1MasterInit+0x6c>)
 800080a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <i2c1MasterInit+0x6c>)
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	0389      	lsls	r1, r1, #14
 8000812:	430a      	orrs	r2, r1
 8000814:	63da      	str	r2, [r3, #60]	; 0x3c
	/* peripherial disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <i2c1MasterInit+0x70>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <i2c1MasterInit+0x70>)
 800081c:	2101      	movs	r1, #1
 800081e:	438a      	bics	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
	/* set timing */
	I2C1->TIMINGR = 0x00303D5B;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <i2c1MasterInit+0x70>)
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <i2c1MasterInit+0x74>)
 8000826:	611a      	str	r2, [r3, #16]
	/* */
	CLEAR_BIT(I2C2->OAR1, I2C_OAR1_OA1EN);
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <i2c1MasterInit+0x78>)
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <i2c1MasterInit+0x78>)
 800082e:	4913      	ldr	r1, [pc, #76]	; (800087c <i2c1MasterInit+0x7c>)
 8000830:	400a      	ands	r2, r1
 8000832:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(I2C2->OAR2, I2C_OAR2_OA2EN);
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <i2c1MasterInit+0x78>)
 8000836:	68da      	ldr	r2, [r3, #12]
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <i2c1MasterInit+0x78>)
 800083a:	4910      	ldr	r1, [pc, #64]	; (800087c <i2c1MasterInit+0x7c>)
 800083c:	400a      	ands	r2, r1
 800083e:	60da      	str	r2, [r3, #12]

	/*tx and rx interrupt enable */
	SET_BIT(I2C2->CR1, I2C_CR1_RXIE);
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <i2c1MasterInit+0x78>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <i2c1MasterInit+0x78>)
 8000846:	2104      	movs	r1, #4
 8000848:	430a      	orrs	r2, r1
 800084a:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C2->CR1, I2C_CR1_TXIE);
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <i2c1MasterInit+0x78>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <i2c1MasterInit+0x78>)
 8000852:	2102      	movs	r1, #2
 8000854:	430a      	orrs	r2, r1
 8000856:	601a      	str	r2, [r3, #0]

	/* peripherial enable */
	SET_BIT(I2C2->CR1, I2C_CR1_PE);
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <i2c1MasterInit+0x78>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <i2c1MasterInit+0x78>)
 800085e:	2101      	movs	r1, #1
 8000860:	430a      	orrs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40021000 	.word	0x40021000
 8000870:	40005400 	.word	0x40005400
 8000874:	00303d5b 	.word	0x00303d5b
 8000878:	40005800 	.word	0x40005800
 800087c:	ffff7fff 	.word	0xffff7fff

08000880 <i2c1GpioInit>:

void i2c1GpioInit() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <i2c1GpioInit+0xb4>)
 8000886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000888:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <i2c1GpioInit+0xb4>)
 800088a:	2102      	movs	r1, #2
 800088c:	430a      	orrs	r2, r1
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
	/* SCL PB6  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <i2c1GpioInit+0xb8>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <i2c1GpioInit+0xb8>)
 8000896:	4929      	ldr	r1, [pc, #164]	; (800093c <i2c1GpioInit+0xbc>)
 8000898:	400a      	ands	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <i2c1GpioInit+0xb8>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <i2c1GpioInit+0xb8>)
 80008a2:	2180      	movs	r1, #128	; 0x80
 80008a4:	0189      	lsls	r1, r1, #6
 80008a6:	430a      	orrs	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]
	/* SDA PB7 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <i2c1GpioInit+0xb8>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <i2c1GpioInit+0xb8>)
 80008b0:	4923      	ldr	r1, [pc, #140]	; (8000940 <i2c1GpioInit+0xc0>)
 80008b2:	400a      	ands	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <i2c1GpioInit+0xb8>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <i2c1GpioInit+0xb8>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0209      	lsls	r1, r1, #8
 80008c0:	430a      	orrs	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]
	/* SCL PB6 High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED6_0);
	/* SDC PB7  High Speed output */
	//SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_1 |GPIO_OSPEEDR_OSPEED7_0);

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6);
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <i2c1GpioInit+0xb8>)
 80008c6:	6a1a      	ldr	r2, [r3, #32]
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <i2c1GpioInit+0xb8>)
 80008ca:	491e      	ldr	r1, [pc, #120]	; (8000944 <i2c1GpioInit+0xc4>)
 80008cc:	400a      	ands	r2, r1
 80008ce:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6 << 1);
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <i2c1GpioInit+0xb8>)
 80008d2:	6a1a      	ldr	r2, [r3, #32]
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <i2c1GpioInit+0xb8>)
 80008d6:	21f0      	movs	r1, #240	; 0xf0
 80008d8:	0549      	lsls	r1, r1, #21
 80008da:	430a      	orrs	r2, r1
 80008dc:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<2);
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <i2c1GpioInit+0xb8>)
 80008e0:	6a1a      	ldr	r2, [r3, #32]
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <i2c1GpioInit+0xb8>)
 80008e4:	21f0      	movs	r1, #240	; 0xf0
 80008e6:	0589      	lsls	r1, r1, #22
 80008e8:	430a      	orrs	r2, r1
 80008ea:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6<<3);
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <i2c1GpioInit+0xb8>)
 80008ee:	6a1a      	ldr	r2, [r3, #32]
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <i2c1GpioInit+0xb8>)
 80008f2:	4915      	ldr	r1, [pc, #84]	; (8000948 <i2c1GpioInit+0xc8>)
 80008f4:	400a      	ands	r2, r1
 80008f6:	621a      	str	r2, [r3, #32]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7);
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <i2c1GpioInit+0xb8>)
 80008fa:	6a1a      	ldr	r2, [r3, #32]
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <i2c1GpioInit+0xb8>)
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	0912      	lsrs	r2, r2, #4
 8000902:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<1);
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <i2c1GpioInit+0xb8>)
 8000906:	6a1a      	ldr	r2, [r3, #32]
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <i2c1GpioInit+0xb8>)
 800090a:	21e0      	movs	r1, #224	; 0xe0
 800090c:	0609      	lsls	r1, r1, #24
 800090e:	430a      	orrs	r2, r1
 8000910:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<2);
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <i2c1GpioInit+0xb8>)
 8000914:	6a1a      	ldr	r2, [r3, #32]
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <i2c1GpioInit+0xb8>)
 8000918:	21c0      	movs	r1, #192	; 0xc0
 800091a:	0609      	lsls	r1, r1, #24
 800091c:	430a      	orrs	r2, r1
 800091e:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7<<3);
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <i2c1GpioInit+0xb8>)
 8000922:	6a1a      	ldr	r2, [r3, #32]
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <i2c1GpioInit+0xb8>)
 8000926:	0052      	lsls	r2, r2, #1
 8000928:	0852      	lsrs	r2, r2, #1
 800092a:	621a      	str	r2, [r3, #32]
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40021000 	.word	0x40021000
 8000938:	50000400 	.word	0x50000400
 800093c:	ffffefff 	.word	0xffffefff
 8000940:	ffffbfff 	.word	0xffffbfff
 8000944:	f0ffffff 	.word	0xf0ffffff
 8000948:	87ffffff 	.word	0x87ffffff

0800094c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b08f      	sub	sp, #60	; 0x3c
 8000950:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000952:	f000 fbf9 	bl	8001148 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000956:	f000 f8f7 	bl	8000b48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800095a:	f000 f9ef 	bl	8000d3c <MX_GPIO_Init>
//	MX_I2C1_Init();
	MX_SPI2_Init();
 800095e:	f000 f95f 	bl	8000c20 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8000962:	f000 f99d 	bl	8000ca0 <MX_USART1_UART_Init>
	MX_CRC_Init();
 8000966:	f000 f937 	bl	8000bd8 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	i2c1MasterInit();
 800096a:	f7ff ff49 	bl	8000800 <i2c1MasterInit>
	//max2871Init(&ppl);
	uint8_t addrList[5] = { 0 };
 800096e:	2308      	movs	r3, #8
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	711a      	strb	r2, [r3, #4]
	int Valor_6;
	int Valor_7;
	int Valor_8;
	int Valor_9;
	float Suma;
	sumaptr=&Suma;
 800097a:	4b6f      	ldr	r3, [pc, #444]	; (8000b38 <main+0x1ec>)
 800097c:	1d3a      	adds	r2, r7, #4
 800097e:	601a      	str	r2, [r3, #0]

	while (1){
				   Valor_0 = HAL_GPIO_ReadPin (GPIOB, SW_0_Pin) ? 0:12.5;
 8000980:	4b6e      	ldr	r3, [pc, #440]	; (8000b3c <main+0x1f0>)
 8000982:	2104      	movs	r1, #4
 8000984:	0018      	movs	r0, r3
 8000986:	f000 ff51 	bl	800182c <HAL_GPIO_ReadPin>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <main+0x46>
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <main+0x48>
 8000992:	4b6b      	ldr	r3, [pc, #428]	; (8000b40 <main+0x1f4>)
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
				   Valor_1 = HAL_GPIO_ReadPin (GPIOA, SW_1_Pin) ? 0:25;
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	005a      	lsls	r2, r3, #1
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 ff43 	bl	800182c <HAL_GPIO_ReadPin>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <main+0x62>
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <main+0x64>
 80009ae:	2319      	movs	r3, #25
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
				   Valor_2 = HAL_GPIO_ReadPin (GPIOC, SW_2_Pin) ? 0:50;
 80009b2:	4b64      	ldr	r3, [pc, #400]	; (8000b44 <main+0x1f8>)
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 ff38 	bl	800182c <HAL_GPIO_ReadPin>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <main+0x78>
 80009c0:	2300      	movs	r3, #0
 80009c2:	e000      	b.n	80009c6 <main+0x7a>
 80009c4:	2332      	movs	r3, #50	; 0x32
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				   Valor_3 = HAL_GPIO_ReadPin (GPIOA, SW_3_Pin) ? 0:100;
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	011a      	lsls	r2, r3, #4
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 ff2a 	bl	800182c <HAL_GPIO_ReadPin>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <main+0x94>
 80009dc:	2300      	movs	r3, #0
 80009de:	e000      	b.n	80009e2 <main+0x96>
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
				   Valor_4 = HAL_GPIO_ReadPin (GPIOA, SW_4_Pin) ? 0:200;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	015a      	lsls	r2, r3, #5
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	0011      	movs	r1, r2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 ff1c 	bl	800182c <HAL_GPIO_ReadPin>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <main+0xb0>
 80009f8:	2300      	movs	r3, #0
 80009fa:	e000      	b.n	80009fe <main+0xb2>
 80009fc:	23c8      	movs	r3, #200	; 0xc8
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
				   Valor_5 = HAL_GPIO_ReadPin (GPIOA, SW_5_Pin) ? 0:400;
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	021a      	lsls	r2, r3, #8
 8000a04:	23a0      	movs	r3, #160	; 0xa0
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 ff0e 	bl	800182c <HAL_GPIO_ReadPin>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <main+0xcc>
 8000a14:	2300      	movs	r3, #0
 8000a16:	e001      	b.n	8000a1c <main+0xd0>
 8000a18:	23c8      	movs	r3, #200	; 0xc8
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
				   Valor_6 = HAL_GPIO_ReadPin (GPIOB, SW_6_Pin) ? 0:800;
 8000a1e:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <main+0x1f0>)
 8000a20:	2108      	movs	r1, #8
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 ff02 	bl	800182c <HAL_GPIO_ReadPin>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <main+0xe4>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e001      	b.n	8000a34 <main+0xe8>
 8000a30:	23c8      	movs	r3, #200	; 0xc8
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
				   Valor_7 = HAL_GPIO_ReadPin (GPIOB, SW_7_Pin) ? 0:1600;
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <main+0x1f0>)
 8000a38:	2110      	movs	r1, #16
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fef6 	bl	800182c <HAL_GPIO_ReadPin>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <main+0xfc>
 8000a44:	2300      	movs	r3, #0
 8000a46:	e001      	b.n	8000a4c <main+0x100>
 8000a48:	23c8      	movs	r3, #200	; 0xc8
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	61bb      	str	r3, [r7, #24]
				   Valor_8 = HAL_GPIO_ReadPin (GPIOB, SW_8_Pin) ? 0:3200;
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <main+0x1f0>)
 8000a50:	2120      	movs	r1, #32
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 feea 	bl	800182c <HAL_GPIO_ReadPin>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <main+0x114>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e001      	b.n	8000a64 <main+0x118>
 8000a60:	23c8      	movs	r3, #200	; 0xc8
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	617b      	str	r3, [r7, #20]
				   Valor_9 = HAL_GPIO_ReadPin (GPIOB, SW_9_Pin) ? 0:6400;
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4a34      	ldr	r2, [pc, #208]	; (8000b3c <main+0x1f0>)
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	0010      	movs	r0, r2
 8000a70:	f000 fedc 	bl	800182c <HAL_GPIO_ReadPin>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <main+0x130>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e001      	b.n	8000a80 <main+0x134>
 8000a7c:	23c8      	movs	r3, #200	; 0xc8
 8000a7e:	015b      	lsls	r3, r3, #5
 8000a80:	613b      	str	r3, [r7, #16]

	Suma = (Valor_0)+(Valor_1)+(Valor_2)+(Valor_3)+(Valor_4)+(Valor_5)+(Valor_6)+(Valor_7)+(Valor_8)+(Valor_9);
 8000a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a84:	f7ff fe50 	bl	8000728 <__aeabi_i2f>
 8000a88:	1c03      	adds	r3, r0, #0
 8000a8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a8c:	1c18      	adds	r0, r3, #0
 8000a8e:	f7ff fcad 	bl	80003ec <__aeabi_fadd>
 8000a92:	1c03      	adds	r3, r0, #0
 8000a94:	1c1c      	adds	r4, r3, #0
 8000a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a98:	f7ff fe46 	bl	8000728 <__aeabi_i2f>
 8000a9c:	1c03      	adds	r3, r0, #0
 8000a9e:	1c19      	adds	r1, r3, #0
 8000aa0:	1c20      	adds	r0, r4, #0
 8000aa2:	f7ff fca3 	bl	80003ec <__aeabi_fadd>
 8000aa6:	1c03      	adds	r3, r0, #0
 8000aa8:	1c1c      	adds	r4, r3, #0
 8000aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000aac:	f7ff fe3c 	bl	8000728 <__aeabi_i2f>
 8000ab0:	1c03      	adds	r3, r0, #0
 8000ab2:	1c19      	adds	r1, r3, #0
 8000ab4:	1c20      	adds	r0, r4, #0
 8000ab6:	f7ff fc99 	bl	80003ec <__aeabi_fadd>
 8000aba:	1c03      	adds	r3, r0, #0
 8000abc:	1c1c      	adds	r4, r3, #0
 8000abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ac0:	f7ff fe32 	bl	8000728 <__aeabi_i2f>
 8000ac4:	1c03      	adds	r3, r0, #0
 8000ac6:	1c19      	adds	r1, r3, #0
 8000ac8:	1c20      	adds	r0, r4, #0
 8000aca:	f7ff fc8f 	bl	80003ec <__aeabi_fadd>
 8000ace:	1c03      	adds	r3, r0, #0
 8000ad0:	1c1c      	adds	r4, r3, #0
 8000ad2:	6a38      	ldr	r0, [r7, #32]
 8000ad4:	f7ff fe28 	bl	8000728 <__aeabi_i2f>
 8000ad8:	1c03      	adds	r3, r0, #0
 8000ada:	1c19      	adds	r1, r3, #0
 8000adc:	1c20      	adds	r0, r4, #0
 8000ade:	f7ff fc85 	bl	80003ec <__aeabi_fadd>
 8000ae2:	1c03      	adds	r3, r0, #0
 8000ae4:	1c1c      	adds	r4, r3, #0
 8000ae6:	69f8      	ldr	r0, [r7, #28]
 8000ae8:	f7ff fe1e 	bl	8000728 <__aeabi_i2f>
 8000aec:	1c03      	adds	r3, r0, #0
 8000aee:	1c19      	adds	r1, r3, #0
 8000af0:	1c20      	adds	r0, r4, #0
 8000af2:	f7ff fc7b 	bl	80003ec <__aeabi_fadd>
 8000af6:	1c03      	adds	r3, r0, #0
 8000af8:	1c1c      	adds	r4, r3, #0
 8000afa:	69b8      	ldr	r0, [r7, #24]
 8000afc:	f7ff fe14 	bl	8000728 <__aeabi_i2f>
 8000b00:	1c03      	adds	r3, r0, #0
 8000b02:	1c19      	adds	r1, r3, #0
 8000b04:	1c20      	adds	r0, r4, #0
 8000b06:	f7ff fc71 	bl	80003ec <__aeabi_fadd>
 8000b0a:	1c03      	adds	r3, r0, #0
 8000b0c:	1c1c      	adds	r4, r3, #0
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff fe0a 	bl	8000728 <__aeabi_i2f>
 8000b14:	1c03      	adds	r3, r0, #0
 8000b16:	1c19      	adds	r1, r3, #0
 8000b18:	1c20      	adds	r0, r4, #0
 8000b1a:	f7ff fc67 	bl	80003ec <__aeabi_fadd>
 8000b1e:	1c03      	adds	r3, r0, #0
 8000b20:	1c1c      	adds	r4, r3, #0
 8000b22:	6938      	ldr	r0, [r7, #16]
 8000b24:	f7ff fe00 	bl	8000728 <__aeabi_i2f>
 8000b28:	1c03      	adds	r3, r0, #0
 8000b2a:	1c19      	adds	r1, r3, #0
 8000b2c:	1c20      	adds	r0, r4, #0
 8000b2e:	f7ff fc5d 	bl	80003ec <__aeabi_fadd>
 8000b32:	1c03      	adds	r3, r0, #0
 8000b34:	607b      	str	r3, [r7, #4]
				   Valor_0 = HAL_GPIO_ReadPin (GPIOB, SW_0_Pin) ? 0:12.5;
 8000b36:	e723      	b.n	8000980 <main+0x34>
 8000b38:	20000144 	.word	0x20000144
 8000b3c:	50000400 	.word	0x50000400
 8000b40:	41480000 	.word	0x41480000
 8000b44:	50000800 	.word	0x50000800

08000b48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b093      	sub	sp, #76	; 0x4c
 8000b4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b4e:	2414      	movs	r4, #20
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	0018      	movs	r0, r3
 8000b54:	2334      	movs	r3, #52	; 0x34
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f002 fa4d 	bl	8002ff8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	0018      	movs	r0, r3
 8000b62:	2310      	movs	r3, #16
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f002 fa46 	bl	8002ff8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fe95 	bl	80018a0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2202      	movs	r2, #2
 8000b7a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	0052      	lsls	r2, r2, #1
 8000b82:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2240      	movs	r2, #64	; 0x40
 8000b8e:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f000 fecd 	bl	8001938 <HAL_RCC_OscConfig>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x5e>
		Error_Handler();
 8000ba2:	f000 f97f 	bl	8000ea4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f001 f9c8 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x88>
		Error_Handler();
 8000bcc:	f000 f96a 	bl	8000ea4 <Error_Handler>
	}
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b013      	add	sp, #76	; 0x4c
 8000bd6:	bd90      	pop	{r4, r7, pc}

08000bd8 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_CRC_Init+0x40>)
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <MX_CRC_Init+0x44>)
 8000be0:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_CRC_Init+0x40>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_CRC_Init+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_CRC_Init+0x40>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_CRC_Init+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_CRC_Init+0x40>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <MX_CRC_Init+0x40>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fbda 	bl	80013bc <HAL_CRC_Init>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_CRC_Init+0x38>
		Error_Handler();
 8000c0c:	f000 f94a 	bl	8000ea4 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	20000028 	.word	0x20000028
 8000c1c:	40023000 	.word	0x40023000

08000c20 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <MX_SPI2_Init+0x7c>)
 8000c28:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c2c:	2282      	movs	r2, #130	; 0x82
 8000c2e:	0052      	lsls	r2, r2, #1
 8000c30:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	0212      	lsls	r2, r2, #8
 8000c38:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c3c:	22e0      	movs	r2, #224	; 0xe0
 8000c3e:	00d2      	lsls	r2, r2, #3
 8000c40:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <MX_SPI2_Init+0x78>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f001 fc38 	bl	80024f8 <HAL_SPI_Init>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_SPI2_Init+0x70>
		Error_Handler();
 8000c8c:	f000 f90a 	bl	8000ea4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	2000004c 	.word	0x2000004c
 8000c9c:	40003800 	.word	0x40003800

08000ca0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <MX_USART1_UART_Init+0x98>)
 8000ca8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cac:	22e1      	movs	r2, #225	; 0xe1
 8000cae:	0252      	lsls	r2, r2, #9
 8000cb0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 fcbc 	bl	8002668 <HAL_UART_Init>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000cf4:	f000 f8d6 	bl	8000ea4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f002 f877 	bl	8002df0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000d06:	f000 f8cd 	bl	8000ea4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f002 f8ae 	bl	8002e70 <HAL_UARTEx_SetRxFifoThreshold>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000d18:	f000 f8c4 	bl	8000ea4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 f82c 	bl	8002d7c <HAL_UARTEx_DisableFifoMode>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000d28:	f000 f8bc 	bl	8000ea4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	200000b0 	.word	0x200000b0
 8000d38:	40013800 	.word	0x40013800

08000d3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d42:	240c      	movs	r4, #12
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	0018      	movs	r0, r3
 8000d48:	2314      	movs	r3, #20
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f002 f953 	bl	8002ff8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d56:	4b4d      	ldr	r3, [pc, #308]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d58:	2102      	movs	r1, #2
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d5e:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d62:	2202      	movs	r2, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d70:	2104      	movs	r1, #4
 8000d72:	430a      	orrs	r2, r1
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
 8000d76:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <MX_GPIO_Init+0x150>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin,
 8000d9a:	493d      	ldr	r1, [pc, #244]	; (8000e90 <MX_GPIO_Init+0x154>)
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <MX_GPIO_Init+0x158>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fd60 	bl	8001866 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000da6:	23a0      	movs	r3, #160	; 0xa0
 8000da8:	05db      	lsls	r3, r3, #23
 8000daa:	2200      	movs	r2, #0
 8000dac:	21ae      	movs	r1, #174	; 0xae
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fd59 	bl	8001866 <HAL_GPIO_WritePin>
	MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin | MAX_RF_ENABLE_Pin | LED_1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RS485_CTRL_Pin LED_2_Pin LED_3_Pin */
	GPIO_InitStruct.Pin = RS485_CTRL_Pin | LED_2_Pin | LED_3_Pin;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	4a36      	ldr	r2, [pc, #216]	; (8000e90 <MX_GPIO_Init+0x154>)
 8000db8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	4a31      	ldr	r2, [pc, #196]	; (8000e94 <MX_GPIO_Init+0x158>)
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	0010      	movs	r0, r2
 8000dd4:	f000 fbc6 	bl	8001564 <HAL_GPIO_Init>

	/*Configure GPIO pins : TEST_INPUT_1_Pin TEST_INPUT_2_Pin SW_2_Pin */
	GPIO_InitStruct.Pin = TEST_INPUT_1_Pin | TEST_INPUT_2_Pin | SW_2_Pin;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	4a2f      	ldr	r2, [pc, #188]	; (8000e98 <MX_GPIO_Init+0x15c>)
 8000ddc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	4a2b      	ldr	r2, [pc, #172]	; (8000e9c <MX_GPIO_Init+0x160>)
 8000dee:	0019      	movs	r1, r3
 8000df0:	0010      	movs	r0, r2
 8000df2:	f000 fbb7 	bl	8001564 <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LE_Pin MAX_CE_Pin MAX_MUX_Pin MAX_RF_ENABLE_Pin
	 LED_1_Pin */
	GPIO_InitStruct.Pin = MAX_LE_Pin | MAX_CE_Pin | MAX_MUX_Pin
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	22ae      	movs	r2, #174	; 0xae
 8000dfa:	601a      	str	r2, [r3, #0]
			| MAX_RF_ENABLE_Pin | LED_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	2201      	movs	r2, #1
 8000e00:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	193a      	adds	r2, r7, r4
 8000e10:	23a0      	movs	r3, #160	; 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fba4 	bl	8001564 <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX_LOCK_DETECTOR_Pin SW_1_Pin SW_3_Pin SW_4_Pin
	 SW_5_Pin */
	GPIO_InitStruct.Pin = MAX_LOCK_DETECTOR_Pin | SW_1_Pin | SW_3_Pin | SW_4_Pin
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <MX_GPIO_Init+0x164>)
 8000e20:	601a      	str	r2, [r3, #0]
			| SW_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	193a      	adds	r2, r7, r4
 8000e30:	23a0      	movs	r3, #160	; 0xa0
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	0011      	movs	r1, r2
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 fb94 	bl	8001564 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_0_Pin SW_6_Pin SW_8_Pin SW_9_Pin */
	GPIO_InitStruct.Pin = SW_0_Pin | SW_6_Pin | SW_8_Pin | SW_9_Pin;
 8000e3c:	0021      	movs	r1, r4
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2296      	movs	r2, #150	; 0x96
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	000c      	movs	r4, r1
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <MX_GPIO_Init+0x158>)
 8000e58:	0019      	movs	r1, r3
 8000e5a:	0010      	movs	r0, r2
 8000e5c:	f000 fb82 	bl	8001564 <HAL_GPIO_Init>

	/*Configure GPIO pin : SW_7_Pin */
	GPIO_InitStruct.Pin = SW_7_Pin;
 8000e60:	0021      	movs	r1, r4
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2210      	movs	r2, #16
 8000e66:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2288      	movs	r2, #136	; 0x88
 8000e6c:	0352      	lsls	r2, r2, #13
 8000e6e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(SW_7_GPIO_Port, &GPIO_InitStruct);
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <MX_GPIO_Init+0x158>)
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	f000 fb71 	bl	8001564 <HAL_GPIO_Init>

}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b009      	add	sp, #36	; 0x24
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	00000203 	.word	0x00000203
 8000e94:	50000400 	.word	0x50000400
 8000e98:	0000c040 	.word	0x0000c040
 8000e9c:	50000800 	.word	0x50000800
 8000ea0:	00009940 	.word	0x00009940

08000ea4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_MspInit+0x44>)
 8000eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0549      	lsls	r1, r1, #21
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	055b      	lsls	r3, r3, #21
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_CRC_MspInit+0x38>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10d      	bne.n	8000f26 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_CRC_MspInit+0x3c>)
 8000f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_CRC_MspInit+0x3c>)
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	0149      	lsls	r1, r1, #5
 8000f14:	430a      	orrs	r2, r1
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_CRC_MspInit+0x3c>)
 8000f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	015b      	lsls	r3, r3, #5
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40023000 	.word	0x40023000
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b08b      	sub	sp, #44	; 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	2414      	movs	r4, #20
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	0018      	movs	r0, r3
 8000f46:	2314      	movs	r3, #20
 8000f48:	001a      	movs	r2, r3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f002 f854 	bl	8002ff8 <memset>
  if(hspi->Instance==SPI2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <HAL_SPI_MspInit+0xb8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d146      	bne.n	8000fe8 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_SPI_MspInit+0xbc>)
 8000f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <HAL_SPI_MspInit+0xbc>)
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	01c9      	lsls	r1, r1, #7
 8000f64:	430a      	orrs	r2, r1
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <HAL_SPI_MspInit+0xbc>)
 8000f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <HAL_SPI_MspInit+0xbc>)
 8000f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_SPI_MspInit+0xbc>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_SPI_MspInit+0xbc>)
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	2201      	movs	r2, #1
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MAX_SCK_Pin;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	2202      	movs	r2, #2
 8000f98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fac:	193a      	adds	r2, r7, r4
 8000fae:	23a0      	movs	r3, #160	; 0xa0
 8000fb0:	05db      	lsls	r3, r3, #23
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 fad5 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAX_DATA_Pin;
 8000fba:	0021      	movs	r1, r4
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAX_DATA_GPIO_Port, &GPIO_InitStruct);
 8000fda:	187a      	adds	r2, r7, r1
 8000fdc:	23a0      	movs	r3, #160	; 0xa0
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fabe 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b00b      	add	sp, #44	; 0x2c
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	40003800 	.word	0x40003800
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b091      	sub	sp, #68	; 0x44
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	232c      	movs	r3, #44	; 0x2c
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	0018      	movs	r0, r3
 8001006:	2314      	movs	r3, #20
 8001008:	001a      	movs	r2, r3
 800100a:	2100      	movs	r1, #0
 800100c:	f001 fff4 	bl	8002ff8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001010:	2414      	movs	r4, #20
 8001012:	193b      	adds	r3, r7, r4
 8001014:	0018      	movs	r0, r3
 8001016:	2318      	movs	r3, #24
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f001 ffec 	bl	8002ff8 <memset>
  if(huart->Instance==USART1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <HAL_UART_MspInit+0xbc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d13f      	bne.n	80010aa <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001030:	193b      	adds	r3, r7, r4
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001036:	193b      	adds	r3, r7, r4
 8001038:	0018      	movs	r0, r3
 800103a:	f001 f937 	bl	80022ac <HAL_RCCEx_PeriphCLKConfig>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001042:	f7ff ff2f 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_UART_MspInit+0xc0>)
 8001048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_UART_MspInit+0xc0>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	01c9      	lsls	r1, r1, #7
 8001050:	430a      	orrs	r2, r1
 8001052:	641a      	str	r2, [r3, #64]	; 0x40
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_UART_MspInit+0xc0>)
 8001056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	01db      	lsls	r3, r3, #7
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_UART_MspInit+0xc0>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_UART_MspInit+0xc0>)
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_UART_MspInit+0xc0>)
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800107a:	212c      	movs	r1, #44	; 0x2c
 800107c:	187b      	adds	r3, r7, r1
 800107e:	22c0      	movs	r2, #192	; 0xc0
 8001080:	00d2      	lsls	r2, r2, #3
 8001082:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2202      	movs	r2, #2
 8001088:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2201      	movs	r2, #1
 800109a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	187a      	adds	r2, r7, r1
 800109e:	23a0      	movs	r3, #160	; 0xa0
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 fa5d 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b011      	add	sp, #68	; 0x44
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40021000 	.word	0x40021000

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f89c 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f8:	f7ff fff7 	bl	80010ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopForever+0x6>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopForever+0xe>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopForever+0x16>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001122:	f001 ff45 	bl	8002fb0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001126:	f7ff fc11 	bl	800094c <main>

0800112a <LoopForever>:

LoopForever:
  b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   r0, =_estack
 800112c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001138:	080030b0 	.word	0x080030b0
  ldr r2, =_sbss
 800113c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001140:	2000014c 	.word	0x2000014c

08001144 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>
	...

08001148 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x3c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_Init+0x3c>)
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	0049      	lsls	r1, r1, #1
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001162:	2003      	movs	r0, #3
 8001164:	f000 f810 	bl	8001188 <HAL_InitTick>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d003      	beq.n	8001174 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e001      	b.n	8001178 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff fe9c 	bl	8000eb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	781b      	ldrb	r3, [r3, #0]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_InitTick+0x88>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d02b      	beq.n	80011f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_InitTick+0x8c>)
 80011a2:	681c      	ldr	r4, [r3, #0]
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_InitTick+0x88>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	0019      	movs	r1, r3
 80011aa:	23fa      	movs	r3, #250	; 0xfa
 80011ac:	0098      	lsls	r0, r3, #2
 80011ae:	f7fe ffa7 	bl	8000100 <__udivsi3>
 80011b2:	0003      	movs	r3, r0
 80011b4:	0019      	movs	r1, r3
 80011b6:	0020      	movs	r0, r4
 80011b8:	f7fe ffa2 	bl	8000100 <__udivsi3>
 80011bc:	0003      	movs	r3, r0
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f8ef 	bl	80013a2 <HAL_SYSTICK_Config>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d112      	bne.n	80011ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d80a      	bhi.n	80011e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	425b      	negs	r3, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 f8ce 	bl	8001378 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_InitTick+0x90>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e00d      	b.n	8001200 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e008      	b.n	8001200 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ee:	230f      	movs	r3, #15
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e003      	b.n	8001200 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	781b      	ldrb	r3, [r3, #0]
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b005      	add	sp, #20
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	20000008 	.word	0x20000008
 8001214:	20000000 	.word	0x20000000
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x1c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	001a      	movs	r2, r3
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_IncTick+0x20>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	18d2      	adds	r2, r2, r3
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_IncTick+0x20>)
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	20000008 	.word	0x20000008
 800123c:	20000148 	.word	0x20000148

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <HAL_GetTick+0x10>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	20000148 	.word	0x20000148

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b7f      	cmp	r3, #127	; 0x7f
 8001268:	d828      	bhi.n	80012bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126a:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <__NVIC_SetPriority+0xd4>)
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	33c0      	adds	r3, #192	; 0xc0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	589b      	ldr	r3, [r3, r2]
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0011      	movs	r1, r2
 8001280:	2203      	movs	r2, #3
 8001282:	400a      	ands	r2, r1
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	21ff      	movs	r1, #255	; 0xff
 8001288:	4091      	lsls	r1, r2
 800128a:	000a      	movs	r2, r1
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	401a      	ands	r2, r3
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	2303      	movs	r3, #3
 80012a2:	4003      	ands	r3, r0
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a8:	481f      	ldr	r0, [pc, #124]	; (8001328 <__NVIC_SetPriority+0xd4>)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	430a      	orrs	r2, r1
 80012b4:	33c0      	adds	r3, #192	; 0xc0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ba:	e031      	b.n	8001320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <__NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0019      	movs	r1, r3
 80012c4:	230f      	movs	r3, #15
 80012c6:	400b      	ands	r3, r1
 80012c8:	3b08      	subs	r3, #8
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3306      	adds	r3, #6
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0011      	movs	r1, r2
 80012dc:	2203      	movs	r2, #3
 80012de:	400a      	ands	r2, r1
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	401a      	ands	r2, r3
 80012ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	401a      	ands	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	2303      	movs	r3, #3
 80012fe:	4003      	ands	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	001c      	movs	r4, r3
 800130c:	230f      	movs	r3, #15
 800130e:	4023      	ands	r3, r4
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	3306      	adds	r3, #6
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	18c3      	adds	r3, r0, r3
 800131c:	3304      	adds	r3, #4
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b003      	add	sp, #12
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	045b      	lsls	r3, r3, #17
 8001340:	429a      	cmp	r2, r3
 8001342:	d301      	bcc.n	8001348 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001344:	2301      	movs	r3, #1
 8001346:	e010      	b.n	800136a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <SysTick_Config+0x44>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	3a01      	subs	r2, #1
 800134e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001350:	2301      	movs	r3, #1
 8001352:	425b      	negs	r3, r3
 8001354:	2103      	movs	r1, #3
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff7c 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x44>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x44>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	210f      	movs	r1, #15
 8001384:	187b      	adds	r3, r7, r1
 8001386:	1c02      	adds	r2, r0, #0
 8001388:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	187b      	adds	r3, r7, r1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff ffbf 	bl	8001330 <SysTick_Config>
 80013b2:	0003      	movs	r3, r0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e056      	b.n	800147c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7f5b      	ldrb	r3, [r3, #29]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d106      	bne.n	80013e6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff fd89 	bl	8000ef8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2202      	movs	r2, #2
 80013ea:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	791b      	ldrb	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10c      	bne.n	800140e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a22      	ldr	r2, [pc, #136]	; (8001484 <HAL_CRC_Init+0xc8>)
 80013fa:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2118      	movs	r1, #24
 8001408:	438a      	bics	r2, r1
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e00b      	b.n	8001426 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6899      	ldr	r1, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f000 f835 	bl	8001488 <HAL_CRCEx_Polynomial_Set>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e02a      	b.n	800147c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	795b      	ldrb	r3, [r3, #5]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2201      	movs	r2, #1
 8001434:	4252      	negs	r2, r2
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	e004      	b.n	8001444 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6912      	ldr	r2, [r2, #16]
 8001442:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2260      	movs	r2, #96	; 0x60
 800144c:	4393      	bics	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	4393      	bics	r3, r2
 8001466:	0019      	movs	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}
 8001484:	04c11db7 	.word	0x04c11db7

08001488 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001494:	2317      	movs	r3, #23
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800149c:	231f      	movs	r3, #31
 800149e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	613a      	str	r2, [r7, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_CRCEx_Polynomial_Set+0x36>
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	221f      	movs	r2, #31
 80014b0:	4013      	ands	r3, r2
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	40da      	lsrs	r2, r3
 80014b6:	0013      	movs	r3, r2
 80014b8:	2201      	movs	r2, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	d0f1      	beq.n	80014a2 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b18      	cmp	r3, #24
 80014c2:	d00f      	beq.n	80014e4 <HAL_CRCEx_Polynomial_Set+0x5c>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b18      	cmp	r3, #24
 80014c8:	d824      	bhi.n	8001514 <HAL_CRCEx_Polynomial_Set+0x8c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d011      	beq.n	80014f4 <HAL_CRCEx_Polynomial_Set+0x6c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d81e      	bhi.n	8001514 <HAL_CRCEx_Polynomial_Set+0x8c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_CRCEx_Polynomial_Set+0x96>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d010      	beq.n	8001504 <HAL_CRCEx_Polynomial_Set+0x7c>
 80014e2:	e017      	b.n	8001514 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d91b      	bls.n	8001522 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 80014ea:	2317      	movs	r3, #23
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80014f2:	e016      	b.n	8001522 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b07      	cmp	r3, #7
 80014f8:	d915      	bls.n	8001526 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80014fa:	2317      	movs	r3, #23
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001502:	e010      	b.n	8001526 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	d90f      	bls.n	800152a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 800150a:	2317      	movs	r3, #23
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001512:	e00a      	b.n	800152a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001514:	2317      	movs	r3, #23
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
      break;
 800151c:	e006      	b.n	800152c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	e004      	b.n	800152c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	e002      	b.n	800152c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	e000      	b.n	800152c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800152a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 800152c:	2317      	movs	r3, #23
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10e      	bne.n	8001554 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2218      	movs	r2, #24
 8001546:	4393      	bics	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	430a      	orrs	r2, r1
 8001552:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001554:	2317      	movs	r3, #23
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	781b      	ldrb	r3, [r3, #0]
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b006      	add	sp, #24
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e147      	b.n	8001804 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4091      	lsls	r1, r2
 800157e:	000a      	movs	r2, r1
 8001580:	4013      	ands	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d100      	bne.n	800158c <HAL_GPIO_Init+0x28>
 800158a:	e138      	b.n	80017fe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	4013      	ands	r3, r2
 8001594:	2b01      	cmp	r3, #1
 8001596:	d005      	beq.n	80015a4 <HAL_GPIO_Init+0x40>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2203      	movs	r2, #3
 800159e:	4013      	ands	r3, r2
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d130      	bne.n	8001606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	409a      	lsls	r2, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	43da      	mvns	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	0013      	movs	r3, r2
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015da:	2201      	movs	r2, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	2201      	movs	r2, #1
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	4013      	ands	r3, r2
 800160e:	2b03      	cmp	r3, #3
 8001610:	d017      	beq.n	8001642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2203      	movs	r2, #3
 8001648:	4013      	ands	r3, r2
 800164a:	2b02      	cmp	r3, #2
 800164c:	d123      	bne.n	8001696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	58d3      	ldr	r3, [r2, r3]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2207      	movs	r2, #7
 8001660:	4013      	ands	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	43da      	mvns	r2, r3
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2107      	movs	r1, #7
 800167a:	400b      	ands	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	6939      	ldr	r1, [r7, #16]
 8001694:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	409a      	lsls	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	401a      	ands	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	23c0      	movs	r3, #192	; 0xc0
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d100      	bne.n	80016d8 <HAL_GPIO_Init+0x174>
 80016d6:	e092      	b.n	80017fe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016d8:	4a50      	ldr	r2, [pc, #320]	; (800181c <HAL_GPIO_Init+0x2b8>)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3318      	adds	r3, #24
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	589b      	ldr	r3, [r3, r2]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2203      	movs	r2, #3
 80016ea:	4013      	ands	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	220f      	movs	r2, #15
 80016f0:	409a      	lsls	r2, r3
 80016f2:	0013      	movs	r3, r2
 80016f4:	43da      	mvns	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	23a0      	movs	r3, #160	; 0xa0
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	429a      	cmp	r2, r3
 8001704:	d013      	beq.n	800172e <HAL_GPIO_Init+0x1ca>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a45      	ldr	r2, [pc, #276]	; (8001820 <HAL_GPIO_Init+0x2bc>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_Init+0x1c6>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a44      	ldr	r2, [pc, #272]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_Init+0x1c2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a43      	ldr	r2, [pc, #268]	; (8001828 <HAL_GPIO_Init+0x2c4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_Init+0x1be>
 800171e:	2303      	movs	r3, #3
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x1cc>
 8001722:	2305      	movs	r3, #5
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x1cc>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x1cc>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x1cc>
 800172e:	2300      	movs	r3, #0
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	2103      	movs	r1, #3
 8001734:	400a      	ands	r2, r1
 8001736:	00d2      	lsls	r2, r2, #3
 8001738:	4093      	lsls	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001740:	4936      	ldr	r1, [pc, #216]	; (800181c <HAL_GPIO_Init+0x2b8>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3318      	adds	r3, #24
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_GPIO_Init+0x2b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43da      	mvns	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	035b      	lsls	r3, r3, #13
 8001766:	4013      	ands	r3, r2
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_GPIO_Init+0x2b8>)
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_GPIO_Init+0x2b8>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43da      	mvns	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	039b      	lsls	r3, r3, #14
 8001790:	4013      	ands	r3, r2
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <HAL_GPIO_Init+0x2b8>)
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_GPIO_Init+0x2b8>)
 80017a4:	2384      	movs	r3, #132	; 0x84
 80017a6:	58d3      	ldr	r3, [r2, r3]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	029b      	lsls	r3, r3, #10
 80017bc:	4013      	ands	r3, r2
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017c8:	4914      	ldr	r1, [pc, #80]	; (800181c <HAL_GPIO_Init+0x2b8>)
 80017ca:	2284      	movs	r2, #132	; 0x84
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_GPIO_Init+0x2b8>)
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	58d3      	ldr	r3, [r2, r3]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43da      	mvns	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	4013      	ands	r3, r2
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017f6:	4909      	ldr	r1, [pc, #36]	; (800181c <HAL_GPIO_Init+0x2b8>)
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	40da      	lsrs	r2, r3
 800180c:	1e13      	subs	r3, r2, #0
 800180e:	d000      	beq.n	8001812 <HAL_GPIO_Init+0x2ae>
 8001810:	e6b0      	b.n	8001574 <HAL_GPIO_Init+0x10>
  }
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b006      	add	sp, #24
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021800 	.word	0x40021800
 8001820:	50000400 	.word	0x50000400
 8001824:	50000800 	.word	0x50000800
 8001828:	50000c00 	.word	0x50000c00

0800182c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	000a      	movs	r2, r1
 8001836:	1cbb      	adds	r3, r7, #2
 8001838:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	1cba      	adds	r2, r7, #2
 8001840:	8812      	ldrh	r2, [r2, #0]
 8001842:	4013      	ands	r3, r2
 8001844:	d004      	beq.n	8001850 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001846:	230f      	movs	r3, #15
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e003      	b.n	8001858 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001850:	230f      	movs	r3, #15
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001858:	230f      	movs	r3, #15
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	781b      	ldrb	r3, [r3, #0]
}
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b004      	add	sp, #16
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	0008      	movs	r0, r1
 8001870:	0011      	movs	r1, r2
 8001872:	1cbb      	adds	r3, r7, #2
 8001874:	1c02      	adds	r2, r0, #0
 8001876:	801a      	strh	r2, [r3, #0]
 8001878:	1c7b      	adds	r3, r7, #1
 800187a:	1c0a      	adds	r2, r1, #0
 800187c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800187e:	1c7b      	adds	r3, r7, #1
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001886:	1cbb      	adds	r3, r7, #2
 8001888:	881a      	ldrh	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800188e:	e003      	b.n	8001898 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001890:	1cbb      	adds	r3, r7, #2
 8001892:	881a      	ldrh	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d11f      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	0013      	movs	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	189b      	adds	r3, r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4912      	ldr	r1, [pc, #72]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7fe fc14 	bl	8000100 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	e008      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e001      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e009      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	401a      	ands	r2, r3
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	429a      	cmp	r2, r3
 8001902:	d0ed      	beq.n	80018e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40007000 	.word	0x40007000
 8001914:	fffff9ff 	.word	0xfffff9ff
 8001918:	20000000 	.word	0x20000000
 800191c:	000f4240 	.word	0x000f4240

08001920 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	23e0      	movs	r3, #224	; 0xe0
 800192a:	01db      	lsls	r3, r3, #7
 800192c:	4013      	ands	r3, r2
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e2f3      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	d100      	bne.n	8001956 <HAL_RCC_OscConfig+0x1e>
 8001954:	e07c      	b.n	8001a50 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001956:	4bc3      	ldr	r3, [pc, #780]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2238      	movs	r2, #56	; 0x38
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001960:	4bc0      	ldr	r3, [pc, #768]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2203      	movs	r2, #3
 8001966:	4013      	ands	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b10      	cmp	r3, #16
 800196e:	d102      	bne.n	8001976 <HAL_RCC_OscConfig+0x3e>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d002      	beq.n	800197c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d10b      	bne.n	8001994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	4bb9      	ldr	r3, [pc, #740]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	4013      	ands	r3, r2
 8001986:	d062      	beq.n	8001a4e <HAL_RCC_OscConfig+0x116>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d15e      	bne.n	8001a4e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e2ce      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	429a      	cmp	r2, r3
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_OscConfig+0x78>
 80019a0:	4bb0      	ldr	r3, [pc, #704]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4baf      	ldr	r3, [pc, #700]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	0249      	lsls	r1, r1, #9
 80019aa:	430a      	orrs	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e020      	b.n	80019f2 <HAL_RCC_OscConfig+0xba>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	23a0      	movs	r3, #160	; 0xa0
 80019b6:	02db      	lsls	r3, r3, #11
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d10e      	bne.n	80019da <HAL_RCC_OscConfig+0xa2>
 80019bc:	4ba9      	ldr	r3, [pc, #676]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4ba8      	ldr	r3, [pc, #672]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	2180      	movs	r1, #128	; 0x80
 80019c4:	02c9      	lsls	r1, r1, #11
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	4ba6      	ldr	r3, [pc, #664]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4ba5      	ldr	r3, [pc, #660]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	0249      	lsls	r1, r1, #9
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0xba>
 80019da:	4ba2      	ldr	r3, [pc, #648]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4ba1      	ldr	r3, [pc, #644]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	49a1      	ldr	r1, [pc, #644]	; (8001c68 <HAL_RCC_OscConfig+0x330>)
 80019e2:	400a      	ands	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	4b9f      	ldr	r3, [pc, #636]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b9e      	ldr	r3, [pc, #632]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	499f      	ldr	r1, [pc, #636]	; (8001c6c <HAL_RCC_OscConfig+0x334>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d014      	beq.n	8001a24 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fc21 	bl	8001240 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fc1c 	bl	8001240 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e28d      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a16:	4b93      	ldr	r3, [pc, #588]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	029b      	lsls	r3, r3, #10
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0xcc>
 8001a22:	e015      	b.n	8001a50 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff fc0c 	bl	8001240 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fc07 	bl	8001240 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b64      	cmp	r3, #100	; 0x64
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e278      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a40:	4b88      	ldr	r3, [pc, #544]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0xf6>
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d100      	bne.n	8001a5c <HAL_RCC_OscConfig+0x124>
 8001a5a:	e099      	b.n	8001b90 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5c:	4b81      	ldr	r3, [pc, #516]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2238      	movs	r2, #56	; 0x38
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a66:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d102      	bne.n	8001a7c <HAL_RCC_OscConfig+0x144>
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d002      	beq.n	8001a82 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d135      	bne.n	8001aee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a82:	4b78      	ldr	r3, [pc, #480]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x162>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e24b      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b72      	ldr	r3, [pc, #456]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a74      	ldr	r2, [pc, #464]	; (8001c70 <HAL_RCC_OscConfig+0x338>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	021a      	lsls	r2, r3, #8
 8001aaa:	4b6e      	ldr	r3, [pc, #440]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d112      	bne.n	8001adc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ab6:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x33c>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001aca:	4b66      	ldr	r3, [pc, #408]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	0adb      	lsrs	r3, r3, #11
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	4a68      	ldr	r2, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x340>)
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	4b68      	ldr	r3, [pc, #416]	; (8001c7c <HAL_RCC_OscConfig+0x344>)
 8001ada:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001adc:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <HAL_RCC_OscConfig+0x348>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fb51 	bl	8001188 <HAL_InitTick>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d051      	beq.n	8001b8e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e221      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d030      	beq.n	8001b58 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001af6:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a5e      	ldr	r2, [pc, #376]	; (8001c74 <HAL_RCC_OscConfig+0x33c>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b0a:	4b56      	ldr	r3, [pc, #344]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b55      	ldr	r3, [pc, #340]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0049      	lsls	r1, r1, #1
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fb92 	bl	8001240 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fb8d 	bl	8001240 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1fe      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b34:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b48      	ldr	r3, [pc, #288]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_RCC_OscConfig+0x338>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	021a      	lsls	r2, r3, #8
 8001b50:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e01b      	b.n	8001b90 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	4949      	ldr	r1, [pc, #292]	; (8001c84 <HAL_RCC_OscConfig+0x34c>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fb6c 	bl	8001240 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fb67 	bl	8001240 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1d8      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b80:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x236>
 8001b8c:	e000      	b.n	8001b90 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b8e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	4013      	ands	r3, r2
 8001b98:	d047      	beq.n	8001c2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b9a:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2238      	movs	r2, #56	; 0x38
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b18      	cmp	r3, #24
 8001ba4:	d10a      	bne.n	8001bbc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d03c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x2f2>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d138      	bne.n	8001c2a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e1ba      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d019      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc8:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fb36 	bl	8001240 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff fb31 	bl	8001240 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1a2      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d0f1      	beq.n	8001bda <HAL_RCC_OscConfig+0x2a2>
 8001bf6:	e018      	b.n	8001c2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	2101      	movs	r1, #1
 8001c00:	438a      	bics	r2, r1
 8001c02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb1c 	bl	8001240 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fb17 	bl	8001240 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e188      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c20:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d1f1      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	4013      	ands	r3, r2
 8001c32:	d100      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2fe>
 8001c34:	e0c6      	b.n	8001dc4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	231f      	movs	r3, #31
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2238      	movs	r2, #56	; 0x38
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d11e      	bne.n	8001c88 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_RCC_OscConfig+0x32c>)
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d100      	bne.n	8001c56 <HAL_RCC_OscConfig+0x31e>
 8001c54:	e0b6      	b.n	8001dc4 <HAL_RCC_OscConfig+0x48c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d000      	beq.n	8001c60 <HAL_RCC_OscConfig+0x328>
 8001c5e:	e0b1      	b.n	8001dc4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e166      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
 8001c64:	40021000 	.word	0x40021000
 8001c68:	fffeffff 	.word	0xfffeffff
 8001c6c:	fffbffff 	.word	0xfffbffff
 8001c70:	ffff80ff 	.word	0xffff80ff
 8001c74:	ffffc7ff 	.word	0xffffc7ff
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004
 8001c84:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c88:	4bac      	ldr	r3, [pc, #688]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	055b      	lsls	r3, r3, #21
 8001c90:	4013      	ands	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x360>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x362>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d011      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4ba7      	ldr	r3, [pc, #668]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001ca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ca2:	4ba6      	ldr	r3, [pc, #664]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0549      	lsls	r1, r1, #21
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cac:	4ba3      	ldr	r3, [pc, #652]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	055b      	lsls	r3, r3, #21
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001cba:	231f      	movs	r3, #31
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	4b9f      	ldr	r3, [pc, #636]	; (8001f40 <HAL_RCC_OscConfig+0x608>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d11a      	bne.n	8001d04 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cce:	4b9c      	ldr	r3, [pc, #624]	; (8001f40 <HAL_RCC_OscConfig+0x608>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b9b      	ldr	r3, [pc, #620]	; (8001f40 <HAL_RCC_OscConfig+0x608>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0049      	lsls	r1, r1, #1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fab0 	bl	8001240 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7ff faab 	bl	8001240 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e11c      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf8:	4b91      	ldr	r3, [pc, #580]	; (8001f40 <HAL_RCC_OscConfig+0x608>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3e2>
 8001d0c:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d10:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	430a      	orrs	r2, r1
 8001d16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x41c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x404>
 8001d22:	4b86      	ldr	r3, [pc, #536]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d28:	2104      	movs	r1, #4
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d2e:	4b83      	ldr	r3, [pc, #524]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d32:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x41c>
 8001d3c:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d40:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	438a      	bics	r2, r1
 8001d46:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d48:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d4c:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d4e:	2104      	movs	r1, #4
 8001d50:	438a      	bics	r2, r1
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d014      	beq.n	8001d86 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fa70 	bl	8001240 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff fa6b 	bl	8001240 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4a74      	ldr	r2, [pc, #464]	; (8001f44 <HAL_RCC_OscConfig+0x60c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0db      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d7a:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x42e>
 8001d84:	e013      	b.n	8001dae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff fa5b 	bl	8001240 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d8e:	e009      	b.n	8001da4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff fa56 	bl	8001240 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4a6a      	ldr	r2, [pc, #424]	; (8001f44 <HAL_RCC_OscConfig+0x60c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0c6      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da4:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001dae:	231f      	movs	r3, #31
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dbc:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001dbe:	4962      	ldr	r1, [pc, #392]	; (8001f48 <HAL_RCC_OscConfig+0x610>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d100      	bne.n	8001dce <HAL_RCC_OscConfig+0x496>
 8001dcc:	e0b0      	b.n	8001f30 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dce:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2238      	movs	r2, #56	; 0x38
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d100      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4a4>
 8001dda:	e078      	b.n	8001ece <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d153      	bne.n	8001e8c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001dea:	4958      	ldr	r1, [pc, #352]	; (8001f4c <HAL_RCC_OscConfig+0x614>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fa26 	bl	8001240 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7ff fa21 	bl	8001240 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e092      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	049b      	lsls	r3, r3, #18
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e18:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a4c      	ldr	r2, [pc, #304]	; (8001f50 <HAL_RCC_OscConfig+0x618>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	0019      	movs	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0449      	lsls	r1, r1, #17
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	0549      	lsls	r1, r1, #21
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff f9ed 	bl	8001240 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f9e8 	bl	8001240 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e059      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	049b      	lsls	r3, r3, #18
 8001e86:	4013      	ands	r3, r2
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x534>
 8001e8a:	e051      	b.n	8001f30 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001e92:	492e      	ldr	r1, [pc, #184]	; (8001f4c <HAL_RCC_OscConfig+0x614>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f9d2 	bl	8001240 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff f9cd 	bl	8001240 <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e03e      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	049b      	lsls	r3, r3, #18
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001ec6:	4923      	ldr	r1, [pc, #140]	; (8001f54 <HAL_RCC_OscConfig+0x61c>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	e030      	b.n	8001f30 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e02b      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_RCC_OscConfig+0x604>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d11e      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2270      	movs	r2, #112	; 0x70
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d117      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	23fe      	movs	r3, #254	; 0xfe
 8001f00:	01db      	lsls	r3, r3, #7
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d10e      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	23f8      	movs	r3, #248	; 0xf8
 8001f12:	039b      	lsls	r3, r3, #14
 8001f14:	401a      	ands	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	0f5b      	lsrs	r3, r3, #29
 8001f22:	075a      	lsls	r2, r3, #29
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b008      	add	sp, #32
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	00001388 	.word	0x00001388
 8001f48:	efffffff 	.word	0xefffffff
 8001f4c:	feffffff 	.word	0xfeffffff
 8001f50:	1fc1808c 	.word	0x1fc1808c
 8001f54:	effefffc 	.word	0xeffefffc

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0e9      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2207      	movs	r2, #7
 8001f72:	4013      	ands	r3, r2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d91e      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b73      	ldr	r3, [pc, #460]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4393      	bics	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	4b70      	ldr	r3, [pc, #448]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff f958 	bl	8001240 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f94:	e009      	b.n	8001faa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7ff f953 	bl	8001240 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	; (800214c <HAL_RCC_ClockConfig+0x1f4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0ca      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2207      	movs	r2, #7
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d015      	beq.n	8001fee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d006      	beq.n	8001fda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd2:	21e0      	movs	r1, #224	; 0xe0
 8001fd4:	01c9      	lsls	r1, r1, #7
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4a5d      	ldr	r2, [pc, #372]	; (8002154 <HAL_RCC_ClockConfig+0x1fc>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d057      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	029b      	lsls	r3, r3, #10
 8002008:	4013      	ands	r3, r2
 800200a:	d12b      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e097      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d107      	bne.n	8002028 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002018:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	049b      	lsls	r3, r3, #18
 8002020:	4013      	ands	r3, r2
 8002022:	d11f      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e08b      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002030:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4013      	ands	r3, r2
 800203a:	d113      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e07f      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002048:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d108      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e074      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b3e      	ldr	r3, [pc, #248]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e06d      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2207      	movs	r2, #7
 800206a:	4393      	bics	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002078:	f7ff f8e2 	bl	8001240 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002080:	e009      	b.n	8002096 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002082:	f7ff f8dd 	bl	8001240 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	4a2f      	ldr	r2, [pc, #188]	; (800214c <HAL_RCC_ClockConfig+0x1f4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e054      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2238      	movs	r2, #56	; 0x38
 800209c:	401a      	ands	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1ec      	bne.n	8002082 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2207      	movs	r2, #7
 80020ae:	4013      	ands	r3, r2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d21e      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2207      	movs	r2, #7
 80020bc:	4393      	bics	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020c8:	f7ff f8ba 	bl	8001240 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020d0:	e009      	b.n	80020e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7ff f8b5 	bl	8001240 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_RCC_ClockConfig+0x1f4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e02c      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2207      	movs	r2, #7
 80020ec:	4013      	ands	r3, r2
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2204      	movs	r2, #4
 80020fa:	4013      	ands	r3, r2
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_RCC_ClockConfig+0x200>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002112:	f000 f829 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002116:	0001      	movs	r1, r0
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	220f      	movs	r2, #15
 8002120:	401a      	ands	r2, r3
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_RCC_ClockConfig+0x204>)
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	58d3      	ldr	r3, [r2, r3]
 8002128:	221f      	movs	r2, #31
 800212a:	4013      	ands	r3, r2
 800212c:	000a      	movs	r2, r1
 800212e:	40da      	lsrs	r2, r3
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x208>)
 8002132:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x20c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff f825 	bl	8001188 <HAL_InitTick>
 800213e:	0003      	movs	r3, r0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b004      	add	sp, #16
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40022000 	.word	0x40022000
 800214c:	00001388 	.word	0x00001388
 8002150:	40021000 	.word	0x40021000
 8002154:	fffff0ff 	.word	0xfffff0ff
 8002158:	ffff8fff 	.word	0xffff8fff
 800215c:	08003020 	.word	0x08003020
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216e:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2238      	movs	r2, #56	; 0x38
 8002174:	4013      	ands	r3, r2
 8002176:	d10f      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0adb      	lsrs	r3, r3, #11
 800217e:	2207      	movs	r2, #7
 8002180:	4013      	ands	r3, r2
 8002182:	2201      	movs	r2, #1
 8002184:	409a      	lsls	r2, r3
 8002186:	0013      	movs	r3, r2
 8002188:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	4835      	ldr	r0, [pc, #212]	; (8002264 <HAL_RCC_GetSysClockFreq+0xfc>)
 800218e:	f7fd ffb7 	bl	8000100 <__udivsi3>
 8002192:	0003      	movs	r3, r0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e05d      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2238      	movs	r2, #56	; 0x38
 800219e:	4013      	ands	r3, r2
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_RCC_GetSysClockFreq+0x100>)
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e054      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2238      	movs	r2, #56	; 0x38
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d138      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2203      	movs	r2, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	2207      	movs	r2, #7
 80021c8:	4013      	ands	r3, r2
 80021ca:	3301      	adds	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d10d      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	4824      	ldr	r0, [pc, #144]	; (8002268 <HAL_RCC_GetSysClockFreq+0x100>)
 80021d8:	f7fd ff92 	bl	8000100 <__udivsi3>
 80021dc:	0003      	movs	r3, r0
 80021de:	0019      	movs	r1, r3
 80021e0:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	227f      	movs	r2, #127	; 0x7f
 80021e8:	4013      	ands	r3, r2
 80021ea:	434b      	muls	r3, r1
 80021ec:	617b      	str	r3, [r7, #20]
        break;
 80021ee:	e00d      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	481c      	ldr	r0, [pc, #112]	; (8002264 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021f4:	f7fd ff84 	bl	8000100 <__udivsi3>
 80021f8:	0003      	movs	r3, r0
 80021fa:	0019      	movs	r1, r3
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	227f      	movs	r2, #127	; 0x7f
 8002204:	4013      	ands	r3, r2
 8002206:	434b      	muls	r3, r1
 8002208:	617b      	str	r3, [r7, #20]
        break;
 800220a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0f5b      	lsrs	r3, r3, #29
 8002212:	2207      	movs	r2, #7
 8002214:	4013      	ands	r3, r2
 8002216:	3301      	adds	r3, #1
 8002218:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	6978      	ldr	r0, [r7, #20]
 800221e:	f7fd ff6f 	bl	8000100 <__udivsi3>
 8002222:	0003      	movs	r3, r0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	e015      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2238      	movs	r2, #56	; 0x38
 800222e:	4013      	ands	r3, r2
 8002230:	2b20      	cmp	r3, #32
 8002232:	d103      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2238      	movs	r2, #56	; 0x38
 8002242:	4013      	ands	r3, r2
 8002244:	2b18      	cmp	r3, #24
 8002246:	d103      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002248:	23fa      	movs	r3, #250	; 0xfa
 800224a:	01db      	lsls	r3, r3, #7
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e001      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002254:	693b      	ldr	r3, [r7, #16]
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b006      	add	sp, #24
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40021000 	.word	0x40021000
 8002264:	00f42400 	.word	0x00f42400
 8002268:	007a1200 	.word	0x007a1200

0800226c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_RCC_GetHCLKFreq+0x10>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	20000000 	.word	0x20000000

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002284:	f7ff fff2 	bl	800226c <HAL_RCC_GetHCLKFreq>
 8002288:	0004      	movs	r4, r0
 800228a:	f7ff fb49 	bl	8001920 <LL_RCC_GetAPB1Prescaler>
 800228e:	0003      	movs	r3, r0
 8002290:	0b1a      	lsrs	r2, r3, #12
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	58d3      	ldr	r3, [r2, r3]
 8002298:	221f      	movs	r2, #31
 800229a:	4013      	ands	r3, r2
 800229c:	40dc      	lsrs	r4, r3
 800229e:	0023      	movs	r3, r4
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bdb0      	pop	{r4, r5, r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	08003060 	.word	0x08003060

080022ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80022b4:	2313      	movs	r3, #19
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022bc:	2312      	movs	r3, #18
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	4013      	ands	r3, r2
 80022ce:	d100      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022d0:	e0a3      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2011      	movs	r0, #17
 80022d4:	183b      	adds	r3, r7, r0
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	055b      	lsls	r3, r3, #21
 80022e2:	4013      	ands	r3, r2
 80022e4:	d110      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b7c      	ldr	r3, [pc, #496]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ea:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0549      	lsls	r1, r1, #21
 80022f0:	430a      	orrs	r2, r1
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002302:	183b      	adds	r3, r7, r0
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002308:	4b74      	ldr	r3, [pc, #464]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b73      	ldr	r3, [pc, #460]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0049      	lsls	r1, r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002316:	f7fe ff93 	bl	8001240 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800231e:	e00b      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002320:	f7fe ff8e 	bl	8001240 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d904      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800232e:	2313      	movs	r3, #19
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
        break;
 8002336:	e005      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4013      	ands	r3, r2
 8002342:	d0ed      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002344:	2313      	movs	r3, #19
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d154      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800234e:	4b62      	ldr	r3, [pc, #392]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002352:	23c0      	movs	r3, #192	; 0xc0
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4013      	ands	r3, r2
 8002358:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d019      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	429a      	cmp	r2, r3
 8002368:	d014      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	4a5c      	ldr	r2, [pc, #368]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002370:	4013      	ands	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002374:	4b58      	ldr	r3, [pc, #352]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002378:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0249      	lsls	r1, r1, #9
 800237e:	430a      	orrs	r2, r1
 8002380:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002382:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002386:	4b54      	ldr	r3, [pc, #336]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002388:	4956      	ldr	r1, [pc, #344]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800238a:	400a      	ands	r2, r1
 800238c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800238e:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2201      	movs	r2, #1
 8002398:	4013      	ands	r3, r2
 800239a:	d016      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe ff50 	bl	8001240 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a4:	e00c      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe ff4b 	bl	8001240 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	4a4d      	ldr	r2, [pc, #308]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d904      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80023b6:	2313      	movs	r3, #19
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
            break;
 80023be:	e004      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	2202      	movs	r2, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	d0ed      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80023ca:	2313      	movs	r3, #19
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80023e8:	e00c      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ea:	2312      	movs	r3, #18
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2213      	movs	r2, #19
 80023f0:	18ba      	adds	r2, r7, r2
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	e005      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f8:	2312      	movs	r3, #18
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2213      	movs	r2, #19
 80023fe:	18ba      	adds	r2, r7, r2
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002404:	2311      	movs	r3, #17
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002414:	4935      	ldr	r1, [pc, #212]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002416:	400a      	ands	r2, r1
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2201      	movs	r2, #1
 8002420:	4013      	ands	r3, r2
 8002422:	d009      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	2203      	movs	r2, #3
 800242a:	4393      	bics	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002434:	430a      	orrs	r2, r1
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2220      	movs	r2, #32
 800243e:	4013      	ands	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	01db      	lsls	r3, r3, #7
 800245e:	4013      	ands	r3, r2
 8002460:	d015      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	0899      	lsrs	r1, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002470:	430a      	orrs	r2, r1
 8002472:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	05db      	lsls	r3, r3, #23
 800247c:	429a      	cmp	r2, r3
 800247e:	d106      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0249      	lsls	r1, r1, #9
 800248a:	430a      	orrs	r2, r1
 800248c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4013      	ands	r3, r2
 8002498:	d016      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024aa:	430a      	orrs	r2, r1
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	01db      	lsls	r3, r3, #7
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d106      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0249      	lsls	r1, r1, #9
 80024c4:	430a      	orrs	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80024c8:	2312      	movs	r3, #18
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b006      	add	sp, #24
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
 80024e0:	fffffcff 	.word	0xfffffcff
 80024e4:	fffeffff 	.word	0xfffeffff
 80024e8:	00001388 	.word	0x00001388
 80024ec:	efffffff 	.word	0xefffffff
 80024f0:	ffffcfff 	.word	0xffffcfff
 80024f4:	ffff3fff 	.word	0xffff3fff

080024f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0a8      	b.n	800265c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	2382      	movs	r3, #130	; 0x82
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	429a      	cmp	r2, r3
 800251c:	d009      	beq.n	8002532 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
 8002524:	e005      	b.n	8002532 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	225d      	movs	r2, #93	; 0x5d
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	225c      	movs	r2, #92	; 0x5c
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0018      	movs	r0, r3
 8002550:	f7fe fcf2 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	225d      	movs	r2, #93	; 0x5d
 8002558:	2102      	movs	r1, #2
 800255a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2140      	movs	r1, #64	; 0x40
 8002568:	438a      	bics	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	23e0      	movs	r3, #224	; 0xe0
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	429a      	cmp	r2, r3
 8002576:	d902      	bls.n	800257e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e002      	b.n	8002584 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	23f0      	movs	r3, #240	; 0xf0
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	429a      	cmp	r2, r3
 800258e:	d008      	beq.n	80025a2 <HAL_SPI_Init+0xaa>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	23e0      	movs	r3, #224	; 0xe0
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	429a      	cmp	r2, r3
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	2382      	movs	r3, #130	; 0x82
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	2384      	movs	r3, #132	; 0x84
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	400b      	ands	r3, r1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2102      	movs	r1, #2
 80025be:	400b      	ands	r3, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2101      	movs	r1, #1
 80025c8:	400b      	ands	r3, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6999      	ldr	r1, [r3, #24]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	400b      	ands	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2138      	movs	r1, #56	; 0x38
 80025de:	400b      	ands	r3, r1
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	400b      	ands	r3, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	0011      	movs	r1, r2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	401a      	ands	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	2204      	movs	r2, #4
 8002608:	401a      	ands	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2110      	movs	r1, #16
 8002610:	400b      	ands	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	2108      	movs	r1, #8
 800261a:	400b      	ands	r3, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	23f0      	movs	r3, #240	; 0xf0
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	400b      	ands	r3, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	0011      	movs	r1, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	015b      	lsls	r3, r3, #5
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4907      	ldr	r1, [pc, #28]	; (8002664 <HAL_SPI_Init+0x16c>)
 8002648:	400a      	ands	r2, r1
 800264a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	225d      	movs	r2, #93	; 0x5d
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}
 8002664:	fffff7ff 	.word	0xfffff7ff

08002668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e046      	b.n	8002708 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2288      	movs	r2, #136	; 0x88
 800267e:	589b      	ldr	r3, [r3, r2]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2284      	movs	r2, #132	; 0x84
 8002688:	2100      	movs	r1, #0
 800268a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0018      	movs	r0, r3
 8002690:	f7fe fcb2 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2288      	movs	r2, #136	; 0x88
 8002698:	2124      	movs	r1, #36	; 0x24
 800269a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2101      	movs	r1, #1
 80026a8:	438a      	bics	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f830 	bl	8002714 <UART_SetConfig>
 80026b4:	0003      	movs	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e024      	b.n	8002708 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f98d 	bl	80029e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	490d      	ldr	r1, [pc, #52]	; (8002710 <HAL_UART_Init+0xa8>)
 80026da:	400a      	ands	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	212a      	movs	r1, #42	; 0x2a
 80026ea:	438a      	bics	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2101      	movs	r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f000 fa25 	bl	8002b50 <UART_CheckIdleState>
 8002706:	0003      	movs	r3, r0
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}
 8002710:	ffffb7ff 	.word	0xffffb7ff

08002714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800271c:	231a      	movs	r3, #26
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	4313      	orrs	r3, r2
 800273a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4aa1      	ldr	r2, [pc, #644]	; (80029c8 <UART_SetConfig+0x2b4>)
 8002744:	4013      	ands	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a9c      	ldr	r2, [pc, #624]	; (80029cc <UART_SetConfig+0x2b8>)
 800275a:	4013      	ands	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	4313      	orrs	r3, r2
 8002778:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a93      	ldr	r2, [pc, #588]	; (80029d0 <UART_SetConfig+0x2bc>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	220f      	movs	r2, #15
 8002798:	4393      	bics	r3, r2
 800279a:	0019      	movs	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a89      	ldr	r2, [pc, #548]	; (80029d4 <UART_SetConfig+0x2c0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d127      	bne.n	8002802 <UART_SetConfig+0xee>
 80027b2:	4b89      	ldr	r3, [pc, #548]	; (80029d8 <UART_SetConfig+0x2c4>)
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	2203      	movs	r2, #3
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d017      	beq.n	80027ee <UART_SetConfig+0xda>
 80027be:	d81b      	bhi.n	80027f8 <UART_SetConfig+0xe4>
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d00a      	beq.n	80027da <UART_SetConfig+0xc6>
 80027c4:	d818      	bhi.n	80027f8 <UART_SetConfig+0xe4>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <UART_SetConfig+0xbc>
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d00a      	beq.n	80027e4 <UART_SetConfig+0xd0>
 80027ce:	e013      	b.n	80027f8 <UART_SetConfig+0xe4>
 80027d0:	231b      	movs	r3, #27
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	e021      	b.n	800281e <UART_SetConfig+0x10a>
 80027da:	231b      	movs	r3, #27
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	2202      	movs	r2, #2
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	e01c      	b.n	800281e <UART_SetConfig+0x10a>
 80027e4:	231b      	movs	r3, #27
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	2204      	movs	r2, #4
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e017      	b.n	800281e <UART_SetConfig+0x10a>
 80027ee:	231b      	movs	r3, #27
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	2208      	movs	r2, #8
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e012      	b.n	800281e <UART_SetConfig+0x10a>
 80027f8:	231b      	movs	r3, #27
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	2210      	movs	r2, #16
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e00d      	b.n	800281e <UART_SetConfig+0x10a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a75      	ldr	r2, [pc, #468]	; (80029dc <UART_SetConfig+0x2c8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d104      	bne.n	8002816 <UART_SetConfig+0x102>
 800280c:	231b      	movs	r3, #27
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e003      	b.n	800281e <UART_SetConfig+0x10a>
 8002816:	231b      	movs	r3, #27
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2210      	movs	r2, #16
 800281c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	429a      	cmp	r2, r3
 8002828:	d000      	beq.n	800282c <UART_SetConfig+0x118>
 800282a:	e065      	b.n	80028f8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800282c:	231b      	movs	r3, #27
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b08      	cmp	r3, #8
 8002834:	d015      	beq.n	8002862 <UART_SetConfig+0x14e>
 8002836:	dc18      	bgt.n	800286a <UART_SetConfig+0x156>
 8002838:	2b04      	cmp	r3, #4
 800283a:	d00d      	beq.n	8002858 <UART_SetConfig+0x144>
 800283c:	dc15      	bgt.n	800286a <UART_SetConfig+0x156>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <UART_SetConfig+0x134>
 8002842:	2b02      	cmp	r3, #2
 8002844:	d005      	beq.n	8002852 <UART_SetConfig+0x13e>
 8002846:	e010      	b.n	800286a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002848:	f7ff fd1a 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 800284c:	0003      	movs	r3, r0
 800284e:	617b      	str	r3, [r7, #20]
        break;
 8002850:	e012      	b.n	8002878 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <UART_SetConfig+0x2cc>)
 8002854:	617b      	str	r3, [r7, #20]
        break;
 8002856:	e00f      	b.n	8002878 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002858:	f7ff fc86 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 800285c:	0003      	movs	r3, r0
 800285e:	617b      	str	r3, [r7, #20]
        break;
 8002860:	e00a      	b.n	8002878 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	617b      	str	r3, [r7, #20]
        break;
 8002868:	e006      	b.n	8002878 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800286e:	231a      	movs	r3, #26
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
        break;
 8002876:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d100      	bne.n	8002880 <UART_SetConfig+0x16c>
 800287e:	e08d      	b.n	800299c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002884:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <UART_SetConfig+0x2d0>)
 8002886:	0052      	lsls	r2, r2, #1
 8002888:	5ad3      	ldrh	r3, [r2, r3]
 800288a:	0019      	movs	r1, r3
 800288c:	6978      	ldr	r0, [r7, #20]
 800288e:	f7fd fc37 	bl	8000100 <__udivsi3>
 8002892:	0003      	movs	r3, r0
 8002894:	005a      	lsls	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	18d2      	adds	r2, r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0019      	movs	r1, r3
 80028a4:	0010      	movs	r0, r2
 80028a6:	f7fd fc2b 	bl	8000100 <__udivsi3>
 80028aa:	0003      	movs	r3, r0
 80028ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d91c      	bls.n	80028ee <UART_SetConfig+0x1da>
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	025b      	lsls	r3, r3, #9
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d217      	bcs.n	80028ee <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	200e      	movs	r0, #14
 80028c4:	183b      	adds	r3, r7, r0
 80028c6:	210f      	movs	r1, #15
 80028c8:	438a      	bics	r2, r1
 80028ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2207      	movs	r2, #7
 80028d4:	4013      	ands	r3, r2
 80028d6:	b299      	uxth	r1, r3
 80028d8:	183b      	adds	r3, r7, r0
 80028da:	183a      	adds	r2, r7, r0
 80028dc:	8812      	ldrh	r2, [r2, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	183a      	adds	r2, r7, r0
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e056      	b.n	800299c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80028ee:	231a      	movs	r3, #26
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e051      	b.n	800299c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028f8:	231b      	movs	r3, #27
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d015      	beq.n	800292e <UART_SetConfig+0x21a>
 8002902:	dc18      	bgt.n	8002936 <UART_SetConfig+0x222>
 8002904:	2b04      	cmp	r3, #4
 8002906:	d00d      	beq.n	8002924 <UART_SetConfig+0x210>
 8002908:	dc15      	bgt.n	8002936 <UART_SetConfig+0x222>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <UART_SetConfig+0x200>
 800290e:	2b02      	cmp	r3, #2
 8002910:	d005      	beq.n	800291e <UART_SetConfig+0x20a>
 8002912:	e010      	b.n	8002936 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002914:	f7ff fcb4 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8002918:	0003      	movs	r3, r0
 800291a:	617b      	str	r3, [r7, #20]
        break;
 800291c:	e012      	b.n	8002944 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800291e:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <UART_SetConfig+0x2cc>)
 8002920:	617b      	str	r3, [r7, #20]
        break;
 8002922:	e00f      	b.n	8002944 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002924:	f7ff fc20 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002928:	0003      	movs	r3, r0
 800292a:	617b      	str	r3, [r7, #20]
        break;
 800292c:	e00a      	b.n	8002944 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	617b      	str	r3, [r7, #20]
        break;
 8002934:	e006      	b.n	8002944 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800293a:	231a      	movs	r3, #26
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
        break;
 8002942:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <UART_SetConfig+0x2d0>)
 8002950:	0052      	lsls	r2, r2, #1
 8002952:	5ad3      	ldrh	r3, [r2, r3]
 8002954:	0019      	movs	r1, r3
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7fd fbd2 	bl	8000100 <__udivsi3>
 800295c:	0003      	movs	r3, r0
 800295e:	001a      	movs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	18d2      	adds	r2, r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	0019      	movs	r1, r3
 800296e:	0010      	movs	r0, r2
 8002970:	f7fd fbc6 	bl	8000100 <__udivsi3>
 8002974:	0003      	movs	r3, r0
 8002976:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b0f      	cmp	r3, #15
 800297c:	d90a      	bls.n	8002994 <UART_SetConfig+0x280>
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	025b      	lsls	r3, r3, #9
 8002984:	429a      	cmp	r2, r3
 8002986:	d205      	bcs.n	8002994 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	b29a      	uxth	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	e003      	b.n	800299c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002994:	231a      	movs	r3, #26
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	226a      	movs	r2, #106	; 0x6a
 80029a0:	2101      	movs	r1, #1
 80029a2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2268      	movs	r2, #104	; 0x68
 80029a8:	2101      	movs	r1, #1
 80029aa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80029b8:	231a      	movs	r3, #26
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	781b      	ldrb	r3, [r3, #0]
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b008      	add	sp, #32
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	cfff69f3 	.word	0xcfff69f3
 80029cc:	ffffcfff 	.word	0xffffcfff
 80029d0:	11fff4ff 	.word	0x11fff4ff
 80029d4:	40013800 	.word	0x40013800
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40004400 	.word	0x40004400
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	08003080 	.word	0x08003080

080029e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	2201      	movs	r2, #1
 80029f6:	4013      	ands	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <UART_AdvFeatureConfig+0x144>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a43      	ldr	r2, [pc, #268]	; (8002b30 <UART_AdvFeatureConfig+0x148>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	2204      	movs	r2, #4
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d00b      	beq.n	8002a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a3b      	ldr	r2, [pc, #236]	; (8002b34 <UART_AdvFeatureConfig+0x14c>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d00b      	beq.n	8002a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4a34      	ldr	r2, [pc, #208]	; (8002b38 <UART_AdvFeatureConfig+0x150>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d00b      	beq.n	8002a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a2c      	ldr	r2, [pc, #176]	; (8002b3c <UART_AdvFeatureConfig+0x154>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d00b      	beq.n	8002abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <UART_AdvFeatureConfig+0x158>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2240      	movs	r2, #64	; 0x40
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d01d      	beq.n	8002b02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <UART_AdvFeatureConfig+0x15c>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	035b      	lsls	r3, r3, #13
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d10b      	bne.n	8002b02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <UART_AdvFeatureConfig+0x160>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d00b      	beq.n	8002b24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a0e      	ldr	r2, [pc, #56]	; (8002b4c <UART_AdvFeatureConfig+0x164>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	605a      	str	r2, [r3, #4]
  }
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	fffdffff 	.word	0xfffdffff
 8002b30:	fffeffff 	.word	0xfffeffff
 8002b34:	fffbffff 	.word	0xfffbffff
 8002b38:	ffff7fff 	.word	0xffff7fff
 8002b3c:	ffffefff 	.word	0xffffefff
 8002b40:	ffffdfff 	.word	0xffffdfff
 8002b44:	ffefffff 	.word	0xffefffff
 8002b48:	ff9fffff 	.word	0xff9fffff
 8002b4c:	fff7ffff 	.word	0xfff7ffff

08002b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2290      	movs	r2, #144	; 0x90
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b60:	f7fe fb6e 	bl	8001240 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2208      	movs	r2, #8
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d10c      	bne.n	8002b90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	0391      	lsls	r1, r2, #14
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <UART_CheckIdleState+0x98>)
 8002b80:	9200      	str	r2, [sp, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f000 f832 	bl	8002bec <UART_WaitOnFlagUntilTimeout>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d001      	beq.n	8002b90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e026      	b.n	8002bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2204      	movs	r2, #4
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d10c      	bne.n	8002bb8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	03d1      	lsls	r1, r2, #15
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <UART_CheckIdleState+0x98>)
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f000 f81e 	bl	8002bec <UART_WaitOnFlagUntilTimeout>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d001      	beq.n	8002bb8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e012      	b.n	8002bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2288      	movs	r2, #136	; 0x88
 8002bbc:	2120      	movs	r1, #32
 8002bbe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	228c      	movs	r2, #140	; 0x8c
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2284      	movs	r2, #132	; 0x84
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	01ffffff 	.word	0x01ffffff

08002bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b094      	sub	sp, #80	; 0x50
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfc:	e0a7      	b.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c00:	3301      	adds	r3, #1
 8002c02:	d100      	bne.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002c04:	e0a3      	b.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7fe fb1b 	bl	8001240 <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d13f      	bne.n	8002c9c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
 8002c26:	2301      	movs	r3, #1
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	f383 8810 	msr	PRIMASK, r3
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	494e      	ldr	r1, [pc, #312]	; (8002d78 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002c3e:	400a      	ands	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c44:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	f383 8810 	msr	PRIMASK, r3
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c56:	643b      	str	r3, [r7, #64]	; 0x40
 8002c58:	2301      	movs	r3, #1
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2101      	movs	r1, #1
 8002c70:	438a      	bics	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2288      	movs	r2, #136	; 0x88
 8002c84:	2120      	movs	r1, #32
 8002c86:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	228c      	movs	r2, #140	; 0x8c
 8002c8c:	2120      	movs	r1, #32
 8002c8e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2284      	movs	r2, #132	; 0x84
 8002c94:	2100      	movs	r1, #0
 8002c96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e069      	b.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d052      	beq.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d148      	bne.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cca:	613b      	str	r3, [r7, #16]
  return(result);
 8002ccc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f383 8810 	msr	PRIMASK, r3
}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4924      	ldr	r1, [pc, #144]	; (8002d78 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f383 8810 	msr	PRIMASK, r3
}
 8002cf6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d02:	2301      	movs	r3, #1
 8002d04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2288      	movs	r2, #136	; 0x88
 8002d2e:	2120      	movs	r1, #32
 8002d30:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	228c      	movs	r2, #140	; 0x8c
 8002d36:	2120      	movs	r1, #32
 8002d38:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2290      	movs	r2, #144	; 0x90
 8002d3e:	2120      	movs	r1, #32
 8002d40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2284      	movs	r2, #132	; 0x84
 8002d46:	2100      	movs	r1, #0
 8002d48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e010      	b.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	425a      	negs	r2, r3
 8002d5e:	4153      	adcs	r3, r2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	001a      	movs	r2, r3
 8002d64:	1dfb      	adds	r3, r7, #7
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d100      	bne.n	8002d6e <UART_WaitOnFlagUntilTimeout+0x182>
 8002d6c:	e747      	b.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b014      	add	sp, #80	; 0x50
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	fffffe5f 	.word	0xfffffe5f

08002d7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2284      	movs	r2, #132	; 0x84
 8002d88:	5c9b      	ldrb	r3, [r3, r2]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_UARTEx_DisableFifoMode+0x16>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e027      	b.n	8002de2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2284      	movs	r2, #132	; 0x84
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2288      	movs	r2, #136	; 0x88
 8002d9e:	2124      	movs	r1, #36	; 0x24
 8002da0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2101      	movs	r1, #1
 8002db6:	438a      	bics	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_UARTEx_DisableFifoMode+0x70>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2288      	movs	r2, #136	; 0x88
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2284      	movs	r2, #132	; 0x84
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	dfffffff 	.word	0xdfffffff

08002df0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2284      	movs	r2, #132	; 0x84
 8002dfe:	5c9b      	ldrb	r3, [r3, r2]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e02e      	b.n	8002e66 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2284      	movs	r2, #132	; 0x84
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2288      	movs	r2, #136	; 0x88
 8002e14:	2124      	movs	r1, #36	; 0x24
 8002e16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	08d9      	lsrs	r1, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f854 	bl	8002ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2288      	movs	r2, #136	; 0x88
 8002e58:	2120      	movs	r1, #32
 8002e5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2284      	movs	r2, #132	; 0x84
 8002e60:	2100      	movs	r1, #0
 8002e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2284      	movs	r2, #132	; 0x84
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e02f      	b.n	8002ee8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2284      	movs	r2, #132	; 0x84
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2288      	movs	r2, #136	; 0x88
 8002e94:	2124      	movs	r1, #36	; 0x24
 8002e96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	438a      	bics	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 f813 	bl	8002ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2288      	movs	r2, #136	; 0x88
 8002eda:	2120      	movs	r1, #32
 8002edc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2284      	movs	r2, #132	; 0x84
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	f1ffffff 	.word	0xf1ffffff

08002ef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	226a      	movs	r2, #106	; 0x6a
 8002f08:	2101      	movs	r1, #1
 8002f0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2268      	movs	r2, #104	; 0x68
 8002f10:	2101      	movs	r1, #1
 8002f12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f14:	e043      	b.n	8002f9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f16:	260f      	movs	r6, #15
 8002f18:	19bb      	adds	r3, r7, r6
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f1e:	200e      	movs	r0, #14
 8002f20:	183b      	adds	r3, r7, r0
 8002f22:	2208      	movs	r2, #8
 8002f24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	0e5b      	lsrs	r3, r3, #25
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	240d      	movs	r4, #13
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	2107      	movs	r1, #7
 8002f36:	400a      	ands	r2, r1
 8002f38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	0f5b      	lsrs	r3, r3, #29
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	250c      	movs	r5, #12
 8002f46:	197b      	adds	r3, r7, r5
 8002f48:	2107      	movs	r1, #7
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f4e:	183b      	adds	r3, r7, r0
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	197a      	adds	r2, r7, r5
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	4914      	ldr	r1, [pc, #80]	; (8002fa8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f58:	5c8a      	ldrb	r2, [r1, r2]
 8002f5a:	435a      	muls	r2, r3
 8002f5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f5e:	197b      	adds	r3, r7, r5
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <UARTEx_SetNbDataToProcess+0xb8>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f66:	0019      	movs	r1, r3
 8002f68:	f7fd f954 	bl	8000214 <__divsi3>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	b299      	uxth	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	226a      	movs	r2, #106	; 0x6a
 8002f74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f76:	19bb      	adds	r3, r7, r6
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	193a      	adds	r2, r7, r4
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f80:	5c8a      	ldrb	r2, [r1, r2]
 8002f82:	435a      	muls	r2, r3
 8002f84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <UARTEx_SetNbDataToProcess+0xb8>)
 8002f8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f8e:	0019      	movs	r1, r3
 8002f90:	f7fd f940 	bl	8000214 <__divsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	b299      	uxth	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2268      	movs	r2, #104	; 0x68
 8002f9c:	5299      	strh	r1, [r3, r2]
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b005      	add	sp, #20
 8002fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	08003098 	.word	0x08003098
 8002fac:	080030a0 	.word	0x080030a0

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	4d0c      	ldr	r5, [pc, #48]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb6:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb8:	1b64      	subs	r4, r4, r5
 8002fba:	10a4      	asrs	r4, r4, #2
 8002fbc:	42a6      	cmp	r6, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	f000 f821 	bl	8003008 <_init>
 8002fc6:	4d0a      	ldr	r5, [pc, #40]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc8:	4c0a      	ldr	r4, [pc, #40]	; (8002ff4 <__libc_init_array+0x44>)
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	10a4      	asrs	r4, r4, #2
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	00b3      	lsls	r3, r6, #2
 8002fd6:	58eb      	ldr	r3, [r5, r3]
 8002fd8:	4798      	blx	r3
 8002fda:	3601      	adds	r6, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	00b3      	lsls	r3, r6, #2
 8002fe0:	58eb      	ldr	r3, [r5, r3]
 8002fe2:	4798      	blx	r3
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	080030a8 	.word	0x080030a8
 8002fec:	080030a8 	.word	0x080030a8
 8002ff0:	080030a8 	.word	0x080030a8
 8002ff4:	080030ac 	.word	0x080030ac

08002ff8 <memset>:
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	1882      	adds	r2, r0, r2
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	7019      	strb	r1, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
